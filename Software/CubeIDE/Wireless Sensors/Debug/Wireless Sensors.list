
Wireless Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008af0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08008c2c  08008c2c  00018c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cdc  08008cdc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008cdc  08008cdc  00018cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ce4  08008ce4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ce4  08008ce4  00018ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ce8  08008ce8  00018ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000128c  200001e0  08008ecc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000146c  08008ecc  0002146c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011249  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e74  00000000  00000000  00031452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  000342c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00035190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016796  00000000  00000000  00035f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138a8  00000000  00000000  0004c6ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007bfe5  00000000  00000000  0005ff56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbf3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004074  00000000  00000000  000dbf8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001e0 	.word	0x200001e0
 8000158:	00000000 	.word	0x00000000
 800015c:	08008c14 	.word	0x08008c14

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001e4 	.word	0x200001e4
 8000178:	08008c14 	.word	0x08008c14

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b09a      	sub	sp, #104	; 0x68
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049a:	f000 faac 	bl	80009f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049e:	f000 f82d 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a2:	f000 f8df 	bl	8000664 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004a6:	f000 f87b 	bl	80005a0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004aa:	f000 f8a7 	bl	80005fc <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004ae:	f007 fa55 	bl	800795c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t buffer[100];
  int count = 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	667b      	str	r3, [r7, #100]	; 0x64

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin); /* Toggle the LED */
 80004b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ba:	480e      	ldr	r0, [pc, #56]	; (80004f4 <main+0x60>)
 80004bc:	f000 fdd2 	bl	8001064 <HAL_GPIO_TogglePin>
	  count++;
 80004c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80004c2:	3301      	adds	r3, #1
 80004c4:	667b      	str	r3, [r7, #100]	; 0x64
	  sprintf((char *)buffer, "Count = %d\r\n", count);
 80004c6:	463b      	mov	r3, r7
 80004c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80004ca:	490b      	ldr	r1, [pc, #44]	; (80004f8 <main+0x64>)
 80004cc:	4618      	mov	r0, r3
 80004ce:	f007 ff27 	bl	8008320 <siprintf>
	  CDC_Transmit_FS(buffer, strlen((char *)buffer)); /* Send the message on USB */
 80004d2:	463b      	mov	r3, r7
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff fe51 	bl	800017c <strlen>
 80004da:	4603      	mov	r3, r0
 80004dc:	b29a      	uxth	r2, r3
 80004de:	463b      	mov	r3, r7
 80004e0:	4611      	mov	r1, r2
 80004e2:	4618      	mov	r0, r3
 80004e4:	f007 faf8 	bl	8007ad8 <CDC_Transmit_FS>
	  HAL_Delay (500);   /* Delay 500 ms */
 80004e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004ec:	f000 faf2 	bl	8000ad4 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin); /* Toggle the LED */
 80004f0:	e7e1      	b.n	80004b6 <main+0x22>
 80004f2:	bf00      	nop
 80004f4:	40020800 	.word	0x40020800
 80004f8:	08008c2c 	.word	0x08008c2c

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b092      	sub	sp, #72	; 0x48
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0314 	add.w	r3, r7, #20
 8000506:	2234      	movs	r2, #52	; 0x34
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f007 ff00 	bl	8008310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	463b      	mov	r3, r7
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051e:	4b1f      	ldr	r3, [pc, #124]	; (800059c <SystemClock_Config+0xa0>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000526:	4a1d      	ldr	r2, [pc, #116]	; (800059c <SystemClock_Config+0xa0>)
 8000528:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800052c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800052e:	2303      	movs	r3, #3
 8000530:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000532:	2301      	movs	r3, #1
 8000534:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000536:	2301      	movs	r3, #1
 8000538:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053a:	2310      	movs	r3, #16
 800053c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	2302      	movs	r3, #2
 8000540:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000542:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000546:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000548:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800054c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 800054e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000552:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	4618      	mov	r0, r3
 800055a:	f002 fb0d 	bl	8002b78 <HAL_RCC_OscConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000564:	f000 f8f8 	bl	8000758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000568:	230f      	movs	r3, #15
 800056a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800056c:	2301      	movs	r3, #1
 800056e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000578:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800057c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800057e:	463b      	mov	r3, r7
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f002 fe28 	bl	80031d8 <HAL_RCC_ClockConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800058e:	f000 f8e3 	bl	8000758 <Error_Handler>
  }
}
 8000592:	bf00      	nop
 8000594:	3748      	adds	r7, #72	; 0x48
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40007000 	.word	0x40007000

080005a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005a4:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <MX_I2C1_Init+0x50>)
 80005a6:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <MX_I2C1_Init+0x54>)
 80005a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005aa:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <MX_I2C1_Init+0x50>)
 80005ac:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <MX_I2C1_Init+0x58>)
 80005ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <MX_I2C1_Init+0x50>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <MX_I2C1_Init+0x50>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <MX_I2C1_Init+0x50>)
 80005be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <MX_I2C1_Init+0x50>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <MX_I2C1_Init+0x50>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <MX_I2C1_Init+0x50>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <MX_I2C1_Init+0x50>)
 80005d8:	2200      	movs	r2, #0
 80005da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005dc:	4804      	ldr	r0, [pc, #16]	; (80005f0 <MX_I2C1_Init+0x50>)
 80005de:	f000 fd5b 	bl	8001098 <HAL_I2C_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005e8:	f000 f8b6 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200001fc 	.word	0x200001fc
 80005f4:	40005400 	.word	0x40005400
 80005f8:	000186a0 	.word	0x000186a0

080005fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000600:	4b16      	ldr	r3, [pc, #88]	; (800065c <MX_SPI1_Init+0x60>)
 8000602:	4a17      	ldr	r2, [pc, #92]	; (8000660 <MX_SPI1_Init+0x64>)
 8000604:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <MX_SPI1_Init+0x60>)
 8000608:	f44f 7282 	mov.w	r2, #260	; 0x104
 800060c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800060e:	4b13      	ldr	r3, [pc, #76]	; (800065c <MX_SPI1_Init+0x60>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_SPI1_Init+0x60>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <MX_SPI1_Init+0x60>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000620:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_SPI1_Init+0x60>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <MX_SPI1_Init+0x60>)
 8000628:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800062c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MX_SPI1_Init+0x60>)
 8000630:	2200      	movs	r2, #0
 8000632:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_SPI1_Init+0x60>)
 8000636:	2200      	movs	r2, #0
 8000638:	621a      	str	r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <MX_SPI1_Init+0x60>)
 800063c:	2200      	movs	r2, #0
 800063e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_SPI1_Init+0x60>)
 8000642:	220a      	movs	r2, #10
 8000644:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_SPI1_Init+0x60>)
 8000648:	f003 f876 	bl	8003738 <HAL_SPI_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 8000652:	f000 f881 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000250 	.word	0x20000250
 8000660:	40013000 	.word	0x40013000

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	; 0x28
 8000668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067a:	4b34      	ldr	r3, [pc, #208]	; (800074c <MX_GPIO_Init+0xe8>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	4a33      	ldr	r2, [pc, #204]	; (800074c <MX_GPIO_Init+0xe8>)
 8000680:	f043 0304 	orr.w	r3, r3, #4
 8000684:	61d3      	str	r3, [r2, #28]
 8000686:	4b31      	ldr	r3, [pc, #196]	; (800074c <MX_GPIO_Init+0xe8>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	f003 0304 	and.w	r3, r3, #4
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000692:	4b2e      	ldr	r3, [pc, #184]	; (800074c <MX_GPIO_Init+0xe8>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	4a2d      	ldr	r2, [pc, #180]	; (800074c <MX_GPIO_Init+0xe8>)
 8000698:	f043 0320 	orr.w	r3, r3, #32
 800069c:	61d3      	str	r3, [r2, #28]
 800069e:	4b2b      	ldr	r3, [pc, #172]	; (800074c <MX_GPIO_Init+0xe8>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	f003 0320 	and.w	r3, r3, #32
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b28      	ldr	r3, [pc, #160]	; (800074c <MX_GPIO_Init+0xe8>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	4a27      	ldr	r2, [pc, #156]	; (800074c <MX_GPIO_Init+0xe8>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	61d3      	str	r3, [r2, #28]
 80006b6:	4b25      	ldr	r3, [pc, #148]	; (800074c <MX_GPIO_Init+0xe8>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	4b22      	ldr	r3, [pc, #136]	; (800074c <MX_GPIO_Init+0xe8>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	4a21      	ldr	r2, [pc, #132]	; (800074c <MX_GPIO_Init+0xe8>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	61d3      	str	r3, [r2, #28]
 80006ce:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_GPIO_Init+0xe8>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e0:	481b      	ldr	r0, [pc, #108]	; (8000750 <MX_GPIO_Init+0xec>)
 80006e2:	f000 fca7 	bl	8001034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LoRa_NRST_GPIO_Port, LoRa_NRST_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2101      	movs	r1, #1
 80006ea:	481a      	ldr	r0, [pc, #104]	; (8000754 <MX_GPIO_Init+0xf0>)
 80006ec:	f000 fca2 	bl	8001034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	4811      	ldr	r0, [pc, #68]	; (8000750 <MX_GPIO_Init+0xec>)
 800070a:	f000 fb13 	bl	8000d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LoRa_NRST_Pin */
  GPIO_InitStruct.Pin = LoRa_NRST_Pin;
 800070e:	2301      	movs	r3, #1
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LoRa_NRST_GPIO_Port, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	480b      	ldr	r0, [pc, #44]	; (8000754 <MX_GPIO_Init+0xf0>)
 8000726:	f000 fb05 	bl	8000d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_DIO3_Pin LoRa_DIO2_Pin LoRa_DIO1_Pin LoRa_BUSY_Pin */
  GPIO_InitStruct.Pin = LoRa_DIO3_Pin|LoRa_DIO2_Pin|LoRa_DIO1_Pin|LoRa_BUSY_Pin;
 800072a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_GPIO_Init+0xf0>)
 8000740:	f000 faf8 	bl	8000d34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000744:	bf00      	nop
 8000746:	3728      	adds	r7, #40	; 0x28
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40023800 	.word	0x40023800
 8000750:	40020800 	.word	0x40020800
 8000754:	40020000 	.word	0x40020000

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000760:	e7fe      	b.n	8000760 <Error_Handler+0x8>
	...

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <HAL_MspInit+0x58>)
 800076c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800076e:	4a13      	ldr	r2, [pc, #76]	; (80007bc <HAL_MspInit+0x58>)
 8000770:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000774:	6253      	str	r3, [r2, #36]	; 0x24
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <HAL_MspInit+0x58>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <HAL_MspInit+0x58>)
 8000784:	6a1b      	ldr	r3, [r3, #32]
 8000786:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <HAL_MspInit+0x58>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6213      	str	r3, [r2, #32]
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <HAL_MspInit+0x58>)
 8000790:	6a1b      	ldr	r3, [r3, #32]
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <HAL_MspInit+0x58>)
 800079c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800079e:	4a07      	ldr	r2, [pc, #28]	; (80007bc <HAL_MspInit+0x58>)
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a4:	6253      	str	r3, [r2, #36]	; 0x24
 80007a6:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_MspInit+0x58>)
 80007a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	bf00      	nop
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	40023800 	.word	0x40023800

080007c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a17      	ldr	r2, [pc, #92]	; (800083c <HAL_I2C_MspInit+0x7c>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d127      	bne.n	8000832 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <HAL_I2C_MspInit+0x80>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	4a16      	ldr	r2, [pc, #88]	; (8000840 <HAL_I2C_MspInit+0x80>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	61d3      	str	r3, [r2, #28]
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <HAL_I2C_MspInit+0x80>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007fa:	23c0      	movs	r3, #192	; 0xc0
 80007fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007fe:	2312      	movs	r3, #18
 8000800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000806:	2303      	movs	r3, #3
 8000808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800080a:	2304      	movs	r3, #4
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	480b      	ldr	r0, [pc, #44]	; (8000844 <HAL_I2C_MspInit+0x84>)
 8000816:	f000 fa8d 	bl	8000d34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <HAL_I2C_MspInit+0x80>)
 800081c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <HAL_I2C_MspInit+0x80>)
 8000820:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000824:	6253      	str	r3, [r2, #36]	; 0x24
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_I2C_MspInit+0x80>)
 8000828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800082a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000832:	bf00      	nop
 8000834:	3728      	adds	r7, #40	; 0x28
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40005400 	.word	0x40005400
 8000840:	40023800 	.word	0x40023800
 8000844:	40020400 	.word	0x40020400

08000848 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a17      	ldr	r2, [pc, #92]	; (80008c4 <HAL_SPI_MspInit+0x7c>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d127      	bne.n	80008ba <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <HAL_SPI_MspInit+0x80>)
 800086c:	6a1b      	ldr	r3, [r3, #32]
 800086e:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <HAL_SPI_MspInit+0x80>)
 8000870:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000874:	6213      	str	r3, [r2, #32]
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <HAL_SPI_MspInit+0x80>)
 8000878:	6a1b      	ldr	r3, [r3, #32]
 800087a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <HAL_SPI_MspInit+0x80>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <HAL_SPI_MspInit+0x80>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	61d3      	str	r3, [r2, #28]
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <HAL_SPI_MspInit+0x80>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800089a:	23f0      	movs	r3, #240	; 0xf0
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008aa:	2305      	movs	r3, #5
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <HAL_SPI_MspInit+0x84>)
 80008b6:	f000 fa3d 	bl	8000d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008ba:	bf00      	nop
 80008bc:	3728      	adds	r7, #40	; 0x28
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40013000 	.word	0x40013000
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020000 	.word	0x40020000

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <NMI_Handler+0x4>

080008d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <HardFault_Handler+0x4>

080008dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <MemManage_Handler+0x4>

080008e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <BusFault_Handler+0x4>

080008e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <UsageFault_Handler+0x4>

080008ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr

080008fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr

08000906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr

08000912 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000916:	f000 f8c1 	bl	8000a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000924:	4802      	ldr	r0, [pc, #8]	; (8000930 <USB_LP_IRQHandler+0x10>)
 8000926:	f000 fdff 	bl	8001528 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000f50 	.word	0x20000f50

08000934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800093c:	4a14      	ldr	r2, [pc, #80]	; (8000990 <_sbrk+0x5c>)
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <_sbrk+0x60>)
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <_sbrk+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d102      	bne.n	8000956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <_sbrk+0x64>)
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <_sbrk+0x68>)
 8000954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <_sbrk+0x64>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	429a      	cmp	r2, r3
 8000962:	d207      	bcs.n	8000974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000964:	f007 fcaa 	bl	80082bc <__errno>
 8000968:	4603      	mov	r3, r0
 800096a:	220c      	movs	r2, #12
 800096c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800096e:	f04f 33ff 	mov.w	r3, #4294967295
 8000972:	e009      	b.n	8000988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <_sbrk+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800097a:	4b07      	ldr	r3, [pc, #28]	; (8000998 <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	4a05      	ldr	r2, [pc, #20]	; (8000998 <_sbrk+0x64>)
 8000984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000986:	68fb      	ldr	r3, [r7, #12]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20002800 	.word	0x20002800
 8000994:	00000400 	.word	0x00000400
 8000998:	200002a8 	.word	0x200002a8
 800099c:	20001470 	.word	0x20001470

080009a0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ac:	480c      	ldr	r0, [pc, #48]	; (80009e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ae:	490d      	ldr	r1, [pc, #52]	; (80009e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009b0:	4a0d      	ldr	r2, [pc, #52]	; (80009e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009c4:	4c0a      	ldr	r4, [pc, #40]	; (80009f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009d2:	f7ff ffe5 	bl	80009a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009d6:	f007 fc77 	bl	80082c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009da:	f7ff fd5b 	bl	8000494 <main>
  bx lr
 80009de:	4770      	bx	lr
  ldr r0, =_sdata
 80009e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80009e8:	08008cec 	.word	0x08008cec
  ldr r2, =_sbss
 80009ec:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80009f0:	2000146c 	.word	0x2000146c

080009f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f4:	e7fe      	b.n	80009f4 <ADC1_IRQHandler>

080009f6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009fc:	2300      	movs	r3, #0
 80009fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a00:	2003      	movs	r0, #3
 8000a02:	f000 f955 	bl	8000cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a06:	200f      	movs	r0, #15
 8000a08:	f000 f80e 	bl	8000a28 <HAL_InitTick>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d002      	beq.n	8000a18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	71fb      	strb	r3, [r7, #7]
 8000a16:	e001      	b.n	8000a1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a18:	f7ff fea4 	bl	8000764 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <HAL_InitTick+0x68>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d022      	beq.n	8000a82 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <HAL_InitTick+0x6c>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <HAL_InitTick+0x68>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a48:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 f962 	bl	8000d1a <HAL_SYSTICK_Config>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d10f      	bne.n	8000a7c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b0f      	cmp	r3, #15
 8000a60:	d809      	bhi.n	8000a76 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a62:	2200      	movs	r2, #0
 8000a64:	6879      	ldr	r1, [r7, #4]
 8000a66:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6a:	f000 f92c 	bl	8000cc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <HAL_InitTick+0x70>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6013      	str	r3, [r2, #0]
 8000a74:	e007      	b.n	8000a86 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	73fb      	strb	r3, [r7, #15]
 8000a7a:	e004      	b.n	8000a86 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	73fb      	strb	r3, [r7, #15]
 8000a80:	e001      	b.n	8000a86 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000008 	.word	0x20000008
 8000a94:	20000000 	.word	0x20000000
 8000a98:	20000004 	.word	0x20000004

08000a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_IncTick+0x1c>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_IncTick+0x20>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4a03      	ldr	r2, [pc, #12]	; (8000ab8 <HAL_IncTick+0x1c>)
 8000aac:	6013      	str	r3, [r2, #0]
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	200002ac 	.word	0x200002ac
 8000abc:	20000008 	.word	0x20000008

08000ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac4:	4b02      	ldr	r3, [pc, #8]	; (8000ad0 <HAL_GetTick+0x10>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	200002ac 	.word	0x200002ac

08000ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000adc:	f7ff fff0 	bl	8000ac0 <HAL_GetTick>
 8000ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aec:	d004      	beq.n	8000af8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <HAL_Delay+0x40>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	4413      	add	r3, r2
 8000af6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000af8:	bf00      	nop
 8000afa:	f7ff ffe1 	bl	8000ac0 <HAL_GetTick>
 8000afe:	4602      	mov	r2, r0
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d8f7      	bhi.n	8000afa <HAL_Delay+0x26>
  {
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000008 	.word	0x20000008

08000b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b34:	4013      	ands	r3, r2
 8000b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4a:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	60d3      	str	r3, [r2, #12]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <__NVIC_GetPriorityGrouping+0x18>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	f003 0307 	and.w	r3, r3, #7
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	db0b      	blt.n	8000ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 021f 	and.w	r2, r3, #31
 8000b94:	4906      	ldr	r1, [pc, #24]	; (8000bb0 <__NVIC_EnableIRQ+0x34>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	095b      	lsrs	r3, r3, #5
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	e000e100 	.word	0xe000e100

08000bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	db0a      	blt.n	8000bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	490c      	ldr	r1, [pc, #48]	; (8000c00 <__NVIC_SetPriority+0x4c>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	0112      	lsls	r2, r2, #4
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bdc:	e00a      	b.n	8000bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4908      	ldr	r1, [pc, #32]	; (8000c04 <__NVIC_SetPriority+0x50>)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	f003 030f 	and.w	r3, r3, #15
 8000bea:	3b04      	subs	r3, #4
 8000bec:	0112      	lsls	r2, r2, #4
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	761a      	strb	r2, [r3, #24]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000e100 	.word	0xe000e100
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	f1c3 0307 	rsb	r3, r3, #7
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	bf28      	it	cs
 8000c26:	2304      	movcs	r3, #4
 8000c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	2b06      	cmp	r3, #6
 8000c30:	d902      	bls.n	8000c38 <NVIC_EncodePriority+0x30>
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3b03      	subs	r3, #3
 8000c36:	e000      	b.n	8000c3a <NVIC_EncodePriority+0x32>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43da      	mvns	r2, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c50:	f04f 31ff 	mov.w	r1, #4294967295
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43d9      	mvns	r1, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	4313      	orrs	r3, r2
         );
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3724      	adds	r7, #36	; 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c7c:	d301      	bcc.n	8000c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00f      	b.n	8000ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <SysTick_Config+0x40>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f7ff ff90 	bl	8000bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <SysTick_Config+0x40>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <SysTick_Config+0x40>)
 8000c9c:	2207      	movs	r2, #7
 8000c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	e000e010 	.word	0xe000e010

08000cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff ff2d 	bl	8000b18 <__NVIC_SetPriorityGrouping>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd8:	f7ff ff42 	bl	8000b60 <__NVIC_GetPriorityGrouping>
 8000cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	68b9      	ldr	r1, [r7, #8]
 8000ce2:	6978      	ldr	r0, [r7, #20]
 8000ce4:	f7ff ff90 	bl	8000c08 <NVIC_EncodePriority>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff5f 	bl	8000bb4 <__NVIC_SetPriority>
}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff35 	bl	8000b7c <__NVIC_EnableIRQ>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff ffa2 	bl	8000c6c <SysTick_Config>
 8000d28:	4603      	mov	r3, r0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b087      	sub	sp, #28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d4a:	e154      	b.n	8000ff6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	2101      	movs	r1, #1
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	fa01 f303 	lsl.w	r3, r1, r3
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 8146 	beq.w	8000ff0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d005      	beq.n	8000d7c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d130      	bne.n	8000dde <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	2203      	movs	r2, #3
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000db2:	2201      	movs	r2, #1
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	091b      	lsrs	r3, r3, #4
 8000dc8:	f003 0201 	and.w	r2, r3, #1
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 0303 	and.w	r3, r3, #3
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	d017      	beq.n	8000e1a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	2203      	movs	r2, #3
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d123      	bne.n	8000e6e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	08da      	lsrs	r2, r3, #3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3208      	adds	r2, #8
 8000e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e32:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	220f      	movs	r2, #15
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	691a      	ldr	r2, [r3, #16]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	f003 0307 	and.w	r3, r3, #7
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	08da      	lsrs	r2, r3, #3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3208      	adds	r2, #8
 8000e68:	6939      	ldr	r1, [r7, #16]
 8000e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	2203      	movs	r2, #3
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0203 	and.w	r2, r3, #3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 80a0 	beq.w	8000ff0 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb0:	4b58      	ldr	r3, [pc, #352]	; (8001014 <HAL_GPIO_Init+0x2e0>)
 8000eb2:	6a1b      	ldr	r3, [r3, #32]
 8000eb4:	4a57      	ldr	r2, [pc, #348]	; (8001014 <HAL_GPIO_Init+0x2e0>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6213      	str	r3, [r2, #32]
 8000ebc:	4b55      	ldr	r3, [pc, #340]	; (8001014 <HAL_GPIO_Init+0x2e0>)
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ec8:	4a53      	ldr	r2, [pc, #332]	; (8001018 <HAL_GPIO_Init+0x2e4>)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	089b      	lsrs	r3, r3, #2
 8000ece:	3302      	adds	r3, #2
 8000ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	220f      	movs	r2, #15
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a4b      	ldr	r2, [pc, #300]	; (800101c <HAL_GPIO_Init+0x2e8>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d019      	beq.n	8000f28 <HAL_GPIO_Init+0x1f4>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a4a      	ldr	r2, [pc, #296]	; (8001020 <HAL_GPIO_Init+0x2ec>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d013      	beq.n	8000f24 <HAL_GPIO_Init+0x1f0>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a49      	ldr	r2, [pc, #292]	; (8001024 <HAL_GPIO_Init+0x2f0>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d00d      	beq.n	8000f20 <HAL_GPIO_Init+0x1ec>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a48      	ldr	r2, [pc, #288]	; (8001028 <HAL_GPIO_Init+0x2f4>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d007      	beq.n	8000f1c <HAL_GPIO_Init+0x1e8>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a47      	ldr	r2, [pc, #284]	; (800102c <HAL_GPIO_Init+0x2f8>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d101      	bne.n	8000f18 <HAL_GPIO_Init+0x1e4>
 8000f14:	2304      	movs	r3, #4
 8000f16:	e008      	b.n	8000f2a <HAL_GPIO_Init+0x1f6>
 8000f18:	2305      	movs	r3, #5
 8000f1a:	e006      	b.n	8000f2a <HAL_GPIO_Init+0x1f6>
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e004      	b.n	8000f2a <HAL_GPIO_Init+0x1f6>
 8000f20:	2302      	movs	r3, #2
 8000f22:	e002      	b.n	8000f2a <HAL_GPIO_Init+0x1f6>
 8000f24:	2301      	movs	r3, #1
 8000f26:	e000      	b.n	8000f2a <HAL_GPIO_Init+0x1f6>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	f002 0203 	and.w	r2, r2, #3
 8000f30:	0092      	lsls	r2, r2, #2
 8000f32:	4093      	lsls	r3, r2
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f3a:	4937      	ldr	r1, [pc, #220]	; (8001018 <HAL_GPIO_Init+0x2e4>)
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	089b      	lsrs	r3, r3, #2
 8000f40:	3302      	adds	r3, #2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f48:	4b39      	ldr	r3, [pc, #228]	; (8001030 <HAL_GPIO_Init+0x2fc>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f6c:	4a30      	ldr	r2, [pc, #192]	; (8001030 <HAL_GPIO_Init+0x2fc>)
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f72:	4b2f      	ldr	r3, [pc, #188]	; (8001030 <HAL_GPIO_Init+0x2fc>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f96:	4a26      	ldr	r2, [pc, #152]	; (8001030 <HAL_GPIO_Init+0x2fc>)
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f9c:	4b24      	ldr	r3, [pc, #144]	; (8001030 <HAL_GPIO_Init+0x2fc>)
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fc0:	4a1b      	ldr	r2, [pc, #108]	; (8001030 <HAL_GPIO_Init+0x2fc>)
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <HAL_GPIO_Init+0x2fc>)
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fea:	4a11      	ldr	r2, [pc, #68]	; (8001030 <HAL_GPIO_Init+0x2fc>)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	f47f aea3 	bne.w	8000d4c <HAL_GPIO_Init+0x18>
  }
}
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	371c      	adds	r7, #28
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	40010000 	.word	0x40010000
 800101c:	40020000 	.word	0x40020000
 8001020:	40020400 	.word	0x40020400
 8001024:	40020800 	.word	0x40020800
 8001028:	40020c00 	.word	0x40020c00
 800102c:	40021000 	.word	0x40021000
 8001030:	40010400 	.word	0x40010400

08001034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
 8001040:	4613      	mov	r3, r2
 8001042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001044:	787b      	ldrb	r3, [r7, #1]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800104a:	887a      	ldrh	r2, [r7, #2]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001050:	e003      	b.n	800105a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001052:	887b      	ldrh	r3, [r7, #2]
 8001054:	041a      	lsls	r2, r3, #16
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	619a      	str	r2, [r3, #24]
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001076:	887a      	ldrh	r2, [r7, #2]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4013      	ands	r3, r2
 800107c:	041a      	lsls	r2, r3, #16
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	43d9      	mvns	r1, r3
 8001082:	887b      	ldrh	r3, [r7, #2]
 8001084:	400b      	ands	r3, r1
 8001086:	431a      	orrs	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	619a      	str	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
	...

08001098 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e12b      	b.n	8001302 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d106      	bne.n	80010c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff fb7e 	bl	80007c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2224      	movs	r2, #36	; 0x24
 80010c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0201 	bic.w	r2, r2, #1
 80010da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010fc:	f002 faa8 	bl	8003650 <HAL_RCC_GetPCLK1Freq>
 8001100:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	4a81      	ldr	r2, [pc, #516]	; (800130c <HAL_I2C_Init+0x274>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d807      	bhi.n	800111c <HAL_I2C_Init+0x84>
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4a80      	ldr	r2, [pc, #512]	; (8001310 <HAL_I2C_Init+0x278>)
 8001110:	4293      	cmp	r3, r2
 8001112:	bf94      	ite	ls
 8001114:	2301      	movls	r3, #1
 8001116:	2300      	movhi	r3, #0
 8001118:	b2db      	uxtb	r3, r3
 800111a:	e006      	b.n	800112a <HAL_I2C_Init+0x92>
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4a7d      	ldr	r2, [pc, #500]	; (8001314 <HAL_I2C_Init+0x27c>)
 8001120:	4293      	cmp	r3, r2
 8001122:	bf94      	ite	ls
 8001124:	2301      	movls	r3, #1
 8001126:	2300      	movhi	r3, #0
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e0e7      	b.n	8001302 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4a78      	ldr	r2, [pc, #480]	; (8001318 <HAL_I2C_Init+0x280>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	0c9b      	lsrs	r3, r3, #18
 800113c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	430a      	orrs	r2, r1
 8001150:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	4a6a      	ldr	r2, [pc, #424]	; (800130c <HAL_I2C_Init+0x274>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d802      	bhi.n	800116c <HAL_I2C_Init+0xd4>
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	3301      	adds	r3, #1
 800116a:	e009      	b.n	8001180 <HAL_I2C_Init+0xe8>
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001172:	fb02 f303 	mul.w	r3, r2, r3
 8001176:	4a69      	ldr	r2, [pc, #420]	; (800131c <HAL_I2C_Init+0x284>)
 8001178:	fba2 2303 	umull	r2, r3, r2, r3
 800117c:	099b      	lsrs	r3, r3, #6
 800117e:	3301      	adds	r3, #1
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	6812      	ldr	r2, [r2, #0]
 8001184:	430b      	orrs	r3, r1
 8001186:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001192:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	495c      	ldr	r1, [pc, #368]	; (800130c <HAL_I2C_Init+0x274>)
 800119c:	428b      	cmp	r3, r1
 800119e:	d819      	bhi.n	80011d4 <HAL_I2C_Init+0x13c>
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	1e59      	subs	r1, r3, #1
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80011ae:	1c59      	adds	r1, r3, #1
 80011b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80011b4:	400b      	ands	r3, r1
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00a      	beq.n	80011d0 <HAL_I2C_Init+0x138>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	1e59      	subs	r1, r3, #1
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80011c8:	3301      	adds	r3, #1
 80011ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ce:	e051      	b.n	8001274 <HAL_I2C_Init+0x1dc>
 80011d0:	2304      	movs	r3, #4
 80011d2:	e04f      	b.n	8001274 <HAL_I2C_Init+0x1dc>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d111      	bne.n	8001200 <HAL_I2C_Init+0x168>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	1e58      	subs	r0, r3, #1
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6859      	ldr	r1, [r3, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	440b      	add	r3, r1
 80011ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ee:	3301      	adds	r3, #1
 80011f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	bf0c      	ite	eq
 80011f8:	2301      	moveq	r3, #1
 80011fa:	2300      	movne	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	e012      	b.n	8001226 <HAL_I2C_Init+0x18e>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	1e58      	subs	r0, r3, #1
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6859      	ldr	r1, [r3, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	0099      	lsls	r1, r3, #2
 8001210:	440b      	add	r3, r1
 8001212:	fbb0 f3f3 	udiv	r3, r0, r3
 8001216:	3301      	adds	r3, #1
 8001218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800121c:	2b00      	cmp	r3, #0
 800121e:	bf0c      	ite	eq
 8001220:	2301      	moveq	r3, #1
 8001222:	2300      	movne	r3, #0
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_I2C_Init+0x196>
 800122a:	2301      	movs	r3, #1
 800122c:	e022      	b.n	8001274 <HAL_I2C_Init+0x1dc>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10e      	bne.n	8001254 <HAL_I2C_Init+0x1bc>
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1e58      	subs	r0, r3, #1
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6859      	ldr	r1, [r3, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	440b      	add	r3, r1
 8001244:	fbb0 f3f3 	udiv	r3, r0, r3
 8001248:	3301      	adds	r3, #1
 800124a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800124e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001252:	e00f      	b.n	8001274 <HAL_I2C_Init+0x1dc>
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	1e58      	subs	r0, r3, #1
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6859      	ldr	r1, [r3, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	0099      	lsls	r1, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	fbb0 f3f3 	udiv	r3, r0, r3
 800126a:	3301      	adds	r3, #1
 800126c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001270:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	6809      	ldr	r1, [r1, #0]
 8001278:	4313      	orrs	r3, r2
 800127a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69da      	ldr	r2, [r3, #28]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	431a      	orrs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	6911      	ldr	r1, [r2, #16]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68d2      	ldr	r2, [r2, #12]
 80012ae:	4311      	orrs	r1, r2
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	430b      	orrs	r3, r1
 80012b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695a      	ldr	r2, [r3, #20]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0201 	orr.w	r2, r2, #1
 80012e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2220      	movs	r2, #32
 80012ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	000186a0 	.word	0x000186a0
 8001310:	001e847f 	.word	0x001e847f
 8001314:	003d08ff 	.word	0x003d08ff
 8001318:	431bde83 	.word	0x431bde83
 800131c:	10624dd3 	.word	0x10624dd3

08001320 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001322:	b08b      	sub	sp, #44	; 0x2c
 8001324:	af06      	add	r7, sp, #24
 8001326:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e0d0      	b.n	80014d4 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d106      	bne.n	800134c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f006 fd18 	bl	8007d7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2203      	movs	r2, #3
 8001350:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f002 fa7f 	bl	800385c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800135e:	2300      	movs	r3, #0
 8001360:	73fb      	strb	r3, [r7, #15]
 8001362:	e04c      	b.n	80013fe <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	1c5a      	adds	r2, r3, #1
 800136a:	4613      	mov	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	440b      	add	r3, r1
 8001374:	3301      	adds	r3, #1
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	1c5a      	adds	r2, r3, #1
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	440b      	add	r3, r1
 800138a:	7bfa      	ldrb	r2, [r7, #15]
 800138c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800138e:	7bfa      	ldrb	r2, [r7, #15]
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	b298      	uxth	r0, r3
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	440b      	add	r3, r1
 80013a0:	3336      	adds	r3, #54	; 0x36
 80013a2:	4602      	mov	r2, r0
 80013a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	440b      	add	r3, r1
 80013b6:	3303      	adds	r3, #3
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013bc:	7bfa      	ldrb	r2, [r7, #15]
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	440b      	add	r3, r1
 80013ca:	3338      	adds	r3, #56	; 0x38
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013d0:	7bfa      	ldrb	r2, [r7, #15]
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	440b      	add	r3, r1
 80013de:	333c      	adds	r3, #60	; 0x3c
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013e4:	7bfa      	ldrb	r2, [r7, #15]
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	440b      	add	r3, r1
 80013f2:	3340      	adds	r3, #64	; 0x40
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	3301      	adds	r3, #1
 80013fc:	73fb      	strb	r3, [r7, #15]
 80013fe:	7bfa      	ldrb	r2, [r7, #15]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	429a      	cmp	r2, r3
 8001406:	d3ad      	bcc.n	8001364 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001408:	2300      	movs	r3, #0
 800140a:	73fb      	strb	r3, [r7, #15]
 800140c:	e044      	b.n	8001498 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	440b      	add	r3, r1
 800141c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	440b      	add	r3, r1
 8001432:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001436:	7bfa      	ldrb	r2, [r7, #15]
 8001438:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800143a:	7bfa      	ldrb	r2, [r7, #15]
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	440b      	add	r3, r1
 8001448:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001450:	7bfa      	ldrb	r2, [r7, #15]
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	440b      	add	r3, r1
 800145e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001466:	7bfa      	ldrb	r2, [r7, #15]
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	440b      	add	r3, r1
 8001474:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800147c:	7bfa      	ldrb	r2, [r7, #15]
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	440b      	add	r3, r1
 800148a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	3301      	adds	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	7bfa      	ldrb	r2, [r7, #15]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d3b5      	bcc.n	800140e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	687e      	ldr	r6, [r7, #4]
 80014aa:	466d      	mov	r5, sp
 80014ac:	f106 0410 	add.w	r4, r6, #16
 80014b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b4:	6823      	ldr	r3, [r4, #0]
 80014b6:	602b      	str	r3, [r5, #0]
 80014b8:	1d33      	adds	r3, r6, #4
 80014ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014bc:	6838      	ldr	r0, [r7, #0]
 80014be:	f002 f9e7 	bl	8003890 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d101      	bne.n	80014f2 <HAL_PCD_Start+0x16>
 80014ee:	2302      	movs	r3, #2
 80014f0:	e016      	b.n	8001520 <HAL_PCD_Start+0x44>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 f996 	bl	8003830 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001504:	2101      	movs	r1, #1
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f006 fc1a 	bl	8007d40 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f004 fe7b 	bl	800620c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f004 fe73 	bl	8006220 <USB_ReadInterrupts>
 800153a:	4603      	mov	r3, r0
 800153c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001544:	d102      	bne.n	800154c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 faf5 	bl	8001b36 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f004 fe65 	bl	8006220 <USB_ReadInterrupts>
 8001556:	4603      	mov	r3, r0
 8001558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001560:	d112      	bne.n	8001588 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800156a:	b29a      	uxth	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001574:	b292      	uxth	r2, r2
 8001576:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f006 fc79 	bl	8007e72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001580:	2100      	movs	r1, #0
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 f8c7 	bl	8001716 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f004 fe47 	bl	8006220 <USB_ReadInterrupts>
 8001592:	4603      	mov	r3, r0
 8001594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800159c:	d10b      	bne.n	80015b6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015b0:	b292      	uxth	r2, r2
 80015b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f004 fe30 	bl	8006220 <USB_ReadInterrupts>
 80015c0:	4603      	mov	r3, r0
 80015c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015ca:	d10b      	bne.n	80015e4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015de:	b292      	uxth	r2, r2
 80015e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f004 fe19 	bl	8006220 <USB_ReadInterrupts>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015f8:	d126      	bne.n	8001648 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001602:	b29a      	uxth	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0204 	bic.w	r2, r2, #4
 800160c:	b292      	uxth	r2, r2
 800160e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800161a:	b29a      	uxth	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0208 	bic.w	r2, r2, #8
 8001624:	b292      	uxth	r2, r2
 8001626:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f006 fc5a 	bl	8007ee4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001638:	b29a      	uxth	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001642:	b292      	uxth	r2, r2
 8001644:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f004 fde7 	bl	8006220 <USB_ReadInterrupts>
 8001652:	4603      	mov	r3, r0
 8001654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800165c:	d126      	bne.n	80016ac <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001666:	b29a      	uxth	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f042 0208 	orr.w	r2, r2, #8
 8001670:	b292      	uxth	r2, r2
 8001672:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800167e:	b29a      	uxth	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001688:	b292      	uxth	r2, r2
 800168a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001696:	b29a      	uxth	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f042 0204 	orr.w	r2, r2, #4
 80016a0:	b292      	uxth	r2, r2
 80016a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f006 fc02 	bl	8007eb0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f004 fdb5 	bl	8006220 <USB_ReadInterrupts>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016c0:	d10e      	bne.n	80016e0 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016d4:	b292      	uxth	r2, r2
 80016d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f006 fbbb 	bl	8007e56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f004 fd9b 	bl	8006220 <USB_ReadInterrupts>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016f4:	d10b      	bne.n	800170e <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016fe:	b29a      	uxth	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001708:	b292      	uxth	r2, r2
 800170a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	460b      	mov	r3, r1
 8001720:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001728:	2b01      	cmp	r3, #1
 800172a:	d101      	bne.n	8001730 <HAL_PCD_SetAddress+0x1a>
 800172c:	2302      	movs	r3, #2
 800172e:	e013      	b.n	8001758 <HAL_PCD_SetAddress+0x42>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	78fa      	ldrb	r2, [r7, #3]
 800173c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	78fa      	ldrb	r2, [r7, #3]
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f004 fd4c 	bl	80061e6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	4608      	mov	r0, r1
 800176a:	4611      	mov	r1, r2
 800176c:	461a      	mov	r2, r3
 800176e:	4603      	mov	r3, r0
 8001770:	70fb      	strb	r3, [r7, #3]
 8001772:	460b      	mov	r3, r1
 8001774:	803b      	strh	r3, [r7, #0]
 8001776:	4613      	mov	r3, r2
 8001778:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800177e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001782:	2b00      	cmp	r3, #0
 8001784:	da0e      	bge.n	80017a4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2201      	movs	r2, #1
 80017a0:	705a      	strb	r2, [r3, #1]
 80017a2:	e00e      	b.n	80017c2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	f003 0207 	and.w	r2, r3, #7
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80017ce:	883a      	ldrh	r2, [r7, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	78ba      	ldrb	r2, [r7, #2]
 80017d8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	785b      	ldrb	r3, [r3, #1]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d004      	beq.n	80017ec <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80017ec:	78bb      	ldrb	r3, [r7, #2]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d102      	bne.n	80017f8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <HAL_PCD_EP_Open+0xa6>
 8001802:	2302      	movs	r3, #2
 8001804:	e00e      	b.n	8001824 <HAL_PCD_EP_Open+0xc4>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68f9      	ldr	r1, [r7, #12]
 8001814:	4618      	mov	r0, r3
 8001816:	f002 f85b 	bl	80038d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001822:	7afb      	ldrb	r3, [r7, #11]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001838:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800183c:	2b00      	cmp	r3, #0
 800183e:	da0e      	bge.n	800185e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	4413      	add	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2201      	movs	r2, #1
 800185a:	705a      	strb	r2, [r3, #1]
 800185c:	e00e      	b.n	800187c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	f003 0207 	and.w	r2, r3, #7
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	4413      	add	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2200      	movs	r2, #0
 800187a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	b2da      	uxtb	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800188e:	2b01      	cmp	r3, #1
 8001890:	d101      	bne.n	8001896 <HAL_PCD_EP_Close+0x6a>
 8001892:	2302      	movs	r3, #2
 8001894:	e00e      	b.n	80018b4 <HAL_PCD_EP_Close+0x88>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68f9      	ldr	r1, [r7, #12]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f002 fb7d 	bl	8003fa4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	460b      	mov	r3, r1
 80018ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018cc:	7afb      	ldrb	r3, [r7, #11]
 80018ce:	f003 0207 	and.w	r2, r3, #7
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	4413      	add	r3, r2
 80018e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	2200      	movs	r2, #0
 80018fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018fc:	7afb      	ldrb	r3, [r7, #11]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	b2da      	uxtb	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001908:	7afb      	ldrb	r3, [r7, #11]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	2b00      	cmp	r3, #0
 8001910:	d106      	bne.n	8001920 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6979      	ldr	r1, [r7, #20]
 8001918:	4618      	mov	r0, r3
 800191a:	f002 fd2f 	bl	800437c <USB_EPStartXfer>
 800191e:	e005      	b.n	800192c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6979      	ldr	r1, [r7, #20]
 8001926:	4618      	mov	r0, r3
 8001928:	f002 fd28 	bl	800437c <USB_EPStartXfer>
  }

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	460b      	mov	r3, r1
 8001940:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001942:	78fb      	ldrb	r3, [r7, #3]
 8001944:	f003 0207 	and.w	r2, r3, #7
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	440b      	add	r3, r1
 8001954:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001958:	681b      	ldr	r3, [r3, #0]
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	460b      	mov	r3, r1
 8001972:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001974:	7afb      	ldrb	r3, [r7, #11]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	4413      	add	r3, r2
 8001988:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	2201      	movs	r2, #1
 80019ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019b0:	7afb      	ldrb	r3, [r7, #11]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019bc:	7afb      	ldrb	r3, [r7, #11]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d106      	bne.n	80019d4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6979      	ldr	r1, [r7, #20]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f002 fcd5 	bl	800437c <USB_EPStartXfer>
 80019d2:	e005      	b.n	80019e0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6979      	ldr	r1, [r7, #20]
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 fcce 	bl	800437c <USB_EPStartXfer>
  }

  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b084      	sub	sp, #16
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	460b      	mov	r3, r1
 80019f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	f003 0207 	and.w	r2, r3, #7
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d901      	bls.n	8001a08 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e03e      	b.n	8001a86 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	da0e      	bge.n	8001a2e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a10:	78fb      	ldrb	r3, [r7, #3]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	4413      	add	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	705a      	strb	r2, [r3, #1]
 8001a2c:	e00c      	b.n	8001a48 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a2e:	78fa      	ldrb	r2, [r7, #3]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	4413      	add	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d101      	bne.n	8001a68 <HAL_PCD_EP_SetStall+0x7e>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e00e      	b.n	8001a86 <HAL_PCD_EP_SetStall+0x9c>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68f9      	ldr	r1, [r7, #12]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f004 fab8 	bl	8005fec <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b084      	sub	sp, #16
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	460b      	mov	r3, r1
 8001a98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	f003 020f 	and.w	r2, r3, #15
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d901      	bls.n	8001aac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e040      	b.n	8001b2e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	da0e      	bge.n	8001ad2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2201      	movs	r2, #1
 8001ace:	705a      	strb	r2, [r3, #1]
 8001ad0:	e00e      	b.n	8001af0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	f003 0207 	and.w	r2, r3, #7
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <HAL_PCD_EP_ClrStall+0x82>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e00e      	b.n	8001b2e <HAL_PCD_EP_ClrStall+0xa0>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68f9      	ldr	r1, [r7, #12]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f004 fab4 	bl	800608c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b08e      	sub	sp, #56	; 0x38
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b3e:	e2ec      	b.n	800211a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b48:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001b56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f040 8161 	bne.w	8001e22 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d152      	bne.n	8001c10 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b7a:	81fb      	strh	r3, [r7, #14]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	89fb      	ldrh	r3, [r7, #14]
 8001b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3328      	adds	r3, #40	; 0x28
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3302      	adds	r3, #2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	695a      	ldr	r2, [r3, #20]
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	441a      	add	r2, r3
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001bce:	2100      	movs	r1, #0
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f006 f926 	bl	8007e22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 829b 	beq.w	800211a <PCD_EP_ISR_Handler+0x5e4>
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f040 8296 	bne.w	800211a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	b292      	uxth	r2, r2
 8001c02:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c0e:	e284      	b.n	800211a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d034      	beq.n	8001c94 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3306      	adds	r3, #6
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6812      	ldr	r2, [r2, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c4c:	881b      	ldrh	r3, [r3, #0]
 8001c4e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6818      	ldr	r0, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	f004 fb2d 	bl	80062c8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	823b      	strh	r3, [r7, #16]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	8a3a      	ldrh	r2, [r7, #16]
 8001c84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c88:	b292      	uxth	r2, r2
 8001c8a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f006 f89b 	bl	8007dc8 <HAL_PCD_SetupStageCallback>
 8001c92:	e242      	b.n	800211a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c94:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f280 823e 	bge.w	800211a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001caa:	4013      	ands	r3, r2
 8001cac:	83bb      	strh	r3, [r7, #28]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	8bba      	ldrh	r2, [r7, #28]
 8001cb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cb8:	b292      	uxth	r2, r2
 8001cba:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4413      	add	r3, r2
 8001cd0:	3306      	adds	r3, #6
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	4413      	add	r3, r2
 8001cda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d019      	beq.n	8001d24 <PCD_EP_ISR_Handler+0x1ee>
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d015      	beq.n	8001d24 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6818      	ldr	r0, [r3, #0]
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	6959      	ldr	r1, [r3, #20]
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	f004 fadd 	bl	80062c8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	695a      	ldr	r2, [r3, #20]
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	441a      	add	r2, r3
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f006 f864 	bl	8007dec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f040 81f2 	bne.w	800211a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	61bb      	str	r3, [r7, #24]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d112      	bne.n	8001d84 <PCD_EP_ISR_Handler+0x24e>
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	801a      	strh	r2, [r3, #0]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	801a      	strh	r2, [r3, #0]
 8001d82:	e02f      	b.n	8001de4 <PCD_EP_ISR_Handler+0x2ae>
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	2b3e      	cmp	r3, #62	; 0x3e
 8001d8a:	d813      	bhi.n	8001db4 <PCD_EP_ISR_Handler+0x27e>
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	085b      	lsrs	r3, r3, #1
 8001d92:	633b      	str	r3, [r7, #48]	; 0x30
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <PCD_EP_ISR_Handler+0x270>
 8001da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da2:	3301      	adds	r3, #1
 8001da4:	633b      	str	r3, [r7, #48]	; 0x30
 8001da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	029b      	lsls	r3, r3, #10
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	801a      	strh	r2, [r3, #0]
 8001db2:	e017      	b.n	8001de4 <PCD_EP_ISR_Handler+0x2ae>
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	095b      	lsrs	r3, r3, #5
 8001dba:	633b      	str	r3, [r7, #48]	; 0x30
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	f003 031f 	and.w	r3, r3, #31
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <PCD_EP_ISR_Handler+0x298>
 8001dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8001dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	029b      	lsls	r3, r3, #10
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001df4:	827b      	strh	r3, [r7, #18]
 8001df6:	8a7b      	ldrh	r3, [r7, #18]
 8001df8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001dfc:	827b      	strh	r3, [r7, #18]
 8001dfe:	8a7b      	ldrh	r3, [r7, #18]
 8001e00:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e04:	827b      	strh	r3, [r7, #18]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	8a7b      	ldrh	r3, [r7, #18]
 8001e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	8013      	strh	r3, [r2, #0]
 8001e20:	e17b      	b.n	800211a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e34:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f280 80ea 	bge.w	8002012 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e54:	4013      	ands	r3, r2
 8001e56:	853b      	strh	r3, [r7, #40]	; 0x28
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e6c:	b292      	uxth	r2, r2
 8001e6e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e70:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	7b1b      	ldrb	r3, [r3, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d122      	bne.n	8001ed4 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	461a      	mov	r2, r3
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3306      	adds	r3, #6
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eb6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001eb8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8087 	beq.w	8001fce <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	6959      	ldr	r1, [r3, #20]
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	88da      	ldrh	r2, [r3, #6]
 8001ecc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ece:	f004 f9fb 	bl	80062c8 <USB_ReadPMA>
 8001ed2:	e07c      	b.n	8001fce <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	78db      	ldrb	r3, [r3, #3]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d108      	bne.n	8001eee <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001edc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ede:	461a      	mov	r2, r3
 8001ee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f927 	bl	8002136 <HAL_PCD_EP_DB_Receive>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001eec:	e06f      	b.n	8001fce <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f08:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	441a      	add	r2, r3
 8001f18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d021      	beq.n	8001f8c <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f70:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d02a      	beq.n	8001fce <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	6959      	ldr	r1, [r3, #20]
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	891a      	ldrh	r2, [r3, #8]
 8001f84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f86:	f004 f99f 	bl	80062c8 <USB_ReadPMA>
 8001f8a:	e020      	b.n	8001fce <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	461a      	mov	r2, r3
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3306      	adds	r3, #6
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fb4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001fb6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	6959      	ldr	r1, [r3, #20]
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	895a      	ldrh	r2, [r3, #10]
 8001fc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fca:	f004 f97d 	bl	80062c8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	69da      	ldr	r2, [r3, #28]
 8001fd2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fd4:	441a      	add	r2, r3
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	695a      	ldr	r2, [r3, #20]
 8001fde:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fe0:	441a      	add	r2, r3
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d004      	beq.n	8001ff8 <PCD_EP_ISR_Handler+0x4c2>
 8001fee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d206      	bcs.n	8002006 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f005 fef4 	bl	8007dec <HAL_PCD_DataOutStageCallback>
 8002004:	e005      	b.n	8002012 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800200c:	4618      	mov	r0, r3
 800200e:	f002 f9b5 	bl	800437c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002012:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002018:	2b00      	cmp	r3, #0
 800201a:	d07e      	beq.n	800211a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800201c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	b29b      	uxth	r3, r3
 8002042:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204a:	843b      	strh	r3, [r7, #32]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	441a      	add	r2, r3
 800205a:	8c3b      	ldrh	r3, [r7, #32]
 800205c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002064:	b29b      	uxth	r3, r3
 8002066:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	78db      	ldrb	r3, [r3, #3]
 800206c:	2b03      	cmp	r3, #3
 800206e:	d00c      	beq.n	800208a <PCD_EP_ISR_Handler+0x554>
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	78db      	ldrb	r3, [r3, #3]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800207c:	2b02      	cmp	r3, #2
 800207e:	d146      	bne.n	800210e <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002080:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002086:	2b00      	cmp	r3, #0
 8002088:	d141      	bne.n	800210e <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002092:	b29b      	uxth	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4413      	add	r3, r2
 800209e:	3302      	adds	r3, #2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020b2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	699a      	ldr	r2, [r3, #24]
 80020b8:	8bfb      	ldrh	r3, [r7, #30]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d906      	bls.n	80020cc <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	699a      	ldr	r2, [r3, #24]
 80020c2:	8bfb      	ldrh	r3, [r7, #30]
 80020c4:	1ad2      	subs	r2, r2, r3
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	619a      	str	r2, [r3, #24]
 80020ca:	e002      	b.n	80020d2 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	2200      	movs	r2, #0
 80020d0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d106      	bne.n	80020e8 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	4619      	mov	r1, r3
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f005 fe9e 	bl	8007e22 <HAL_PCD_DataInStageCallback>
 80020e6:	e018      	b.n	800211a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	695a      	ldr	r2, [r3, #20]
 80020ec:	8bfb      	ldrh	r3, [r7, #30]
 80020ee:	441a      	add	r2, r3
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	69da      	ldr	r2, [r3, #28]
 80020f8:	8bfb      	ldrh	r3, [r7, #30]
 80020fa:	441a      	add	r2, r3
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002106:	4618      	mov	r0, r3
 8002108:	f002 f938 	bl	800437c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800210c:	e005      	b.n	800211a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800210e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002110:	461a      	mov	r2, r3
 8002112:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f91b 	bl	8002350 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002122:	b29b      	uxth	r3, r3
 8002124:	b21b      	sxth	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	f6ff ad0a 	blt.w	8001b40 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3738      	adds	r7, #56	; 0x38
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b088      	sub	sp, #32
 800213a:	af00      	add	r7, sp, #0
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	4613      	mov	r3, r2
 8002142:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002144:	88fb      	ldrh	r3, [r7, #6]
 8002146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d07e      	beq.n	800224c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002156:	b29b      	uxth	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	3302      	adds	r3, #2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	4413      	add	r3, r2
 800216c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002176:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	699a      	ldr	r2, [r3, #24]
 800217c:	8b7b      	ldrh	r3, [r7, #26]
 800217e:	429a      	cmp	r2, r3
 8002180:	d306      	bcc.n	8002190 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	8b7b      	ldrh	r3, [r7, #26]
 8002188:	1ad2      	subs	r2, r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	619a      	str	r2, [r3, #24]
 800218e:	e002      	b.n	8002196 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2200      	movs	r2, #0
 8002194:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d123      	bne.n	80021e6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b8:	833b      	strh	r3, [r7, #24]
 80021ba:	8b3b      	ldrh	r3, [r7, #24]
 80021bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021c0:	833b      	strh	r3, [r7, #24]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	441a      	add	r2, r3
 80021d0:	8b3b      	ldrh	r3, [r7, #24]
 80021d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d01f      	beq.n	8002230 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	461a      	mov	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	b29b      	uxth	r3, r3
 8002202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800220a:	82fb      	strh	r3, [r7, #22]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	441a      	add	r2, r3
 800221a:	8afb      	ldrh	r3, [r7, #22]
 800221c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002228:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800222c:	b29b      	uxth	r3, r3
 800222e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002230:	8b7b      	ldrh	r3, [r7, #26]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8087 	beq.w	8002346 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	6959      	ldr	r1, [r3, #20]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	891a      	ldrh	r2, [r3, #8]
 8002244:	8b7b      	ldrh	r3, [r7, #26]
 8002246:	f004 f83f 	bl	80062c8 <USB_ReadPMA>
 800224a:	e07c      	b.n	8002346 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002254:	b29b      	uxth	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	3306      	adds	r3, #6
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	4413      	add	r3, r2
 800226a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002274:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	699a      	ldr	r2, [r3, #24]
 800227a:	8b7b      	ldrh	r3, [r7, #26]
 800227c:	429a      	cmp	r2, r3
 800227e:	d306      	bcc.n	800228e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	699a      	ldr	r2, [r3, #24]
 8002284:	8b7b      	ldrh	r3, [r7, #26]
 8002286:	1ad2      	subs	r2, r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	619a      	str	r2, [r3, #24]
 800228c:	e002      	b.n	8002294 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2200      	movs	r2, #0
 8002292:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d123      	bne.n	80022e4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b6:	83fb      	strh	r3, [r7, #30]
 80022b8:	8bfb      	ldrh	r3, [r7, #30]
 80022ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022be:	83fb      	strh	r3, [r7, #30]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	441a      	add	r2, r3
 80022ce:	8bfb      	ldrh	r3, [r7, #30]
 80022d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d11f      	bne.n	800232e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002308:	83bb      	strh	r3, [r7, #28]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	441a      	add	r2, r3
 8002318:	8bbb      	ldrh	r3, [r7, #28]
 800231a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800231e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002326:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800232a:	b29b      	uxth	r3, r3
 800232c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800232e:	8b7b      	ldrh	r3, [r7, #26]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	6959      	ldr	r1, [r3, #20]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	895a      	ldrh	r2, [r3, #10]
 8002340:	8b7b      	ldrh	r3, [r7, #26]
 8002342:	f003 ffc1 	bl	80062c8 <USB_ReadPMA>
    }
  }

  return count;
 8002346:	8b7b      	ldrh	r3, [r7, #26]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3720      	adds	r7, #32
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b0a2      	sub	sp, #136	; 0x88
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	4613      	mov	r3, r2
 800235c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800235e:	88fb      	ldrh	r3, [r7, #6]
 8002360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 81c7 	beq.w	80026f8 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002372:	b29b      	uxth	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	3302      	adds	r3, #2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	6812      	ldr	r2, [r2, #0]
 8002386:	4413      	add	r3, r2
 8002388:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002392:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800239e:	429a      	cmp	r2, r3
 80023a0:	d907      	bls.n	80023b2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	699a      	ldr	r2, [r3, #24]
 80023a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023aa:	1ad2      	subs	r2, r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	619a      	str	r2, [r3, #24]
 80023b0:	e002      	b.n	80023b8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f040 80b9 	bne.w	8002534 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	785b      	ldrb	r3, [r3, #1]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d126      	bne.n	8002418 <HAL_PCD_EP_DB_Transmit+0xc8>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023d8:	b29b      	uxth	r3, r3
 80023da:	461a      	mov	r2, r3
 80023dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023de:	4413      	add	r3, r2
 80023e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	011a      	lsls	r2, r3, #4
 80023e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ea:	4413      	add	r3, r2
 80023ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	801a      	strh	r2, [r3, #0]
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	b29b      	uxth	r3, r3
 8002408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800240c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002410:	b29a      	uxth	r2, r3
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	801a      	strh	r2, [r3, #0]
 8002416:	e01a      	b.n	800244e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	785b      	ldrb	r3, [r3, #1]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d116      	bne.n	800244e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	633b      	str	r3, [r7, #48]	; 0x30
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800242e:	b29b      	uxth	r3, r3
 8002430:	461a      	mov	r2, r3
 8002432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002434:	4413      	add	r3, r2
 8002436:	633b      	str	r3, [r7, #48]	; 0x30
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	011a      	lsls	r2, r3, #4
 800243e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002440:	4413      	add	r3, r2
 8002442:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244a:	2200      	movs	r2, #0
 800244c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	623b      	str	r3, [r7, #32]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	785b      	ldrb	r3, [r3, #1]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d126      	bne.n	80024aa <HAL_PCD_EP_DB_Transmit+0x15a>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	61bb      	str	r3, [r7, #24]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800246a:	b29b      	uxth	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	4413      	add	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	011a      	lsls	r2, r3, #4
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	4413      	add	r3, r2
 800247e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	b29b      	uxth	r3, r3
 800248a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800248e:	b29a      	uxth	r2, r3
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	801a      	strh	r2, [r3, #0]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	b29b      	uxth	r3, r3
 800249a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800249e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	801a      	strh	r2, [r3, #0]
 80024a8:	e017      	b.n	80024da <HAL_PCD_EP_DB_Transmit+0x18a>
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	785b      	ldrb	r3, [r3, #1]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d113      	bne.n	80024da <HAL_PCD_EP_DB_Transmit+0x18a>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	4413      	add	r3, r2
 80024c2:	623b      	str	r3, [r7, #32]
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	011a      	lsls	r2, r3, #4
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	4413      	add	r3, r2
 80024ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	2200      	movs	r2, #0
 80024d8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	4619      	mov	r1, r3
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f005 fc9e 	bl	8007e22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 82d4 	beq.w	8002a9a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800250c:	827b      	strh	r3, [r7, #18]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	441a      	add	r2, r3
 800251c:	8a7b      	ldrh	r3, [r7, #18]
 800251e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002526:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800252a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800252e:	b29b      	uxth	r3, r3
 8002530:	8013      	strh	r3, [r2, #0]
 8002532:	e2b2      	b.n	8002a9a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002534:	88fb      	ldrh	r3, [r7, #6]
 8002536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d021      	beq.n	8002582 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	b29b      	uxth	r3, r3
 8002550:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002558:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	441a      	add	r2, r3
 800256a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800256e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002572:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800257a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800257e:	b29b      	uxth	r3, r3
 8002580:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002588:	2b01      	cmp	r3, #1
 800258a:	f040 8286 	bne.w	8002a9a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	695a      	ldr	r2, [r3, #20]
 8002592:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002596:	441a      	add	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	69da      	ldr	r2, [r3, #28]
 80025a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025a4:	441a      	add	r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	6a1a      	ldr	r2, [r3, #32]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d309      	bcc.n	80025ca <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	6a1a      	ldr	r2, [r3, #32]
 80025c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025c2:	1ad2      	subs	r2, r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	621a      	str	r2, [r3, #32]
 80025c8:	e015      	b.n	80025f6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d107      	bne.n	80025e2 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80025d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025d6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025e0:	e009      	b.n	80025f6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2200      	movs	r2, #0
 80025f4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	785b      	ldrb	r3, [r3, #1]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d155      	bne.n	80026aa <HAL_PCD_EP_DB_Transmit+0x35a>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	63bb      	str	r3, [r7, #56]	; 0x38
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800260c:	b29b      	uxth	r3, r3
 800260e:	461a      	mov	r2, r3
 8002610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002612:	4413      	add	r3, r2
 8002614:	63bb      	str	r3, [r7, #56]	; 0x38
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	011a      	lsls	r2, r3, #4
 800261c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261e:	4413      	add	r3, r2
 8002620:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002624:	637b      	str	r3, [r7, #52]	; 0x34
 8002626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002628:	2b00      	cmp	r3, #0
 800262a:	d112      	bne.n	8002652 <HAL_PCD_EP_DB_Transmit+0x302>
 800262c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	b29b      	uxth	r3, r3
 8002632:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002636:	b29a      	uxth	r2, r3
 8002638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263a:	801a      	strh	r2, [r3, #0]
 800263c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	b29b      	uxth	r3, r3
 8002642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800264a:	b29a      	uxth	r2, r3
 800264c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264e:	801a      	strh	r2, [r3, #0]
 8002650:	e047      	b.n	80026e2 <HAL_PCD_EP_DB_Transmit+0x392>
 8002652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002654:	2b3e      	cmp	r3, #62	; 0x3e
 8002656:	d811      	bhi.n	800267c <HAL_PCD_EP_DB_Transmit+0x32c>
 8002658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800265a:	085b      	lsrs	r3, r3, #1
 800265c:	64bb      	str	r3, [r7, #72]	; 0x48
 800265e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <HAL_PCD_EP_DB_Transmit+0x31e>
 8002668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800266a:	3301      	adds	r3, #1
 800266c:	64bb      	str	r3, [r7, #72]	; 0x48
 800266e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002670:	b29b      	uxth	r3, r3
 8002672:	029b      	lsls	r3, r3, #10
 8002674:	b29a      	uxth	r2, r3
 8002676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002678:	801a      	strh	r2, [r3, #0]
 800267a:	e032      	b.n	80026e2 <HAL_PCD_EP_DB_Transmit+0x392>
 800267c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	64bb      	str	r3, [r7, #72]	; 0x48
 8002682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	2b00      	cmp	r3, #0
 800268a:	d102      	bne.n	8002692 <HAL_PCD_EP_DB_Transmit+0x342>
 800268c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800268e:	3b01      	subs	r3, #1
 8002690:	64bb      	str	r3, [r7, #72]	; 0x48
 8002692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002694:	b29b      	uxth	r3, r3
 8002696:	029b      	lsls	r3, r3, #10
 8002698:	b29b      	uxth	r3, r3
 800269a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800269e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a6:	801a      	strh	r2, [r3, #0]
 80026a8:	e01b      	b.n	80026e2 <HAL_PCD_EP_DB_Transmit+0x392>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	785b      	ldrb	r3, [r3, #1]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d117      	bne.n	80026e2 <HAL_PCD_EP_DB_Transmit+0x392>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	643b      	str	r3, [r7, #64]	; 0x40
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026c6:	4413      	add	r3, r2
 80026c8:	643b      	str	r3, [r7, #64]	; 0x40
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	011a      	lsls	r2, r3, #4
 80026d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026d2:	4413      	add	r3, r2
 80026d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026dc:	b29a      	uxth	r2, r3
 80026de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026e0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	6959      	ldr	r1, [r3, #20]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	891a      	ldrh	r2, [r3, #8]
 80026ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	f003 fda4 	bl	800623e <USB_WritePMA>
 80026f6:	e1d0      	b.n	8002a9a <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002700:	b29b      	uxth	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4413      	add	r3, r2
 800270c:	3306      	adds	r3, #6
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	4413      	add	r3, r2
 8002716:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002720:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	699a      	ldr	r2, [r3, #24]
 8002728:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800272c:	429a      	cmp	r2, r3
 800272e:	d307      	bcc.n	8002740 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	699a      	ldr	r2, [r3, #24]
 8002734:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002738:	1ad2      	subs	r2, r2, r3
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	619a      	str	r2, [r3, #24]
 800273e:	e002      	b.n	8002746 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2200      	movs	r2, #0
 8002744:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	2b00      	cmp	r3, #0
 800274c:	f040 80c4 	bne.w	80028d8 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	785b      	ldrb	r3, [r3, #1]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d126      	bne.n	80027a6 <HAL_PCD_EP_DB_Transmit+0x456>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002766:	b29b      	uxth	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800276c:	4413      	add	r3, r2
 800276e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	011a      	lsls	r2, r3, #4
 8002776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002778:	4413      	add	r3, r2
 800277a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800277e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002780:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	b29b      	uxth	r3, r3
 8002786:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800278a:	b29a      	uxth	r2, r3
 800278c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800278e:	801a      	strh	r2, [r3, #0]
 8002790:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	b29b      	uxth	r3, r3
 8002796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800279a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800279e:	b29a      	uxth	r2, r3
 80027a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027a2:	801a      	strh	r2, [r3, #0]
 80027a4:	e01a      	b.n	80027dc <HAL_PCD_EP_DB_Transmit+0x48c>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	785b      	ldrb	r3, [r3, #1]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d116      	bne.n	80027dc <HAL_PCD_EP_DB_Transmit+0x48c>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	677b      	str	r3, [r7, #116]	; 0x74
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027bc:	b29b      	uxth	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027c2:	4413      	add	r3, r2
 80027c4:	677b      	str	r3, [r7, #116]	; 0x74
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	011a      	lsls	r2, r3, #4
 80027cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ce:	4413      	add	r3, r2
 80027d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027d4:	673b      	str	r3, [r7, #112]	; 0x70
 80027d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027d8:	2200      	movs	r2, #0
 80027da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	785b      	ldrb	r3, [r3, #1]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d12f      	bne.n	800284a <HAL_PCD_EP_DB_Transmit+0x4fa>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002802:	4413      	add	r3, r2
 8002804:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	011a      	lsls	r2, r3, #4
 800280e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002812:	4413      	add	r3, r2
 8002814:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800281c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	b29b      	uxth	r3, r3
 8002824:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002828:	b29a      	uxth	r2, r3
 800282a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800282e:	801a      	strh	r2, [r3, #0]
 8002830:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800283c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002840:	b29a      	uxth	r2, r3
 8002842:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002846:	801a      	strh	r2, [r3, #0]
 8002848:	e017      	b.n	800287a <HAL_PCD_EP_DB_Transmit+0x52a>
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	785b      	ldrb	r3, [r3, #1]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d113      	bne.n	800287a <HAL_PCD_EP_DB_Transmit+0x52a>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800285a:	b29b      	uxth	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002860:	4413      	add	r3, r2
 8002862:	67bb      	str	r3, [r7, #120]	; 0x78
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	011a      	lsls	r2, r3, #4
 800286a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800286c:	4413      	add	r3, r2
 800286e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002872:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002874:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002876:	2200      	movs	r2, #0
 8002878:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	4619      	mov	r1, r3
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f005 face 	bl	8007e22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800288c:	2b00      	cmp	r3, #0
 800288e:	f040 8104 	bne.w	8002a9a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	461a      	mov	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	441a      	add	r2, r3
 80028be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80028c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	8013      	strh	r3, [r2, #0]
 80028d6:	e0e0      	b.n	8002a9a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d121      	bne.n	8002926 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	441a      	add	r2, r3
 800290e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800291a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800291e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002922:	b29b      	uxth	r3, r3
 8002924:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800292c:	2b01      	cmp	r3, #1
 800292e:	f040 80b4 	bne.w	8002a9a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800293a:	441a      	add	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	69da      	ldr	r2, [r3, #28]
 8002944:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002948:	441a      	add	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	6a1a      	ldr	r2, [r3, #32]
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	429a      	cmp	r2, r3
 8002958:	d309      	bcc.n	800296e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	6a1a      	ldr	r2, [r3, #32]
 8002964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002966:	1ad2      	subs	r2, r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	621a      	str	r2, [r3, #32]
 800296c:	e015      	b.n	800299a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d107      	bne.n	8002986 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002976:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800297a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002984:	e009      	b.n	800299a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2200      	movs	r2, #0
 8002990:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	667b      	str	r3, [r7, #100]	; 0x64
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	785b      	ldrb	r3, [r3, #1]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d155      	bne.n	8002a54 <HAL_PCD_EP_DB_Transmit+0x704>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029bc:	4413      	add	r3, r2
 80029be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	011a      	lsls	r2, r3, #4
 80029c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c8:	4413      	add	r3, r2
 80029ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80029d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d112      	bne.n	80029fc <HAL_PCD_EP_DB_Transmit+0x6ac>
 80029d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029e4:	801a      	strh	r2, [r3, #0]
 80029e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029f8:	801a      	strh	r2, [r3, #0]
 80029fa:	e044      	b.n	8002a86 <HAL_PCD_EP_DB_Transmit+0x736>
 80029fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029fe:	2b3e      	cmp	r3, #62	; 0x3e
 8002a00:	d811      	bhi.n	8002a26 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a04:	085b      	lsrs	r3, r3, #1
 8002a06:	657b      	str	r3, [r7, #84]	; 0x54
 8002a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d002      	beq.n	8002a18 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a14:	3301      	adds	r3, #1
 8002a16:	657b      	str	r3, [r7, #84]	; 0x54
 8002a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	029b      	lsls	r3, r3, #10
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a22:	801a      	strh	r2, [r3, #0]
 8002a24:	e02f      	b.n	8002a86 <HAL_PCD_EP_DB_Transmit+0x736>
 8002a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	657b      	str	r3, [r7, #84]	; 0x54
 8002a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a2e:	f003 031f 	and.w	r3, r3, #31
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d102      	bne.n	8002a3c <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	657b      	str	r3, [r7, #84]	; 0x54
 8002a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	029b      	lsls	r3, r3, #10
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a50:	801a      	strh	r2, [r3, #0]
 8002a52:	e018      	b.n	8002a86 <HAL_PCD_EP_DB_Transmit+0x736>
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	785b      	ldrb	r3, [r3, #1]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d114      	bne.n	8002a86 <HAL_PCD_EP_DB_Transmit+0x736>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	461a      	mov	r2, r3
 8002a68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a6a:	4413      	add	r3, r2
 8002a6c:	667b      	str	r3, [r7, #100]	; 0x64
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	011a      	lsls	r2, r3, #4
 8002a74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a76:	4413      	add	r3, r2
 8002a78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a7c:	663b      	str	r3, [r7, #96]	; 0x60
 8002a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a84:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	6959      	ldr	r1, [r3, #20]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	895a      	ldrh	r2, [r3, #10]
 8002a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	f003 fbd2 	bl	800623e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ab4:	823b      	strh	r3, [r7, #16]
 8002ab6:	8a3b      	ldrh	r3, [r7, #16]
 8002ab8:	f083 0310 	eor.w	r3, r3, #16
 8002abc:	823b      	strh	r3, [r7, #16]
 8002abe:	8a3b      	ldrh	r3, [r7, #16]
 8002ac0:	f083 0320 	eor.w	r3, r3, #32
 8002ac4:	823b      	strh	r3, [r7, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	441a      	add	r2, r3
 8002ad4:	8a3b      	ldrh	r3, [r7, #16]
 8002ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3788      	adds	r7, #136	; 0x88
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	607b      	str	r3, [r7, #4]
 8002afe:	460b      	mov	r3, r1
 8002b00:	817b      	strh	r3, [r7, #10]
 8002b02:	4613      	mov	r3, r2
 8002b04:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b06:	897b      	ldrh	r3, [r7, #10]
 8002b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b12:	897b      	ldrh	r3, [r7, #10]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4413      	add	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	e009      	b.n	8002b3e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b2a:	897a      	ldrh	r2, [r7, #10]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b3e:	893b      	ldrh	r3, [r7, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d107      	bne.n	8002b54 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2200      	movs	r2, #0
 8002b48:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	80da      	strh	r2, [r3, #6]
 8002b52:	e00b      	b.n	8002b6c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2201      	movs	r2, #1
 8002b58:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	0c1b      	lsrs	r3, r3, #16
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	371c      	adds	r7, #28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e31d      	b.n	80031c6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b8a:	4b94      	ldr	r3, [pc, #592]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
 8002b92:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b94:	4b91      	ldr	r3, [pc, #580]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d07b      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d006      	beq.n	8002bbe <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	2b0c      	cmp	r3, #12
 8002bb4:	d10f      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x5e>
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bbc:	d10b      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbe:	4b87      	ldr	r3, [pc, #540]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d06a      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x128>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d166      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e2f7      	b.n	80031c6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d106      	bne.n	8002bec <HAL_RCC_OscConfig+0x74>
 8002bde:	4b7f      	ldr	r3, [pc, #508]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a7e      	ldr	r2, [pc, #504]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e02d      	b.n	8002c48 <HAL_RCC_OscConfig+0xd0>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10c      	bne.n	8002c0e <HAL_RCC_OscConfig+0x96>
 8002bf4:	4b79      	ldr	r3, [pc, #484]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a78      	ldr	r2, [pc, #480]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b76      	ldr	r3, [pc, #472]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a75      	ldr	r2, [pc, #468]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	e01c      	b.n	8002c48 <HAL_RCC_OscConfig+0xd0>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b05      	cmp	r3, #5
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0xb8>
 8002c16:	4b71      	ldr	r3, [pc, #452]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a70      	ldr	r2, [pc, #448]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	4b6e      	ldr	r3, [pc, #440]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a6d      	ldr	r2, [pc, #436]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e00b      	b.n	8002c48 <HAL_RCC_OscConfig+0xd0>
 8002c30:	4b6a      	ldr	r3, [pc, #424]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a69      	ldr	r2, [pc, #420]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4b67      	ldr	r3, [pc, #412]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a66      	ldr	r2, [pc, #408]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d013      	beq.n	8002c78 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7fd ff36 	bl	8000ac0 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c58:	f7fd ff32 	bl	8000ac0 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e2ad      	b.n	80031c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c6a:	4b5c      	ldr	r3, [pc, #368]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0xe0>
 8002c76:	e014      	b.n	8002ca2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fd ff22 	bl	8000ac0 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c80:	f7fd ff1e 	bl	8000ac0 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e299      	b.n	80031c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c92:	4b52      	ldr	r3, [pc, #328]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x108>
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d05a      	beq.n	8002d64 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d005      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	2b0c      	cmp	r3, #12
 8002cb8:	d119      	bne.n	8002cee <HAL_RCC_OscConfig+0x176>
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d116      	bne.n	8002cee <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc0:	4b46      	ldr	r3, [pc, #280]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x160>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e276      	b.n	80031c6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd8:	4b40      	ldr	r3, [pc, #256]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	021b      	lsls	r3, r3, #8
 8002ce6:	493d      	ldr	r1, [pc, #244]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cec:	e03a      	b.n	8002d64 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d020      	beq.n	8002d38 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf6:	4b3a      	ldr	r3, [pc, #232]	; (8002de0 <HAL_RCC_OscConfig+0x268>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7fd fee0 	bl	8000ac0 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d04:	f7fd fedc 	bl	8000ac0 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e257      	b.n	80031c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d16:	4b31      	ldr	r3, [pc, #196]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d22:	4b2e      	ldr	r3, [pc, #184]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	021b      	lsls	r3, r3, #8
 8002d30:	492a      	ldr	r1, [pc, #168]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	604b      	str	r3, [r1, #4]
 8002d36:	e015      	b.n	8002d64 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d38:	4b29      	ldr	r3, [pc, #164]	; (8002de0 <HAL_RCC_OscConfig+0x268>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3e:	f7fd febf 	bl	8000ac0 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d46:	f7fd febb 	bl	8000ac0 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e236      	b.n	80031c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d58:	4b20      	ldr	r3, [pc, #128]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f0      	bne.n	8002d46 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 80b8 	beq.w	8002ee2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d170      	bne.n	8002e5a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d78:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_RCC_OscConfig+0x218>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e21a      	b.n	80031c6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a1a      	ldr	r2, [r3, #32]
 8002d94:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d921      	bls.n	8002de4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 fc67 	bl	8003678 <RCC_SetFlashLatencyFromMSIRange>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e208      	b.n	80031c6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002db4:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	4906      	ldr	r1, [pc, #24]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dc6:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	061b      	lsls	r3, r3, #24
 8002dd4:	4901      	ldr	r1, [pc, #4]	; (8002ddc <HAL_RCC_OscConfig+0x264>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	604b      	str	r3, [r1, #4]
 8002dda:	e020      	b.n	8002e1e <HAL_RCC_OscConfig+0x2a6>
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002de4:	4b99      	ldr	r3, [pc, #612]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4996      	ldr	r1, [pc, #600]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002df6:	4b95      	ldr	r3, [pc, #596]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	061b      	lsls	r3, r3, #24
 8002e04:	4991      	ldr	r1, [pc, #580]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fc32 	bl	8003678 <RCC_SetFlashLatencyFromMSIRange>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e1d3      	b.n	80031c6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	0b5b      	lsrs	r3, r3, #13
 8002e24:	3301      	adds	r3, #1
 8002e26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002e2e:	4a87      	ldr	r2, [pc, #540]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002e30:	6892      	ldr	r2, [r2, #8]
 8002e32:	0912      	lsrs	r2, r2, #4
 8002e34:	f002 020f 	and.w	r2, r2, #15
 8002e38:	4985      	ldr	r1, [pc, #532]	; (8003050 <HAL_RCC_OscConfig+0x4d8>)
 8002e3a:	5c8a      	ldrb	r2, [r1, r2]
 8002e3c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e3e:	4a85      	ldr	r2, [pc, #532]	; (8003054 <HAL_RCC_OscConfig+0x4dc>)
 8002e40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e42:	4b85      	ldr	r3, [pc, #532]	; (8003058 <HAL_RCC_OscConfig+0x4e0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fd fdee 	bl	8000a28 <HAL_InitTick>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d045      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	e1b5      	b.n	80031c6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d029      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e62:	4b7e      	ldr	r3, [pc, #504]	; (800305c <HAL_RCC_OscConfig+0x4e4>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7fd fe2a 	bl	8000ac0 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e70:	f7fd fe26 	bl	8000ac0 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e1a1      	b.n	80031c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e82:	4b72      	ldr	r3, [pc, #456]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e8e:	4b6f      	ldr	r3, [pc, #444]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	496c      	ldr	r1, [pc, #432]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ea0:	4b6a      	ldr	r3, [pc, #424]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	061b      	lsls	r3, r3, #24
 8002eae:	4967      	ldr	r1, [pc, #412]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	604b      	str	r3, [r1, #4]
 8002eb4:	e015      	b.n	8002ee2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002eb6:	4b69      	ldr	r3, [pc, #420]	; (800305c <HAL_RCC_OscConfig+0x4e4>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebc:	f7fd fe00 	bl	8000ac0 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ec4:	f7fd fdfc 	bl	8000ac0 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e177      	b.n	80031c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ed6:	4b5d      	ldr	r3, [pc, #372]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d030      	beq.n	8002f50 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d016      	beq.n	8002f24 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef6:	4b5a      	ldr	r3, [pc, #360]	; (8003060 <HAL_RCC_OscConfig+0x4e8>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efc:	f7fd fde0 	bl	8000ac0 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f04:	f7fd fddc 	bl	8000ac0 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e157      	b.n	80031c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f16:	4b4d      	ldr	r3, [pc, #308]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0x38c>
 8002f22:	e015      	b.n	8002f50 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f24:	4b4e      	ldr	r3, [pc, #312]	; (8003060 <HAL_RCC_OscConfig+0x4e8>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2a:	f7fd fdc9 	bl	8000ac0 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f32:	f7fd fdc5 	bl	8000ac0 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e140      	b.n	80031c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f44:	4b41      	ldr	r3, [pc, #260]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f0      	bne.n	8002f32 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 80b5 	beq.w	80030c8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f62:	4b3a      	ldr	r3, [pc, #232]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10d      	bne.n	8002f8a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f6e:	4b37      	ldr	r3, [pc, #220]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	4a36      	ldr	r2, [pc, #216]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f78:	6253      	str	r3, [r2, #36]	; 0x24
 8002f7a:	4b34      	ldr	r3, [pc, #208]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f86:	2301      	movs	r3, #1
 8002f88:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8a:	4b36      	ldr	r3, [pc, #216]	; (8003064 <HAL_RCC_OscConfig+0x4ec>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d118      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f96:	4b33      	ldr	r3, [pc, #204]	; (8003064 <HAL_RCC_OscConfig+0x4ec>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a32      	ldr	r2, [pc, #200]	; (8003064 <HAL_RCC_OscConfig+0x4ec>)
 8002f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fa2:	f7fd fd8d 	bl	8000ac0 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002faa:	f7fd fd89 	bl	8000ac0 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b64      	cmp	r3, #100	; 0x64
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e104      	b.n	80031c6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbc:	4b29      	ldr	r3, [pc, #164]	; (8003064 <HAL_RCC_OscConfig+0x4ec>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d106      	bne.n	8002fde <HAL_RCC_OscConfig+0x466>
 8002fd0:	4b1e      	ldr	r3, [pc, #120]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd4:	4a1d      	ldr	r2, [pc, #116]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fda:	6353      	str	r3, [r2, #52]	; 0x34
 8002fdc:	e02d      	b.n	800303a <HAL_RCC_OscConfig+0x4c2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10c      	bne.n	8003000 <HAL_RCC_OscConfig+0x488>
 8002fe6:	4b19      	ldr	r3, [pc, #100]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fea:	4a18      	ldr	r2, [pc, #96]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002fec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ff0:	6353      	str	r3, [r2, #52]	; 0x34
 8002ff2:	4b16      	ldr	r3, [pc, #88]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff6:	4a15      	ldr	r2, [pc, #84]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002ff8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ffc:	6353      	str	r3, [r2, #52]	; 0x34
 8002ffe:	e01c      	b.n	800303a <HAL_RCC_OscConfig+0x4c2>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b05      	cmp	r3, #5
 8003006:	d10c      	bne.n	8003022 <HAL_RCC_OscConfig+0x4aa>
 8003008:	4b10      	ldr	r3, [pc, #64]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 800300a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300c:	4a0f      	ldr	r2, [pc, #60]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 800300e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003012:	6353      	str	r3, [r2, #52]	; 0x34
 8003014:	4b0d      	ldr	r3, [pc, #52]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8003016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003018:	4a0c      	ldr	r2, [pc, #48]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 800301a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800301e:	6353      	str	r3, [r2, #52]	; 0x34
 8003020:	e00b      	b.n	800303a <HAL_RCC_OscConfig+0x4c2>
 8003022:	4b0a      	ldr	r3, [pc, #40]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8003024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003026:	4a09      	ldr	r2, [pc, #36]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8003028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800302c:	6353      	str	r3, [r2, #52]	; 0x34
 800302e:	4b07      	ldr	r3, [pc, #28]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8003030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003032:	4a06      	ldr	r2, [pc, #24]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8003034:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003038:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d024      	beq.n	800308c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003042:	f7fd fd3d 	bl	8000ac0 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003048:	e019      	b.n	800307e <HAL_RCC_OscConfig+0x506>
 800304a:	bf00      	nop
 800304c:	40023800 	.word	0x40023800
 8003050:	08008c90 	.word	0x08008c90
 8003054:	20000000 	.word	0x20000000
 8003058:	20000004 	.word	0x20000004
 800305c:	42470020 	.word	0x42470020
 8003060:	42470680 	.word	0x42470680
 8003064:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003068:	f7fd fd2a 	bl	8000ac0 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	; 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e0a3      	b.n	80031c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800307e:	4b54      	ldr	r3, [pc, #336]	; (80031d0 <HAL_RCC_OscConfig+0x658>)
 8003080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0ee      	beq.n	8003068 <HAL_RCC_OscConfig+0x4f0>
 800308a:	e014      	b.n	80030b6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308c:	f7fd fd18 	bl	8000ac0 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003092:	e00a      	b.n	80030aa <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003094:	f7fd fd14 	bl	8000ac0 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e08d      	b.n	80031c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030aa:	4b49      	ldr	r3, [pc, #292]	; (80031d0 <HAL_RCC_OscConfig+0x658>)
 80030ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1ee      	bne.n	8003094 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030b6:	7ffb      	ldrb	r3, [r7, #31]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d105      	bne.n	80030c8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030bc:	4b44      	ldr	r3, [pc, #272]	; (80031d0 <HAL_RCC_OscConfig+0x658>)
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	4a43      	ldr	r2, [pc, #268]	; (80031d0 <HAL_RCC_OscConfig+0x658>)
 80030c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d079      	beq.n	80031c4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	2b0c      	cmp	r3, #12
 80030d4:	d056      	beq.n	8003184 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d13b      	bne.n	8003156 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030de:	4b3d      	ldr	r3, [pc, #244]	; (80031d4 <HAL_RCC_OscConfig+0x65c>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e4:	f7fd fcec 	bl	8000ac0 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ec:	f7fd fce8 	bl	8000ac0 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e063      	b.n	80031c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030fe:	4b34      	ldr	r3, [pc, #208]	; (80031d0 <HAL_RCC_OscConfig+0x658>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800310a:	4b31      	ldr	r3, [pc, #196]	; (80031d0 <HAL_RCC_OscConfig+0x658>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311a:	4319      	orrs	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003120:	430b      	orrs	r3, r1
 8003122:	492b      	ldr	r1, [pc, #172]	; (80031d0 <HAL_RCC_OscConfig+0x658>)
 8003124:	4313      	orrs	r3, r2
 8003126:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003128:	4b2a      	ldr	r3, [pc, #168]	; (80031d4 <HAL_RCC_OscConfig+0x65c>)
 800312a:	2201      	movs	r2, #1
 800312c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312e:	f7fd fcc7 	bl	8000ac0 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003136:	f7fd fcc3 	bl	8000ac0 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e03e      	b.n	80031c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003148:	4b21      	ldr	r3, [pc, #132]	; (80031d0 <HAL_RCC_OscConfig+0x658>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x5be>
 8003154:	e036      	b.n	80031c4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003156:	4b1f      	ldr	r3, [pc, #124]	; (80031d4 <HAL_RCC_OscConfig+0x65c>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fd fcb0 	bl	8000ac0 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003164:	f7fd fcac 	bl	8000ac0 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e027      	b.n	80031c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003176:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <HAL_RCC_OscConfig+0x658>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x5ec>
 8003182:	e01f      	b.n	80031c4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e01a      	b.n	80031c6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003190:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <HAL_RCC_OscConfig+0x658>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d10d      	bne.n	80031c0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d106      	bne.n	80031c0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3720      	adds	r7, #32
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
 80031d4:	42470060 	.word	0x42470060

080031d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e11a      	b.n	8003422 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031ec:	4b8f      	ldr	r3, [pc, #572]	; (800342c <HAL_RCC_ClockConfig+0x254>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d919      	bls.n	800322e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d105      	bne.n	800320c <HAL_RCC_ClockConfig+0x34>
 8003200:	4b8a      	ldr	r3, [pc, #552]	; (800342c <HAL_RCC_ClockConfig+0x254>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a89      	ldr	r2, [pc, #548]	; (800342c <HAL_RCC_ClockConfig+0x254>)
 8003206:	f043 0304 	orr.w	r3, r3, #4
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	4b87      	ldr	r3, [pc, #540]	; (800342c <HAL_RCC_ClockConfig+0x254>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f023 0201 	bic.w	r2, r3, #1
 8003214:	4985      	ldr	r1, [pc, #532]	; (800342c <HAL_RCC_ClockConfig+0x254>)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	4313      	orrs	r3, r2
 800321a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800321c:	4b83      	ldr	r3, [pc, #524]	; (800342c <HAL_RCC_ClockConfig+0x254>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d001      	beq.n	800322e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e0f9      	b.n	8003422 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d008      	beq.n	800324c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800323a:	4b7d      	ldr	r3, [pc, #500]	; (8003430 <HAL_RCC_ClockConfig+0x258>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	497a      	ldr	r1, [pc, #488]	; (8003430 <HAL_RCC_ClockConfig+0x258>)
 8003248:	4313      	orrs	r3, r2
 800324a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 808e 	beq.w	8003376 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d107      	bne.n	8003272 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003262:	4b73      	ldr	r3, [pc, #460]	; (8003430 <HAL_RCC_ClockConfig+0x258>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d121      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e0d7      	b.n	8003422 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b03      	cmp	r3, #3
 8003278:	d107      	bne.n	800328a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800327a:	4b6d      	ldr	r3, [pc, #436]	; (8003430 <HAL_RCC_ClockConfig+0x258>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d115      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e0cb      	b.n	8003422 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d107      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003292:	4b67      	ldr	r3, [pc, #412]	; (8003430 <HAL_RCC_ClockConfig+0x258>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d109      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e0bf      	b.n	8003422 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032a2:	4b63      	ldr	r3, [pc, #396]	; (8003430 <HAL_RCC_ClockConfig+0x258>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e0b7      	b.n	8003422 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032b2:	4b5f      	ldr	r3, [pc, #380]	; (8003430 <HAL_RCC_ClockConfig+0x258>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f023 0203 	bic.w	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	495c      	ldr	r1, [pc, #368]	; (8003430 <HAL_RCC_ClockConfig+0x258>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c4:	f7fd fbfc 	bl	8000ac0 <HAL_GetTick>
 80032c8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d112      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032d2:	e00a      	b.n	80032ea <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d4:	f7fd fbf4 	bl	8000ac0 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e09b      	b.n	8003422 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032ea:	4b51      	ldr	r3, [pc, #324]	; (8003430 <HAL_RCC_ClockConfig+0x258>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 030c 	and.w	r3, r3, #12
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d1ee      	bne.n	80032d4 <HAL_RCC_ClockConfig+0xfc>
 80032f6:	e03e      	b.n	8003376 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d112      	bne.n	8003326 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003300:	e00a      	b.n	8003318 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003302:	f7fd fbdd 	bl	8000ac0 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003310:	4293      	cmp	r3, r2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e084      	b.n	8003422 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003318:	4b45      	ldr	r3, [pc, #276]	; (8003430 <HAL_RCC_ClockConfig+0x258>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 030c 	and.w	r3, r3, #12
 8003320:	2b0c      	cmp	r3, #12
 8003322:	d1ee      	bne.n	8003302 <HAL_RCC_ClockConfig+0x12a>
 8003324:	e027      	b.n	8003376 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d11d      	bne.n	800336a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800332e:	e00a      	b.n	8003346 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003330:	f7fd fbc6 	bl	8000ac0 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	f241 3288 	movw	r2, #5000	; 0x1388
 800333e:	4293      	cmp	r3, r2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e06d      	b.n	8003422 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003346:	4b3a      	ldr	r3, [pc, #232]	; (8003430 <HAL_RCC_ClockConfig+0x258>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	2b04      	cmp	r3, #4
 8003350:	d1ee      	bne.n	8003330 <HAL_RCC_ClockConfig+0x158>
 8003352:	e010      	b.n	8003376 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003354:	f7fd fbb4 	bl	8000ac0 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e05b      	b.n	8003422 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800336a:	4b31      	ldr	r3, [pc, #196]	; (8003430 <HAL_RCC_ClockConfig+0x258>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1ee      	bne.n	8003354 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003376:	4b2d      	ldr	r3, [pc, #180]	; (800342c <HAL_RCC_ClockConfig+0x254>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d219      	bcs.n	80033b8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d105      	bne.n	8003396 <HAL_RCC_ClockConfig+0x1be>
 800338a:	4b28      	ldr	r3, [pc, #160]	; (800342c <HAL_RCC_ClockConfig+0x254>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a27      	ldr	r2, [pc, #156]	; (800342c <HAL_RCC_ClockConfig+0x254>)
 8003390:	f043 0304 	orr.w	r3, r3, #4
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	4b25      	ldr	r3, [pc, #148]	; (800342c <HAL_RCC_ClockConfig+0x254>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 0201 	bic.w	r2, r3, #1
 800339e:	4923      	ldr	r1, [pc, #140]	; (800342c <HAL_RCC_ClockConfig+0x254>)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a6:	4b21      	ldr	r3, [pc, #132]	; (800342c <HAL_RCC_ClockConfig+0x254>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e034      	b.n	8003422 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c4:	4b1a      	ldr	r3, [pc, #104]	; (8003430 <HAL_RCC_ClockConfig+0x258>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4917      	ldr	r1, [pc, #92]	; (8003430 <HAL_RCC_ClockConfig+0x258>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d009      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033e2:	4b13      	ldr	r3, [pc, #76]	; (8003430 <HAL_RCC_ClockConfig+0x258>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	490f      	ldr	r1, [pc, #60]	; (8003430 <HAL_RCC_ClockConfig+0x258>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033f6:	f000 f823 	bl	8003440 <HAL_RCC_GetSysClockFreq>
 80033fa:	4602      	mov	r2, r0
 80033fc:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <HAL_RCC_ClockConfig+0x258>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	490b      	ldr	r1, [pc, #44]	; (8003434 <HAL_RCC_ClockConfig+0x25c>)
 8003408:	5ccb      	ldrb	r3, [r1, r3]
 800340a:	fa22 f303 	lsr.w	r3, r2, r3
 800340e:	4a0a      	ldr	r2, [pc, #40]	; (8003438 <HAL_RCC_ClockConfig+0x260>)
 8003410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003412:	4b0a      	ldr	r3, [pc, #40]	; (800343c <HAL_RCC_ClockConfig+0x264>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd fb06 	bl	8000a28 <HAL_InitTick>
 800341c:	4603      	mov	r3, r0
 800341e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003420:	7afb      	ldrb	r3, [r7, #11]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40023c00 	.word	0x40023c00
 8003430:	40023800 	.word	0x40023800
 8003434:	08008c90 	.word	0x08008c90
 8003438:	20000000 	.word	0x20000000
 800343c:	20000004 	.word	0x20000004

08003440 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003444:	b092      	sub	sp, #72	; 0x48
 8003446:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003448:	4b79      	ldr	r3, [pc, #484]	; (8003630 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800344e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003450:	f003 030c 	and.w	r3, r3, #12
 8003454:	2b0c      	cmp	r3, #12
 8003456:	d00d      	beq.n	8003474 <HAL_RCC_GetSysClockFreq+0x34>
 8003458:	2b0c      	cmp	r3, #12
 800345a:	f200 80d5 	bhi.w	8003608 <HAL_RCC_GetSysClockFreq+0x1c8>
 800345e:	2b04      	cmp	r3, #4
 8003460:	d002      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x28>
 8003462:	2b08      	cmp	r3, #8
 8003464:	d003      	beq.n	800346e <HAL_RCC_GetSysClockFreq+0x2e>
 8003466:	e0cf      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003468:	4b72      	ldr	r3, [pc, #456]	; (8003634 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800346a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800346c:	e0da      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800346e:	4b71      	ldr	r3, [pc, #452]	; (8003634 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003470:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003472:	e0d7      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003476:	0c9b      	lsrs	r3, r3, #18
 8003478:	f003 020f 	and.w	r2, r3, #15
 800347c:	4b6e      	ldr	r3, [pc, #440]	; (8003638 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800347e:	5c9b      	ldrb	r3, [r3, r2]
 8003480:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003484:	0d9b      	lsrs	r3, r3, #22
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	3301      	adds	r3, #1
 800348c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800348e:	4b68      	ldr	r3, [pc, #416]	; (8003630 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d05d      	beq.n	8003556 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800349a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349c:	2200      	movs	r2, #0
 800349e:	4618      	mov	r0, r3
 80034a0:	4611      	mov	r1, r2
 80034a2:	4604      	mov	r4, r0
 80034a4:	460d      	mov	r5, r1
 80034a6:	4622      	mov	r2, r4
 80034a8:	462b      	mov	r3, r5
 80034aa:	f04f 0000 	mov.w	r0, #0
 80034ae:	f04f 0100 	mov.w	r1, #0
 80034b2:	0159      	lsls	r1, r3, #5
 80034b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034b8:	0150      	lsls	r0, r2, #5
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4621      	mov	r1, r4
 80034c0:	1a51      	subs	r1, r2, r1
 80034c2:	6139      	str	r1, [r7, #16]
 80034c4:	4629      	mov	r1, r5
 80034c6:	eb63 0301 	sbc.w	r3, r3, r1
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034d8:	4659      	mov	r1, fp
 80034da:	018b      	lsls	r3, r1, #6
 80034dc:	4651      	mov	r1, sl
 80034de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034e2:	4651      	mov	r1, sl
 80034e4:	018a      	lsls	r2, r1, #6
 80034e6:	46d4      	mov	ip, sl
 80034e8:	ebb2 080c 	subs.w	r8, r2, ip
 80034ec:	4659      	mov	r1, fp
 80034ee:	eb63 0901 	sbc.w	r9, r3, r1
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003506:	4690      	mov	r8, r2
 8003508:	4699      	mov	r9, r3
 800350a:	4623      	mov	r3, r4
 800350c:	eb18 0303 	adds.w	r3, r8, r3
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	462b      	mov	r3, r5
 8003514:	eb49 0303 	adc.w	r3, r9, r3
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	f04f 0300 	mov.w	r3, #0
 8003522:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003526:	4629      	mov	r1, r5
 8003528:	028b      	lsls	r3, r1, #10
 800352a:	4620      	mov	r0, r4
 800352c:	4629      	mov	r1, r5
 800352e:	4604      	mov	r4, r0
 8003530:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003534:	4601      	mov	r1, r0
 8003536:	028a      	lsls	r2, r1, #10
 8003538:	4610      	mov	r0, r2
 800353a:	4619      	mov	r1, r3
 800353c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800353e:	2200      	movs	r2, #0
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
 8003542:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003544:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003548:	f7fc fe20 	bl	800018c <__aeabi_uldivmod>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	4613      	mov	r3, r2
 8003552:	647b      	str	r3, [r7, #68]	; 0x44
 8003554:	e055      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003558:	2200      	movs	r2, #0
 800355a:	623b      	str	r3, [r7, #32]
 800355c:	627a      	str	r2, [r7, #36]	; 0x24
 800355e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003562:	4642      	mov	r2, r8
 8003564:	464b      	mov	r3, r9
 8003566:	f04f 0000 	mov.w	r0, #0
 800356a:	f04f 0100 	mov.w	r1, #0
 800356e:	0159      	lsls	r1, r3, #5
 8003570:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003574:	0150      	lsls	r0, r2, #5
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	46c4      	mov	ip, r8
 800357c:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003580:	4640      	mov	r0, r8
 8003582:	4649      	mov	r1, r9
 8003584:	468c      	mov	ip, r1
 8003586:	eb63 0b0c 	sbc.w	fp, r3, ip
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003596:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800359a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800359e:	ebb2 040a 	subs.w	r4, r2, sl
 80035a2:	eb63 050b 	sbc.w	r5, r3, fp
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	00eb      	lsls	r3, r5, #3
 80035b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035b4:	00e2      	lsls	r2, r4, #3
 80035b6:	4614      	mov	r4, r2
 80035b8:	461d      	mov	r5, r3
 80035ba:	4603      	mov	r3, r0
 80035bc:	18e3      	adds	r3, r4, r3
 80035be:	603b      	str	r3, [r7, #0]
 80035c0:	460b      	mov	r3, r1
 80035c2:	eb45 0303 	adc.w	r3, r5, r3
 80035c6:	607b      	str	r3, [r7, #4]
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035d4:	4629      	mov	r1, r5
 80035d6:	028b      	lsls	r3, r1, #10
 80035d8:	4620      	mov	r0, r4
 80035da:	4629      	mov	r1, r5
 80035dc:	4604      	mov	r4, r0
 80035de:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80035e2:	4601      	mov	r1, r0
 80035e4:	028a      	lsls	r2, r1, #10
 80035e6:	4610      	mov	r0, r2
 80035e8:	4619      	mov	r1, r3
 80035ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ec:	2200      	movs	r2, #0
 80035ee:	61bb      	str	r3, [r7, #24]
 80035f0:	61fa      	str	r2, [r7, #28]
 80035f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035f6:	f7fc fdc9 	bl	800018c <__aeabi_uldivmod>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4613      	mov	r3, r2
 8003600:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8003602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003604:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003606:	e00d      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003608:	4b09      	ldr	r3, [pc, #36]	; (8003630 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	0b5b      	lsrs	r3, r3, #13
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003616:	3301      	adds	r3, #1
 8003618:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003622:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003626:	4618      	mov	r0, r3
 8003628:	3748      	adds	r7, #72	; 0x48
 800362a:	46bd      	mov	sp, r7
 800362c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003630:	40023800 	.word	0x40023800
 8003634:	00f42400 	.word	0x00f42400
 8003638:	08008c84 	.word	0x08008c84

0800363c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003640:	4b02      	ldr	r3, [pc, #8]	; (800364c <HAL_RCC_GetHCLKFreq+0x10>)
 8003642:	681b      	ldr	r3, [r3, #0]
}
 8003644:	4618      	mov	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr
 800364c:	20000000 	.word	0x20000000

08003650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003654:	f7ff fff2 	bl	800363c <HAL_RCC_GetHCLKFreq>
 8003658:	4602      	mov	r2, r0
 800365a:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	0a1b      	lsrs	r3, r3, #8
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	4903      	ldr	r1, [pc, #12]	; (8003674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003666:	5ccb      	ldrb	r3, [r1, r3]
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800366c:	4618      	mov	r0, r3
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40023800 	.word	0x40023800
 8003674:	08008ca0 	.word	0x08008ca0

08003678 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003680:	2300      	movs	r3, #0
 8003682:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003684:	4b29      	ldr	r3, [pc, #164]	; (800372c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d12c      	bne.n	80036ea <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003690:	4b26      	ldr	r3, [pc, #152]	; (800372c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800369c:	4b24      	ldr	r3, [pc, #144]	; (8003730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	e016      	b.n	80036d6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a8:	4b20      	ldr	r3, [pc, #128]	; (800372c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	4a1f      	ldr	r2, [pc, #124]	; (800372c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b2:	6253      	str	r3, [r2, #36]	; 0x24
 80036b4:	4b1d      	ldr	r3, [pc, #116]	; (800372c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80036c0:	4b1b      	ldr	r3, [pc, #108]	; (8003730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80036c8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ca:	4b18      	ldr	r3, [pc, #96]	; (800372c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	4a17      	ldr	r2, [pc, #92]	; (800372c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80036dc:	d105      	bne.n	80036ea <RCC_SetFlashLatencyFromMSIRange+0x72>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80036e4:	d101      	bne.n	80036ea <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80036e6:	2301      	movs	r3, #1
 80036e8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d105      	bne.n	80036fc <RCC_SetFlashLatencyFromMSIRange+0x84>
 80036f0:	4b10      	ldr	r3, [pc, #64]	; (8003734 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a0f      	ldr	r2, [pc, #60]	; (8003734 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036f6:	f043 0304 	orr.w	r3, r3, #4
 80036fa:	6013      	str	r3, [r2, #0]
 80036fc:	4b0d      	ldr	r3, [pc, #52]	; (8003734 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f023 0201 	bic.w	r2, r3, #1
 8003704:	490b      	ldr	r1, [pc, #44]	; (8003734 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800370c:	4b09      	ldr	r3, [pc, #36]	; (8003734 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	429a      	cmp	r2, r3
 8003718:	d001      	beq.n	800371e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	371c      	adds	r7, #28
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40023800 	.word	0x40023800
 8003730:	40007000 	.word	0x40007000
 8003734:	40023c00 	.word	0x40023c00

08003738 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e06e      	b.n	8003828 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	2b00      	cmp	r3, #0
 8003750:	d108      	bne.n	8003764 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800375a:	d009      	beq.n	8003770 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	61da      	str	r2, [r3, #28]
 8003762:	e005      	b.n	8003770 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d106      	bne.n	8003790 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fd f85c 	bl	8000848 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f4:	ea42 0103 	orr.w	r1, r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	0c1a      	lsrs	r2, r3, #16
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f002 0204 	and.w	r2, r2, #4
 8003816:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003840:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003844:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	b29a      	uxth	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr

0800385c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003864:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003868:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	b29b      	uxth	r3, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	b29b      	uxth	r3, r3
 800387a:	4013      	ands	r3, r2
 800387c:	b29a      	uxth	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003890:	b084      	sub	sp, #16
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	f107 0014 	add.w	r0, r7, #20
 800389e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	b004      	add	sp, #16
 80038ce:	4770      	bx	lr

080038d0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b09b      	sub	sp, #108	; 0x6c
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80038f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	78db      	ldrb	r3, [r3, #3]
 80038fe:	2b03      	cmp	r3, #3
 8003900:	d81f      	bhi.n	8003942 <USB_ActivateEndpoint+0x72>
 8003902:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <USB_ActivateEndpoint+0x38>)
 8003904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003908:	08003919 	.word	0x08003919
 800390c:	08003935 	.word	0x08003935
 8003910:	0800394b 	.word	0x0800394b
 8003914:	08003927 	.word	0x08003927
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003918:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800391c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003920:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003924:	e012      	b.n	800394c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003926:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800392a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800392e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003932:	e00b      	b.n	800394c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003934:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003938:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800393c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003940:	e004      	b.n	800394c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003948:	e000      	b.n	800394c <USB_ActivateEndpoint+0x7c>
      break;
 800394a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	441a      	add	r2, r3
 8003956:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800395a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800395e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800396a:	b29b      	uxth	r3, r3
 800396c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	b29b      	uxth	r3, r3
 800397c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003984:	b29a      	uxth	r2, r3
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	b29b      	uxth	r3, r3
 800398c:	4313      	orrs	r3, r2
 800398e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	441a      	add	r2, r3
 800399c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80039a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	7b1b      	ldrb	r3, [r3, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f040 8149 	bne.w	8003c50 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	785b      	ldrb	r3, [r3, #1]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 8084 	beq.w	8003ad0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	461a      	mov	r2, r3
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	4413      	add	r3, r2
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	011a      	lsls	r2, r3, #4
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	88db      	ldrh	r3, [r3, #6]
 80039f0:	085b      	lsrs	r3, r3, #1
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	81fb      	strh	r3, [r7, #14]
 8003a0a:	89fb      	ldrh	r3, [r7, #14]
 8003a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d01b      	beq.n	8003a4c <USB_ActivateEndpoint+0x17c>
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	881b      	ldrh	r3, [r3, #0]
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2a:	81bb      	strh	r3, [r7, #12]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	441a      	add	r2, r3
 8003a36:	89bb      	ldrh	r3, [r7, #12]
 8003a38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	78db      	ldrb	r3, [r3, #3]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d020      	beq.n	8003a96 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a6a:	813b      	strh	r3, [r7, #8]
 8003a6c:	893b      	ldrh	r3, [r7, #8]
 8003a6e:	f083 0320 	eor.w	r3, r3, #32
 8003a72:	813b      	strh	r3, [r7, #8]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	441a      	add	r2, r3
 8003a7e:	893b      	ldrh	r3, [r7, #8]
 8003a80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	8013      	strh	r3, [r2, #0]
 8003a94:	e27f      	b.n	8003f96 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aac:	817b      	strh	r3, [r7, #10]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	441a      	add	r2, r3
 8003ab8:	897b      	ldrh	r3, [r7, #10]
 8003aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	8013      	strh	r3, [r2, #0]
 8003ace:	e262      	b.n	8003f96 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	461a      	mov	r2, r3
 8003ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae0:	4413      	add	r3, r2
 8003ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	011a      	lsls	r2, r3, #4
 8003aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003af2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	88db      	ldrh	r3, [r3, #6]
 8003af8:	085b      	lsrs	r3, r3, #1
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	461a      	mov	r2, r3
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	4413      	add	r3, r2
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	011a      	lsls	r2, r3, #4
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	4413      	add	r3, r2
 8003b22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b26:	623b      	str	r3, [r7, #32]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d112      	bne.n	8003b56 <USB_ActivateEndpoint+0x286>
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	801a      	strh	r2, [r3, #0]
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	801a      	strh	r2, [r3, #0]
 8003b54:	e02f      	b.n	8003bb6 <USB_ActivateEndpoint+0x2e6>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	2b3e      	cmp	r3, #62	; 0x3e
 8003b5c:	d813      	bhi.n	8003b86 <USB_ActivateEndpoint+0x2b6>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	085b      	lsrs	r3, r3, #1
 8003b64:	663b      	str	r3, [r7, #96]	; 0x60
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <USB_ActivateEndpoint+0x2a8>
 8003b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b74:	3301      	adds	r3, #1
 8003b76:	663b      	str	r3, [r7, #96]	; 0x60
 8003b78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	029b      	lsls	r3, r3, #10
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	801a      	strh	r2, [r3, #0]
 8003b84:	e017      	b.n	8003bb6 <USB_ActivateEndpoint+0x2e6>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	663b      	str	r3, [r7, #96]	; 0x60
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 031f 	and.w	r3, r3, #31
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d102      	bne.n	8003ba0 <USB_ActivateEndpoint+0x2d0>
 8003b9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	663b      	str	r3, [r7, #96]	; 0x60
 8003ba0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	029b      	lsls	r3, r3, #10
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	83fb      	strh	r3, [r7, #30]
 8003bc4:	8bfb      	ldrh	r3, [r7, #30]
 8003bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d01b      	beq.n	8003c06 <USB_ActivateEndpoint+0x336>
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be4:	83bb      	strh	r3, [r7, #28]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	441a      	add	r2, r3
 8003bf0:	8bbb      	ldrh	r3, [r7, #28]
 8003bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1c:	837b      	strh	r3, [r7, #26]
 8003c1e:	8b7b      	ldrh	r3, [r7, #26]
 8003c20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003c24:	837b      	strh	r3, [r7, #26]
 8003c26:	8b7b      	ldrh	r3, [r7, #26]
 8003c28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c2c:	837b      	strh	r3, [r7, #26]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	441a      	add	r2, r3
 8003c38:	8b7b      	ldrh	r3, [r7, #26]
 8003c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	8013      	strh	r3, [r2, #0]
 8003c4e:	e1a2      	b.n	8003f96 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c66:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	441a      	add	r2, r3
 8003c74:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c80:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c9c:	4413      	add	r3, r2
 8003c9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	011a      	lsls	r2, r3, #4
 8003ca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cae:	657b      	str	r3, [r7, #84]	; 0x54
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	891b      	ldrh	r3, [r3, #8]
 8003cb4:	085b      	lsrs	r3, r3, #1
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cbe:	801a      	strh	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	653b      	str	r3, [r7, #80]	; 0x50
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	461a      	mov	r2, r3
 8003cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cd0:	4413      	add	r3, r2
 8003cd2:	653b      	str	r3, [r7, #80]	; 0x50
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	011a      	lsls	r2, r3, #4
 8003cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	895b      	ldrh	r3, [r3, #10]
 8003ce8:	085b      	lsrs	r3, r3, #1
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	785b      	ldrb	r3, [r3, #1]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f040 8091 	bne.w	8003e20 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003d0c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d01b      	beq.n	8003d4e <USB_ActivateEndpoint+0x47e>
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	441a      	add	r2, r3
 8003d38:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	873b      	strh	r3, [r7, #56]	; 0x38
 8003d5c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d01b      	beq.n	8003d9e <USB_ActivateEndpoint+0x4ce>
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	441a      	add	r2, r3
 8003d88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003db6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003db8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003dbc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003dbe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003dc0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003dc4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	441a      	add	r2, r3
 8003dd0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003df8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dfc:	867b      	strh	r3, [r7, #50]	; 0x32
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	441a      	add	r2, r3
 8003e08:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	8013      	strh	r3, [r2, #0]
 8003e1e:	e0ba      	b.n	8003f96 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003e30:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d01d      	beq.n	8003e78 <USB_ActivateEndpoint+0x5a8>
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e52:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	441a      	add	r2, r3
 8003e60:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003e88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01d      	beq.n	8003ed0 <USB_ActivateEndpoint+0x600>
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eaa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	441a      	add	r2, r3
 8003eb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003ebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ec8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	78db      	ldrb	r3, [r3, #3]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d024      	beq.n	8003f22 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003ef2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003ef6:	f083 0320 	eor.w	r3, r3, #32
 8003efa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	441a      	add	r2, r3
 8003f08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	8013      	strh	r3, [r2, #0]
 8003f20:	e01d      	b.n	8003f5e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f38:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	441a      	add	r2, r3
 8003f46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f74:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	441a      	add	r2, r3
 8003f80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003f96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	376c      	adds	r7, #108	; 0x6c
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr

08003fa4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b08d      	sub	sp, #52	; 0x34
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	7b1b      	ldrb	r3, [r3, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f040 808e 	bne.w	80040d4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	785b      	ldrb	r3, [r3, #1]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d044      	beq.n	800404a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	81bb      	strh	r3, [r7, #12]
 8003fce:	89bb      	ldrh	r3, [r7, #12]
 8003fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d01b      	beq.n	8004010 <USB_DeactivateEndpoint+0x6c>
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fee:	817b      	strh	r3, [r7, #10]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	441a      	add	r2, r3
 8003ffa:	897b      	ldrh	r3, [r7, #10]
 8003ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004004:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004008:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800400c:	b29b      	uxth	r3, r3
 800400e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	b29b      	uxth	r3, r3
 800401e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004026:	813b      	strh	r3, [r7, #8]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	441a      	add	r2, r3
 8004032:	893b      	ldrh	r3, [r7, #8]
 8004034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800403c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004044:	b29b      	uxth	r3, r3
 8004046:	8013      	strh	r3, [r2, #0]
 8004048:	e192      	b.n	8004370 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	827b      	strh	r3, [r7, #18]
 8004058:	8a7b      	ldrh	r3, [r7, #18]
 800405a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d01b      	beq.n	800409a <USB_DeactivateEndpoint+0xf6>
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	b29b      	uxth	r3, r3
 8004070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004078:	823b      	strh	r3, [r7, #16]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	441a      	add	r2, r3
 8004084:	8a3b      	ldrh	r3, [r7, #16]
 8004086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800408a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800408e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004096:	b29b      	uxth	r3, r3
 8004098:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b0:	81fb      	strh	r3, [r7, #14]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	441a      	add	r2, r3
 80040bc:	89fb      	ldrh	r3, [r7, #14]
 80040be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	8013      	strh	r3, [r2, #0]
 80040d2:	e14d      	b.n	8004370 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	785b      	ldrb	r3, [r3, #1]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f040 80a5 	bne.w	8004228 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	843b      	strh	r3, [r7, #32]
 80040ec:	8c3b      	ldrh	r3, [r7, #32]
 80040ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d01b      	beq.n	800412e <USB_DeactivateEndpoint+0x18a>
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	b29b      	uxth	r3, r3
 8004104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410c:	83fb      	strh	r3, [r7, #30]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	441a      	add	r2, r3
 8004118:	8bfb      	ldrh	r3, [r7, #30]
 800411a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800411e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004122:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800412a:	b29b      	uxth	r3, r3
 800412c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	83bb      	strh	r3, [r7, #28]
 800413c:	8bbb      	ldrh	r3, [r7, #28]
 800413e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004142:	2b00      	cmp	r3, #0
 8004144:	d01b      	beq.n	800417e <USB_DeactivateEndpoint+0x1da>
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	b29b      	uxth	r3, r3
 8004154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415c:	837b      	strh	r3, [r7, #26]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	441a      	add	r2, r3
 8004168:	8b7b      	ldrh	r3, [r7, #26]
 800416a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800416e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004176:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800417a:	b29b      	uxth	r3, r3
 800417c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4413      	add	r3, r2
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	b29b      	uxth	r3, r3
 800418c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004194:	833b      	strh	r3, [r7, #24]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	441a      	add	r2, r3
 80041a0:	8b3b      	ldrh	r3, [r7, #24]
 80041a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041cc:	82fb      	strh	r3, [r7, #22]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	441a      	add	r2, r3
 80041d8:	8afb      	ldrh	r3, [r7, #22]
 80041da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004204:	82bb      	strh	r3, [r7, #20]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	441a      	add	r2, r3
 8004210:	8abb      	ldrh	r3, [r7, #20]
 8004212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800421a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800421e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004222:	b29b      	uxth	r3, r3
 8004224:	8013      	strh	r3, [r2, #0]
 8004226:	e0a3      	b.n	8004370 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004236:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004238:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d01b      	beq.n	8004278 <USB_DeactivateEndpoint+0x2d4>
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	b29b      	uxth	r3, r3
 800424e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004256:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	441a      	add	r2, r3
 8004262:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800426c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004274:	b29b      	uxth	r3, r3
 8004276:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004286:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428c:	2b00      	cmp	r3, #0
 800428e:	d01b      	beq.n	80042c8 <USB_DeactivateEndpoint+0x324>
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	b29b      	uxth	r3, r3
 800429e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a6:	853b      	strh	r3, [r7, #40]	; 0x28
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	441a      	add	r2, r3
 80042b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80042b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	441a      	add	r2, r3
 80042ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80042ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	b29b      	uxth	r3, r3
 800430e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004316:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	441a      	add	r2, r3
 8004322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800432c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004334:	b29b      	uxth	r3, r3
 8004336:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	b29b      	uxth	r3, r3
 8004346:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800434a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	441a      	add	r2, r3
 800435a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800435c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800436c:	b29b      	uxth	r3, r3
 800436e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3734      	adds	r7, #52	; 0x34
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr

0800437c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b0cc      	sub	sp, #304	; 0x130
 8004380:	af00      	add	r7, sp, #0
 8004382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004386:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800438a:	6018      	str	r0, [r3, #0]
 800438c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004390:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004394:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800439a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	785b      	ldrb	r3, [r3, #1]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	f041 817d 	bne.w	80056a2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80043a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699a      	ldr	r2, [r3, #24]
 80043b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d908      	bls.n	80043d6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80043c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80043d4:	e007      	b.n	80043e6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80043d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80043e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	7b1b      	ldrb	r3, [r3, #12]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d152      	bne.n	800449c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80043f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6959      	ldr	r1, [r3, #20]
 8004402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004406:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	88da      	ldrh	r2, [r3, #6]
 800440e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004412:	b29b      	uxth	r3, r3
 8004414:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004418:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800441c:	6800      	ldr	r0, [r0, #0]
 800441e:	f001 ff0e 	bl	800623e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004426:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800442a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800442e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004432:	6812      	ldr	r2, [r2, #0]
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800443a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004444:	b29b      	uxth	r3, r3
 8004446:	4619      	mov	r1, r3
 8004448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800444c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004450:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004454:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004458:	6812      	ldr	r2, [r2, #0]
 800445a:	440a      	add	r2, r1
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004462:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	011a      	lsls	r2, r3, #4
 800446c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004470:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4413      	add	r3, r2
 8004478:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800447c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004480:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800448a:	b29a      	uxth	r2, r3
 800448c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004490:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	801a      	strh	r2, [r3, #0]
 8004498:	f001 b8b5 	b.w	8005606 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800449c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	78db      	ldrb	r3, [r3, #3]
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	f040 84c6 	bne.w	8004e3a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80044ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6a1a      	ldr	r2, [r3, #32]
 80044ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	f240 8443 	bls.w	8004d52 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80044cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80044f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004504:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	441a      	add	r2, r3
 8004510:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800451c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004524:	b29b      	uxth	r3, r3
 8004526:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800452c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6a1a      	ldr	r2, [r3, #32]
 8004534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004538:	1ad2      	subs	r2, r2, r3
 800453a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800453e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800454a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004554:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	b29b      	uxth	r3, r3
 8004564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 823e 	beq.w	80049ea <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800456e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004572:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004576:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800457a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800457e:	6812      	ldr	r2, [r2, #0]
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004586:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	785b      	ldrb	r3, [r3, #1]
 800458e:	2b00      	cmp	r3, #0
 8004590:	f040 809a 	bne.w	80046c8 <USB_EPStartXfer+0x34c>
 8004594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800459c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80045a0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80045a4:	6812      	ldr	r2, [r2, #0]
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	4619      	mov	r1, r3
 80045ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80045c6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	440a      	add	r2, r1
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	011a      	lsls	r2, r3, #4
 80045de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4413      	add	r3, r2
 80045ea:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80045ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d122      	bne.n	8004646 <USB_EPStartXfer+0x2ca>
 8004600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004604:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	b29b      	uxth	r3, r3
 800460e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004612:	b29a      	uxth	r2, r3
 8004614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004618:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	801a      	strh	r2, [r3, #0]
 8004620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004624:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	b29b      	uxth	r3, r3
 800462e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004636:	b29a      	uxth	r2, r3
 8004638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800463c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	801a      	strh	r2, [r3, #0]
 8004644:	e079      	b.n	800473a <USB_EPStartXfer+0x3be>
 8004646:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800464a:	2b3e      	cmp	r3, #62	; 0x3e
 800464c:	d81b      	bhi.n	8004686 <USB_EPStartXfer+0x30a>
 800464e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004652:	085b      	lsrs	r3, r3, #1
 8004654:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004658:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d004      	beq.n	800466e <USB_EPStartXfer+0x2f2>
 8004664:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004668:	3301      	adds	r3, #1
 800466a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800466e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004672:	b29b      	uxth	r3, r3
 8004674:	029b      	lsls	r3, r3, #10
 8004676:	b29a      	uxth	r2, r3
 8004678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800467c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	801a      	strh	r2, [r3, #0]
 8004684:	e059      	b.n	800473a <USB_EPStartXfer+0x3be>
 8004686:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004690:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004694:	f003 031f 	and.w	r3, r3, #31
 8004698:	2b00      	cmp	r3, #0
 800469a:	d104      	bne.n	80046a6 <USB_EPStartXfer+0x32a>
 800469c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046a0:	3b01      	subs	r3, #1
 80046a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80046a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	029b      	lsls	r3, r3, #10
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	801a      	strh	r2, [r3, #0]
 80046c6:	e038      	b.n	800473a <USB_EPStartXfer+0x3be>
 80046c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	785b      	ldrb	r3, [r3, #1]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d130      	bne.n	800473a <USB_EPStartXfer+0x3be>
 80046d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	4619      	mov	r1, r3
 80046ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ee:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80046f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80046f6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	440a      	add	r2, r1
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004704:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	011a      	lsls	r2, r3, #4
 800470e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004712:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4413      	add	r3, r2
 800471a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800471e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004722:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800472c:	b29a      	uxth	r2, r3
 800472e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004732:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800473a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800473e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	895b      	ldrh	r3, [r3, #10]
 8004746:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800474a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800474e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6959      	ldr	r1, [r3, #20]
 8004756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800475a:	b29b      	uxth	r3, r3
 800475c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004760:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004764:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004768:	6800      	ldr	r0, [r0, #0]
 800476a:	f001 fd68 	bl	800623e <USB_WritePMA>
            ep->xfer_buff += len;
 800476e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004772:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695a      	ldr	r2, [r3, #20]
 800477a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800477e:	441a      	add	r2, r3
 8004780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004784:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800478c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004790:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6a1a      	ldr	r2, [r3, #32]
 8004798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800479c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d90f      	bls.n	80047c8 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80047a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6a1a      	ldr	r2, [r3, #32]
 80047b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047b8:	1ad2      	subs	r2, r2, r3
 80047ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	621a      	str	r2, [r3, #32]
 80047c6:	e00e      	b.n	80047e6 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80047c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80047d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2200      	movs	r2, #0
 80047e4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80047e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	785b      	ldrb	r3, [r3, #1]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f040 809a 	bne.w	800492c <USB_EPStartXfer+0x5b0>
 80047f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004800:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004804:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004808:	6812      	ldr	r2, [r2, #0]
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004810:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800481a:	b29b      	uxth	r3, r3
 800481c:	4619      	mov	r1, r3
 800481e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004822:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004826:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800482a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	440a      	add	r2, r1
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004838:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	011a      	lsls	r2, r3, #4
 8004842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004846:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4413      	add	r3, r2
 800484e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004856:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004860:	2b00      	cmp	r3, #0
 8004862:	d122      	bne.n	80048aa <USB_EPStartXfer+0x52e>
 8004864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004868:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	881b      	ldrh	r3, [r3, #0]
 8004870:	b29b      	uxth	r3, r3
 8004872:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004876:	b29a      	uxth	r2, r3
 8004878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800487c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	801a      	strh	r2, [r3, #0]
 8004884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004888:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	b29b      	uxth	r3, r3
 8004892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800489a:	b29a      	uxth	r2, r3
 800489c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	801a      	strh	r2, [r3, #0]
 80048a8:	e083      	b.n	80049b2 <USB_EPStartXfer+0x636>
 80048aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048ae:	2b3e      	cmp	r3, #62	; 0x3e
 80048b0:	d81b      	bhi.n	80048ea <USB_EPStartXfer+0x56e>
 80048b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048b6:	085b      	lsrs	r3, r3, #1
 80048b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80048bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d004      	beq.n	80048d2 <USB_EPStartXfer+0x556>
 80048c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80048cc:	3301      	adds	r3, #1
 80048ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80048d2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	029b      	lsls	r3, r3, #10
 80048da:	b29a      	uxth	r2, r3
 80048dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	801a      	strh	r2, [r3, #0]
 80048e8:	e063      	b.n	80049b2 <USB_EPStartXfer+0x636>
 80048ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80048f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048f8:	f003 031f 	and.w	r3, r3, #31
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d104      	bne.n	800490a <USB_EPStartXfer+0x58e>
 8004900:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004904:	3b01      	subs	r3, #1
 8004906:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800490a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800490e:	b29b      	uxth	r3, r3
 8004910:	029b      	lsls	r3, r3, #10
 8004912:	b29b      	uxth	r3, r3
 8004914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800491c:	b29a      	uxth	r2, r3
 800491e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004922:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	801a      	strh	r2, [r3, #0]
 800492a:	e042      	b.n	80049b2 <USB_EPStartXfer+0x636>
 800492c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004930:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	785b      	ldrb	r3, [r3, #1]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d13a      	bne.n	80049b2 <USB_EPStartXfer+0x636>
 800493c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004940:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004944:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004948:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800494c:	6812      	ldr	r2, [r2, #0]
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004954:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800495e:	b29b      	uxth	r3, r3
 8004960:	4619      	mov	r1, r3
 8004962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004966:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800496a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800496e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	440a      	add	r2, r1
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800497c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	011a      	lsls	r2, r3, #4
 8004986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800498a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4413      	add	r3, r2
 8004992:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800499a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80049b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	891b      	ldrh	r3, [r3, #8]
 80049be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80049c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6959      	ldr	r1, [r3, #20]
 80049ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80049d8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80049dc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80049e0:	6800      	ldr	r0, [r0, #0]
 80049e2:	f001 fc2c 	bl	800623e <USB_WritePMA>
 80049e6:	f000 be0e 	b.w	8005606 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80049ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	785b      	ldrb	r3, [r3, #1]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d16d      	bne.n	8004ad6 <USB_EPStartXfer+0x75a>
 80049fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	461a      	mov	r2, r3
 8004a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a1a:	4413      	add	r3, r2
 8004a1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	011a      	lsls	r2, r3, #4
 8004a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a2e:	4413      	add	r3, r2
 8004a30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a34:	647b      	str	r3, [r7, #68]	; 0x44
 8004a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d112      	bne.n	8004a64 <USB_EPStartXfer+0x6e8>
 8004a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a4c:	801a      	strh	r2, [r3, #0]
 8004a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a60:	801a      	strh	r2, [r3, #0]
 8004a62:	e063      	b.n	8004b2c <USB_EPStartXfer+0x7b0>
 8004a64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a68:	2b3e      	cmp	r3, #62	; 0x3e
 8004a6a:	d817      	bhi.n	8004a9c <USB_EPStartXfer+0x720>
 8004a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a70:	085b      	lsrs	r3, r3, #1
 8004a72:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d004      	beq.n	8004a8c <USB_EPStartXfer+0x710>
 8004a82:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a86:	3301      	adds	r3, #1
 8004a88:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	029b      	lsls	r3, r3, #10
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a98:	801a      	strh	r2, [r3, #0]
 8004a9a:	e047      	b.n	8004b2c <USB_EPStartXfer+0x7b0>
 8004a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aa0:	095b      	lsrs	r3, r3, #5
 8004aa2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aaa:	f003 031f 	and.w	r3, r3, #31
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d104      	bne.n	8004abc <USB_EPStartXfer+0x740>
 8004ab2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004abc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	029b      	lsls	r3, r3, #10
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ad2:	801a      	strh	r2, [r3, #0]
 8004ad4:	e02a      	b.n	8004b2c <USB_EPStartXfer+0x7b0>
 8004ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ada:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	785b      	ldrb	r3, [r3, #1]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d122      	bne.n	8004b2c <USB_EPStartXfer+0x7b0>
 8004ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	653b      	str	r3, [r7, #80]	; 0x50
 8004af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b06:	4413      	add	r3, r2
 8004b08:	653b      	str	r3, [r7, #80]	; 0x50
 8004b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	011a      	lsls	r2, r3, #4
 8004b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b2a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	891b      	ldrh	r3, [r3, #8]
 8004b38:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6959      	ldr	r1, [r3, #20]
 8004b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004b52:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004b56:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004b5a:	6800      	ldr	r0, [r0, #0]
 8004b5c:	f001 fb6f 	bl	800623e <USB_WritePMA>
            ep->xfer_buff += len;
 8004b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	695a      	ldr	r2, [r3, #20]
 8004b6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b70:	441a      	add	r2, r3
 8004b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6a1a      	ldr	r2, [r3, #32]
 8004b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d90f      	bls.n	8004bba <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8004b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6a1a      	ldr	r2, [r3, #32]
 8004ba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004baa:	1ad2      	subs	r2, r2, r3
 8004bac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	621a      	str	r2, [r3, #32]
 8004bb8:	e00e      	b.n	8004bd8 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8004bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	643b      	str	r3, [r7, #64]	; 0x40
 8004be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004be8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	785b      	ldrb	r3, [r3, #1]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d16d      	bne.n	8004cd0 <USB_EPStartXfer+0x954>
 8004bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	461a      	mov	r2, r3
 8004c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c14:	4413      	add	r3, r2
 8004c16:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	011a      	lsls	r2, r3, #4
 8004c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c28:	4413      	add	r3, r2
 8004c2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d112      	bne.n	8004c5e <USB_EPStartXfer+0x8e2>
 8004c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c46:	801a      	strh	r2, [r3, #0]
 8004c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c5a:	801a      	strh	r2, [r3, #0]
 8004c5c:	e05d      	b.n	8004d1a <USB_EPStartXfer+0x99e>
 8004c5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c62:	2b3e      	cmp	r3, #62	; 0x3e
 8004c64:	d817      	bhi.n	8004c96 <USB_EPStartXfer+0x91a>
 8004c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c6a:	085b      	lsrs	r3, r3, #1
 8004c6c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d004      	beq.n	8004c86 <USB_EPStartXfer+0x90a>
 8004c7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c80:	3301      	adds	r3, #1
 8004c82:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004c86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	029b      	lsls	r3, r3, #10
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c92:	801a      	strh	r2, [r3, #0]
 8004c94:	e041      	b.n	8004d1a <USB_EPStartXfer+0x99e>
 8004c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c9a:	095b      	lsrs	r3, r3, #5
 8004c9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ca4:	f003 031f 	and.w	r3, r3, #31
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d104      	bne.n	8004cb6 <USB_EPStartXfer+0x93a>
 8004cac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004cb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	029b      	lsls	r3, r3, #10
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ccc:	801a      	strh	r2, [r3, #0]
 8004cce:	e024      	b.n	8004d1a <USB_EPStartXfer+0x99e>
 8004cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	785b      	ldrb	r3, [r3, #1]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d11c      	bne.n	8004d1a <USB_EPStartXfer+0x99e>
 8004ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf4:	4413      	add	r3, r2
 8004cf6:	643b      	str	r3, [r7, #64]	; 0x40
 8004cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	011a      	lsls	r2, r3, #4
 8004d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d08:	4413      	add	r3, r2
 8004d0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	895b      	ldrh	r3, [r3, #10]
 8004d26:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6959      	ldr	r1, [r3, #20]
 8004d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004d40:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004d44:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004d48:	6800      	ldr	r0, [r0, #0]
 8004d4a:	f001 fa78 	bl	800623e <USB_WritePMA>
 8004d4e:	f000 bc5a 	b.w	8005606 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d88:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	441a      	add	r2, r3
 8004da6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	461a      	mov	r2, r3
 8004ddc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dde:	4413      	add	r3, r2
 8004de0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	011a      	lsls	r2, r3, #4
 8004df0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004df2:	4413      	add	r3, r2
 8004df4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004df8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e02:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004e04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	891b      	ldrh	r3, [r3, #8]
 8004e10:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6959      	ldr	r1, [r3, #20]
 8004e20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004e2a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004e2e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004e32:	6800      	ldr	r0, [r0, #0]
 8004e34:	f001 fa03 	bl	800623e <USB_WritePMA>
 8004e38:	e3e5      	b.n	8005606 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e60:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	441a      	add	r2, r3
 8004e7e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e8a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6a1a      	ldr	r2, [r3, #32]
 8004ea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ea6:	1ad2      	subs	r2, r2, r3
 8004ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 81bc 	beq.w	8005254 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	785b      	ldrb	r3, [r3, #1]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d16d      	bne.n	8004fd6 <USB_EPStartXfer+0xc5a>
 8004efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004efe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	461a      	mov	r2, r3
 8004f18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f1a:	4413      	add	r3, r2
 8004f1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	011a      	lsls	r2, r3, #4
 8004f2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f2e:	4413      	add	r3, r2
 8004f30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f34:	677b      	str	r3, [r7, #116]	; 0x74
 8004f36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d112      	bne.n	8004f64 <USB_EPStartXfer+0xbe8>
 8004f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f4c:	801a      	strh	r2, [r3, #0]
 8004f4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f60:	801a      	strh	r2, [r3, #0]
 8004f62:	e060      	b.n	8005026 <USB_EPStartXfer+0xcaa>
 8004f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f68:	2b3e      	cmp	r3, #62	; 0x3e
 8004f6a:	d817      	bhi.n	8004f9c <USB_EPStartXfer+0xc20>
 8004f6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f70:	085b      	lsrs	r3, r3, #1
 8004f72:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d004      	beq.n	8004f8c <USB_EPStartXfer+0xc10>
 8004f82:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004f86:	3301      	adds	r3, #1
 8004f88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004f8c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	029b      	lsls	r3, r3, #10
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f98:	801a      	strh	r2, [r3, #0]
 8004f9a:	e044      	b.n	8005026 <USB_EPStartXfer+0xcaa>
 8004f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004fa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004faa:	f003 031f 	and.w	r3, r3, #31
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d104      	bne.n	8004fbc <USB_EPStartXfer+0xc40>
 8004fb2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004fbc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	029b      	lsls	r3, r3, #10
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fd2:	801a      	strh	r2, [r3, #0]
 8004fd4:	e027      	b.n	8005026 <USB_EPStartXfer+0xcaa>
 8004fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	785b      	ldrb	r3, [r3, #1]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d11f      	bne.n	8005026 <USB_EPStartXfer+0xcaa>
 8004fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	011a      	lsls	r2, r3, #4
 8005010:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005014:	4413      	add	r3, r2
 8005016:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800501a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800501c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005020:	b29a      	uxth	r2, r3
 8005022:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005024:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	895b      	ldrh	r3, [r3, #10]
 8005032:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800503a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6959      	ldr	r1, [r3, #20]
 8005042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005046:	b29b      	uxth	r3, r3
 8005048:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800504c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005050:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005054:	6800      	ldr	r0, [r0, #0]
 8005056:	f001 f8f2 	bl	800623e <USB_WritePMA>
          ep->xfer_buff += len;
 800505a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800505e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	695a      	ldr	r2, [r3, #20]
 8005066:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800506a:	441a      	add	r2, r3
 800506c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005070:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800507c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6a1a      	ldr	r2, [r3, #32]
 8005084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005088:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	429a      	cmp	r2, r3
 8005092:	d90f      	bls.n	80050b4 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005098:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6a1a      	ldr	r2, [r3, #32]
 80050a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a4:	1ad2      	subs	r2, r2, r3
 80050a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	621a      	str	r2, [r3, #32]
 80050b2:	e00e      	b.n	80050d2 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80050b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80050c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2200      	movs	r2, #0
 80050d0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80050d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 8295 	beq.w	8005606 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	785b      	ldrb	r3, [r3, #1]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d16d      	bne.n	80051c8 <USB_EPStartXfer+0xe4c>
 80050ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80050f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005106:	b29b      	uxth	r3, r3
 8005108:	461a      	mov	r2, r3
 800510a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800510c:	4413      	add	r3, r2
 800510e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	011a      	lsls	r2, r3, #4
 800511e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005120:	4413      	add	r3, r2
 8005122:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005126:	667b      	str	r3, [r7, #100]	; 0x64
 8005128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800512c:	2b00      	cmp	r3, #0
 800512e:	d112      	bne.n	8005156 <USB_EPStartXfer+0xdda>
 8005130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	b29b      	uxth	r3, r3
 8005136:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800513a:	b29a      	uxth	r2, r3
 800513c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800513e:	801a      	strh	r2, [r3, #0]
 8005140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	b29b      	uxth	r3, r3
 8005146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800514a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800514e:	b29a      	uxth	r2, r3
 8005150:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005152:	801a      	strh	r2, [r3, #0]
 8005154:	e063      	b.n	800521e <USB_EPStartXfer+0xea2>
 8005156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800515a:	2b3e      	cmp	r3, #62	; 0x3e
 800515c:	d817      	bhi.n	800518e <USB_EPStartXfer+0xe12>
 800515e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005162:	085b      	lsrs	r3, r3, #1
 8005164:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d004      	beq.n	800517e <USB_EPStartXfer+0xe02>
 8005174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005178:	3301      	adds	r3, #1
 800517a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800517e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005182:	b29b      	uxth	r3, r3
 8005184:	029b      	lsls	r3, r3, #10
 8005186:	b29a      	uxth	r2, r3
 8005188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800518a:	801a      	strh	r2, [r3, #0]
 800518c:	e047      	b.n	800521e <USB_EPStartXfer+0xea2>
 800518e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800519c:	f003 031f 	and.w	r3, r3, #31
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d104      	bne.n	80051ae <USB_EPStartXfer+0xe32>
 80051a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a8:	3b01      	subs	r3, #1
 80051aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80051ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	029b      	lsls	r3, r3, #10
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051c4:	801a      	strh	r2, [r3, #0]
 80051c6:	e02a      	b.n	800521e <USB_EPStartXfer+0xea2>
 80051c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	785b      	ldrb	r3, [r3, #1]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d122      	bne.n	800521e <USB_EPStartXfer+0xea2>
 80051d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	673b      	str	r3, [r7, #112]	; 0x70
 80051e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	461a      	mov	r2, r3
 80051f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051f8:	4413      	add	r3, r2
 80051fa:	673b      	str	r3, [r7, #112]	; 0x70
 80051fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005200:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	011a      	lsls	r2, r3, #4
 800520a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800520c:	4413      	add	r3, r2
 800520e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005212:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005214:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005218:	b29a      	uxth	r2, r3
 800521a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800521c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800521e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005222:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	891b      	ldrh	r3, [r3, #8]
 800522a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800522e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6959      	ldr	r1, [r3, #20]
 800523a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800523e:	b29b      	uxth	r3, r3
 8005240:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005244:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005248:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800524c:	6800      	ldr	r0, [r0, #0]
 800524e:	f000 fff6 	bl	800623e <USB_WritePMA>
 8005252:	e1d8      	b.n	8005606 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005258:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	785b      	ldrb	r3, [r3, #1]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d178      	bne.n	8005356 <USB_EPStartXfer+0xfda>
 8005264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005268:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005276:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005280:	b29b      	uxth	r3, r3
 8005282:	461a      	mov	r2, r3
 8005284:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005288:	4413      	add	r3, r2
 800528a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800528e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005292:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	011a      	lsls	r2, r3, #4
 800529c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052a0:	4413      	add	r3, r2
 80052a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80052aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d116      	bne.n	80052e0 <USB_EPStartXfer+0xf64>
 80052b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052be:	b29a      	uxth	r2, r3
 80052c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052c4:	801a      	strh	r2, [r3, #0]
 80052c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052dc:	801a      	strh	r2, [r3, #0]
 80052de:	e06b      	b.n	80053b8 <USB_EPStartXfer+0x103c>
 80052e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052e4:	2b3e      	cmp	r3, #62	; 0x3e
 80052e6:	d818      	bhi.n	800531a <USB_EPStartXfer+0xf9e>
 80052e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ec:	085b      	lsrs	r3, r3, #1
 80052ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80052f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d004      	beq.n	8005308 <USB_EPStartXfer+0xf8c>
 80052fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005302:	3301      	adds	r3, #1
 8005304:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005308:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800530c:	b29b      	uxth	r3, r3
 800530e:	029b      	lsls	r3, r3, #10
 8005310:	b29a      	uxth	r2, r3
 8005312:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005316:	801a      	strh	r2, [r3, #0]
 8005318:	e04e      	b.n	80053b8 <USB_EPStartXfer+0x103c>
 800531a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800531e:	095b      	lsrs	r3, r3, #5
 8005320:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005324:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005328:	f003 031f 	and.w	r3, r3, #31
 800532c:	2b00      	cmp	r3, #0
 800532e:	d104      	bne.n	800533a <USB_EPStartXfer+0xfbe>
 8005330:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005334:	3b01      	subs	r3, #1
 8005336:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800533a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800533e:	b29b      	uxth	r3, r3
 8005340:	029b      	lsls	r3, r3, #10
 8005342:	b29b      	uxth	r3, r3
 8005344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800534c:	b29a      	uxth	r2, r3
 800534e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005352:	801a      	strh	r2, [r3, #0]
 8005354:	e030      	b.n	80053b8 <USB_EPStartXfer+0x103c>
 8005356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	785b      	ldrb	r3, [r3, #1]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d128      	bne.n	80053b8 <USB_EPStartXfer+0x103c>
 8005366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005378:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005382:	b29b      	uxth	r3, r3
 8005384:	461a      	mov	r2, r3
 8005386:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800538a:	4413      	add	r3, r2
 800538c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005394:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	011a      	lsls	r2, r3, #4
 800539e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80053a2:	4413      	add	r3, r2
 80053a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80053b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	891b      	ldrh	r3, [r3, #8]
 80053c4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6959      	ldr	r1, [r3, #20]
 80053d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053d8:	b29b      	uxth	r3, r3
 80053da:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80053de:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80053e2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80053e6:	6800      	ldr	r0, [r0, #0]
 80053e8:	f000 ff29 	bl	800623e <USB_WritePMA>
          ep->xfer_buff += len;
 80053ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695a      	ldr	r2, [r3, #20]
 80053f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053fc:	441a      	add	r2, r3
 80053fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800540a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800540e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6a1a      	ldr	r2, [r3, #32]
 8005416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800541a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	429a      	cmp	r2, r3
 8005424:	d90f      	bls.n	8005446 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6a1a      	ldr	r2, [r3, #32]
 8005432:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005436:	1ad2      	subs	r2, r2, r3
 8005438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	621a      	str	r2, [r3, #32]
 8005444:	e00e      	b.n	8005464 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800544a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800545a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2200      	movs	r2, #0
 8005462:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005464:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 80cc 	beq.w	8005606 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800546e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005472:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800547c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005480:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	785b      	ldrb	r3, [r3, #1]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d178      	bne.n	800557e <USB_EPStartXfer+0x1202>
 800548c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005490:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800549a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800549e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	461a      	mov	r2, r3
 80054ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054b0:	4413      	add	r3, r2
 80054b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	011a      	lsls	r2, r3, #4
 80054c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054c8:	4413      	add	r3, r2
 80054ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d116      	bne.n	8005508 <USB_EPStartXfer+0x118c>
 80054da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054ec:	801a      	strh	r2, [r3, #0]
 80054ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054fe:	b29a      	uxth	r2, r3
 8005500:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005504:	801a      	strh	r2, [r3, #0]
 8005506:	e064      	b.n	80055d2 <USB_EPStartXfer+0x1256>
 8005508:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800550c:	2b3e      	cmp	r3, #62	; 0x3e
 800550e:	d818      	bhi.n	8005542 <USB_EPStartXfer+0x11c6>
 8005510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005514:	085b      	lsrs	r3, r3, #1
 8005516:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800551a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d004      	beq.n	8005530 <USB_EPStartXfer+0x11b4>
 8005526:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800552a:	3301      	adds	r3, #1
 800552c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005530:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005534:	b29b      	uxth	r3, r3
 8005536:	029b      	lsls	r3, r3, #10
 8005538:	b29a      	uxth	r2, r3
 800553a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800553e:	801a      	strh	r2, [r3, #0]
 8005540:	e047      	b.n	80055d2 <USB_EPStartXfer+0x1256>
 8005542:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005546:	095b      	lsrs	r3, r3, #5
 8005548:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800554c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005550:	f003 031f 	and.w	r3, r3, #31
 8005554:	2b00      	cmp	r3, #0
 8005556:	d104      	bne.n	8005562 <USB_EPStartXfer+0x11e6>
 8005558:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800555c:	3b01      	subs	r3, #1
 800555e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005562:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005566:	b29b      	uxth	r3, r3
 8005568:	029b      	lsls	r3, r3, #10
 800556a:	b29b      	uxth	r3, r3
 800556c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005574:	b29a      	uxth	r2, r3
 8005576:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800557a:	801a      	strh	r2, [r3, #0]
 800557c:	e029      	b.n	80055d2 <USB_EPStartXfer+0x1256>
 800557e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005582:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	785b      	ldrb	r3, [r3, #1]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d121      	bne.n	80055d2 <USB_EPStartXfer+0x1256>
 800558e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005592:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800559c:	b29b      	uxth	r3, r3
 800559e:	461a      	mov	r2, r3
 80055a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055a4:	4413      	add	r3, r2
 80055a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	011a      	lsls	r2, r3, #4
 80055b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055bc:	4413      	add	r3, r2
 80055be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80055c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80055d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	895b      	ldrh	r3, [r3, #10]
 80055de:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6959      	ldr	r1, [r3, #20]
 80055ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80055f8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80055fc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005600:	6800      	ldr	r0, [r0, #0]
 8005602:	f000 fe1c 	bl	800623e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005614:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	b29b      	uxth	r3, r3
 8005624:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005628:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800562c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005634:	8013      	strh	r3, [r2, #0]
 8005636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800563a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800563e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005642:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005646:	8812      	ldrh	r2, [r2, #0]
 8005648:	f082 0210 	eor.w	r2, r2, #16
 800564c:	801a      	strh	r2, [r3, #0]
 800564e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005652:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005656:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800565a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800565e:	8812      	ldrh	r2, [r2, #0]
 8005660:	f082 0220 	eor.w	r2, r2, #32
 8005664:	801a      	strh	r2, [r3, #0]
 8005666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005674:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	441a      	add	r2, r3
 8005680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005684:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800568e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800569a:	b29b      	uxth	r3, r3
 800569c:	8013      	strh	r3, [r2, #0]
 800569e:	f000 bc9f 	b.w	8005fe0 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80056a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	7b1b      	ldrb	r3, [r3, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f040 80ae 	bne.w	8005810 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80056b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	699a      	ldr	r2, [r3, #24]
 80056c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d917      	bls.n	8005700 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80056d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80056e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	699a      	ldr	r2, [r3, #24]
 80056ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056f0:	1ad2      	subs	r2, r2, r3
 80056f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	619a      	str	r2, [r3, #24]
 80056fe:	e00e      	b.n	800571e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005704:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005714:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2200      	movs	r2, #0
 800571c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800571e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005722:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800572c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005730:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800573a:	b29b      	uxth	r3, r3
 800573c:	461a      	mov	r2, r3
 800573e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005742:	4413      	add	r3, r2
 8005744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800574c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	011a      	lsls	r2, r3, #4
 8005756:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800575a:	4413      	add	r3, r2
 800575c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005760:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005768:	2b00      	cmp	r3, #0
 800576a:	d116      	bne.n	800579a <USB_EPStartXfer+0x141e>
 800576c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	b29b      	uxth	r3, r3
 8005774:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005778:	b29a      	uxth	r2, r3
 800577a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800577e:	801a      	strh	r2, [r3, #0]
 8005780:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	b29b      	uxth	r3, r3
 8005788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800578c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005790:	b29a      	uxth	r2, r3
 8005792:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005796:	801a      	strh	r2, [r3, #0]
 8005798:	e3e8      	b.n	8005f6c <USB_EPStartXfer+0x1bf0>
 800579a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800579e:	2b3e      	cmp	r3, #62	; 0x3e
 80057a0:	d818      	bhi.n	80057d4 <USB_EPStartXfer+0x1458>
 80057a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057a6:	085b      	lsrs	r3, r3, #1
 80057a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80057ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d004      	beq.n	80057c2 <USB_EPStartXfer+0x1446>
 80057b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057bc:	3301      	adds	r3, #1
 80057be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80057c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	029b      	lsls	r3, r3, #10
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057d0:	801a      	strh	r2, [r3, #0]
 80057d2:	e3cb      	b.n	8005f6c <USB_EPStartXfer+0x1bf0>
 80057d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d8:	095b      	lsrs	r3, r3, #5
 80057da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80057de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e2:	f003 031f 	and.w	r3, r3, #31
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d104      	bne.n	80057f4 <USB_EPStartXfer+0x1478>
 80057ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057ee:	3b01      	subs	r3, #1
 80057f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80057f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	029b      	lsls	r3, r3, #10
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005806:	b29a      	uxth	r2, r3
 8005808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800580c:	801a      	strh	r2, [r3, #0]
 800580e:	e3ad      	b.n	8005f6c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005814:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	78db      	ldrb	r3, [r3, #3]
 800581c:	2b02      	cmp	r3, #2
 800581e:	f040 8200 	bne.w	8005c22 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	785b      	ldrb	r3, [r3, #1]
 800582e:	2b00      	cmp	r3, #0
 8005830:	f040 8091 	bne.w	8005956 <USB_EPStartXfer+0x15da>
 8005834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005838:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005846:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005850:	b29b      	uxth	r3, r3
 8005852:	461a      	mov	r2, r3
 8005854:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005858:	4413      	add	r3, r2
 800585a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800585e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005862:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	011a      	lsls	r2, r3, #4
 800586c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005870:	4413      	add	r3, r2
 8005872:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005876:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800587a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d116      	bne.n	80058b8 <USB_EPStartXfer+0x153c>
 800588a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	b29b      	uxth	r3, r3
 8005892:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005896:	b29a      	uxth	r2, r3
 8005898:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800589c:	801a      	strh	r2, [r3, #0]
 800589e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058b4:	801a      	strh	r2, [r3, #0]
 80058b6:	e083      	b.n	80059c0 <USB_EPStartXfer+0x1644>
 80058b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	2b3e      	cmp	r3, #62	; 0x3e
 80058c6:	d820      	bhi.n	800590a <USB_EPStartXfer+0x158e>
 80058c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	085b      	lsrs	r3, r3, #1
 80058d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d004      	beq.n	80058f8 <USB_EPStartXfer+0x157c>
 80058ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f2:	3301      	adds	r3, #1
 80058f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	029b      	lsls	r3, r3, #10
 8005900:	b29a      	uxth	r2, r3
 8005902:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005906:	801a      	strh	r2, [r3, #0]
 8005908:	e05a      	b.n	80059c0 <USB_EPStartXfer+0x1644>
 800590a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	095b      	lsrs	r3, r3, #5
 8005918:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800591c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005920:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	f003 031f 	and.w	r3, r3, #31
 800592c:	2b00      	cmp	r3, #0
 800592e:	d104      	bne.n	800593a <USB_EPStartXfer+0x15be>
 8005930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005934:	3b01      	subs	r3, #1
 8005936:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800593a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800593e:	b29b      	uxth	r3, r3
 8005940:	029b      	lsls	r3, r3, #10
 8005942:	b29b      	uxth	r3, r3
 8005944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800594c:	b29a      	uxth	r2, r3
 800594e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005952:	801a      	strh	r2, [r3, #0]
 8005954:	e034      	b.n	80059c0 <USB_EPStartXfer+0x1644>
 8005956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800595a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	785b      	ldrb	r3, [r3, #1]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d12c      	bne.n	80059c0 <USB_EPStartXfer+0x1644>
 8005966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800596a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005978:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005982:	b29b      	uxth	r3, r3
 8005984:	461a      	mov	r2, r3
 8005986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800598a:	4413      	add	r3, r2
 800598c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005994:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	011a      	lsls	r2, r3, #4
 800599e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059a2:	4413      	add	r3, r2
 80059a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80059be:	801a      	strh	r2, [r3, #0]
 80059c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	785b      	ldrb	r3, [r3, #1]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f040 8091 	bne.w	8005b02 <USB_EPStartXfer+0x1786>
 80059e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80059ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a04:	4413      	add	r3, r2
 8005a06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	011a      	lsls	r2, r3, #4
 8005a18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d116      	bne.n	8005a64 <USB_EPStartXfer+0x16e8>
 8005a36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a48:	801a      	strh	r2, [r3, #0]
 8005a4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a60:	801a      	strh	r2, [r3, #0]
 8005a62:	e07c      	b.n	8005b5e <USB_EPStartXfer+0x17e2>
 8005a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	2b3e      	cmp	r3, #62	; 0x3e
 8005a72:	d820      	bhi.n	8005ab6 <USB_EPStartXfer+0x173a>
 8005a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	085b      	lsrs	r3, r3, #1
 8005a82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d004      	beq.n	8005aa4 <USB_EPStartXfer+0x1728>
 8005a9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005aa4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	029b      	lsls	r3, r3, #10
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ab2:	801a      	strh	r2, [r3, #0]
 8005ab4:	e053      	b.n	8005b5e <USB_EPStartXfer+0x17e2>
 8005ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	095b      	lsrs	r3, r3, #5
 8005ac4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005acc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	f003 031f 	and.w	r3, r3, #31
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d104      	bne.n	8005ae6 <USB_EPStartXfer+0x176a>
 8005adc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ae6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	029b      	lsls	r3, r3, #10
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005afe:	801a      	strh	r2, [r3, #0]
 8005b00:	e02d      	b.n	8005b5e <USB_EPStartXfer+0x17e2>
 8005b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	785b      	ldrb	r3, [r3, #1]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d125      	bne.n	8005b5e <USB_EPStartXfer+0x17e2>
 8005b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	461a      	mov	r2, r3
 8005b24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b28:	4413      	add	r3, r2
 8005b2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	011a      	lsls	r2, r3, #4
 8005b3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b40:	4413      	add	r3, r2
 8005b42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b5c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 81fe 	beq.w	8005f6c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b90:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d005      	beq.n	8005ba8 <USB_EPStartXfer+0x182c>
 8005b9c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10d      	bne.n	8005bc4 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ba8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f040 81db 	bne.w	8005f6c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005bb6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f040 81d4 	bne.w	8005f6c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bea:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	441a      	add	r2, r3
 8005c08:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	8013      	strh	r3, [r2, #0]
 8005c20:	e1a4      	b.n	8005f6c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005c22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	78db      	ldrb	r3, [r3, #3]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	f040 819a 	bne.w	8005f68 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005c34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	699a      	ldr	r2, [r3, #24]
 8005c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d917      	bls.n	8005c80 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8005c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	699a      	ldr	r2, [r3, #24]
 8005c6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c70:	1ad2      	subs	r2, r2, r3
 8005c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	619a      	str	r2, [r3, #24]
 8005c7e:	e00e      	b.n	8005c9e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8005c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	785b      	ldrb	r3, [r3, #1]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d178      	bne.n	8005da0 <USB_EPStartXfer+0x1a24>
 8005cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	461a      	mov	r2, r3
 8005cce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	011a      	lsls	r2, r3, #4
 8005ce6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005cea:	4413      	add	r3, r2
 8005cec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cf0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d116      	bne.n	8005d2a <USB_EPStartXfer+0x19ae>
 8005cfc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d0e:	801a      	strh	r2, [r3, #0]
 8005d10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d26:	801a      	strh	r2, [r3, #0]
 8005d28:	e06b      	b.n	8005e02 <USB_EPStartXfer+0x1a86>
 8005d2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d2e:	2b3e      	cmp	r3, #62	; 0x3e
 8005d30:	d818      	bhi.n	8005d64 <USB_EPStartXfer+0x19e8>
 8005d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d36:	085b      	lsrs	r3, r3, #1
 8005d38:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d004      	beq.n	8005d52 <USB_EPStartXfer+0x19d6>
 8005d48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	029b      	lsls	r3, r3, #10
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d60:	801a      	strh	r2, [r3, #0]
 8005d62:	e04e      	b.n	8005e02 <USB_EPStartXfer+0x1a86>
 8005d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d68:	095b      	lsrs	r3, r3, #5
 8005d6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d72:	f003 031f 	and.w	r3, r3, #31
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d104      	bne.n	8005d84 <USB_EPStartXfer+0x1a08>
 8005d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	029b      	lsls	r3, r3, #10
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d9c:	801a      	strh	r2, [r3, #0]
 8005d9e:	e030      	b.n	8005e02 <USB_EPStartXfer+0x1a86>
 8005da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	785b      	ldrb	r3, [r3, #1]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d128      	bne.n	8005e02 <USB_EPStartXfer+0x1a86>
 8005db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	011a      	lsls	r2, r3, #4
 8005de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dec:	4413      	add	r3, r2
 8005dee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005df2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e00:	801a      	strh	r2, [r3, #0]
 8005e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	785b      	ldrb	r3, [r3, #1]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d178      	bne.n	8005f12 <USB_EPStartXfer+0x1b96>
 8005e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e44:	4413      	add	r3, r2
 8005e46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	011a      	lsls	r2, r3, #4
 8005e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d116      	bne.n	8005e9c <USB_EPStartXfer+0x1b20>
 8005e6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e80:	801a      	strh	r2, [r3, #0]
 8005e82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e98:	801a      	strh	r2, [r3, #0]
 8005e9a:	e067      	b.n	8005f6c <USB_EPStartXfer+0x1bf0>
 8005e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ea0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ea2:	d818      	bhi.n	8005ed6 <USB_EPStartXfer+0x1b5a>
 8005ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ea8:	085b      	lsrs	r3, r3, #1
 8005eaa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d004      	beq.n	8005ec4 <USB_EPStartXfer+0x1b48>
 8005eba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ec4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	029b      	lsls	r3, r3, #10
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ed2:	801a      	strh	r2, [r3, #0]
 8005ed4:	e04a      	b.n	8005f6c <USB_EPStartXfer+0x1bf0>
 8005ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eda:	095b      	lsrs	r3, r3, #5
 8005edc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ee0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ee4:	f003 031f 	and.w	r3, r3, #31
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d104      	bne.n	8005ef6 <USB_EPStartXfer+0x1b7a>
 8005eec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ef6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	029b      	lsls	r3, r3, #10
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f0e:	801a      	strh	r2, [r3, #0]
 8005f10:	e02c      	b.n	8005f6c <USB_EPStartXfer+0x1bf0>
 8005f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	785b      	ldrb	r3, [r3, #1]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d124      	bne.n	8005f6c <USB_EPStartXfer+0x1bf0>
 8005f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	461a      	mov	r2, r3
 8005f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f38:	4413      	add	r3, r2
 8005f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	011a      	lsls	r2, r3, #4
 8005f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f50:	4413      	add	r3, r2
 8005f52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f64:	801a      	strh	r2, [r3, #0]
 8005f66:	e001      	b.n	8005f6c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e03a      	b.n	8005fe2 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f92:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005f96:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005f9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f9e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005fa2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005fa6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005faa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	441a      	add	r2, r3
 8005fc8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005fcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	785b      	ldrb	r3, [r3, #1]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d020      	beq.n	8006040 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	b29b      	uxth	r3, r3
 800600c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006014:	81bb      	strh	r3, [r7, #12]
 8006016:	89bb      	ldrh	r3, [r7, #12]
 8006018:	f083 0310 	eor.w	r3, r3, #16
 800601c:	81bb      	strh	r3, [r7, #12]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	441a      	add	r2, r3
 8006028:	89bb      	ldrh	r3, [r7, #12]
 800602a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800602e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603a:	b29b      	uxth	r3, r3
 800603c:	8013      	strh	r3, [r2, #0]
 800603e:	e01f      	b.n	8006080 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	b29b      	uxth	r3, r3
 800604e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006056:	81fb      	strh	r3, [r7, #14]
 8006058:	89fb      	ldrh	r3, [r7, #14]
 800605a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800605e:	81fb      	strh	r3, [r7, #14]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	441a      	add	r2, r3
 800606a:	89fb      	ldrh	r3, [r7, #14]
 800606c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800607c:	b29b      	uxth	r3, r3
 800607e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	bc80      	pop	{r7}
 800608a:	4770      	bx	lr

0800608c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	7b1b      	ldrb	r3, [r3, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	f040 809d 	bne.w	80061da <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	785b      	ldrb	r3, [r3, #1]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d04c      	beq.n	8006142 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	823b      	strh	r3, [r7, #16]
 80060b6:	8a3b      	ldrh	r3, [r7, #16]
 80060b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01b      	beq.n	80060f8 <USB_EPClearStall+0x6c>
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d6:	81fb      	strh	r3, [r7, #14]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	441a      	add	r2, r3
 80060e2:	89fb      	ldrh	r3, [r7, #14]
 80060e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	78db      	ldrb	r3, [r3, #3]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d06c      	beq.n	80061da <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	881b      	ldrh	r3, [r3, #0]
 800610c:	b29b      	uxth	r3, r3
 800610e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006116:	81bb      	strh	r3, [r7, #12]
 8006118:	89bb      	ldrh	r3, [r7, #12]
 800611a:	f083 0320 	eor.w	r3, r3, #32
 800611e:	81bb      	strh	r3, [r7, #12]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	441a      	add	r2, r3
 800612a:	89bb      	ldrh	r3, [r7, #12]
 800612c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800613c:	b29b      	uxth	r3, r3
 800613e:	8013      	strh	r3, [r2, #0]
 8006140:	e04b      	b.n	80061da <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	881b      	ldrh	r3, [r3, #0]
 800614e:	82fb      	strh	r3, [r7, #22]
 8006150:	8afb      	ldrh	r3, [r7, #22]
 8006152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d01b      	beq.n	8006192 <USB_EPClearStall+0x106>
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	b29b      	uxth	r3, r3
 8006168:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800616c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006170:	82bb      	strh	r3, [r7, #20]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	441a      	add	r2, r3
 800617c:	8abb      	ldrh	r3, [r7, #20]
 800617e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006186:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800618a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800618e:	b29b      	uxth	r3, r3
 8006190:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a8:	827b      	strh	r3, [r7, #18]
 80061aa:	8a7b      	ldrh	r3, [r7, #18]
 80061ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061b0:	827b      	strh	r3, [r7, #18]
 80061b2:	8a7b      	ldrh	r3, [r7, #18]
 80061b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061b8:	827b      	strh	r3, [r7, #18]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	441a      	add	r2, r3
 80061c4:	8a7b      	ldrh	r3, [r7, #18]
 80061c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	371c      	adds	r7, #28
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bc80      	pop	{r7}
 80061e4:	4770      	bx	lr

080061e6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	460b      	mov	r3, r1
 80061f0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80061f2:	78fb      	ldrb	r3, [r7, #3]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d103      	bne.n	8006200 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2280      	movs	r2, #128	; 0x80
 80061fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	bc80      	pop	{r7}
 800620a:	4770      	bx	lr

0800620c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	bc80      	pop	{r7}
 800621e:	4770      	bx	lr

08006220 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800622e:	b29b      	uxth	r3, r3
 8006230:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006232:	68fb      	ldr	r3, [r7, #12]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	bc80      	pop	{r7}
 800623c:	4770      	bx	lr

0800623e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800623e:	b480      	push	{r7}
 8006240:	b08d      	sub	sp, #52	; 0x34
 8006242:	af00      	add	r7, sp, #0
 8006244:	60f8      	str	r0, [r7, #12]
 8006246:	60b9      	str	r1, [r7, #8]
 8006248:	4611      	mov	r1, r2
 800624a:	461a      	mov	r2, r3
 800624c:	460b      	mov	r3, r1
 800624e:	80fb      	strh	r3, [r7, #6]
 8006250:	4613      	mov	r3, r2
 8006252:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006254:	88bb      	ldrh	r3, [r7, #4]
 8006256:	3301      	adds	r3, #1
 8006258:	085b      	lsrs	r3, r3, #1
 800625a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006264:	88fb      	ldrh	r3, [r7, #6]
 8006266:	005a      	lsls	r2, r3, #1
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006270:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006276:	e01e      	b.n	80062b6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	3301      	adds	r3, #1
 8006282:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	b29b      	uxth	r3, r3
 800628a:	021b      	lsls	r3, r3, #8
 800628c:	b29b      	uxth	r3, r3
 800628e:	461a      	mov	r2, r3
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	4313      	orrs	r3, r2
 8006294:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	b29a      	uxth	r2, r3
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	3302      	adds	r3, #2
 80062a2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80062a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a6:	3302      	adds	r3, #2
 80062a8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	3301      	adds	r3, #1
 80062ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80062b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b2:	3b01      	subs	r3, #1
 80062b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1dd      	bne.n	8006278 <USB_WritePMA+0x3a>
  }
}
 80062bc:	bf00      	nop
 80062be:	bf00      	nop
 80062c0:	3734      	adds	r7, #52	; 0x34
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bc80      	pop	{r7}
 80062c6:	4770      	bx	lr

080062c8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b08b      	sub	sp, #44	; 0x2c
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	4611      	mov	r1, r2
 80062d4:	461a      	mov	r2, r3
 80062d6:	460b      	mov	r3, r1
 80062d8:	80fb      	strh	r3, [r7, #6]
 80062da:	4613      	mov	r3, r2
 80062dc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80062de:	88bb      	ldrh	r3, [r7, #4]
 80062e0:	085b      	lsrs	r3, r3, #1
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80062ee:	88fb      	ldrh	r3, [r7, #6]
 80062f0:	005a      	lsls	r2, r3, #1
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062fa:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006300:	e01b      	b.n	800633a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	b29b      	uxth	r3, r3
 8006308:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	3302      	adds	r3, #2
 800630e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	b2da      	uxtb	r2, r3
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	3301      	adds	r3, #1
 800631c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	0a1b      	lsrs	r3, r3, #8
 8006322:	b2da      	uxtb	r2, r3
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	3301      	adds	r3, #1
 800632c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	3302      	adds	r3, #2
 8006332:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	3b01      	subs	r3, #1
 8006338:	627b      	str	r3, [r7, #36]	; 0x24
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e0      	bne.n	8006302 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006340:	88bb      	ldrh	r3, [r7, #4]
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	b29b      	uxth	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	d007      	beq.n	800635c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800634c:	6a3b      	ldr	r3, [r7, #32]
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	b29b      	uxth	r3, r3
 8006352:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	b2da      	uxtb	r2, r3
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	701a      	strb	r2, [r3, #0]
  }
}
 800635c:	bf00      	nop
 800635e:	372c      	adds	r7, #44	; 0x2c
 8006360:	46bd      	mov	sp, r7
 8006362:	bc80      	pop	{r7}
 8006364:	4770      	bx	lr

08006366 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b084      	sub	sp, #16
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	460b      	mov	r3, r1
 8006370:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	7c1b      	ldrb	r3, [r3, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d115      	bne.n	80063aa <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800637e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006382:	2202      	movs	r2, #2
 8006384:	2181      	movs	r1, #129	; 0x81
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f001 fe2f 	bl	8007fea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006392:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006396:	2202      	movs	r2, #2
 8006398:	2101      	movs	r1, #1
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f001 fe25 	bl	8007fea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80063a8:	e012      	b.n	80063d0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80063aa:	2340      	movs	r3, #64	; 0x40
 80063ac:	2202      	movs	r2, #2
 80063ae:	2181      	movs	r1, #129	; 0x81
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f001 fe1a 	bl	8007fea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80063bc:	2340      	movs	r3, #64	; 0x40
 80063be:	2202      	movs	r2, #2
 80063c0:	2101      	movs	r1, #1
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f001 fe11 	bl	8007fea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80063d0:	2308      	movs	r3, #8
 80063d2:	2203      	movs	r2, #3
 80063d4:	2182      	movs	r1, #130	; 0x82
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f001 fe07 	bl	8007fea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80063e2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80063e6:	f001 ff27 	bl	8008238 <USBD_static_malloc>
 80063ea:	4602      	mov	r2, r0
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d102      	bne.n	8006402 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80063fc:	2301      	movs	r3, #1
 80063fe:	73fb      	strb	r3, [r7, #15]
 8006400:	e026      	b.n	8006450 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006408:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2200      	movs	r2, #0
 8006418:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2200      	movs	r2, #0
 8006420:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	7c1b      	ldrb	r3, [r3, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d109      	bne.n	8006440 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006436:	2101      	movs	r1, #1
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f001 fec7 	bl	80081cc <USBD_LL_PrepareReceive>
 800643e:	e007      	b.n	8006450 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006446:	2340      	movs	r3, #64	; 0x40
 8006448:	2101      	movs	r1, #1
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f001 febe 	bl	80081cc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006450:	7bfb      	ldrb	r3, [r7, #15]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b084      	sub	sp, #16
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
 8006462:	460b      	mov	r3, r1
 8006464:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800646a:	2181      	movs	r1, #129	; 0x81
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 fde2 	bl	8008036 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006478:	2101      	movs	r1, #1
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f001 fddb 	bl	8008036 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006488:	2182      	movs	r1, #130	; 0x82
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f001 fdd3 	bl	8008036 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00e      	beq.n	80064be <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80064b0:	4618      	mov	r0, r3
 80064b2:	f001 fecd 	bl	8008250 <USBD_static_free>
    pdev->pClassData = NULL;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80064be:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80064d8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80064de:	2300      	movs	r3, #0
 80064e0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d039      	beq.n	8006566 <USBD_CDC_Setup+0x9e>
 80064f2:	2b20      	cmp	r3, #32
 80064f4:	d17f      	bne.n	80065f6 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	88db      	ldrh	r3, [r3, #6]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d029      	beq.n	8006552 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	b25b      	sxtb	r3, r3
 8006504:	2b00      	cmp	r3, #0
 8006506:	da11      	bge.n	800652c <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006514:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	88d2      	ldrh	r2, [r2, #6]
 800651a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800651c:	6939      	ldr	r1, [r7, #16]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	88db      	ldrh	r3, [r3, #6]
 8006522:	461a      	mov	r2, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f001 f994 	bl	8007852 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800652a:	e06b      	b.n	8006604 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	785a      	ldrb	r2, [r3, #1]
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	88db      	ldrh	r3, [r3, #6]
 800653a:	b2da      	uxtb	r2, r3
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006542:	6939      	ldr	r1, [r7, #16]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	88db      	ldrh	r3, [r3, #6]
 8006548:	461a      	mov	r2, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f001 f9af 	bl	80078ae <USBD_CtlPrepareRx>
    break;
 8006550:	e058      	b.n	8006604 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	7850      	ldrb	r0, [r2, #1]
 800655e:	2200      	movs	r2, #0
 8006560:	6839      	ldr	r1, [r7, #0]
 8006562:	4798      	blx	r3
    break;
 8006564:	e04e      	b.n	8006604 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	785b      	ldrb	r3, [r3, #1]
 800656a:	2b0b      	cmp	r3, #11
 800656c:	d02e      	beq.n	80065cc <USBD_CDC_Setup+0x104>
 800656e:	2b0b      	cmp	r3, #11
 8006570:	dc38      	bgt.n	80065e4 <USBD_CDC_Setup+0x11c>
 8006572:	2b00      	cmp	r3, #0
 8006574:	d002      	beq.n	800657c <USBD_CDC_Setup+0xb4>
 8006576:	2b0a      	cmp	r3, #10
 8006578:	d014      	beq.n	80065a4 <USBD_CDC_Setup+0xdc>
 800657a:	e033      	b.n	80065e4 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006582:	2b03      	cmp	r3, #3
 8006584:	d107      	bne.n	8006596 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006586:	f107 030c 	add.w	r3, r7, #12
 800658a:	2202      	movs	r2, #2
 800658c:	4619      	mov	r1, r3
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f001 f95f 	bl	8007852 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006594:	e02e      	b.n	80065f4 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006596:	6839      	ldr	r1, [r7, #0]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f001 f8f0 	bl	800777e <USBD_CtlError>
			  ret = USBD_FAIL;
 800659e:	2302      	movs	r3, #2
 80065a0:	75fb      	strb	r3, [r7, #23]
      break;
 80065a2:	e027      	b.n	80065f4 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	d107      	bne.n	80065be <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80065ae:	f107 030f 	add.w	r3, r7, #15
 80065b2:	2201      	movs	r2, #1
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f001 f94b 	bl	8007852 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80065bc:	e01a      	b.n	80065f4 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 80065be:	6839      	ldr	r1, [r7, #0]
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f001 f8dc 	bl	800777e <USBD_CtlError>
			  ret = USBD_FAIL;
 80065c6:	2302      	movs	r3, #2
 80065c8:	75fb      	strb	r3, [r7, #23]
      break;
 80065ca:	e013      	b.n	80065f4 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	d00d      	beq.n	80065f2 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f001 f8d0 	bl	800777e <USBD_CtlError>
			  ret = USBD_FAIL;
 80065de:	2302      	movs	r3, #2
 80065e0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80065e2:	e006      	b.n	80065f2 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f001 f8c9 	bl	800777e <USBD_CtlError>
      ret = USBD_FAIL;
 80065ec:	2302      	movs	r3, #2
 80065ee:	75fb      	strb	r3, [r7, #23]
      break;
 80065f0:	e000      	b.n	80065f4 <USBD_CDC_Setup+0x12c>
      break;
 80065f2:	bf00      	nop
    }
    break;
 80065f4:	e006      	b.n	8006604 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f001 f8c0 	bl	800777e <USBD_CtlError>
    ret = USBD_FAIL;
 80065fe:	2302      	movs	r3, #2
 8006600:	75fb      	strb	r3, [r7, #23]
    break;
 8006602:	bf00      	nop
  }

  return ret;
 8006604:	7dfb      	ldrb	r3, [r7, #23]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b084      	sub	sp, #16
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
 8006616:	460b      	mov	r3, r1
 8006618:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006620:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006628:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006630:	2b00      	cmp	r3, #0
 8006632:	d03a      	beq.n	80066aa <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006634:	78fa      	ldrb	r2, [r7, #3]
 8006636:	6879      	ldr	r1, [r7, #4]
 8006638:	4613      	mov	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	440b      	add	r3, r1
 8006642:	331c      	adds	r3, #28
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d029      	beq.n	800669e <USBD_CDC_DataIn+0x90>
 800664a:	78fa      	ldrb	r2, [r7, #3]
 800664c:	6879      	ldr	r1, [r7, #4]
 800664e:	4613      	mov	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4413      	add	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	440b      	add	r3, r1
 8006658:	331c      	adds	r3, #28
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	78f9      	ldrb	r1, [r7, #3]
 800665e:	68b8      	ldr	r0, [r7, #8]
 8006660:	460b      	mov	r3, r1
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	440b      	add	r3, r1
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	4403      	add	r3, r0
 800666a:	3338      	adds	r3, #56	; 0x38
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	fbb2 f1f3 	udiv	r1, r2, r3
 8006672:	fb01 f303 	mul.w	r3, r1, r3
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	d110      	bne.n	800669e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800667c:	78fa      	ldrb	r2, [r7, #3]
 800667e:	6879      	ldr	r1, [r7, #4]
 8006680:	4613      	mov	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	440b      	add	r3, r1
 800668a:	331c      	adds	r3, #28
 800668c:	2200      	movs	r2, #0
 800668e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006690:	78f9      	ldrb	r1, [r7, #3]
 8006692:	2300      	movs	r3, #0
 8006694:	2200      	movs	r2, #0
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f001 fd75 	bl	8008186 <USBD_LL_Transmit>
 800669c:	e003      	b.n	80066a6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	e000      	b.n	80066ac <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80066aa:	2302      	movs	r3, #2
  }
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80066c8:	78fb      	ldrb	r3, [r7, #3]
 80066ca:	4619      	mov	r1, r3
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 fda0 	bl	8008212 <USBD_LL_GetRxDataSize>
 80066d2:	4602      	mov	r2, r0
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00d      	beq.n	8006700 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80066f8:	4611      	mov	r1, r2
 80066fa:	4798      	blx	r3

    return USBD_OK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	e000      	b.n	8006702 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006700:	2302      	movs	r3, #2
  }
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b084      	sub	sp, #16
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006718:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006720:	2b00      	cmp	r3, #0
 8006722:	d015      	beq.n	8006750 <USBD_CDC_EP0_RxReady+0x46>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800672a:	2bff      	cmp	r3, #255	; 0xff
 800672c:	d010      	beq.n	8006750 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800673c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006744:	b292      	uxth	r2, r2
 8006746:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	22ff      	movs	r2, #255	; 0xff
 800674c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
	...

0800675c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2243      	movs	r2, #67	; 0x43
 8006768:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800676a:	4b03      	ldr	r3, [pc, #12]	; (8006778 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800676c:	4618      	mov	r0, r3
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	bc80      	pop	{r7}
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	20000094 	.word	0x20000094

0800677c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2243      	movs	r2, #67	; 0x43
 8006788:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800678a:	4b03      	ldr	r3, [pc, #12]	; (8006798 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800678c:	4618      	mov	r0, r3
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	bc80      	pop	{r7}
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	20000050 	.word	0x20000050

0800679c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2243      	movs	r2, #67	; 0x43
 80067a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80067aa:	4b03      	ldr	r3, [pc, #12]	; (80067b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bc80      	pop	{r7}
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	200000d8 	.word	0x200000d8

080067bc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	220a      	movs	r2, #10
 80067c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80067ca:	4b03      	ldr	r3, [pc, #12]	; (80067d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bc80      	pop	{r7}
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	2000000c 	.word	0x2000000c

080067dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80067e6:	2302      	movs	r3, #2
 80067e8:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d005      	beq.n	80067fc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	bc80      	pop	{r7}
 8006806:	4770      	bx	lr

08006808 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	4613      	mov	r3, r2
 8006814:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800681c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006826:	88fa      	ldrh	r2, [r7, #6]
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	371c      	adds	r7, #28
 8006834:	46bd      	mov	sp, r7
 8006836:	bc80      	pop	{r7}
 8006838:	4770      	bx	lr

0800683a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800683a:	b480      	push	{r7}
 800683c:	b085      	sub	sp, #20
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800684a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	bc80      	pop	{r7}
 800685e:	4770      	bx	lr

08006860 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800686e:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006876:	2b00      	cmp	r3, #0
 8006878:	d01c      	beq.n	80068b4 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006880:	2b00      	cmp	r3, #0
 8006882:	d115      	bne.n	80068b0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2201      	movs	r2, #1
 8006888:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	2181      	movs	r1, #129	; 0x81
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f001 fc6d 	bl	8008186 <USBD_LL_Transmit>

      return USBD_OK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	e002      	b.n	80068b6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e000      	b.n	80068b6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80068b4:	2302      	movs	r3, #2
  }
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b084      	sub	sp, #16
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80068cc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d017      	beq.n	8006908 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	7c1b      	ldrb	r3, [r3, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d109      	bne.n	80068f4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068ea:	2101      	movs	r1, #1
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f001 fc6d 	bl	80081cc <USBD_LL_PrepareReceive>
 80068f2:	e007      	b.n	8006904 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068fa:	2340      	movs	r3, #64	; 0x40
 80068fc:	2101      	movs	r1, #1
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f001 fc64 	bl	80081cc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006904:	2300      	movs	r3, #0
 8006906:	e000      	b.n	800690a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006908:	2302      	movs	r3, #2
  }
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b084      	sub	sp, #16
 8006916:	af00      	add	r7, sp, #0
 8006918:	60f8      	str	r0, [r7, #12]
 800691a:	60b9      	str	r1, [r7, #8]
 800691c:	4613      	mov	r3, r2
 800691e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006926:	2302      	movs	r3, #2
 8006928:	e01a      	b.n	8006960 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	79fa      	ldrb	r2, [r7, #7]
 8006956:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f001 fad1 	bl	8007f00 <USBD_LL_Init>

  return USBD_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d006      	beq.n	800698a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006984:	2300      	movs	r3, #0
 8006986:	73fb      	strb	r3, [r7, #15]
 8006988:	e001      	b.n	800698e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800698a:	2302      	movs	r3, #2
 800698c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800698e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	bc80      	pop	{r7}
 8006998:	4770      	bx	lr

0800699a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b082      	sub	sp, #8
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f001 fb06 	bl	8007fb4 <USBD_LL_Start>

  return USBD_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bc80      	pop	{r7}
 80069c4:	4770      	bx	lr

080069c6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b084      	sub	sp, #16
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
 80069ce:	460b      	mov	r3, r1
 80069d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80069d2:	2302      	movs	r3, #2
 80069d4:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00c      	beq.n	80069fa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	78fa      	ldrb	r2, [r7, #3]
 80069ea:	4611      	mov	r1, r2
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	4798      	blx	r3
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80069fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	78fa      	ldrb	r2, [r7, #3]
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	4798      	blx	r3
  return USBD_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b082      	sub	sp, #8
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 fe62 	bl	8007706 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006a50:	461a      	mov	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006a5e:	f003 031f 	and.w	r3, r3, #31
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d016      	beq.n	8006a94 <USBD_LL_SetupStage+0x6a>
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d81c      	bhi.n	8006aa4 <USBD_LL_SetupStage+0x7a>
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d002      	beq.n	8006a74 <USBD_LL_SetupStage+0x4a>
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d008      	beq.n	8006a84 <USBD_LL_SetupStage+0x5a>
 8006a72:	e017      	b.n	8006aa4 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f9c5 	bl	8006e0c <USBD_StdDevReq>
    break;
 8006a82:	e01a      	b.n	8006aba <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fa27 	bl	8006ee0 <USBD_StdItfReq>
    break;
 8006a92:	e012      	b.n	8006aba <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fa67 	bl	8006f70 <USBD_StdEPReq>
    break;
 8006aa2:	e00a      	b.n	8006aba <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006aaa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 fade 	bl	8008074 <USBD_LL_StallEP>
    break;
 8006ab8:	bf00      	nop
  }

  return USBD_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	460b      	mov	r3, r1
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006ad2:	7afb      	ldrb	r3, [r7, #11]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d14b      	bne.n	8006b70 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006ade:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d134      	bne.n	8006b54 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	68da      	ldr	r2, [r3, #12]
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d919      	bls.n	8006b2a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	68da      	ldr	r2, [r3, #12]
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	1ad2      	subs	r2, r2, r3
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	68da      	ldr	r2, [r3, #12]
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d203      	bcs.n	8006b18 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	e002      	b.n	8006b1e <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	461a      	mov	r2, r3
 8006b20:	6879      	ldr	r1, [r7, #4]
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 fee1 	bl	80078ea <USBD_CtlContinueRx>
 8006b28:	e038      	b.n	8006b9c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00a      	beq.n	8006b4c <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	d105      	bne.n	8006b4c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 fede 	bl	800790e <USBD_CtlSendStatus>
 8006b52:	e023      	b.n	8006b9c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006b5a:	2b05      	cmp	r3, #5
 8006b5c:	d11e      	bne.n	8006b9c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006b66:	2100      	movs	r1, #0
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f001 fa83 	bl	8008074 <USBD_LL_StallEP>
 8006b6e:	e015      	b.n	8006b9c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00d      	beq.n	8006b98 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006b82:	2b03      	cmp	r3, #3
 8006b84:	d108      	bne.n	8006b98 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	7afa      	ldrb	r2, [r7, #11]
 8006b90:	4611      	mov	r1, r2
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	4798      	blx	r3
 8006b96:	e001      	b.n	8006b9c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e000      	b.n	8006b9e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b086      	sub	sp, #24
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	60f8      	str	r0, [r7, #12]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	607a      	str	r2, [r7, #4]
 8006bb2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006bb4:	7afb      	ldrb	r3, [r7, #11]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d17f      	bne.n	8006cba <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3314      	adds	r3, #20
 8006bbe:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d15c      	bne.n	8006c84 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	68da      	ldr	r2, [r3, #12]
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d915      	bls.n	8006c02 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	68da      	ldr	r2, [r3, #12]
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	1ad2      	subs	r2, r2, r3
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	461a      	mov	r2, r3
 8006bec:	6879      	ldr	r1, [r7, #4]
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f000 fe4b 	bl	800788a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f001 fae6 	bl	80081cc <USBD_LL_PrepareReceive>
 8006c00:	e04e      	b.n	8006ca0 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	6912      	ldr	r2, [r2, #16]
 8006c0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c0e:	fb01 f202 	mul.w	r2, r1, r2
 8006c12:	1a9b      	subs	r3, r3, r2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d11c      	bne.n	8006c52 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	689a      	ldr	r2, [r3, #8]
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d316      	bcc.n	8006c52 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	689a      	ldr	r2, [r3, #8]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d20f      	bcs.n	8006c52 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c32:	2200      	movs	r2, #0
 8006c34:	2100      	movs	r1, #0
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f000 fe27 	bl	800788a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006c44:	2300      	movs	r3, #0
 8006c46:	2200      	movs	r2, #0
 8006c48:	2100      	movs	r1, #0
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f001 fabe 	bl	80081cc <USBD_LL_PrepareReceive>
 8006c50:	e026      	b.n	8006ca0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00a      	beq.n	8006c74 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006c64:	2b03      	cmp	r3, #3
 8006c66:	d105      	bne.n	8006c74 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006c74:	2180      	movs	r1, #128	; 0x80
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f001 f9fc 	bl	8008074 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 fe59 	bl	8007934 <USBD_CtlReceiveStatus>
 8006c82:	e00d      	b.n	8006ca0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006c8a:	2b04      	cmp	r3, #4
 8006c8c:	d004      	beq.n	8006c98 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d103      	bne.n	8006ca0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006c98:	2180      	movs	r1, #128	; 0x80
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f001 f9ea 	bl	8008074 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d11d      	bne.n	8006ce6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f7ff fe81 	bl	80069b2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8006cb8:	e015      	b.n	8006ce6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00d      	beq.n	8006ce2 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d108      	bne.n	8006ce2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	7afa      	ldrb	r2, [r7, #11]
 8006cda:	4611      	mov	r1, r2
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	4798      	blx	r3
 8006ce0:	e001      	b.n	8006ce6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e000      	b.n	8006ce8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3718      	adds	r7, #24
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006cf8:	2340      	movs	r3, #64	; 0x40
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f001 f973 	bl	8007fea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2240      	movs	r2, #64	; 0x40
 8006d10:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d14:	2340      	movs	r3, #64	; 0x40
 8006d16:	2200      	movs	r2, #0
 8006d18:	2180      	movs	r1, #128	; 0x80
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f001 f965 	bl	8007fea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2240      	movs	r2, #64	; 0x40
 8006d2a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d009      	beq.n	8006d68 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	6852      	ldr	r2, [r2, #4]
 8006d60:	b2d2      	uxtb	r2, r2
 8006d62:	4611      	mov	r1, r2
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	4798      	blx	r3
  }

  return USBD_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	78fa      	ldrb	r2, [r7, #3]
 8006d82:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bc80      	pop	{r7}
 8006d8e:	4770      	bx	lr

08006d90 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2204      	movs	r2, #4
 8006da8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bc80      	pop	{r7}
 8006db6:	4770      	bx	lr

08006db8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bc80      	pop	{r7}
 8006dd6:	4770      	bx	lr

08006dd8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d10b      	bne.n	8006e02 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d005      	beq.n	8006e02 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e22:	2b40      	cmp	r3, #64	; 0x40
 8006e24:	d005      	beq.n	8006e32 <USBD_StdDevReq+0x26>
 8006e26:	2b40      	cmp	r3, #64	; 0x40
 8006e28:	d84f      	bhi.n	8006eca <USBD_StdDevReq+0xbe>
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d009      	beq.n	8006e42 <USBD_StdDevReq+0x36>
 8006e2e:	2b20      	cmp	r3, #32
 8006e30:	d14b      	bne.n	8006eca <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	6839      	ldr	r1, [r7, #0]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	4798      	blx	r3
    break;
 8006e40:	e048      	b.n	8006ed4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	785b      	ldrb	r3, [r3, #1]
 8006e46:	2b09      	cmp	r3, #9
 8006e48:	d839      	bhi.n	8006ebe <USBD_StdDevReq+0xb2>
 8006e4a:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <USBD_StdDevReq+0x44>)
 8006e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e50:	08006ea1 	.word	0x08006ea1
 8006e54:	08006eb5 	.word	0x08006eb5
 8006e58:	08006ebf 	.word	0x08006ebf
 8006e5c:	08006eab 	.word	0x08006eab
 8006e60:	08006ebf 	.word	0x08006ebf
 8006e64:	08006e83 	.word	0x08006e83
 8006e68:	08006e79 	.word	0x08006e79
 8006e6c:	08006ebf 	.word	0x08006ebf
 8006e70:	08006e97 	.word	0x08006e97
 8006e74:	08006e8d 	.word	0x08006e8d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f9da 	bl	8007234 <USBD_GetDescriptor>
      break;
 8006e80:	e022      	b.n	8006ec8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8006e82:	6839      	ldr	r1, [r7, #0]
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 facf 	bl	8007428 <USBD_SetAddress>
      break;
 8006e8a:	e01d      	b.n	8006ec8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8006e8c:	6839      	ldr	r1, [r7, #0]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fb0e 	bl	80074b0 <USBD_SetConfig>
      break;
 8006e94:	e018      	b.n	8006ec8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fb97 	bl	80075cc <USBD_GetConfig>
      break;
 8006e9e:	e013      	b.n	8006ec8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8006ea0:	6839      	ldr	r1, [r7, #0]
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fbc7 	bl	8007636 <USBD_GetStatus>
      break;
 8006ea8:	e00e      	b.n	8006ec8 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fbf5 	bl	800769c <USBD_SetFeature>
      break;
 8006eb2:	e009      	b.n	8006ec8 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fc04 	bl	80076c4 <USBD_ClrFeature>
      break;
 8006ebc:	e004      	b.n	8006ec8 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fc5c 	bl	800777e <USBD_CtlError>
      break;
 8006ec6:	bf00      	nop
    }
    break;
 8006ec8:	e004      	b.n	8006ed4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fc56 	bl	800777e <USBD_CtlError>
    break;
 8006ed2:	bf00      	nop
  }

  return ret;
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop

08006ee0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ef6:	2b40      	cmp	r3, #64	; 0x40
 8006ef8:	d005      	beq.n	8006f06 <USBD_StdItfReq+0x26>
 8006efa:	2b40      	cmp	r3, #64	; 0x40
 8006efc:	d82e      	bhi.n	8006f5c <USBD_StdItfReq+0x7c>
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <USBD_StdItfReq+0x26>
 8006f02:	2b20      	cmp	r3, #32
 8006f04:	d12a      	bne.n	8006f5c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d81d      	bhi.n	8006f4e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	889b      	ldrh	r3, [r3, #4]
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d813      	bhi.n	8006f44 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	6839      	ldr	r1, [r7, #0]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	4798      	blx	r3
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	88db      	ldrh	r3, [r3, #6]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d110      	bne.n	8006f58 <USBD_StdItfReq+0x78>
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10d      	bne.n	8006f58 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 fce6 	bl	800790e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006f42:	e009      	b.n	8006f58 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fc19 	bl	800777e <USBD_CtlError>
      break;
 8006f4c:	e004      	b.n	8006f58 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fc14 	bl	800777e <USBD_CtlError>
      break;
 8006f56:	e000      	b.n	8006f5a <USBD_StdItfReq+0x7a>
      break;
 8006f58:	bf00      	nop
    }
    break;
 8006f5a:	e004      	b.n	8006f66 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fc0d 	bl	800777e <USBD_CtlError>
    break;
 8006f64:	bf00      	nop
  }

  return USBD_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	889b      	ldrh	r3, [r3, #4]
 8006f82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f8c:	2b40      	cmp	r3, #64	; 0x40
 8006f8e:	d007      	beq.n	8006fa0 <USBD_StdEPReq+0x30>
 8006f90:	2b40      	cmp	r3, #64	; 0x40
 8006f92:	f200 8144 	bhi.w	800721e <USBD_StdEPReq+0x2ae>
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00a      	beq.n	8006fb0 <USBD_StdEPReq+0x40>
 8006f9a:	2b20      	cmp	r3, #32
 8006f9c:	f040 813f 	bne.w	800721e <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	6839      	ldr	r1, [r7, #0]
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	4798      	blx	r3
    break;
 8006fae:	e13b      	b.n	8007228 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fb8:	2b20      	cmp	r3, #32
 8006fba:	d10a      	bne.n	8006fd2 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	4798      	blx	r3
 8006fca:	4603      	mov	r3, r0
 8006fcc:	73fb      	strb	r3, [r7, #15]

      return ret;
 8006fce:	7bfb      	ldrb	r3, [r7, #15]
 8006fd0:	e12b      	b.n	800722a <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	785b      	ldrb	r3, [r3, #1]
 8006fd6:	2b03      	cmp	r3, #3
 8006fd8:	d007      	beq.n	8006fea <USBD_StdEPReq+0x7a>
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	f300 8119 	bgt.w	8007212 <USBD_StdEPReq+0x2a2>
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d072      	beq.n	80070ca <USBD_StdEPReq+0x15a>
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d03a      	beq.n	800705e <USBD_StdEPReq+0xee>
 8006fe8:	e113      	b.n	8007212 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d002      	beq.n	8006ffa <USBD_StdEPReq+0x8a>
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d015      	beq.n	8007024 <USBD_StdEPReq+0xb4>
 8006ff8:	e02b      	b.n	8007052 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00c      	beq.n	800701a <USBD_StdEPReq+0xaa>
 8007000:	7bbb      	ldrb	r3, [r7, #14]
 8007002:	2b80      	cmp	r3, #128	; 0x80
 8007004:	d009      	beq.n	800701a <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007006:	7bbb      	ldrb	r3, [r7, #14]
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f001 f832 	bl	8008074 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007010:	2180      	movs	r1, #128	; 0x80
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f001 f82e 	bl	8008074 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007018:	e020      	b.n	800705c <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fbae 	bl	800777e <USBD_CtlError>
        break;
 8007022:	e01b      	b.n	800705c <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	885b      	ldrh	r3, [r3, #2]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10e      	bne.n	800704a <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800702c:	7bbb      	ldrb	r3, [r7, #14]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00b      	beq.n	800704a <USBD_StdEPReq+0xda>
 8007032:	7bbb      	ldrb	r3, [r7, #14]
 8007034:	2b80      	cmp	r3, #128	; 0x80
 8007036:	d008      	beq.n	800704a <USBD_StdEPReq+0xda>
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	88db      	ldrh	r3, [r3, #6]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d104      	bne.n	800704a <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007040:	7bbb      	ldrb	r3, [r7, #14]
 8007042:	4619      	mov	r1, r3
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f001 f815 	bl	8008074 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fc5f 	bl	800790e <USBD_CtlSendStatus>

        break;
 8007050:	e004      	b.n	800705c <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fb92 	bl	800777e <USBD_CtlError>
        break;
 800705a:	bf00      	nop
      }
      break;
 800705c:	e0de      	b.n	800721c <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007064:	2b02      	cmp	r3, #2
 8007066:	d002      	beq.n	800706e <USBD_StdEPReq+0xfe>
 8007068:	2b03      	cmp	r3, #3
 800706a:	d015      	beq.n	8007098 <USBD_StdEPReq+0x128>
 800706c:	e026      	b.n	80070bc <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800706e:	7bbb      	ldrb	r3, [r7, #14]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00c      	beq.n	800708e <USBD_StdEPReq+0x11e>
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	2b80      	cmp	r3, #128	; 0x80
 8007078:	d009      	beq.n	800708e <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800707a:	7bbb      	ldrb	r3, [r7, #14]
 800707c:	4619      	mov	r1, r3
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fff8 	bl	8008074 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007084:	2180      	movs	r1, #128	; 0x80
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fff4 	bl	8008074 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800708c:	e01c      	b.n	80070c8 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fb74 	bl	800777e <USBD_CtlError>
        break;
 8007096:	e017      	b.n	80070c8 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	885b      	ldrh	r3, [r3, #2]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d112      	bne.n	80070c6 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80070a0:	7bbb      	ldrb	r3, [r7, #14]
 80070a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d004      	beq.n	80070b4 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80070aa:	7bbb      	ldrb	r3, [r7, #14]
 80070ac:	4619      	mov	r1, r3
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 ffff 	bl	80080b2 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fc2a 	bl	800790e <USBD_CtlSendStatus>
        }
        break;
 80070ba:	e004      	b.n	80070c6 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 80070bc:	6839      	ldr	r1, [r7, #0]
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fb5d 	bl	800777e <USBD_CtlError>
        break;
 80070c4:	e000      	b.n	80070c8 <USBD_StdEPReq+0x158>
        break;
 80070c6:	bf00      	nop
      }
      break;
 80070c8:	e0a8      	b.n	800721c <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d002      	beq.n	80070da <USBD_StdEPReq+0x16a>
 80070d4:	2b03      	cmp	r3, #3
 80070d6:	d031      	beq.n	800713c <USBD_StdEPReq+0x1cc>
 80070d8:	e095      	b.n	8007206 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070da:	7bbb      	ldrb	r3, [r7, #14]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d007      	beq.n	80070f0 <USBD_StdEPReq+0x180>
 80070e0:	7bbb      	ldrb	r3, [r7, #14]
 80070e2:	2b80      	cmp	r3, #128	; 0x80
 80070e4:	d004      	beq.n	80070f0 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fb48 	bl	800777e <USBD_CtlError>
          break;
 80070ee:	e08f      	b.n	8007210 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80070f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	da0b      	bge.n	8007110 <USBD_StdEPReq+0x1a0>
 80070f8:	7bbb      	ldrb	r3, [r7, #14]
 80070fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070fe:	4613      	mov	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	3310      	adds	r3, #16
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	4413      	add	r3, r2
 800710c:	3304      	adds	r3, #4
 800710e:	e00a      	b.n	8007126 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007110:	7bbb      	ldrb	r3, [r7, #14]
 8007112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007116:	4613      	mov	r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4413      	add	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	4413      	add	r3, r2
 8007126:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	2200      	movs	r2, #0
 800712c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	2202      	movs	r2, #2
 8007132:	4619      	mov	r1, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fb8c 	bl	8007852 <USBD_CtlSendData>
          break;
 800713a:	e069      	b.n	8007210 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800713c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007140:	2b00      	cmp	r3, #0
 8007142:	da11      	bge.n	8007168 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007144:	7bbb      	ldrb	r3, [r7, #14]
 8007146:	f003 020f 	and.w	r2, r3, #15
 800714a:	6879      	ldr	r1, [r7, #4]
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	440b      	add	r3, r1
 8007156:	3318      	adds	r3, #24
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d117      	bne.n	800718e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fb0c 	bl	800777e <USBD_CtlError>
            break;
 8007166:	e053      	b.n	8007210 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007168:	7bbb      	ldrb	r3, [r7, #14]
 800716a:	f003 020f 	and.w	r2, r3, #15
 800716e:	6879      	ldr	r1, [r7, #4]
 8007170:	4613      	mov	r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	440b      	add	r3, r1
 800717a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d104      	bne.n	800718e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 faf9 	bl	800777e <USBD_CtlError>
            break;
 800718c:	e040      	b.n	8007210 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800718e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007192:	2b00      	cmp	r3, #0
 8007194:	da0b      	bge.n	80071ae <USBD_StdEPReq+0x23e>
 8007196:	7bbb      	ldrb	r3, [r7, #14]
 8007198:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800719c:	4613      	mov	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	3310      	adds	r3, #16
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	4413      	add	r3, r2
 80071aa:	3304      	adds	r3, #4
 80071ac:	e00a      	b.n	80071c4 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 80071ae:	7bbb      	ldrb	r3, [r7, #14]
 80071b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80071b4:	4613      	mov	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	4413      	add	r3, r2
 80071c4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80071c6:	7bbb      	ldrb	r3, [r7, #14]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d002      	beq.n	80071d2 <USBD_StdEPReq+0x262>
 80071cc:	7bbb      	ldrb	r3, [r7, #14]
 80071ce:	2b80      	cmp	r3, #128	; 0x80
 80071d0:	d103      	bne.n	80071da <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2200      	movs	r2, #0
 80071d6:	601a      	str	r2, [r3, #0]
 80071d8:	e00e      	b.n	80071f8 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80071da:	7bbb      	ldrb	r3, [r7, #14]
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 ff86 	bl	80080f0 <USBD_LL_IsStallEP>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d003      	beq.n	80071f2 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2201      	movs	r2, #1
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	e002      	b.n	80071f8 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2200      	movs	r2, #0
 80071f6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	2202      	movs	r2, #2
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fb27 	bl	8007852 <USBD_CtlSendData>
          break;
 8007204:	e004      	b.n	8007210 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fab8 	bl	800777e <USBD_CtlError>
        break;
 800720e:	bf00      	nop
      }
      break;
 8007210:	e004      	b.n	800721c <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fab2 	bl	800777e <USBD_CtlError>
      break;
 800721a:	bf00      	nop
    }
    break;
 800721c:	e004      	b.n	8007228 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 faac 	bl	800777e <USBD_CtlError>
    break;
 8007226:	bf00      	nop
  }

  return ret;
 8007228:	7bfb      	ldrb	r3, [r7, #15]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
	...

08007234 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	885b      	ldrh	r3, [r3, #2]
 8007242:	0a1b      	lsrs	r3, r3, #8
 8007244:	b29b      	uxth	r3, r3
 8007246:	3b01      	subs	r3, #1
 8007248:	2b06      	cmp	r3, #6
 800724a:	f200 80c9 	bhi.w	80073e0 <USBD_GetDescriptor+0x1ac>
 800724e:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <USBD_GetDescriptor+0x20>)
 8007250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007254:	08007271 	.word	0x08007271
 8007258:	08007289 	.word	0x08007289
 800725c:	080072c9 	.word	0x080072c9
 8007260:	080073e1 	.word	0x080073e1
 8007264:	080073e1 	.word	0x080073e1
 8007268:	0800738d 	.word	0x0800738d
 800726c:	080073b3 	.word	0x080073b3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	7c12      	ldrb	r2, [r2, #16]
 800727c:	f107 010a 	add.w	r1, r7, #10
 8007280:	4610      	mov	r0, r2
 8007282:	4798      	blx	r3
 8007284:	60f8      	str	r0, [r7, #12]
    break;
 8007286:	e0b0      	b.n	80073ea <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	7c1b      	ldrb	r3, [r3, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10d      	bne.n	80072ac <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007298:	f107 020a 	add.w	r2, r7, #10
 800729c:	4610      	mov	r0, r2
 800729e:	4798      	blx	r3
 80072a0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	3301      	adds	r3, #1
 80072a6:	2202      	movs	r2, #2
 80072a8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80072aa:	e09e      	b.n	80073ea <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80072b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b4:	f107 020a 	add.w	r2, r7, #10
 80072b8:	4610      	mov	r0, r2
 80072ba:	4798      	blx	r3
 80072bc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3301      	adds	r3, #1
 80072c2:	2202      	movs	r2, #2
 80072c4:	701a      	strb	r2, [r3, #0]
    break;
 80072c6:	e090      	b.n	80073ea <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	885b      	ldrh	r3, [r3, #2]
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b05      	cmp	r3, #5
 80072d0:	d856      	bhi.n	8007380 <USBD_GetDescriptor+0x14c>
 80072d2:	a201      	add	r2, pc, #4	; (adr r2, 80072d8 <USBD_GetDescriptor+0xa4>)
 80072d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d8:	080072f1 	.word	0x080072f1
 80072dc:	08007309 	.word	0x08007309
 80072e0:	08007321 	.word	0x08007321
 80072e4:	08007339 	.word	0x08007339
 80072e8:	08007351 	.word	0x08007351
 80072ec:	08007369 	.word	0x08007369
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	7c12      	ldrb	r2, [r2, #16]
 80072fc:	f107 010a 	add.w	r1, r7, #10
 8007300:	4610      	mov	r0, r2
 8007302:	4798      	blx	r3
 8007304:	60f8      	str	r0, [r7, #12]
      break;
 8007306:	e040      	b.n	800738a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	7c12      	ldrb	r2, [r2, #16]
 8007314:	f107 010a 	add.w	r1, r7, #10
 8007318:	4610      	mov	r0, r2
 800731a:	4798      	blx	r3
 800731c:	60f8      	str	r0, [r7, #12]
      break;
 800731e:	e034      	b.n	800738a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	7c12      	ldrb	r2, [r2, #16]
 800732c:	f107 010a 	add.w	r1, r7, #10
 8007330:	4610      	mov	r0, r2
 8007332:	4798      	blx	r3
 8007334:	60f8      	str	r0, [r7, #12]
      break;
 8007336:	e028      	b.n	800738a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	7c12      	ldrb	r2, [r2, #16]
 8007344:	f107 010a 	add.w	r1, r7, #10
 8007348:	4610      	mov	r0, r2
 800734a:	4798      	blx	r3
 800734c:	60f8      	str	r0, [r7, #12]
      break;
 800734e:	e01c      	b.n	800738a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007356:	695b      	ldr	r3, [r3, #20]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	7c12      	ldrb	r2, [r2, #16]
 800735c:	f107 010a 	add.w	r1, r7, #10
 8007360:	4610      	mov	r0, r2
 8007362:	4798      	blx	r3
 8007364:	60f8      	str	r0, [r7, #12]
      break;
 8007366:	e010      	b.n	800738a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	7c12      	ldrb	r2, [r2, #16]
 8007374:	f107 010a 	add.w	r1, r7, #10
 8007378:	4610      	mov	r0, r2
 800737a:	4798      	blx	r3
 800737c:	60f8      	str	r0, [r7, #12]
      break;
 800737e:	e004      	b.n	800738a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f9fb 	bl	800777e <USBD_CtlError>
      return;
 8007388:	e04b      	b.n	8007422 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800738a:	e02e      	b.n	80073ea <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	7c1b      	ldrb	r3, [r3, #16]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d109      	bne.n	80073a8 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800739a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800739c:	f107 020a 	add.w	r2, r7, #10
 80073a0:	4610      	mov	r0, r2
 80073a2:	4798      	blx	r3
 80073a4:	60f8      	str	r0, [r7, #12]
      break;
 80073a6:	e020      	b.n	80073ea <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80073a8:	6839      	ldr	r1, [r7, #0]
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f9e7 	bl	800777e <USBD_CtlError>
      return;
 80073b0:	e037      	b.n	8007422 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	7c1b      	ldrb	r3, [r3, #16]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10d      	bne.n	80073d6 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c2:	f107 020a 	add.w	r2, r7, #10
 80073c6:	4610      	mov	r0, r2
 80073c8:	4798      	blx	r3
 80073ca:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	3301      	adds	r3, #1
 80073d0:	2207      	movs	r2, #7
 80073d2:	701a      	strb	r2, [r3, #0]
      break;
 80073d4:	e009      	b.n	80073ea <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80073d6:	6839      	ldr	r1, [r7, #0]
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f9d0 	bl	800777e <USBD_CtlError>
      return;
 80073de:	e020      	b.n	8007422 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f9cb 	bl	800777e <USBD_CtlError>
    return;
 80073e8:	e01b      	b.n	8007422 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80073ea:	897b      	ldrh	r3, [r7, #10]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d011      	beq.n	8007414 <USBD_GetDescriptor+0x1e0>
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	88db      	ldrh	r3, [r3, #6]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00d      	beq.n	8007414 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	88da      	ldrh	r2, [r3, #6]
 80073fc:	897b      	ldrh	r3, [r7, #10]
 80073fe:	4293      	cmp	r3, r2
 8007400:	bf28      	it	cs
 8007402:	4613      	movcs	r3, r2
 8007404:	b29b      	uxth	r3, r3
 8007406:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007408:	897b      	ldrh	r3, [r7, #10]
 800740a:	461a      	mov	r2, r3
 800740c:	68f9      	ldr	r1, [r7, #12]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fa1f 	bl	8007852 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	88db      	ldrh	r3, [r3, #6]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d102      	bne.n	8007422 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fa76 	bl	800790e <USBD_CtlSendStatus>
  }
}
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	889b      	ldrh	r3, [r3, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d130      	bne.n	800749c <USBD_SetAddress+0x74>
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	88db      	ldrh	r3, [r3, #6]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d12c      	bne.n	800749c <USBD_SetAddress+0x74>
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	885b      	ldrh	r3, [r3, #2]
 8007446:	2b7f      	cmp	r3, #127	; 0x7f
 8007448:	d828      	bhi.n	800749c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	885b      	ldrh	r3, [r3, #2]
 800744e:	b2db      	uxtb	r3, r3
 8007450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007454:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800745c:	2b03      	cmp	r3, #3
 800745e:	d104      	bne.n	800746a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007460:	6839      	ldr	r1, [r7, #0]
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f98b 	bl	800777e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007468:	e01d      	b.n	80074a6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	7bfa      	ldrb	r2, [r7, #15]
 800746e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007472:	7bfb      	ldrb	r3, [r7, #15]
 8007474:	4619      	mov	r1, r3
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fe66 	bl	8008148 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fa46 	bl	800790e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007482:	7bfb      	ldrb	r3, [r7, #15]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d004      	beq.n	8007492 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2202      	movs	r2, #2
 800748c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007490:	e009      	b.n	80074a6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800749a:	e004      	b.n	80074a6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800749c:	6839      	ldr	r1, [r7, #0]
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f96d 	bl	800777e <USBD_CtlError>
  }
}
 80074a4:	bf00      	nop
 80074a6:	bf00      	nop
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
	...

080074b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	885b      	ldrh	r3, [r3, #2]
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	4b41      	ldr	r3, [pc, #260]	; (80075c8 <USBD_SetConfig+0x118>)
 80074c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80074c4:	4b40      	ldr	r3, [pc, #256]	; (80075c8 <USBD_SetConfig+0x118>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d904      	bls.n	80074d6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80074cc:	6839      	ldr	r1, [r7, #0]
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f955 	bl	800777e <USBD_CtlError>
 80074d4:	e075      	b.n	80075c2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d002      	beq.n	80074e6 <USBD_SetConfig+0x36>
 80074e0:	2b03      	cmp	r3, #3
 80074e2:	d023      	beq.n	800752c <USBD_SetConfig+0x7c>
 80074e4:	e062      	b.n	80075ac <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80074e6:	4b38      	ldr	r3, [pc, #224]	; (80075c8 <USBD_SetConfig+0x118>)
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d01a      	beq.n	8007524 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80074ee:	4b36      	ldr	r3, [pc, #216]	; (80075c8 <USBD_SetConfig+0x118>)
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2203      	movs	r2, #3
 80074fc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007500:	4b31      	ldr	r3, [pc, #196]	; (80075c8 <USBD_SetConfig+0x118>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	4619      	mov	r1, r3
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7ff fa5d 	bl	80069c6 <USBD_SetClassConfig>
 800750c:	4603      	mov	r3, r0
 800750e:	2b02      	cmp	r3, #2
 8007510:	d104      	bne.n	800751c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f932 	bl	800777e <USBD_CtlError>
          return;
 800751a:	e052      	b.n	80075c2 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f9f6 	bl	800790e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007522:	e04e      	b.n	80075c2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f9f2 	bl	800790e <USBD_CtlSendStatus>
      break;
 800752a:	e04a      	b.n	80075c2 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800752c:	4b26      	ldr	r3, [pc, #152]	; (80075c8 <USBD_SetConfig+0x118>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d112      	bne.n	800755a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800753c:	4b22      	ldr	r3, [pc, #136]	; (80075c8 <USBD_SetConfig+0x118>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	461a      	mov	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007546:	4b20      	ldr	r3, [pc, #128]	; (80075c8 <USBD_SetConfig+0x118>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7ff fa59 	bl	8006a04 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f9db 	bl	800790e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007558:	e033      	b.n	80075c2 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800755a:	4b1b      	ldr	r3, [pc, #108]	; (80075c8 <USBD_SetConfig+0x118>)
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	429a      	cmp	r2, r3
 8007566:	d01d      	beq.n	80075a4 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	b2db      	uxtb	r3, r3
 800756e:	4619      	mov	r1, r3
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7ff fa47 	bl	8006a04 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007576:	4b14      	ldr	r3, [pc, #80]	; (80075c8 <USBD_SetConfig+0x118>)
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	461a      	mov	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007580:	4b11      	ldr	r3, [pc, #68]	; (80075c8 <USBD_SetConfig+0x118>)
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	4619      	mov	r1, r3
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7ff fa1d 	bl	80069c6 <USBD_SetClassConfig>
 800758c:	4603      	mov	r3, r0
 800758e:	2b02      	cmp	r3, #2
 8007590:	d104      	bne.n	800759c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007592:	6839      	ldr	r1, [r7, #0]
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f8f2 	bl	800777e <USBD_CtlError>
          return;
 800759a:	e012      	b.n	80075c2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f9b6 	bl	800790e <USBD_CtlSendStatus>
      break;
 80075a2:	e00e      	b.n	80075c2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f9b2 	bl	800790e <USBD_CtlSendStatus>
      break;
 80075aa:	e00a      	b.n	80075c2 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f8e5 	bl	800777e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80075b4:	4b04      	ldr	r3, [pc, #16]	; (80075c8 <USBD_SetConfig+0x118>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7ff fa22 	bl	8006a04 <USBD_ClrClassConfig>
      break;
 80075c0:	bf00      	nop
    }
  }
}
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	200002b0 	.word	0x200002b0

080075cc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	88db      	ldrh	r3, [r3, #6]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d004      	beq.n	80075e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f8cc 	bl	800777e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80075e6:	e022      	b.n	800762e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	dc02      	bgt.n	80075f8 <USBD_GetConfig+0x2c>
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	dc03      	bgt.n	80075fe <USBD_GetConfig+0x32>
 80075f6:	e015      	b.n	8007624 <USBD_GetConfig+0x58>
 80075f8:	2b03      	cmp	r3, #3
 80075fa:	d00b      	beq.n	8007614 <USBD_GetConfig+0x48>
 80075fc:	e012      	b.n	8007624 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	3308      	adds	r3, #8
 8007608:	2201      	movs	r2, #1
 800760a:	4619      	mov	r1, r3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f920 	bl	8007852 <USBD_CtlSendData>
      break;
 8007612:	e00c      	b.n	800762e <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3304      	adds	r3, #4
 8007618:	2201      	movs	r2, #1
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f918 	bl	8007852 <USBD_CtlSendData>
      break;
 8007622:	e004      	b.n	800762e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f8a9 	bl	800777e <USBD_CtlError>
      break;
 800762c:	bf00      	nop
}
 800762e:	bf00      	nop
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b082      	sub	sp, #8
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007646:	3b01      	subs	r3, #1
 8007648:	2b02      	cmp	r3, #2
 800764a:	d81e      	bhi.n	800768a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	88db      	ldrh	r3, [r3, #6]
 8007650:	2b02      	cmp	r3, #2
 8007652:	d004      	beq.n	800765e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f891 	bl	800777e <USBD_CtlError>
      break;
 800765c:	e01a      	b.n	8007694 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800766a:	2b00      	cmp	r3, #0
 800766c:	d005      	beq.n	800767a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	f043 0202 	orr.w	r2, r3, #2
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	330c      	adds	r3, #12
 800767e:	2202      	movs	r2, #2
 8007680:	4619      	mov	r1, r3
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f8e5 	bl	8007852 <USBD_CtlSendData>
    break;
 8007688:	e004      	b.n	8007694 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f876 	bl	800777e <USBD_CtlError>
    break;
 8007692:	bf00      	nop
  }
}
 8007694:	bf00      	nop
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	885b      	ldrh	r3, [r3, #2]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d106      	bne.n	80076bc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f929 	bl	800790e <USBD_CtlSendStatus>
  }

}
 80076bc:	bf00      	nop
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80076d4:	3b01      	subs	r3, #1
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d80b      	bhi.n	80076f2 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	885b      	ldrh	r3, [r3, #2]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d10c      	bne.n	80076fc <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f90f 	bl	800790e <USBD_CtlSendStatus>
    }
    break;
 80076f0:	e004      	b.n	80076fc <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f842 	bl	800777e <USBD_CtlError>
    break;
 80076fa:	e000      	b.n	80076fe <USBD_ClrFeature+0x3a>
    break;
 80076fc:	bf00      	nop
  }
}
 80076fe:	bf00      	nop
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007706:	b480      	push	{r7}
 8007708:	b083      	sub	sp, #12
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	781a      	ldrb	r2, [r3, #0]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	785a      	ldrb	r2, [r3, #1]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	3302      	adds	r3, #2
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	b29a      	uxth	r2, r3
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	3303      	adds	r3, #3
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	b29b      	uxth	r3, r3
 8007730:	021b      	lsls	r3, r3, #8
 8007732:	b29b      	uxth	r3, r3
 8007734:	4413      	add	r3, r2
 8007736:	b29a      	uxth	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	3304      	adds	r3, #4
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	b29a      	uxth	r2, r3
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	3305      	adds	r3, #5
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	b29b      	uxth	r3, r3
 800774c:	021b      	lsls	r3, r3, #8
 800774e:	b29b      	uxth	r3, r3
 8007750:	4413      	add	r3, r2
 8007752:	b29a      	uxth	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	3306      	adds	r3, #6
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	b29a      	uxth	r2, r3
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	3307      	adds	r3, #7
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	b29b      	uxth	r3, r3
 8007768:	021b      	lsls	r3, r3, #8
 800776a:	b29b      	uxth	r3, r3
 800776c:	4413      	add	r3, r2
 800776e:	b29a      	uxth	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	80da      	strh	r2, [r3, #6]

}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	bc80      	pop	{r7}
 800777c:	4770      	bx	lr

0800777e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b082      	sub	sp, #8
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007788:	2180      	movs	r1, #128	; 0x80
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fc72 	bl	8008074 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007790:	2100      	movs	r1, #0
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fc6e 	bl	8008074 <USBD_LL_StallEP>
}
 8007798:	bf00      	nop
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d032      	beq.n	800781c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 f834 	bl	8007824 <USBD_GetLen>
 80077bc:	4603      	mov	r3, r0
 80077be:	3301      	adds	r3, #1
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	005b      	lsls	r3, r3, #1
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80077ca:	7dfb      	ldrb	r3, [r7, #23]
 80077cc:	1c5a      	adds	r2, r3, #1
 80077ce:	75fa      	strb	r2, [r7, #23]
 80077d0:	461a      	mov	r2, r3
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	4413      	add	r3, r2
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	7812      	ldrb	r2, [r2, #0]
 80077da:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80077dc:	7dfb      	ldrb	r3, [r7, #23]
 80077de:	1c5a      	adds	r2, r3, #1
 80077e0:	75fa      	strb	r2, [r7, #23]
 80077e2:	461a      	mov	r2, r3
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	4413      	add	r3, r2
 80077e8:	2203      	movs	r2, #3
 80077ea:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80077ec:	e012      	b.n	8007814 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	1c5a      	adds	r2, r3, #1
 80077f2:	60fa      	str	r2, [r7, #12]
 80077f4:	7dfa      	ldrb	r2, [r7, #23]
 80077f6:	1c51      	adds	r1, r2, #1
 80077f8:	75f9      	strb	r1, [r7, #23]
 80077fa:	4611      	mov	r1, r2
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	440a      	add	r2, r1
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007804:	7dfb      	ldrb	r3, [r7, #23]
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	75fa      	strb	r2, [r7, #23]
 800780a:	461a      	mov	r2, r3
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	4413      	add	r3, r2
 8007810:	2200      	movs	r2, #0
 8007812:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1e8      	bne.n	80077ee <USBD_GetString+0x4e>
    }
  }
}
 800781c:	bf00      	nop
 800781e:	3718      	adds	r7, #24
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007830:	e005      	b.n	800783e <USBD_GetLen+0x1a>
    {
        len++;
 8007832:	7bfb      	ldrb	r3, [r7, #15]
 8007834:	3301      	adds	r3, #1
 8007836:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	3301      	adds	r3, #1
 800783c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1f5      	bne.n	8007832 <USBD_GetLen+0xe>
    }

    return len;
 8007846:	7bfb      	ldrb	r3, [r7, #15]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	bc80      	pop	{r7}
 8007850:	4770      	bx	lr

08007852 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b084      	sub	sp, #16
 8007856:	af00      	add	r7, sp, #0
 8007858:	60f8      	str	r0, [r7, #12]
 800785a:	60b9      	str	r1, [r7, #8]
 800785c:	4613      	mov	r3, r2
 800785e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2202      	movs	r2, #2
 8007864:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007868:	88fa      	ldrh	r2, [r7, #6]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800786e:	88fa      	ldrh	r2, [r7, #6]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007874:	88fb      	ldrh	r3, [r7, #6]
 8007876:	68ba      	ldr	r2, [r7, #8]
 8007878:	2100      	movs	r1, #0
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f000 fc83 	bl	8008186 <USBD_LL_Transmit>

  return USBD_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b084      	sub	sp, #16
 800788e:	af00      	add	r7, sp, #0
 8007890:	60f8      	str	r0, [r7, #12]
 8007892:	60b9      	str	r1, [r7, #8]
 8007894:	4613      	mov	r3, r2
 8007896:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007898:	88fb      	ldrh	r3, [r7, #6]
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	2100      	movs	r1, #0
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f000 fc71 	bl	8008186 <USBD_LL_Transmit>

  return USBD_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b084      	sub	sp, #16
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	60f8      	str	r0, [r7, #12]
 80078b6:	60b9      	str	r1, [r7, #8]
 80078b8:	4613      	mov	r3, r2
 80078ba:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2203      	movs	r2, #3
 80078c0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 80078c4:	88fa      	ldrh	r2, [r7, #6]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 80078cc:	88fa      	ldrh	r2, [r7, #6]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80078d4:	88fb      	ldrh	r3, [r7, #6]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	2100      	movs	r1, #0
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f000 fc76 	bl	80081cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b084      	sub	sp, #16
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	60f8      	str	r0, [r7, #12]
 80078f2:	60b9      	str	r1, [r7, #8]
 80078f4:	4613      	mov	r3, r2
 80078f6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078f8:	88fb      	ldrh	r3, [r7, #6]
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	2100      	movs	r1, #0
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 fc64 	bl	80081cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b082      	sub	sp, #8
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2204      	movs	r2, #4
 800791a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800791e:	2300      	movs	r3, #0
 8007920:	2200      	movs	r2, #0
 8007922:	2100      	movs	r1, #0
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fc2e 	bl	8008186 <USBD_LL_Transmit>

  return USBD_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2205      	movs	r2, #5
 8007940:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007944:	2300      	movs	r3, #0
 8007946:	2200      	movs	r2, #0
 8007948:	2100      	movs	r1, #0
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fc3e 	bl	80081cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
	...

0800795c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007960:	2200      	movs	r2, #0
 8007962:	4912      	ldr	r1, [pc, #72]	; (80079ac <MX_USB_DEVICE_Init+0x50>)
 8007964:	4812      	ldr	r0, [pc, #72]	; (80079b0 <MX_USB_DEVICE_Init+0x54>)
 8007966:	f7fe ffd4 	bl	8006912 <USBD_Init>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d001      	beq.n	8007974 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007970:	f7f8 fef2 	bl	8000758 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007974:	490f      	ldr	r1, [pc, #60]	; (80079b4 <MX_USB_DEVICE_Init+0x58>)
 8007976:	480e      	ldr	r0, [pc, #56]	; (80079b0 <MX_USB_DEVICE_Init+0x54>)
 8007978:	f7fe fff6 	bl	8006968 <USBD_RegisterClass>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d001      	beq.n	8007986 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007982:	f7f8 fee9 	bl	8000758 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007986:	490c      	ldr	r1, [pc, #48]	; (80079b8 <MX_USB_DEVICE_Init+0x5c>)
 8007988:	4809      	ldr	r0, [pc, #36]	; (80079b0 <MX_USB_DEVICE_Init+0x54>)
 800798a:	f7fe ff27 	bl	80067dc <USBD_CDC_RegisterInterface>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d001      	beq.n	8007998 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007994:	f7f8 fee0 	bl	8000758 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007998:	4805      	ldr	r0, [pc, #20]	; (80079b0 <MX_USB_DEVICE_Init+0x54>)
 800799a:	f7fe fffe 	bl	800699a <USBD_Start>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80079a4:	f7f8 fed8 	bl	8000758 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80079a8:	bf00      	nop
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	2000012c 	.word	0x2000012c
 80079b0:	200002b4 	.word	0x200002b4
 80079b4:	20000018 	.word	0x20000018
 80079b8:	2000011c 	.word	0x2000011c

080079bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80079c0:	2200      	movs	r2, #0
 80079c2:	4905      	ldr	r1, [pc, #20]	; (80079d8 <CDC_Init_FS+0x1c>)
 80079c4:	4805      	ldr	r0, [pc, #20]	; (80079dc <CDC_Init_FS+0x20>)
 80079c6:	f7fe ff1f 	bl	8006808 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80079ca:	4905      	ldr	r1, [pc, #20]	; (80079e0 <CDC_Init_FS+0x24>)
 80079cc:	4803      	ldr	r0, [pc, #12]	; (80079dc <CDC_Init_FS+0x20>)
 80079ce:	f7fe ff34 	bl	800683a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80079d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	20000950 	.word	0x20000950
 80079dc:	200002b4 	.word	0x200002b4
 80079e0:	20000550 	.word	0x20000550

080079e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80079e4:	b480      	push	{r7}
 80079e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80079e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bc80      	pop	{r7}
 80079f0:	4770      	bx	lr
	...

080079f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	4603      	mov	r3, r0
 80079fc:	6039      	str	r1, [r7, #0]
 80079fe:	71fb      	strb	r3, [r7, #7]
 8007a00:	4613      	mov	r3, r2
 8007a02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007a04:	79fb      	ldrb	r3, [r7, #7]
 8007a06:	2b23      	cmp	r3, #35	; 0x23
 8007a08:	d84a      	bhi.n	8007aa0 <CDC_Control_FS+0xac>
 8007a0a:	a201      	add	r2, pc, #4	; (adr r2, 8007a10 <CDC_Control_FS+0x1c>)
 8007a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a10:	08007aa1 	.word	0x08007aa1
 8007a14:	08007aa1 	.word	0x08007aa1
 8007a18:	08007aa1 	.word	0x08007aa1
 8007a1c:	08007aa1 	.word	0x08007aa1
 8007a20:	08007aa1 	.word	0x08007aa1
 8007a24:	08007aa1 	.word	0x08007aa1
 8007a28:	08007aa1 	.word	0x08007aa1
 8007a2c:	08007aa1 	.word	0x08007aa1
 8007a30:	08007aa1 	.word	0x08007aa1
 8007a34:	08007aa1 	.word	0x08007aa1
 8007a38:	08007aa1 	.word	0x08007aa1
 8007a3c:	08007aa1 	.word	0x08007aa1
 8007a40:	08007aa1 	.word	0x08007aa1
 8007a44:	08007aa1 	.word	0x08007aa1
 8007a48:	08007aa1 	.word	0x08007aa1
 8007a4c:	08007aa1 	.word	0x08007aa1
 8007a50:	08007aa1 	.word	0x08007aa1
 8007a54:	08007aa1 	.word	0x08007aa1
 8007a58:	08007aa1 	.word	0x08007aa1
 8007a5c:	08007aa1 	.word	0x08007aa1
 8007a60:	08007aa1 	.word	0x08007aa1
 8007a64:	08007aa1 	.word	0x08007aa1
 8007a68:	08007aa1 	.word	0x08007aa1
 8007a6c:	08007aa1 	.word	0x08007aa1
 8007a70:	08007aa1 	.word	0x08007aa1
 8007a74:	08007aa1 	.word	0x08007aa1
 8007a78:	08007aa1 	.word	0x08007aa1
 8007a7c:	08007aa1 	.word	0x08007aa1
 8007a80:	08007aa1 	.word	0x08007aa1
 8007a84:	08007aa1 	.word	0x08007aa1
 8007a88:	08007aa1 	.word	0x08007aa1
 8007a8c:	08007aa1 	.word	0x08007aa1
 8007a90:	08007aa1 	.word	0x08007aa1
 8007a94:	08007aa1 	.word	0x08007aa1
 8007a98:	08007aa1 	.word	0x08007aa1
 8007a9c:	08007aa1 	.word	0x08007aa1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007aa0:	bf00      	nop
  }

  return (USBD_OK);
 8007aa2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bc80      	pop	{r7}
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop

08007ab0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007aba:	6879      	ldr	r1, [r7, #4]
 8007abc:	4805      	ldr	r0, [pc, #20]	; (8007ad4 <CDC_Receive_FS+0x24>)
 8007abe:	f7fe febc 	bl	800683a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007ac2:	4804      	ldr	r0, [pc, #16]	; (8007ad4 <CDC_Receive_FS+0x24>)
 8007ac4:	f7fe fefb 	bl	80068be <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007ac8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	200002b4 	.word	0x200002b4

08007ad8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007ae8:	4b0d      	ldr	r3, [pc, #52]	; (8007b20 <CDC_Transmit_FS+0x48>)
 8007aea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007aee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d001      	beq.n	8007afe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e00b      	b.n	8007b16 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007afe:	887b      	ldrh	r3, [r7, #2]
 8007b00:	461a      	mov	r2, r3
 8007b02:	6879      	ldr	r1, [r7, #4]
 8007b04:	4806      	ldr	r0, [pc, #24]	; (8007b20 <CDC_Transmit_FS+0x48>)
 8007b06:	f7fe fe7f 	bl	8006808 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007b0a:	4805      	ldr	r0, [pc, #20]	; (8007b20 <CDC_Transmit_FS+0x48>)
 8007b0c:	f7fe fea8 	bl	8006860 <USBD_CDC_TransmitPacket>
 8007b10:	4603      	mov	r3, r0
 8007b12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	200002b4 	.word	0x200002b4

08007b24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	6039      	str	r1, [r7, #0]
 8007b2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2212      	movs	r2, #18
 8007b34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b36:	4b03      	ldr	r3, [pc, #12]	; (8007b44 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bc80      	pop	{r7}
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	20000148 	.word	0x20000148

08007b48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	4603      	mov	r3, r0
 8007b50:	6039      	str	r1, [r7, #0]
 8007b52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	2204      	movs	r2, #4
 8007b58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b5a:	4b03      	ldr	r3, [pc, #12]	; (8007b68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bc80      	pop	{r7}
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	2000015c 	.word	0x2000015c

08007b6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	4603      	mov	r3, r0
 8007b74:	6039      	str	r1, [r7, #0]
 8007b76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b78:	79fb      	ldrb	r3, [r7, #7]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d105      	bne.n	8007b8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b7e:	683a      	ldr	r2, [r7, #0]
 8007b80:	4907      	ldr	r1, [pc, #28]	; (8007ba0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b82:	4808      	ldr	r0, [pc, #32]	; (8007ba4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b84:	f7ff fe0c 	bl	80077a0 <USBD_GetString>
 8007b88:	e004      	b.n	8007b94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	4904      	ldr	r1, [pc, #16]	; (8007ba0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b8e:	4805      	ldr	r0, [pc, #20]	; (8007ba4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b90:	f7ff fe06 	bl	80077a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b94:	4b02      	ldr	r3, [pc, #8]	; (8007ba0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	20000d50 	.word	0x20000d50
 8007ba4:	08008c3c 	.word	0x08008c3c

08007ba8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	4603      	mov	r3, r0
 8007bb0:	6039      	str	r1, [r7, #0]
 8007bb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	4904      	ldr	r1, [pc, #16]	; (8007bc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007bb8:	4804      	ldr	r0, [pc, #16]	; (8007bcc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007bba:	f7ff fdf1 	bl	80077a0 <USBD_GetString>
  return USBD_StrDesc;
 8007bbe:	4b02      	ldr	r3, [pc, #8]	; (8007bc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	20000d50 	.word	0x20000d50
 8007bcc:	08008c54 	.word	0x08008c54

08007bd0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	6039      	str	r1, [r7, #0]
 8007bda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	221a      	movs	r2, #26
 8007be0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007be2:	f000 f843 	bl	8007c6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007be6:	4b02      	ldr	r3, [pc, #8]	; (8007bf0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	20000160 	.word	0x20000160

08007bf4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	6039      	str	r1, [r7, #0]
 8007bfe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c00:	79fb      	ldrb	r3, [r7, #7]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d105      	bne.n	8007c12 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	4907      	ldr	r1, [pc, #28]	; (8007c28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c0a:	4808      	ldr	r0, [pc, #32]	; (8007c2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c0c:	f7ff fdc8 	bl	80077a0 <USBD_GetString>
 8007c10:	e004      	b.n	8007c1c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	4904      	ldr	r1, [pc, #16]	; (8007c28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c16:	4805      	ldr	r0, [pc, #20]	; (8007c2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c18:	f7ff fdc2 	bl	80077a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c1c:	4b02      	ldr	r3, [pc, #8]	; (8007c28 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	20000d50 	.word	0x20000d50
 8007c2c:	08008c68 	.word	0x08008c68

08007c30 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	4603      	mov	r3, r0
 8007c38:	6039      	str	r1, [r7, #0]
 8007c3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c3c:	79fb      	ldrb	r3, [r7, #7]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d105      	bne.n	8007c4e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	4907      	ldr	r1, [pc, #28]	; (8007c64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c46:	4808      	ldr	r0, [pc, #32]	; (8007c68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c48:	f7ff fdaa 	bl	80077a0 <USBD_GetString>
 8007c4c:	e004      	b.n	8007c58 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	4904      	ldr	r1, [pc, #16]	; (8007c64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c52:	4805      	ldr	r0, [pc, #20]	; (8007c68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c54:	f7ff fda4 	bl	80077a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c58:	4b02      	ldr	r3, [pc, #8]	; (8007c64 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	20000d50 	.word	0x20000d50
 8007c68:	08008c74 	.word	0x08008c74

08007c6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c72:	4b0f      	ldr	r3, [pc, #60]	; (8007cb0 <Get_SerialNum+0x44>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c78:	4b0e      	ldr	r3, [pc, #56]	; (8007cb4 <Get_SerialNum+0x48>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c7e:	4b0e      	ldr	r3, [pc, #56]	; (8007cb8 <Get_SerialNum+0x4c>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4413      	add	r3, r2
 8007c8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d009      	beq.n	8007ca6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c92:	2208      	movs	r2, #8
 8007c94:	4909      	ldr	r1, [pc, #36]	; (8007cbc <Get_SerialNum+0x50>)
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f000 f814 	bl	8007cc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c9c:	2204      	movs	r2, #4
 8007c9e:	4908      	ldr	r1, [pc, #32]	; (8007cc0 <Get_SerialNum+0x54>)
 8007ca0:	68b8      	ldr	r0, [r7, #8]
 8007ca2:	f000 f80f 	bl	8007cc4 <IntToUnicode>
  }
}
 8007ca6:	bf00      	nop
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	1ff80050 	.word	0x1ff80050
 8007cb4:	1ff80054 	.word	0x1ff80054
 8007cb8:	1ff80058 	.word	0x1ff80058
 8007cbc:	20000162 	.word	0x20000162
 8007cc0:	20000172 	.word	0x20000172

08007cc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b087      	sub	sp, #28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	75fb      	strb	r3, [r7, #23]
 8007cda:	e027      	b.n	8007d2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	0f1b      	lsrs	r3, r3, #28
 8007ce0:	2b09      	cmp	r3, #9
 8007ce2:	d80b      	bhi.n	8007cfc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	0f1b      	lsrs	r3, r3, #28
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	7dfb      	ldrb	r3, [r7, #23]
 8007cec:	005b      	lsls	r3, r3, #1
 8007cee:	4619      	mov	r1, r3
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	440b      	add	r3, r1
 8007cf4:	3230      	adds	r2, #48	; 0x30
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	701a      	strb	r2, [r3, #0]
 8007cfa:	e00a      	b.n	8007d12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	0f1b      	lsrs	r3, r3, #28
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	7dfb      	ldrb	r3, [r7, #23]
 8007d04:	005b      	lsls	r3, r3, #1
 8007d06:	4619      	mov	r1, r3
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	440b      	add	r3, r1
 8007d0c:	3237      	adds	r2, #55	; 0x37
 8007d0e:	b2d2      	uxtb	r2, r2
 8007d10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	011b      	lsls	r3, r3, #4
 8007d16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d18:	7dfb      	ldrb	r3, [r7, #23]
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	4413      	add	r3, r2
 8007d22:	2200      	movs	r2, #0
 8007d24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007d26:	7dfb      	ldrb	r3, [r7, #23]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	75fb      	strb	r3, [r7, #23]
 8007d2c:	7dfa      	ldrb	r2, [r7, #23]
 8007d2e:	79fb      	ldrb	r3, [r7, #7]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d3d3      	bcc.n	8007cdc <IntToUnicode+0x18>
  }
}
 8007d34:	bf00      	nop
 8007d36:	bf00      	nop
 8007d38:	371c      	adds	r7, #28
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bc80      	pop	{r7}
 8007d3e:	4770      	bx	lr

08007d40 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	460b      	mov	r3, r1
 8007d4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8007d4c:	78fb      	ldrb	r3, [r7, #3]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d106      	bne.n	8007d60 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8007d52:	4b09      	ldr	r3, [pc, #36]	; (8007d78 <HAL_PCDEx_SetConnectionState+0x38>)
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	4a08      	ldr	r2, [pc, #32]	; (8007d78 <HAL_PCDEx_SetConnectionState+0x38>)
 8007d58:	f043 0301 	orr.w	r3, r3, #1
 8007d5c:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8007d5e:	e005      	b.n	8007d6c <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8007d60:	4b05      	ldr	r3, [pc, #20]	; (8007d78 <HAL_PCDEx_SetConnectionState+0x38>)
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	4a04      	ldr	r2, [pc, #16]	; (8007d78 <HAL_PCDEx_SetConnectionState+0x38>)
 8007d66:	f023 0301 	bic.w	r3, r3, #1
 8007d6a:	6053      	str	r3, [r2, #4]
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bc80      	pop	{r7}
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	40010000 	.word	0x40010000

08007d7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a0d      	ldr	r2, [pc, #52]	; (8007dc0 <HAL_PCD_MspInit+0x44>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d113      	bne.n	8007db6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007d8e:	4b0d      	ldr	r3, [pc, #52]	; (8007dc4 <HAL_PCD_MspInit+0x48>)
 8007d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d92:	4a0c      	ldr	r2, [pc, #48]	; (8007dc4 <HAL_PCD_MspInit+0x48>)
 8007d94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d98:	6253      	str	r3, [r2, #36]	; 0x24
 8007d9a:	4b0a      	ldr	r3, [pc, #40]	; (8007dc4 <HAL_PCD_MspInit+0x48>)
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007da2:	60fb      	str	r3, [r7, #12]
 8007da4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8007da6:	2200      	movs	r2, #0
 8007da8:	2100      	movs	r1, #0
 8007daa:	2014      	movs	r0, #20
 8007dac:	f7f8 ff8b 	bl	8000cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8007db0:	2014      	movs	r0, #20
 8007db2:	f7f8 ffa4 	bl	8000cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007db6:	bf00      	nop
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	40005c00 	.word	0x40005c00
 8007dc4:	40023800 	.word	0x40023800

08007dc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007ddc:	4619      	mov	r1, r3
 8007dde:	4610      	mov	r0, r2
 8007de0:	f7fe fe23 	bl	8006a2a <USBD_LL_SetupStage>
}
 8007de4:	bf00      	nop
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	460b      	mov	r3, r1
 8007df6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007dfe:	78fa      	ldrb	r2, [r7, #3]
 8007e00:	6879      	ldr	r1, [r7, #4]
 8007e02:	4613      	mov	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4413      	add	r3, r2
 8007e08:	00db      	lsls	r3, r3, #3
 8007e0a:	440b      	add	r3, r1
 8007e0c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	78fb      	ldrb	r3, [r7, #3]
 8007e14:	4619      	mov	r1, r3
 8007e16:	f7fe fe55 	bl	8006ac4 <USBD_LL_DataOutStage>
}
 8007e1a:	bf00      	nop
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b082      	sub	sp, #8
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007e34:	78fa      	ldrb	r2, [r7, #3]
 8007e36:	6879      	ldr	r1, [r7, #4]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	4413      	add	r3, r2
 8007e3e:	00db      	lsls	r3, r3, #3
 8007e40:	440b      	add	r3, r1
 8007e42:	333c      	adds	r3, #60	; 0x3c
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	78fb      	ldrb	r3, [r7, #3]
 8007e48:	4619      	mov	r1, r3
 8007e4a:	f7fe feac 	bl	8006ba6 <USBD_LL_DataInStage>
}
 8007e4e:	bf00      	nop
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b082      	sub	sp, #8
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7fe ffb7 	bl	8006dd8 <USBD_LL_SOF>
}
 8007e6a:	bf00      	nop
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b084      	sub	sp, #16
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d001      	beq.n	8007e8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007e86:	f7f8 fc67 	bl	8000758 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e90:	7bfa      	ldrb	r2, [r7, #15]
 8007e92:	4611      	mov	r1, r2
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7fe ff6c 	bl	8006d72 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fe ff25 	bl	8006cf0 <USBD_LL_Reset>
}
 8007ea6:	bf00      	nop
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
	...

08007eb0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fe ff66 	bl	8006d90 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d005      	beq.n	8007ed8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ecc:	4b04      	ldr	r3, [pc, #16]	; (8007ee0 <HAL_PCD_SuspendCallback+0x30>)
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	4a03      	ldr	r2, [pc, #12]	; (8007ee0 <HAL_PCD_SuspendCallback+0x30>)
 8007ed2:	f043 0306 	orr.w	r3, r3, #6
 8007ed6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ed8:	bf00      	nop
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	e000ed00 	.word	0xe000ed00

08007ee4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fe ff60 	bl	8006db8 <USBD_LL_Resume>
}
 8007ef8:	bf00      	nop
 8007efa:	3708      	adds	r7, #8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007f08:	4a28      	ldr	r2, [pc, #160]	; (8007fac <USBD_LL_Init+0xac>)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a26      	ldr	r2, [pc, #152]	; (8007fac <USBD_LL_Init+0xac>)
 8007f14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8007f18:	4b24      	ldr	r3, [pc, #144]	; (8007fac <USBD_LL_Init+0xac>)
 8007f1a:	4a25      	ldr	r2, [pc, #148]	; (8007fb0 <USBD_LL_Init+0xb0>)
 8007f1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007f1e:	4b23      	ldr	r3, [pc, #140]	; (8007fac <USBD_LL_Init+0xac>)
 8007f20:	2208      	movs	r2, #8
 8007f22:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007f24:	4b21      	ldr	r3, [pc, #132]	; (8007fac <USBD_LL_Init+0xac>)
 8007f26:	2202      	movs	r2, #2
 8007f28:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007f2a:	4b20      	ldr	r3, [pc, #128]	; (8007fac <USBD_LL_Init+0xac>)
 8007f2c:	2202      	movs	r2, #2
 8007f2e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007f30:	4b1e      	ldr	r3, [pc, #120]	; (8007fac <USBD_LL_Init+0xac>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007f36:	4b1d      	ldr	r3, [pc, #116]	; (8007fac <USBD_LL_Init+0xac>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007f3c:	481b      	ldr	r0, [pc, #108]	; (8007fac <USBD_LL_Init+0xac>)
 8007f3e:	f7f9 f9ef 	bl	8001320 <HAL_PCD_Init>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d001      	beq.n	8007f4c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007f48:	f7f8 fc06 	bl	8000758 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007f52:	2318      	movs	r3, #24
 8007f54:	2200      	movs	r2, #0
 8007f56:	2100      	movs	r1, #0
 8007f58:	f7fa fdcc 	bl	8002af4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007f62:	2358      	movs	r3, #88	; 0x58
 8007f64:	2200      	movs	r2, #0
 8007f66:	2180      	movs	r1, #128	; 0x80
 8007f68:	f7fa fdc4 	bl	8002af4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007f72:	23c0      	movs	r3, #192	; 0xc0
 8007f74:	2200      	movs	r2, #0
 8007f76:	2181      	movs	r1, #129	; 0x81
 8007f78:	f7fa fdbc 	bl	8002af4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007f82:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007f86:	2200      	movs	r2, #0
 8007f88:	2101      	movs	r1, #1
 8007f8a:	f7fa fdb3 	bl	8002af4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007f94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f98:	2200      	movs	r2, #0
 8007f9a:	2182      	movs	r1, #130	; 0x82
 8007f9c:	f7fa fdaa 	bl	8002af4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	20000f50 	.word	0x20000f50
 8007fb0:	40005c00 	.word	0x40005c00

08007fb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7f9 fa86 	bl	80014dc <HAL_PCD_Start>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fd4:	7bfb      	ldrb	r3, [r7, #15]
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 f944 	bl	8008264 <USBD_Get_USB_Status>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fe0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	4608      	mov	r0, r1
 8007ff4:	4611      	mov	r1, r2
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	70fb      	strb	r3, [r7, #3]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	70bb      	strb	r3, [r7, #2]
 8008000:	4613      	mov	r3, r2
 8008002:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008004:	2300      	movs	r3, #0
 8008006:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008012:	78bb      	ldrb	r3, [r7, #2]
 8008014:	883a      	ldrh	r2, [r7, #0]
 8008016:	78f9      	ldrb	r1, [r7, #3]
 8008018:	f7f9 fba2 	bl	8001760 <HAL_PCD_EP_Open>
 800801c:	4603      	mov	r3, r0
 800801e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008020:	7bfb      	ldrb	r3, [r7, #15]
 8008022:	4618      	mov	r0, r3
 8008024:	f000 f91e 	bl	8008264 <USBD_Get_USB_Status>
 8008028:	4603      	mov	r3, r0
 800802a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800802c:	7bbb      	ldrb	r3, [r7, #14]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b084      	sub	sp, #16
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	460b      	mov	r3, r1
 8008040:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008050:	78fa      	ldrb	r2, [r7, #3]
 8008052:	4611      	mov	r1, r2
 8008054:	4618      	mov	r0, r3
 8008056:	f7f9 fbe9 	bl	800182c <HAL_PCD_EP_Close>
 800805a:	4603      	mov	r3, r0
 800805c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800805e:	7bfb      	ldrb	r3, [r7, #15]
 8008060:	4618      	mov	r0, r3
 8008062:	f000 f8ff 	bl	8008264 <USBD_Get_USB_Status>
 8008066:	4603      	mov	r3, r0
 8008068:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800806a:	7bbb      	ldrb	r3, [r7, #14]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	460b      	mov	r3, r1
 800807e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008080:	2300      	movs	r3, #0
 8008082:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800808e:	78fa      	ldrb	r2, [r7, #3]
 8008090:	4611      	mov	r1, r2
 8008092:	4618      	mov	r0, r3
 8008094:	f7f9 fca9 	bl	80019ea <HAL_PCD_EP_SetStall>
 8008098:	4603      	mov	r3, r0
 800809a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800809c:	7bfb      	ldrb	r3, [r7, #15]
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 f8e0 	bl	8008264 <USBD_Get_USB_Status>
 80080a4:	4603      	mov	r3, r0
 80080a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b084      	sub	sp, #16
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	460b      	mov	r3, r1
 80080bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80080cc:	78fa      	ldrb	r2, [r7, #3]
 80080ce:	4611      	mov	r1, r2
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7f9 fcdc 	bl	8001a8e <HAL_PCD_EP_ClrStall>
 80080d6:	4603      	mov	r3, r0
 80080d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080da:	7bfb      	ldrb	r3, [r7, #15]
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 f8c1 	bl	8008264 <USBD_Get_USB_Status>
 80080e2:	4603      	mov	r3, r0
 80080e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	460b      	mov	r3, r1
 80080fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008102:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008104:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008108:	2b00      	cmp	r3, #0
 800810a:	da0c      	bge.n	8008126 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800810c:	78fb      	ldrb	r3, [r7, #3]
 800810e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008112:	68f9      	ldr	r1, [r7, #12]
 8008114:	1c5a      	adds	r2, r3, #1
 8008116:	4613      	mov	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	00db      	lsls	r3, r3, #3
 800811e:	440b      	add	r3, r1
 8008120:	3302      	adds	r3, #2
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	e00b      	b.n	800813e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008126:	78fb      	ldrb	r3, [r7, #3]
 8008128:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800812c:	68f9      	ldr	r1, [r7, #12]
 800812e:	4613      	mov	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	00db      	lsls	r3, r3, #3
 8008136:	440b      	add	r3, r1
 8008138:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800813c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800813e:	4618      	mov	r0, r3
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	bc80      	pop	{r7}
 8008146:	4770      	bx	lr

08008148 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	460b      	mov	r3, r1
 8008152:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008158:	2300      	movs	r3, #0
 800815a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008162:	78fa      	ldrb	r2, [r7, #3]
 8008164:	4611      	mov	r1, r2
 8008166:	4618      	mov	r0, r3
 8008168:	f7f9 fad5 	bl	8001716 <HAL_PCD_SetAddress>
 800816c:	4603      	mov	r3, r0
 800816e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008170:	7bfb      	ldrb	r3, [r7, #15]
 8008172:	4618      	mov	r0, r3
 8008174:	f000 f876 	bl	8008264 <USBD_Get_USB_Status>
 8008178:	4603      	mov	r3, r0
 800817a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800817c:	7bbb      	ldrb	r3, [r7, #14]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b086      	sub	sp, #24
 800818a:	af00      	add	r7, sp, #0
 800818c:	60f8      	str	r0, [r7, #12]
 800818e:	607a      	str	r2, [r7, #4]
 8008190:	461a      	mov	r2, r3
 8008192:	460b      	mov	r3, r1
 8008194:	72fb      	strb	r3, [r7, #11]
 8008196:	4613      	mov	r3, r2
 8008198:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80081a8:	893b      	ldrh	r3, [r7, #8]
 80081aa:	7af9      	ldrb	r1, [r7, #11]
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	f7f9 fbd9 	bl	8001964 <HAL_PCD_EP_Transmit>
 80081b2:	4603      	mov	r3, r0
 80081b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081b6:	7dfb      	ldrb	r3, [r7, #23]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f000 f853 	bl	8008264 <USBD_Get_USB_Status>
 80081be:	4603      	mov	r3, r0
 80081c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3718      	adds	r7, #24
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	607a      	str	r2, [r7, #4]
 80081d6:	461a      	mov	r2, r3
 80081d8:	460b      	mov	r3, r1
 80081da:	72fb      	strb	r3, [r7, #11]
 80081dc:	4613      	mov	r3, r2
 80081de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80081ee:	893b      	ldrh	r3, [r7, #8]
 80081f0:	7af9      	ldrb	r1, [r7, #11]
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	f7f9 fb62 	bl	80018bc <HAL_PCD_EP_Receive>
 80081f8:	4603      	mov	r3, r0
 80081fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081fc:	7dfb      	ldrb	r3, [r7, #23]
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 f830 	bl	8008264 <USBD_Get_USB_Status>
 8008204:	4603      	mov	r3, r0
 8008206:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008208:	7dbb      	ldrb	r3, [r7, #22]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3718      	adds	r7, #24
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b082      	sub	sp, #8
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	460b      	mov	r3, r1
 800821c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008224:	78fa      	ldrb	r2, [r7, #3]
 8008226:	4611      	mov	r1, r2
 8008228:	4618      	mov	r0, r3
 800822a:	f7f9 fb84 	bl	8001936 <HAL_PCD_EP_GetRxCount>
 800822e:	4603      	mov	r3, r0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008240:	4b02      	ldr	r3, [pc, #8]	; (800824c <USBD_static_malloc+0x14>)
}
 8008242:	4618      	mov	r0, r3
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	bc80      	pop	{r7}
 800824a:	4770      	bx	lr
 800824c:	2000123c 	.word	0x2000123c

08008250 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]

}
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	bc80      	pop	{r7}
 8008260:	4770      	bx	lr
	...

08008264 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800826e:	2300      	movs	r3, #0
 8008270:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008272:	79fb      	ldrb	r3, [r7, #7]
 8008274:	2b03      	cmp	r3, #3
 8008276:	d817      	bhi.n	80082a8 <USBD_Get_USB_Status+0x44>
 8008278:	a201      	add	r2, pc, #4	; (adr r2, 8008280 <USBD_Get_USB_Status+0x1c>)
 800827a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827e:	bf00      	nop
 8008280:	08008291 	.word	0x08008291
 8008284:	08008297 	.word	0x08008297
 8008288:	0800829d 	.word	0x0800829d
 800828c:	080082a3 	.word	0x080082a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	73fb      	strb	r3, [r7, #15]
    break;
 8008294:	e00b      	b.n	80082ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008296:	2302      	movs	r3, #2
 8008298:	73fb      	strb	r3, [r7, #15]
    break;
 800829a:	e008      	b.n	80082ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800829c:	2301      	movs	r3, #1
 800829e:	73fb      	strb	r3, [r7, #15]
    break;
 80082a0:	e005      	b.n	80082ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80082a2:	2302      	movs	r3, #2
 80082a4:	73fb      	strb	r3, [r7, #15]
    break;
 80082a6:	e002      	b.n	80082ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80082a8:	2302      	movs	r3, #2
 80082aa:	73fb      	strb	r3, [r7, #15]
    break;
 80082ac:	bf00      	nop
  }
  return usb_status;
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bc80      	pop	{r7}
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop

080082bc <__errno>:
 80082bc:	4b01      	ldr	r3, [pc, #4]	; (80082c4 <__errno+0x8>)
 80082be:	6818      	ldr	r0, [r3, #0]
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	2000017c 	.word	0x2000017c

080082c8 <__libc_init_array>:
 80082c8:	b570      	push	{r4, r5, r6, lr}
 80082ca:	2600      	movs	r6, #0
 80082cc:	4d0c      	ldr	r5, [pc, #48]	; (8008300 <__libc_init_array+0x38>)
 80082ce:	4c0d      	ldr	r4, [pc, #52]	; (8008304 <__libc_init_array+0x3c>)
 80082d0:	1b64      	subs	r4, r4, r5
 80082d2:	10a4      	asrs	r4, r4, #2
 80082d4:	42a6      	cmp	r6, r4
 80082d6:	d109      	bne.n	80082ec <__libc_init_array+0x24>
 80082d8:	f000 fc9c 	bl	8008c14 <_init>
 80082dc:	2600      	movs	r6, #0
 80082de:	4d0a      	ldr	r5, [pc, #40]	; (8008308 <__libc_init_array+0x40>)
 80082e0:	4c0a      	ldr	r4, [pc, #40]	; (800830c <__libc_init_array+0x44>)
 80082e2:	1b64      	subs	r4, r4, r5
 80082e4:	10a4      	asrs	r4, r4, #2
 80082e6:	42a6      	cmp	r6, r4
 80082e8:	d105      	bne.n	80082f6 <__libc_init_array+0x2e>
 80082ea:	bd70      	pop	{r4, r5, r6, pc}
 80082ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80082f0:	4798      	blx	r3
 80082f2:	3601      	adds	r6, #1
 80082f4:	e7ee      	b.n	80082d4 <__libc_init_array+0xc>
 80082f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80082fa:	4798      	blx	r3
 80082fc:	3601      	adds	r6, #1
 80082fe:	e7f2      	b.n	80082e6 <__libc_init_array+0x1e>
 8008300:	08008ce4 	.word	0x08008ce4
 8008304:	08008ce4 	.word	0x08008ce4
 8008308:	08008ce4 	.word	0x08008ce4
 800830c:	08008ce8 	.word	0x08008ce8

08008310 <memset>:
 8008310:	4603      	mov	r3, r0
 8008312:	4402      	add	r2, r0
 8008314:	4293      	cmp	r3, r2
 8008316:	d100      	bne.n	800831a <memset+0xa>
 8008318:	4770      	bx	lr
 800831a:	f803 1b01 	strb.w	r1, [r3], #1
 800831e:	e7f9      	b.n	8008314 <memset+0x4>

08008320 <siprintf>:
 8008320:	b40e      	push	{r1, r2, r3}
 8008322:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008326:	b500      	push	{lr}
 8008328:	b09c      	sub	sp, #112	; 0x70
 800832a:	ab1d      	add	r3, sp, #116	; 0x74
 800832c:	9002      	str	r0, [sp, #8]
 800832e:	9006      	str	r0, [sp, #24]
 8008330:	9107      	str	r1, [sp, #28]
 8008332:	9104      	str	r1, [sp, #16]
 8008334:	4808      	ldr	r0, [pc, #32]	; (8008358 <siprintf+0x38>)
 8008336:	4909      	ldr	r1, [pc, #36]	; (800835c <siprintf+0x3c>)
 8008338:	f853 2b04 	ldr.w	r2, [r3], #4
 800833c:	9105      	str	r1, [sp, #20]
 800833e:	6800      	ldr	r0, [r0, #0]
 8008340:	a902      	add	r1, sp, #8
 8008342:	9301      	str	r3, [sp, #4]
 8008344:	f000 f868 	bl	8008418 <_svfiprintf_r>
 8008348:	2200      	movs	r2, #0
 800834a:	9b02      	ldr	r3, [sp, #8]
 800834c:	701a      	strb	r2, [r3, #0]
 800834e:	b01c      	add	sp, #112	; 0x70
 8008350:	f85d eb04 	ldr.w	lr, [sp], #4
 8008354:	b003      	add	sp, #12
 8008356:	4770      	bx	lr
 8008358:	2000017c 	.word	0x2000017c
 800835c:	ffff0208 	.word	0xffff0208

08008360 <__ssputs_r>:
 8008360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008364:	688e      	ldr	r6, [r1, #8]
 8008366:	4682      	mov	sl, r0
 8008368:	429e      	cmp	r6, r3
 800836a:	460c      	mov	r4, r1
 800836c:	4690      	mov	r8, r2
 800836e:	461f      	mov	r7, r3
 8008370:	d838      	bhi.n	80083e4 <__ssputs_r+0x84>
 8008372:	898a      	ldrh	r2, [r1, #12]
 8008374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008378:	d032      	beq.n	80083e0 <__ssputs_r+0x80>
 800837a:	6825      	ldr	r5, [r4, #0]
 800837c:	6909      	ldr	r1, [r1, #16]
 800837e:	3301      	adds	r3, #1
 8008380:	eba5 0901 	sub.w	r9, r5, r1
 8008384:	6965      	ldr	r5, [r4, #20]
 8008386:	444b      	add	r3, r9
 8008388:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800838c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008390:	106d      	asrs	r5, r5, #1
 8008392:	429d      	cmp	r5, r3
 8008394:	bf38      	it	cc
 8008396:	461d      	movcc	r5, r3
 8008398:	0553      	lsls	r3, r2, #21
 800839a:	d531      	bpl.n	8008400 <__ssputs_r+0xa0>
 800839c:	4629      	mov	r1, r5
 800839e:	f000 fb6f 	bl	8008a80 <_malloc_r>
 80083a2:	4606      	mov	r6, r0
 80083a4:	b950      	cbnz	r0, 80083bc <__ssputs_r+0x5c>
 80083a6:	230c      	movs	r3, #12
 80083a8:	f04f 30ff 	mov.w	r0, #4294967295
 80083ac:	f8ca 3000 	str.w	r3, [sl]
 80083b0:	89a3      	ldrh	r3, [r4, #12]
 80083b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083b6:	81a3      	strh	r3, [r4, #12]
 80083b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083bc:	464a      	mov	r2, r9
 80083be:	6921      	ldr	r1, [r4, #16]
 80083c0:	f000 face 	bl	8008960 <memcpy>
 80083c4:	89a3      	ldrh	r3, [r4, #12]
 80083c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ce:	81a3      	strh	r3, [r4, #12]
 80083d0:	6126      	str	r6, [r4, #16]
 80083d2:	444e      	add	r6, r9
 80083d4:	6026      	str	r6, [r4, #0]
 80083d6:	463e      	mov	r6, r7
 80083d8:	6165      	str	r5, [r4, #20]
 80083da:	eba5 0509 	sub.w	r5, r5, r9
 80083de:	60a5      	str	r5, [r4, #8]
 80083e0:	42be      	cmp	r6, r7
 80083e2:	d900      	bls.n	80083e6 <__ssputs_r+0x86>
 80083e4:	463e      	mov	r6, r7
 80083e6:	4632      	mov	r2, r6
 80083e8:	4641      	mov	r1, r8
 80083ea:	6820      	ldr	r0, [r4, #0]
 80083ec:	f000 fac6 	bl	800897c <memmove>
 80083f0:	68a3      	ldr	r3, [r4, #8]
 80083f2:	2000      	movs	r0, #0
 80083f4:	1b9b      	subs	r3, r3, r6
 80083f6:	60a3      	str	r3, [r4, #8]
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	4433      	add	r3, r6
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	e7db      	b.n	80083b8 <__ssputs_r+0x58>
 8008400:	462a      	mov	r2, r5
 8008402:	f000 fbb1 	bl	8008b68 <_realloc_r>
 8008406:	4606      	mov	r6, r0
 8008408:	2800      	cmp	r0, #0
 800840a:	d1e1      	bne.n	80083d0 <__ssputs_r+0x70>
 800840c:	4650      	mov	r0, sl
 800840e:	6921      	ldr	r1, [r4, #16]
 8008410:	f000 face 	bl	80089b0 <_free_r>
 8008414:	e7c7      	b.n	80083a6 <__ssputs_r+0x46>
	...

08008418 <_svfiprintf_r>:
 8008418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800841c:	4698      	mov	r8, r3
 800841e:	898b      	ldrh	r3, [r1, #12]
 8008420:	4607      	mov	r7, r0
 8008422:	061b      	lsls	r3, r3, #24
 8008424:	460d      	mov	r5, r1
 8008426:	4614      	mov	r4, r2
 8008428:	b09d      	sub	sp, #116	; 0x74
 800842a:	d50e      	bpl.n	800844a <_svfiprintf_r+0x32>
 800842c:	690b      	ldr	r3, [r1, #16]
 800842e:	b963      	cbnz	r3, 800844a <_svfiprintf_r+0x32>
 8008430:	2140      	movs	r1, #64	; 0x40
 8008432:	f000 fb25 	bl	8008a80 <_malloc_r>
 8008436:	6028      	str	r0, [r5, #0]
 8008438:	6128      	str	r0, [r5, #16]
 800843a:	b920      	cbnz	r0, 8008446 <_svfiprintf_r+0x2e>
 800843c:	230c      	movs	r3, #12
 800843e:	603b      	str	r3, [r7, #0]
 8008440:	f04f 30ff 	mov.w	r0, #4294967295
 8008444:	e0d1      	b.n	80085ea <_svfiprintf_r+0x1d2>
 8008446:	2340      	movs	r3, #64	; 0x40
 8008448:	616b      	str	r3, [r5, #20]
 800844a:	2300      	movs	r3, #0
 800844c:	9309      	str	r3, [sp, #36]	; 0x24
 800844e:	2320      	movs	r3, #32
 8008450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008454:	2330      	movs	r3, #48	; 0x30
 8008456:	f04f 0901 	mov.w	r9, #1
 800845a:	f8cd 800c 	str.w	r8, [sp, #12]
 800845e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008604 <_svfiprintf_r+0x1ec>
 8008462:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008466:	4623      	mov	r3, r4
 8008468:	469a      	mov	sl, r3
 800846a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800846e:	b10a      	cbz	r2, 8008474 <_svfiprintf_r+0x5c>
 8008470:	2a25      	cmp	r2, #37	; 0x25
 8008472:	d1f9      	bne.n	8008468 <_svfiprintf_r+0x50>
 8008474:	ebba 0b04 	subs.w	fp, sl, r4
 8008478:	d00b      	beq.n	8008492 <_svfiprintf_r+0x7a>
 800847a:	465b      	mov	r3, fp
 800847c:	4622      	mov	r2, r4
 800847e:	4629      	mov	r1, r5
 8008480:	4638      	mov	r0, r7
 8008482:	f7ff ff6d 	bl	8008360 <__ssputs_r>
 8008486:	3001      	adds	r0, #1
 8008488:	f000 80aa 	beq.w	80085e0 <_svfiprintf_r+0x1c8>
 800848c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800848e:	445a      	add	r2, fp
 8008490:	9209      	str	r2, [sp, #36]	; 0x24
 8008492:	f89a 3000 	ldrb.w	r3, [sl]
 8008496:	2b00      	cmp	r3, #0
 8008498:	f000 80a2 	beq.w	80085e0 <_svfiprintf_r+0x1c8>
 800849c:	2300      	movs	r3, #0
 800849e:	f04f 32ff 	mov.w	r2, #4294967295
 80084a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084a6:	f10a 0a01 	add.w	sl, sl, #1
 80084aa:	9304      	str	r3, [sp, #16]
 80084ac:	9307      	str	r3, [sp, #28]
 80084ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084b2:	931a      	str	r3, [sp, #104]	; 0x68
 80084b4:	4654      	mov	r4, sl
 80084b6:	2205      	movs	r2, #5
 80084b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084bc:	4851      	ldr	r0, [pc, #324]	; (8008604 <_svfiprintf_r+0x1ec>)
 80084be:	f000 fa41 	bl	8008944 <memchr>
 80084c2:	9a04      	ldr	r2, [sp, #16]
 80084c4:	b9d8      	cbnz	r0, 80084fe <_svfiprintf_r+0xe6>
 80084c6:	06d0      	lsls	r0, r2, #27
 80084c8:	bf44      	itt	mi
 80084ca:	2320      	movmi	r3, #32
 80084cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084d0:	0711      	lsls	r1, r2, #28
 80084d2:	bf44      	itt	mi
 80084d4:	232b      	movmi	r3, #43	; 0x2b
 80084d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084da:	f89a 3000 	ldrb.w	r3, [sl]
 80084de:	2b2a      	cmp	r3, #42	; 0x2a
 80084e0:	d015      	beq.n	800850e <_svfiprintf_r+0xf6>
 80084e2:	4654      	mov	r4, sl
 80084e4:	2000      	movs	r0, #0
 80084e6:	f04f 0c0a 	mov.w	ip, #10
 80084ea:	9a07      	ldr	r2, [sp, #28]
 80084ec:	4621      	mov	r1, r4
 80084ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084f2:	3b30      	subs	r3, #48	; 0x30
 80084f4:	2b09      	cmp	r3, #9
 80084f6:	d94e      	bls.n	8008596 <_svfiprintf_r+0x17e>
 80084f8:	b1b0      	cbz	r0, 8008528 <_svfiprintf_r+0x110>
 80084fa:	9207      	str	r2, [sp, #28]
 80084fc:	e014      	b.n	8008528 <_svfiprintf_r+0x110>
 80084fe:	eba0 0308 	sub.w	r3, r0, r8
 8008502:	fa09 f303 	lsl.w	r3, r9, r3
 8008506:	4313      	orrs	r3, r2
 8008508:	46a2      	mov	sl, r4
 800850a:	9304      	str	r3, [sp, #16]
 800850c:	e7d2      	b.n	80084b4 <_svfiprintf_r+0x9c>
 800850e:	9b03      	ldr	r3, [sp, #12]
 8008510:	1d19      	adds	r1, r3, #4
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	9103      	str	r1, [sp, #12]
 8008516:	2b00      	cmp	r3, #0
 8008518:	bfbb      	ittet	lt
 800851a:	425b      	neglt	r3, r3
 800851c:	f042 0202 	orrlt.w	r2, r2, #2
 8008520:	9307      	strge	r3, [sp, #28]
 8008522:	9307      	strlt	r3, [sp, #28]
 8008524:	bfb8      	it	lt
 8008526:	9204      	strlt	r2, [sp, #16]
 8008528:	7823      	ldrb	r3, [r4, #0]
 800852a:	2b2e      	cmp	r3, #46	; 0x2e
 800852c:	d10c      	bne.n	8008548 <_svfiprintf_r+0x130>
 800852e:	7863      	ldrb	r3, [r4, #1]
 8008530:	2b2a      	cmp	r3, #42	; 0x2a
 8008532:	d135      	bne.n	80085a0 <_svfiprintf_r+0x188>
 8008534:	9b03      	ldr	r3, [sp, #12]
 8008536:	3402      	adds	r4, #2
 8008538:	1d1a      	adds	r2, r3, #4
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	9203      	str	r2, [sp, #12]
 800853e:	2b00      	cmp	r3, #0
 8008540:	bfb8      	it	lt
 8008542:	f04f 33ff 	movlt.w	r3, #4294967295
 8008546:	9305      	str	r3, [sp, #20]
 8008548:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008608 <_svfiprintf_r+0x1f0>
 800854c:	2203      	movs	r2, #3
 800854e:	4650      	mov	r0, sl
 8008550:	7821      	ldrb	r1, [r4, #0]
 8008552:	f000 f9f7 	bl	8008944 <memchr>
 8008556:	b140      	cbz	r0, 800856a <_svfiprintf_r+0x152>
 8008558:	2340      	movs	r3, #64	; 0x40
 800855a:	eba0 000a 	sub.w	r0, r0, sl
 800855e:	fa03 f000 	lsl.w	r0, r3, r0
 8008562:	9b04      	ldr	r3, [sp, #16]
 8008564:	3401      	adds	r4, #1
 8008566:	4303      	orrs	r3, r0
 8008568:	9304      	str	r3, [sp, #16]
 800856a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800856e:	2206      	movs	r2, #6
 8008570:	4826      	ldr	r0, [pc, #152]	; (800860c <_svfiprintf_r+0x1f4>)
 8008572:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008576:	f000 f9e5 	bl	8008944 <memchr>
 800857a:	2800      	cmp	r0, #0
 800857c:	d038      	beq.n	80085f0 <_svfiprintf_r+0x1d8>
 800857e:	4b24      	ldr	r3, [pc, #144]	; (8008610 <_svfiprintf_r+0x1f8>)
 8008580:	bb1b      	cbnz	r3, 80085ca <_svfiprintf_r+0x1b2>
 8008582:	9b03      	ldr	r3, [sp, #12]
 8008584:	3307      	adds	r3, #7
 8008586:	f023 0307 	bic.w	r3, r3, #7
 800858a:	3308      	adds	r3, #8
 800858c:	9303      	str	r3, [sp, #12]
 800858e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008590:	4433      	add	r3, r6
 8008592:	9309      	str	r3, [sp, #36]	; 0x24
 8008594:	e767      	b.n	8008466 <_svfiprintf_r+0x4e>
 8008596:	460c      	mov	r4, r1
 8008598:	2001      	movs	r0, #1
 800859a:	fb0c 3202 	mla	r2, ip, r2, r3
 800859e:	e7a5      	b.n	80084ec <_svfiprintf_r+0xd4>
 80085a0:	2300      	movs	r3, #0
 80085a2:	f04f 0c0a 	mov.w	ip, #10
 80085a6:	4619      	mov	r1, r3
 80085a8:	3401      	adds	r4, #1
 80085aa:	9305      	str	r3, [sp, #20]
 80085ac:	4620      	mov	r0, r4
 80085ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085b2:	3a30      	subs	r2, #48	; 0x30
 80085b4:	2a09      	cmp	r2, #9
 80085b6:	d903      	bls.n	80085c0 <_svfiprintf_r+0x1a8>
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d0c5      	beq.n	8008548 <_svfiprintf_r+0x130>
 80085bc:	9105      	str	r1, [sp, #20]
 80085be:	e7c3      	b.n	8008548 <_svfiprintf_r+0x130>
 80085c0:	4604      	mov	r4, r0
 80085c2:	2301      	movs	r3, #1
 80085c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80085c8:	e7f0      	b.n	80085ac <_svfiprintf_r+0x194>
 80085ca:	ab03      	add	r3, sp, #12
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	462a      	mov	r2, r5
 80085d0:	4638      	mov	r0, r7
 80085d2:	4b10      	ldr	r3, [pc, #64]	; (8008614 <_svfiprintf_r+0x1fc>)
 80085d4:	a904      	add	r1, sp, #16
 80085d6:	f3af 8000 	nop.w
 80085da:	1c42      	adds	r2, r0, #1
 80085dc:	4606      	mov	r6, r0
 80085de:	d1d6      	bne.n	800858e <_svfiprintf_r+0x176>
 80085e0:	89ab      	ldrh	r3, [r5, #12]
 80085e2:	065b      	lsls	r3, r3, #25
 80085e4:	f53f af2c 	bmi.w	8008440 <_svfiprintf_r+0x28>
 80085e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085ea:	b01d      	add	sp, #116	; 0x74
 80085ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f0:	ab03      	add	r3, sp, #12
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	462a      	mov	r2, r5
 80085f6:	4638      	mov	r0, r7
 80085f8:	4b06      	ldr	r3, [pc, #24]	; (8008614 <_svfiprintf_r+0x1fc>)
 80085fa:	a904      	add	r1, sp, #16
 80085fc:	f000 f87c 	bl	80086f8 <_printf_i>
 8008600:	e7eb      	b.n	80085da <_svfiprintf_r+0x1c2>
 8008602:	bf00      	nop
 8008604:	08008ca8 	.word	0x08008ca8
 8008608:	08008cae 	.word	0x08008cae
 800860c:	08008cb2 	.word	0x08008cb2
 8008610:	00000000 	.word	0x00000000
 8008614:	08008361 	.word	0x08008361

08008618 <_printf_common>:
 8008618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800861c:	4616      	mov	r6, r2
 800861e:	4699      	mov	r9, r3
 8008620:	688a      	ldr	r2, [r1, #8]
 8008622:	690b      	ldr	r3, [r1, #16]
 8008624:	4607      	mov	r7, r0
 8008626:	4293      	cmp	r3, r2
 8008628:	bfb8      	it	lt
 800862a:	4613      	movlt	r3, r2
 800862c:	6033      	str	r3, [r6, #0]
 800862e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008632:	460c      	mov	r4, r1
 8008634:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008638:	b10a      	cbz	r2, 800863e <_printf_common+0x26>
 800863a:	3301      	adds	r3, #1
 800863c:	6033      	str	r3, [r6, #0]
 800863e:	6823      	ldr	r3, [r4, #0]
 8008640:	0699      	lsls	r1, r3, #26
 8008642:	bf42      	ittt	mi
 8008644:	6833      	ldrmi	r3, [r6, #0]
 8008646:	3302      	addmi	r3, #2
 8008648:	6033      	strmi	r3, [r6, #0]
 800864a:	6825      	ldr	r5, [r4, #0]
 800864c:	f015 0506 	ands.w	r5, r5, #6
 8008650:	d106      	bne.n	8008660 <_printf_common+0x48>
 8008652:	f104 0a19 	add.w	sl, r4, #25
 8008656:	68e3      	ldr	r3, [r4, #12]
 8008658:	6832      	ldr	r2, [r6, #0]
 800865a:	1a9b      	subs	r3, r3, r2
 800865c:	42ab      	cmp	r3, r5
 800865e:	dc28      	bgt.n	80086b2 <_printf_common+0x9a>
 8008660:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008664:	1e13      	subs	r3, r2, #0
 8008666:	6822      	ldr	r2, [r4, #0]
 8008668:	bf18      	it	ne
 800866a:	2301      	movne	r3, #1
 800866c:	0692      	lsls	r2, r2, #26
 800866e:	d42d      	bmi.n	80086cc <_printf_common+0xb4>
 8008670:	4649      	mov	r1, r9
 8008672:	4638      	mov	r0, r7
 8008674:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008678:	47c0      	blx	r8
 800867a:	3001      	adds	r0, #1
 800867c:	d020      	beq.n	80086c0 <_printf_common+0xa8>
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	68e5      	ldr	r5, [r4, #12]
 8008682:	f003 0306 	and.w	r3, r3, #6
 8008686:	2b04      	cmp	r3, #4
 8008688:	bf18      	it	ne
 800868a:	2500      	movne	r5, #0
 800868c:	6832      	ldr	r2, [r6, #0]
 800868e:	f04f 0600 	mov.w	r6, #0
 8008692:	68a3      	ldr	r3, [r4, #8]
 8008694:	bf08      	it	eq
 8008696:	1aad      	subeq	r5, r5, r2
 8008698:	6922      	ldr	r2, [r4, #16]
 800869a:	bf08      	it	eq
 800869c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086a0:	4293      	cmp	r3, r2
 80086a2:	bfc4      	itt	gt
 80086a4:	1a9b      	subgt	r3, r3, r2
 80086a6:	18ed      	addgt	r5, r5, r3
 80086a8:	341a      	adds	r4, #26
 80086aa:	42b5      	cmp	r5, r6
 80086ac:	d11a      	bne.n	80086e4 <_printf_common+0xcc>
 80086ae:	2000      	movs	r0, #0
 80086b0:	e008      	b.n	80086c4 <_printf_common+0xac>
 80086b2:	2301      	movs	r3, #1
 80086b4:	4652      	mov	r2, sl
 80086b6:	4649      	mov	r1, r9
 80086b8:	4638      	mov	r0, r7
 80086ba:	47c0      	blx	r8
 80086bc:	3001      	adds	r0, #1
 80086be:	d103      	bne.n	80086c8 <_printf_common+0xb0>
 80086c0:	f04f 30ff 	mov.w	r0, #4294967295
 80086c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c8:	3501      	adds	r5, #1
 80086ca:	e7c4      	b.n	8008656 <_printf_common+0x3e>
 80086cc:	2030      	movs	r0, #48	; 0x30
 80086ce:	18e1      	adds	r1, r4, r3
 80086d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086d4:	1c5a      	adds	r2, r3, #1
 80086d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086da:	4422      	add	r2, r4
 80086dc:	3302      	adds	r3, #2
 80086de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086e2:	e7c5      	b.n	8008670 <_printf_common+0x58>
 80086e4:	2301      	movs	r3, #1
 80086e6:	4622      	mov	r2, r4
 80086e8:	4649      	mov	r1, r9
 80086ea:	4638      	mov	r0, r7
 80086ec:	47c0      	blx	r8
 80086ee:	3001      	adds	r0, #1
 80086f0:	d0e6      	beq.n	80086c0 <_printf_common+0xa8>
 80086f2:	3601      	adds	r6, #1
 80086f4:	e7d9      	b.n	80086aa <_printf_common+0x92>
	...

080086f8 <_printf_i>:
 80086f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086fc:	7e0f      	ldrb	r7, [r1, #24]
 80086fe:	4691      	mov	r9, r2
 8008700:	2f78      	cmp	r7, #120	; 0x78
 8008702:	4680      	mov	r8, r0
 8008704:	460c      	mov	r4, r1
 8008706:	469a      	mov	sl, r3
 8008708:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800870a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800870e:	d807      	bhi.n	8008720 <_printf_i+0x28>
 8008710:	2f62      	cmp	r7, #98	; 0x62
 8008712:	d80a      	bhi.n	800872a <_printf_i+0x32>
 8008714:	2f00      	cmp	r7, #0
 8008716:	f000 80d9 	beq.w	80088cc <_printf_i+0x1d4>
 800871a:	2f58      	cmp	r7, #88	; 0x58
 800871c:	f000 80a4 	beq.w	8008868 <_printf_i+0x170>
 8008720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008724:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008728:	e03a      	b.n	80087a0 <_printf_i+0xa8>
 800872a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800872e:	2b15      	cmp	r3, #21
 8008730:	d8f6      	bhi.n	8008720 <_printf_i+0x28>
 8008732:	a101      	add	r1, pc, #4	; (adr r1, 8008738 <_printf_i+0x40>)
 8008734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008738:	08008791 	.word	0x08008791
 800873c:	080087a5 	.word	0x080087a5
 8008740:	08008721 	.word	0x08008721
 8008744:	08008721 	.word	0x08008721
 8008748:	08008721 	.word	0x08008721
 800874c:	08008721 	.word	0x08008721
 8008750:	080087a5 	.word	0x080087a5
 8008754:	08008721 	.word	0x08008721
 8008758:	08008721 	.word	0x08008721
 800875c:	08008721 	.word	0x08008721
 8008760:	08008721 	.word	0x08008721
 8008764:	080088b3 	.word	0x080088b3
 8008768:	080087d5 	.word	0x080087d5
 800876c:	08008895 	.word	0x08008895
 8008770:	08008721 	.word	0x08008721
 8008774:	08008721 	.word	0x08008721
 8008778:	080088d5 	.word	0x080088d5
 800877c:	08008721 	.word	0x08008721
 8008780:	080087d5 	.word	0x080087d5
 8008784:	08008721 	.word	0x08008721
 8008788:	08008721 	.word	0x08008721
 800878c:	0800889d 	.word	0x0800889d
 8008790:	682b      	ldr	r3, [r5, #0]
 8008792:	1d1a      	adds	r2, r3, #4
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	602a      	str	r2, [r5, #0]
 8008798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800879c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087a0:	2301      	movs	r3, #1
 80087a2:	e0a4      	b.n	80088ee <_printf_i+0x1f6>
 80087a4:	6820      	ldr	r0, [r4, #0]
 80087a6:	6829      	ldr	r1, [r5, #0]
 80087a8:	0606      	lsls	r6, r0, #24
 80087aa:	f101 0304 	add.w	r3, r1, #4
 80087ae:	d50a      	bpl.n	80087c6 <_printf_i+0xce>
 80087b0:	680e      	ldr	r6, [r1, #0]
 80087b2:	602b      	str	r3, [r5, #0]
 80087b4:	2e00      	cmp	r6, #0
 80087b6:	da03      	bge.n	80087c0 <_printf_i+0xc8>
 80087b8:	232d      	movs	r3, #45	; 0x2d
 80087ba:	4276      	negs	r6, r6
 80087bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087c0:	230a      	movs	r3, #10
 80087c2:	485e      	ldr	r0, [pc, #376]	; (800893c <_printf_i+0x244>)
 80087c4:	e019      	b.n	80087fa <_printf_i+0x102>
 80087c6:	680e      	ldr	r6, [r1, #0]
 80087c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80087cc:	602b      	str	r3, [r5, #0]
 80087ce:	bf18      	it	ne
 80087d0:	b236      	sxthne	r6, r6
 80087d2:	e7ef      	b.n	80087b4 <_printf_i+0xbc>
 80087d4:	682b      	ldr	r3, [r5, #0]
 80087d6:	6820      	ldr	r0, [r4, #0]
 80087d8:	1d19      	adds	r1, r3, #4
 80087da:	6029      	str	r1, [r5, #0]
 80087dc:	0601      	lsls	r1, r0, #24
 80087de:	d501      	bpl.n	80087e4 <_printf_i+0xec>
 80087e0:	681e      	ldr	r6, [r3, #0]
 80087e2:	e002      	b.n	80087ea <_printf_i+0xf2>
 80087e4:	0646      	lsls	r6, r0, #25
 80087e6:	d5fb      	bpl.n	80087e0 <_printf_i+0xe8>
 80087e8:	881e      	ldrh	r6, [r3, #0]
 80087ea:	2f6f      	cmp	r7, #111	; 0x6f
 80087ec:	bf0c      	ite	eq
 80087ee:	2308      	moveq	r3, #8
 80087f0:	230a      	movne	r3, #10
 80087f2:	4852      	ldr	r0, [pc, #328]	; (800893c <_printf_i+0x244>)
 80087f4:	2100      	movs	r1, #0
 80087f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087fa:	6865      	ldr	r5, [r4, #4]
 80087fc:	2d00      	cmp	r5, #0
 80087fe:	bfa8      	it	ge
 8008800:	6821      	ldrge	r1, [r4, #0]
 8008802:	60a5      	str	r5, [r4, #8]
 8008804:	bfa4      	itt	ge
 8008806:	f021 0104 	bicge.w	r1, r1, #4
 800880a:	6021      	strge	r1, [r4, #0]
 800880c:	b90e      	cbnz	r6, 8008812 <_printf_i+0x11a>
 800880e:	2d00      	cmp	r5, #0
 8008810:	d04d      	beq.n	80088ae <_printf_i+0x1b6>
 8008812:	4615      	mov	r5, r2
 8008814:	fbb6 f1f3 	udiv	r1, r6, r3
 8008818:	fb03 6711 	mls	r7, r3, r1, r6
 800881c:	5dc7      	ldrb	r7, [r0, r7]
 800881e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008822:	4637      	mov	r7, r6
 8008824:	42bb      	cmp	r3, r7
 8008826:	460e      	mov	r6, r1
 8008828:	d9f4      	bls.n	8008814 <_printf_i+0x11c>
 800882a:	2b08      	cmp	r3, #8
 800882c:	d10b      	bne.n	8008846 <_printf_i+0x14e>
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	07de      	lsls	r6, r3, #31
 8008832:	d508      	bpl.n	8008846 <_printf_i+0x14e>
 8008834:	6923      	ldr	r3, [r4, #16]
 8008836:	6861      	ldr	r1, [r4, #4]
 8008838:	4299      	cmp	r1, r3
 800883a:	bfde      	ittt	le
 800883c:	2330      	movle	r3, #48	; 0x30
 800883e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008842:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008846:	1b52      	subs	r2, r2, r5
 8008848:	6122      	str	r2, [r4, #16]
 800884a:	464b      	mov	r3, r9
 800884c:	4621      	mov	r1, r4
 800884e:	4640      	mov	r0, r8
 8008850:	f8cd a000 	str.w	sl, [sp]
 8008854:	aa03      	add	r2, sp, #12
 8008856:	f7ff fedf 	bl	8008618 <_printf_common>
 800885a:	3001      	adds	r0, #1
 800885c:	d14c      	bne.n	80088f8 <_printf_i+0x200>
 800885e:	f04f 30ff 	mov.w	r0, #4294967295
 8008862:	b004      	add	sp, #16
 8008864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008868:	4834      	ldr	r0, [pc, #208]	; (800893c <_printf_i+0x244>)
 800886a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800886e:	6829      	ldr	r1, [r5, #0]
 8008870:	6823      	ldr	r3, [r4, #0]
 8008872:	f851 6b04 	ldr.w	r6, [r1], #4
 8008876:	6029      	str	r1, [r5, #0]
 8008878:	061d      	lsls	r5, r3, #24
 800887a:	d514      	bpl.n	80088a6 <_printf_i+0x1ae>
 800887c:	07df      	lsls	r7, r3, #31
 800887e:	bf44      	itt	mi
 8008880:	f043 0320 	orrmi.w	r3, r3, #32
 8008884:	6023      	strmi	r3, [r4, #0]
 8008886:	b91e      	cbnz	r6, 8008890 <_printf_i+0x198>
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	f023 0320 	bic.w	r3, r3, #32
 800888e:	6023      	str	r3, [r4, #0]
 8008890:	2310      	movs	r3, #16
 8008892:	e7af      	b.n	80087f4 <_printf_i+0xfc>
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	f043 0320 	orr.w	r3, r3, #32
 800889a:	6023      	str	r3, [r4, #0]
 800889c:	2378      	movs	r3, #120	; 0x78
 800889e:	4828      	ldr	r0, [pc, #160]	; (8008940 <_printf_i+0x248>)
 80088a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088a4:	e7e3      	b.n	800886e <_printf_i+0x176>
 80088a6:	0659      	lsls	r1, r3, #25
 80088a8:	bf48      	it	mi
 80088aa:	b2b6      	uxthmi	r6, r6
 80088ac:	e7e6      	b.n	800887c <_printf_i+0x184>
 80088ae:	4615      	mov	r5, r2
 80088b0:	e7bb      	b.n	800882a <_printf_i+0x132>
 80088b2:	682b      	ldr	r3, [r5, #0]
 80088b4:	6826      	ldr	r6, [r4, #0]
 80088b6:	1d18      	adds	r0, r3, #4
 80088b8:	6961      	ldr	r1, [r4, #20]
 80088ba:	6028      	str	r0, [r5, #0]
 80088bc:	0635      	lsls	r5, r6, #24
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	d501      	bpl.n	80088c6 <_printf_i+0x1ce>
 80088c2:	6019      	str	r1, [r3, #0]
 80088c4:	e002      	b.n	80088cc <_printf_i+0x1d4>
 80088c6:	0670      	lsls	r0, r6, #25
 80088c8:	d5fb      	bpl.n	80088c2 <_printf_i+0x1ca>
 80088ca:	8019      	strh	r1, [r3, #0]
 80088cc:	2300      	movs	r3, #0
 80088ce:	4615      	mov	r5, r2
 80088d0:	6123      	str	r3, [r4, #16]
 80088d2:	e7ba      	b.n	800884a <_printf_i+0x152>
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	2100      	movs	r1, #0
 80088d8:	1d1a      	adds	r2, r3, #4
 80088da:	602a      	str	r2, [r5, #0]
 80088dc:	681d      	ldr	r5, [r3, #0]
 80088de:	6862      	ldr	r2, [r4, #4]
 80088e0:	4628      	mov	r0, r5
 80088e2:	f000 f82f 	bl	8008944 <memchr>
 80088e6:	b108      	cbz	r0, 80088ec <_printf_i+0x1f4>
 80088e8:	1b40      	subs	r0, r0, r5
 80088ea:	6060      	str	r0, [r4, #4]
 80088ec:	6863      	ldr	r3, [r4, #4]
 80088ee:	6123      	str	r3, [r4, #16]
 80088f0:	2300      	movs	r3, #0
 80088f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088f6:	e7a8      	b.n	800884a <_printf_i+0x152>
 80088f8:	462a      	mov	r2, r5
 80088fa:	4649      	mov	r1, r9
 80088fc:	4640      	mov	r0, r8
 80088fe:	6923      	ldr	r3, [r4, #16]
 8008900:	47d0      	blx	sl
 8008902:	3001      	adds	r0, #1
 8008904:	d0ab      	beq.n	800885e <_printf_i+0x166>
 8008906:	6823      	ldr	r3, [r4, #0]
 8008908:	079b      	lsls	r3, r3, #30
 800890a:	d413      	bmi.n	8008934 <_printf_i+0x23c>
 800890c:	68e0      	ldr	r0, [r4, #12]
 800890e:	9b03      	ldr	r3, [sp, #12]
 8008910:	4298      	cmp	r0, r3
 8008912:	bfb8      	it	lt
 8008914:	4618      	movlt	r0, r3
 8008916:	e7a4      	b.n	8008862 <_printf_i+0x16a>
 8008918:	2301      	movs	r3, #1
 800891a:	4632      	mov	r2, r6
 800891c:	4649      	mov	r1, r9
 800891e:	4640      	mov	r0, r8
 8008920:	47d0      	blx	sl
 8008922:	3001      	adds	r0, #1
 8008924:	d09b      	beq.n	800885e <_printf_i+0x166>
 8008926:	3501      	adds	r5, #1
 8008928:	68e3      	ldr	r3, [r4, #12]
 800892a:	9903      	ldr	r1, [sp, #12]
 800892c:	1a5b      	subs	r3, r3, r1
 800892e:	42ab      	cmp	r3, r5
 8008930:	dcf2      	bgt.n	8008918 <_printf_i+0x220>
 8008932:	e7eb      	b.n	800890c <_printf_i+0x214>
 8008934:	2500      	movs	r5, #0
 8008936:	f104 0619 	add.w	r6, r4, #25
 800893a:	e7f5      	b.n	8008928 <_printf_i+0x230>
 800893c:	08008cb9 	.word	0x08008cb9
 8008940:	08008cca 	.word	0x08008cca

08008944 <memchr>:
 8008944:	4603      	mov	r3, r0
 8008946:	b510      	push	{r4, lr}
 8008948:	b2c9      	uxtb	r1, r1
 800894a:	4402      	add	r2, r0
 800894c:	4293      	cmp	r3, r2
 800894e:	4618      	mov	r0, r3
 8008950:	d101      	bne.n	8008956 <memchr+0x12>
 8008952:	2000      	movs	r0, #0
 8008954:	e003      	b.n	800895e <memchr+0x1a>
 8008956:	7804      	ldrb	r4, [r0, #0]
 8008958:	3301      	adds	r3, #1
 800895a:	428c      	cmp	r4, r1
 800895c:	d1f6      	bne.n	800894c <memchr+0x8>
 800895e:	bd10      	pop	{r4, pc}

08008960 <memcpy>:
 8008960:	440a      	add	r2, r1
 8008962:	4291      	cmp	r1, r2
 8008964:	f100 33ff 	add.w	r3, r0, #4294967295
 8008968:	d100      	bne.n	800896c <memcpy+0xc>
 800896a:	4770      	bx	lr
 800896c:	b510      	push	{r4, lr}
 800896e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008972:	4291      	cmp	r1, r2
 8008974:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008978:	d1f9      	bne.n	800896e <memcpy+0xe>
 800897a:	bd10      	pop	{r4, pc}

0800897c <memmove>:
 800897c:	4288      	cmp	r0, r1
 800897e:	b510      	push	{r4, lr}
 8008980:	eb01 0402 	add.w	r4, r1, r2
 8008984:	d902      	bls.n	800898c <memmove+0x10>
 8008986:	4284      	cmp	r4, r0
 8008988:	4623      	mov	r3, r4
 800898a:	d807      	bhi.n	800899c <memmove+0x20>
 800898c:	1e43      	subs	r3, r0, #1
 800898e:	42a1      	cmp	r1, r4
 8008990:	d008      	beq.n	80089a4 <memmove+0x28>
 8008992:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008996:	f803 2f01 	strb.w	r2, [r3, #1]!
 800899a:	e7f8      	b.n	800898e <memmove+0x12>
 800899c:	4601      	mov	r1, r0
 800899e:	4402      	add	r2, r0
 80089a0:	428a      	cmp	r2, r1
 80089a2:	d100      	bne.n	80089a6 <memmove+0x2a>
 80089a4:	bd10      	pop	{r4, pc}
 80089a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089ae:	e7f7      	b.n	80089a0 <memmove+0x24>

080089b0 <_free_r>:
 80089b0:	b538      	push	{r3, r4, r5, lr}
 80089b2:	4605      	mov	r5, r0
 80089b4:	2900      	cmp	r1, #0
 80089b6:	d040      	beq.n	8008a3a <_free_r+0x8a>
 80089b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089bc:	1f0c      	subs	r4, r1, #4
 80089be:	2b00      	cmp	r3, #0
 80089c0:	bfb8      	it	lt
 80089c2:	18e4      	addlt	r4, r4, r3
 80089c4:	f000 f910 	bl	8008be8 <__malloc_lock>
 80089c8:	4a1c      	ldr	r2, [pc, #112]	; (8008a3c <_free_r+0x8c>)
 80089ca:	6813      	ldr	r3, [r2, #0]
 80089cc:	b933      	cbnz	r3, 80089dc <_free_r+0x2c>
 80089ce:	6063      	str	r3, [r4, #4]
 80089d0:	6014      	str	r4, [r2, #0]
 80089d2:	4628      	mov	r0, r5
 80089d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089d8:	f000 b90c 	b.w	8008bf4 <__malloc_unlock>
 80089dc:	42a3      	cmp	r3, r4
 80089de:	d908      	bls.n	80089f2 <_free_r+0x42>
 80089e0:	6820      	ldr	r0, [r4, #0]
 80089e2:	1821      	adds	r1, r4, r0
 80089e4:	428b      	cmp	r3, r1
 80089e6:	bf01      	itttt	eq
 80089e8:	6819      	ldreq	r1, [r3, #0]
 80089ea:	685b      	ldreq	r3, [r3, #4]
 80089ec:	1809      	addeq	r1, r1, r0
 80089ee:	6021      	streq	r1, [r4, #0]
 80089f0:	e7ed      	b.n	80089ce <_free_r+0x1e>
 80089f2:	461a      	mov	r2, r3
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	b10b      	cbz	r3, 80089fc <_free_r+0x4c>
 80089f8:	42a3      	cmp	r3, r4
 80089fa:	d9fa      	bls.n	80089f2 <_free_r+0x42>
 80089fc:	6811      	ldr	r1, [r2, #0]
 80089fe:	1850      	adds	r0, r2, r1
 8008a00:	42a0      	cmp	r0, r4
 8008a02:	d10b      	bne.n	8008a1c <_free_r+0x6c>
 8008a04:	6820      	ldr	r0, [r4, #0]
 8008a06:	4401      	add	r1, r0
 8008a08:	1850      	adds	r0, r2, r1
 8008a0a:	4283      	cmp	r3, r0
 8008a0c:	6011      	str	r1, [r2, #0]
 8008a0e:	d1e0      	bne.n	80089d2 <_free_r+0x22>
 8008a10:	6818      	ldr	r0, [r3, #0]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	4401      	add	r1, r0
 8008a16:	6011      	str	r1, [r2, #0]
 8008a18:	6053      	str	r3, [r2, #4]
 8008a1a:	e7da      	b.n	80089d2 <_free_r+0x22>
 8008a1c:	d902      	bls.n	8008a24 <_free_r+0x74>
 8008a1e:	230c      	movs	r3, #12
 8008a20:	602b      	str	r3, [r5, #0]
 8008a22:	e7d6      	b.n	80089d2 <_free_r+0x22>
 8008a24:	6820      	ldr	r0, [r4, #0]
 8008a26:	1821      	adds	r1, r4, r0
 8008a28:	428b      	cmp	r3, r1
 8008a2a:	bf01      	itttt	eq
 8008a2c:	6819      	ldreq	r1, [r3, #0]
 8008a2e:	685b      	ldreq	r3, [r3, #4]
 8008a30:	1809      	addeq	r1, r1, r0
 8008a32:	6021      	streq	r1, [r4, #0]
 8008a34:	6063      	str	r3, [r4, #4]
 8008a36:	6054      	str	r4, [r2, #4]
 8008a38:	e7cb      	b.n	80089d2 <_free_r+0x22>
 8008a3a:	bd38      	pop	{r3, r4, r5, pc}
 8008a3c:	2000145c 	.word	0x2000145c

08008a40 <sbrk_aligned>:
 8008a40:	b570      	push	{r4, r5, r6, lr}
 8008a42:	4e0e      	ldr	r6, [pc, #56]	; (8008a7c <sbrk_aligned+0x3c>)
 8008a44:	460c      	mov	r4, r1
 8008a46:	6831      	ldr	r1, [r6, #0]
 8008a48:	4605      	mov	r5, r0
 8008a4a:	b911      	cbnz	r1, 8008a52 <sbrk_aligned+0x12>
 8008a4c:	f000 f8bc 	bl	8008bc8 <_sbrk_r>
 8008a50:	6030      	str	r0, [r6, #0]
 8008a52:	4621      	mov	r1, r4
 8008a54:	4628      	mov	r0, r5
 8008a56:	f000 f8b7 	bl	8008bc8 <_sbrk_r>
 8008a5a:	1c43      	adds	r3, r0, #1
 8008a5c:	d00a      	beq.n	8008a74 <sbrk_aligned+0x34>
 8008a5e:	1cc4      	adds	r4, r0, #3
 8008a60:	f024 0403 	bic.w	r4, r4, #3
 8008a64:	42a0      	cmp	r0, r4
 8008a66:	d007      	beq.n	8008a78 <sbrk_aligned+0x38>
 8008a68:	1a21      	subs	r1, r4, r0
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	f000 f8ac 	bl	8008bc8 <_sbrk_r>
 8008a70:	3001      	adds	r0, #1
 8008a72:	d101      	bne.n	8008a78 <sbrk_aligned+0x38>
 8008a74:	f04f 34ff 	mov.w	r4, #4294967295
 8008a78:	4620      	mov	r0, r4
 8008a7a:	bd70      	pop	{r4, r5, r6, pc}
 8008a7c:	20001460 	.word	0x20001460

08008a80 <_malloc_r>:
 8008a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a84:	1ccd      	adds	r5, r1, #3
 8008a86:	f025 0503 	bic.w	r5, r5, #3
 8008a8a:	3508      	adds	r5, #8
 8008a8c:	2d0c      	cmp	r5, #12
 8008a8e:	bf38      	it	cc
 8008a90:	250c      	movcc	r5, #12
 8008a92:	2d00      	cmp	r5, #0
 8008a94:	4607      	mov	r7, r0
 8008a96:	db01      	blt.n	8008a9c <_malloc_r+0x1c>
 8008a98:	42a9      	cmp	r1, r5
 8008a9a:	d905      	bls.n	8008aa8 <_malloc_r+0x28>
 8008a9c:	230c      	movs	r3, #12
 8008a9e:	2600      	movs	r6, #0
 8008aa0:	603b      	str	r3, [r7, #0]
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aa8:	4e2e      	ldr	r6, [pc, #184]	; (8008b64 <_malloc_r+0xe4>)
 8008aaa:	f000 f89d 	bl	8008be8 <__malloc_lock>
 8008aae:	6833      	ldr	r3, [r6, #0]
 8008ab0:	461c      	mov	r4, r3
 8008ab2:	bb34      	cbnz	r4, 8008b02 <_malloc_r+0x82>
 8008ab4:	4629      	mov	r1, r5
 8008ab6:	4638      	mov	r0, r7
 8008ab8:	f7ff ffc2 	bl	8008a40 <sbrk_aligned>
 8008abc:	1c43      	adds	r3, r0, #1
 8008abe:	4604      	mov	r4, r0
 8008ac0:	d14d      	bne.n	8008b5e <_malloc_r+0xde>
 8008ac2:	6834      	ldr	r4, [r6, #0]
 8008ac4:	4626      	mov	r6, r4
 8008ac6:	2e00      	cmp	r6, #0
 8008ac8:	d140      	bne.n	8008b4c <_malloc_r+0xcc>
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	4631      	mov	r1, r6
 8008ace:	4638      	mov	r0, r7
 8008ad0:	eb04 0803 	add.w	r8, r4, r3
 8008ad4:	f000 f878 	bl	8008bc8 <_sbrk_r>
 8008ad8:	4580      	cmp	r8, r0
 8008ada:	d13a      	bne.n	8008b52 <_malloc_r+0xd2>
 8008adc:	6821      	ldr	r1, [r4, #0]
 8008ade:	3503      	adds	r5, #3
 8008ae0:	1a6d      	subs	r5, r5, r1
 8008ae2:	f025 0503 	bic.w	r5, r5, #3
 8008ae6:	3508      	adds	r5, #8
 8008ae8:	2d0c      	cmp	r5, #12
 8008aea:	bf38      	it	cc
 8008aec:	250c      	movcc	r5, #12
 8008aee:	4638      	mov	r0, r7
 8008af0:	4629      	mov	r1, r5
 8008af2:	f7ff ffa5 	bl	8008a40 <sbrk_aligned>
 8008af6:	3001      	adds	r0, #1
 8008af8:	d02b      	beq.n	8008b52 <_malloc_r+0xd2>
 8008afa:	6823      	ldr	r3, [r4, #0]
 8008afc:	442b      	add	r3, r5
 8008afe:	6023      	str	r3, [r4, #0]
 8008b00:	e00e      	b.n	8008b20 <_malloc_r+0xa0>
 8008b02:	6822      	ldr	r2, [r4, #0]
 8008b04:	1b52      	subs	r2, r2, r5
 8008b06:	d41e      	bmi.n	8008b46 <_malloc_r+0xc6>
 8008b08:	2a0b      	cmp	r2, #11
 8008b0a:	d916      	bls.n	8008b3a <_malloc_r+0xba>
 8008b0c:	1961      	adds	r1, r4, r5
 8008b0e:	42a3      	cmp	r3, r4
 8008b10:	6025      	str	r5, [r4, #0]
 8008b12:	bf18      	it	ne
 8008b14:	6059      	strne	r1, [r3, #4]
 8008b16:	6863      	ldr	r3, [r4, #4]
 8008b18:	bf08      	it	eq
 8008b1a:	6031      	streq	r1, [r6, #0]
 8008b1c:	5162      	str	r2, [r4, r5]
 8008b1e:	604b      	str	r3, [r1, #4]
 8008b20:	4638      	mov	r0, r7
 8008b22:	f104 060b 	add.w	r6, r4, #11
 8008b26:	f000 f865 	bl	8008bf4 <__malloc_unlock>
 8008b2a:	f026 0607 	bic.w	r6, r6, #7
 8008b2e:	1d23      	adds	r3, r4, #4
 8008b30:	1af2      	subs	r2, r6, r3
 8008b32:	d0b6      	beq.n	8008aa2 <_malloc_r+0x22>
 8008b34:	1b9b      	subs	r3, r3, r6
 8008b36:	50a3      	str	r3, [r4, r2]
 8008b38:	e7b3      	b.n	8008aa2 <_malloc_r+0x22>
 8008b3a:	6862      	ldr	r2, [r4, #4]
 8008b3c:	42a3      	cmp	r3, r4
 8008b3e:	bf0c      	ite	eq
 8008b40:	6032      	streq	r2, [r6, #0]
 8008b42:	605a      	strne	r2, [r3, #4]
 8008b44:	e7ec      	b.n	8008b20 <_malloc_r+0xa0>
 8008b46:	4623      	mov	r3, r4
 8008b48:	6864      	ldr	r4, [r4, #4]
 8008b4a:	e7b2      	b.n	8008ab2 <_malloc_r+0x32>
 8008b4c:	4634      	mov	r4, r6
 8008b4e:	6876      	ldr	r6, [r6, #4]
 8008b50:	e7b9      	b.n	8008ac6 <_malloc_r+0x46>
 8008b52:	230c      	movs	r3, #12
 8008b54:	4638      	mov	r0, r7
 8008b56:	603b      	str	r3, [r7, #0]
 8008b58:	f000 f84c 	bl	8008bf4 <__malloc_unlock>
 8008b5c:	e7a1      	b.n	8008aa2 <_malloc_r+0x22>
 8008b5e:	6025      	str	r5, [r4, #0]
 8008b60:	e7de      	b.n	8008b20 <_malloc_r+0xa0>
 8008b62:	bf00      	nop
 8008b64:	2000145c 	.word	0x2000145c

08008b68 <_realloc_r>:
 8008b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b6c:	4680      	mov	r8, r0
 8008b6e:	4614      	mov	r4, r2
 8008b70:	460e      	mov	r6, r1
 8008b72:	b921      	cbnz	r1, 8008b7e <_realloc_r+0x16>
 8008b74:	4611      	mov	r1, r2
 8008b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b7a:	f7ff bf81 	b.w	8008a80 <_malloc_r>
 8008b7e:	b92a      	cbnz	r2, 8008b8c <_realloc_r+0x24>
 8008b80:	f7ff ff16 	bl	80089b0 <_free_r>
 8008b84:	4625      	mov	r5, r4
 8008b86:	4628      	mov	r0, r5
 8008b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b8c:	f000 f838 	bl	8008c00 <_malloc_usable_size_r>
 8008b90:	4284      	cmp	r4, r0
 8008b92:	4607      	mov	r7, r0
 8008b94:	d802      	bhi.n	8008b9c <_realloc_r+0x34>
 8008b96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b9a:	d812      	bhi.n	8008bc2 <_realloc_r+0x5a>
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	4640      	mov	r0, r8
 8008ba0:	f7ff ff6e 	bl	8008a80 <_malloc_r>
 8008ba4:	4605      	mov	r5, r0
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	d0ed      	beq.n	8008b86 <_realloc_r+0x1e>
 8008baa:	42bc      	cmp	r4, r7
 8008bac:	4622      	mov	r2, r4
 8008bae:	4631      	mov	r1, r6
 8008bb0:	bf28      	it	cs
 8008bb2:	463a      	movcs	r2, r7
 8008bb4:	f7ff fed4 	bl	8008960 <memcpy>
 8008bb8:	4631      	mov	r1, r6
 8008bba:	4640      	mov	r0, r8
 8008bbc:	f7ff fef8 	bl	80089b0 <_free_r>
 8008bc0:	e7e1      	b.n	8008b86 <_realloc_r+0x1e>
 8008bc2:	4635      	mov	r5, r6
 8008bc4:	e7df      	b.n	8008b86 <_realloc_r+0x1e>
	...

08008bc8 <_sbrk_r>:
 8008bc8:	b538      	push	{r3, r4, r5, lr}
 8008bca:	2300      	movs	r3, #0
 8008bcc:	4d05      	ldr	r5, [pc, #20]	; (8008be4 <_sbrk_r+0x1c>)
 8008bce:	4604      	mov	r4, r0
 8008bd0:	4608      	mov	r0, r1
 8008bd2:	602b      	str	r3, [r5, #0]
 8008bd4:	f7f7 feae 	bl	8000934 <_sbrk>
 8008bd8:	1c43      	adds	r3, r0, #1
 8008bda:	d102      	bne.n	8008be2 <_sbrk_r+0x1a>
 8008bdc:	682b      	ldr	r3, [r5, #0]
 8008bde:	b103      	cbz	r3, 8008be2 <_sbrk_r+0x1a>
 8008be0:	6023      	str	r3, [r4, #0]
 8008be2:	bd38      	pop	{r3, r4, r5, pc}
 8008be4:	20001464 	.word	0x20001464

08008be8 <__malloc_lock>:
 8008be8:	4801      	ldr	r0, [pc, #4]	; (8008bf0 <__malloc_lock+0x8>)
 8008bea:	f000 b811 	b.w	8008c10 <__retarget_lock_acquire_recursive>
 8008bee:	bf00      	nop
 8008bf0:	20001468 	.word	0x20001468

08008bf4 <__malloc_unlock>:
 8008bf4:	4801      	ldr	r0, [pc, #4]	; (8008bfc <__malloc_unlock+0x8>)
 8008bf6:	f000 b80c 	b.w	8008c12 <__retarget_lock_release_recursive>
 8008bfa:	bf00      	nop
 8008bfc:	20001468 	.word	0x20001468

08008c00 <_malloc_usable_size_r>:
 8008c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c04:	1f18      	subs	r0, r3, #4
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	bfbc      	itt	lt
 8008c0a:	580b      	ldrlt	r3, [r1, r0]
 8008c0c:	18c0      	addlt	r0, r0, r3
 8008c0e:	4770      	bx	lr

08008c10 <__retarget_lock_acquire_recursive>:
 8008c10:	4770      	bx	lr

08008c12 <__retarget_lock_release_recursive>:
 8008c12:	4770      	bx	lr

08008c14 <_init>:
 8008c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c16:	bf00      	nop
 8008c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c1a:	bc08      	pop	{r3}
 8008c1c:	469e      	mov	lr, r3
 8008c1e:	4770      	bx	lr

08008c20 <_fini>:
 8008c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c22:	bf00      	nop
 8008c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c26:	bc08      	pop	{r3}
 8008c28:	469e      	mov	lr, r3
 8008c2a:	4770      	bx	lr
