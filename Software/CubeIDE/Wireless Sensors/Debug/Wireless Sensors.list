
Wireless Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009330  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800946c  0800946c  0001946c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009534  08009534  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009534  08009534  00019534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800953c  0800953c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800953c  0800953c  0001953c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009540  08009540  00019540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000128c  200001e0  08009724  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000146c  08009724  0002146c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001125d  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e85  00000000  00000000  00031466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  000342f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  000351b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000167f8  00000000  00000000  00035f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138d9  00000000  00000000  0004c738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c370  00000000  00000000  00060011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc381  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004074  00000000  00000000  000dc3d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001e0 	.word	0x200001e0
 8000158:	00000000 	.word	0x00000000
 800015c:	08009454 	.word	0x08009454

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001e4 	.word	0x200001e4
 8000178:	08009454 	.word	0x08009454

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b0c2      	sub	sp, #264	; 0x108
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049a:	f000 fb02 	bl	8000aa2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049e:	f000 f869 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a2:	f000 f91b 	bl	80006dc <MX_GPIO_Init>
  MX_I2C1_Init();
 80004a6:	f000 f8b7 	bl	8000618 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004aa:	f000 f8e3 	bl	8000674 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004ae:	f007 fe75 	bl	800819c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* initialize the LoRa chip */
 // LoRa_Init(&hspi1);

  HAL_GPIO_WritePin(GPIOA, ID_PL_Pin, GPIO_PIN_SET); /* Set ID load signal high */
 80004b2:	2201      	movs	r2, #1
 80004b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004b8:	4829      	ldr	r0, [pc, #164]	; (8000560 <main+0xcc>)
 80004ba:	f000 fe11 	bl	80010e0 <HAL_GPIO_WritePin>

  /* Send a status message to USB port */
  uint8_t buffer[256];
  sprintf((char *)buffer, "Entering transmit loop\r\n");
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	4928      	ldr	r1, [pc, #160]	; (8000564 <main+0xd0>)
 80004c2:	4618      	mov	r0, r3
 80004c4:	f008 fb4c 	bl	8008b60 <siprintf>
  CDC_Transmit_FS(buffer, strlen((char *)buffer)); /* Send the message on USB */
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff fe56 	bl	800017c <strlen>
 80004d0:	4603      	mov	r3, r0
 80004d2:	b29a      	uxth	r2, r3
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	4611      	mov	r1, r2
 80004d8:	4618      	mov	r0, r3
 80004da:	f007 ff1d 	bl	8008318 <CDC_Transmit_FS>

  int count = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count++;
 80004e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80004e8:	3301      	adds	r3, #1
 80004ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	  sprintf((char *)buffer, "Count = %d", count);
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80004f4:	491c      	ldr	r1, [pc, #112]	; (8000568 <main+0xd4>)
 80004f6:	4618      	mov	r0, r3
 80004f8:	f008 fb32 	bl	8008b60 <siprintf>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); /* Turn on the LED */
 80004fc:	2201      	movs	r2, #1
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	481a      	ldr	r0, [pc, #104]	; (800056c <main+0xd8>)
 8000504:	f000 fdec 	bl	80010e0 <HAL_GPIO_WritePin>
//	  LoRaTransmit(buffer, strlen((char *)buffer));
	  HAL_GPIO_WritePin (GPIOA, ID_PL_Pin, GPIO_PIN_RESET); /* Pull ID load signal low to prepare to load the shift register */
 8000508:	2200      	movs	r2, #0
 800050a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800050e:	4814      	ldr	r0, [pc, #80]	; (8000560 <main+0xcc>)
 8000510:	f000 fde6 	bl	80010e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (GPIOA, ID_PL_Pin, GPIO_PIN_SET);   /* Pull ID load signal high to load the shift register */
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 7100 	mov.w	r1, #512	; 0x200
 800051a:	4811      	ldr	r0, [pc, #68]	; (8000560 <main+0xcc>)
 800051c:	f000 fde0 	bl	80010e0 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, buffer, 1, 100);
 8000520:	1d39      	adds	r1, r7, #4
 8000522:	2364      	movs	r3, #100	; 0x64
 8000524:	2201      	movs	r2, #1
 8000526:	4812      	ldr	r0, [pc, #72]	; (8000570 <main+0xdc>)
 8000528:	f003 f9be 	bl	80038a8 <HAL_SPI_Receive>
	  HAL_Delay(500);
 800052c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000530:	f000 fb26 	bl	8000b80 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); /* Turn off the LED */
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053a:	480c      	ldr	r0, [pc, #48]	; (800056c <main+0xd8>)
 800053c:	f000 fdd0 	bl	80010e0 <HAL_GPIO_WritePin>
//	  LoRaReceive(buffer, 0); /* go to receive mode with timeout = 0 (wait forever for one message) */
	  CDC_Transmit_FS(buffer, strlen((char *)buffer)); /* Send the message on USB */
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff fe1a 	bl	800017c <strlen>
 8000548:	4603      	mov	r3, r0
 800054a:	b29a      	uxth	r2, r3
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	4611      	mov	r1, r2
 8000550:	4618      	mov	r0, r3
 8000552:	f007 fee1 	bl	8008318 <CDC_Transmit_FS>
	  HAL_Delay(500);
 8000556:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800055a:	f000 fb11 	bl	8000b80 <HAL_Delay>
	  count++;
 800055e:	e7c1      	b.n	80004e4 <main+0x50>
 8000560:	40020000 	.word	0x40020000
 8000564:	0800946c 	.word	0x0800946c
 8000568:	08009488 	.word	0x08009488
 800056c:	40020800 	.word	0x40020800
 8000570:	20000250 	.word	0x20000250

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b092      	sub	sp, #72	; 0x48
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	2234      	movs	r2, #52	; 0x34
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f008 fae4 	bl	8008b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	463b      	mov	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000596:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <SystemClock_Config+0xa0>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800059e:	4a1d      	ldr	r2, [pc, #116]	; (8000614 <SystemClock_Config+0xa0>)
 80005a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005a4:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005a6:	2303      	movs	r3, #3
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005aa:	2301      	movs	r3, #1
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ae:	2301      	movs	r3, #1
 80005b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b2:	2310      	movs	r3, #16
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b6:	2302      	movs	r3, #2
 80005b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80005c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80005c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	4618      	mov	r0, r3
 80005d2:	f002 fb0d 	bl	8002bf0 <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80005dc:	f000 f912 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e4:	2301      	movs	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80005f0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f6:	463b      	mov	r3, r7
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fe28 	bl	8003250 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000606:	f000 f8fd 	bl	8000804 <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3748      	adds	r7, #72	; 0x48
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40007000 	.word	0x40007000

08000618 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_I2C1_Init+0x50>)
 800061e:	4a13      	ldr	r2, [pc, #76]	; (800066c <MX_I2C1_Init+0x54>)
 8000620:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_I2C1_Init+0x50>)
 8000624:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_I2C1_Init+0x58>)
 8000626:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_I2C1_Init+0x50>)
 8000636:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <MX_I2C1_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_I2C1_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <MX_I2C1_Init+0x50>)
 8000656:	f000 fd5b 	bl	8001110 <HAL_I2C_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000660:	f000 f8d0 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200001fc 	.word	0x200001fc
 800066c:	40005400 	.word	0x40005400
 8000670:	000186a0 	.word	0x000186a0

08000674 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MX_SPI1_Init+0x60>)
 800067a:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <MX_SPI1_Init+0x64>)
 800067c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_SPI1_Init+0x60>)
 8000680:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000684:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <MX_SPI1_Init+0x60>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_SPI1_Init+0x60>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <MX_SPI1_Init+0x60>)
 8000694:	2202      	movs	r2, #2
 8000696:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000698:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_SPI1_Init+0x60>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800069e:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <MX_SPI1_Init+0x60>)
 80006a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_SPI1_Init+0x60>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_SPI1_Init+0x60>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_SPI1_Init+0x60>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_SPI1_Init+0x60>)
 80006ba:	220a      	movs	r2, #10
 80006bc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_SPI1_Init+0x60>)
 80006c0:	f003 f876 	bl	80037b0 <HAL_SPI_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 80006ca:	f000 f89b 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000250 	.word	0x20000250
 80006d8:	40013000 	.word	0x40013000

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	4b40      	ldr	r3, [pc, #256]	; (80007f4 <MX_GPIO_Init+0x118>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	4a3f      	ldr	r2, [pc, #252]	; (80007f4 <MX_GPIO_Init+0x118>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	61d3      	str	r3, [r2, #28]
 80006fe:	4b3d      	ldr	r3, [pc, #244]	; (80007f4 <MX_GPIO_Init+0x118>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070a:	4b3a      	ldr	r3, [pc, #232]	; (80007f4 <MX_GPIO_Init+0x118>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	4a39      	ldr	r2, [pc, #228]	; (80007f4 <MX_GPIO_Init+0x118>)
 8000710:	f043 0320 	orr.w	r3, r3, #32
 8000714:	61d3      	str	r3, [r2, #28]
 8000716:	4b37      	ldr	r3, [pc, #220]	; (80007f4 <MX_GPIO_Init+0x118>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	f003 0320 	and.w	r3, r3, #32
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b34      	ldr	r3, [pc, #208]	; (80007f4 <MX_GPIO_Init+0x118>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	4a33      	ldr	r2, [pc, #204]	; (80007f4 <MX_GPIO_Init+0x118>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	61d3      	str	r3, [r2, #28]
 800072e:	4b31      	ldr	r3, [pc, #196]	; (80007f4 <MX_GPIO_Init+0x118>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b2e      	ldr	r3, [pc, #184]	; (80007f4 <MX_GPIO_Init+0x118>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	4a2d      	ldr	r2, [pc, #180]	; (80007f4 <MX_GPIO_Init+0x118>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	61d3      	str	r3, [r2, #28]
 8000746:	4b2b      	ldr	r3, [pc, #172]	; (80007f4 <MX_GPIO_Init+0x118>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000758:	4827      	ldr	r0, [pc, #156]	; (80007f8 <MX_GPIO_Init+0x11c>)
 800075a:	f000 fcc1 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LoRa_NRST_Pin|LoRa_NSS_Pin|ID_PL_Pin|ID_CS_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	f240 6111 	movw	r1, #1553	; 0x611
 8000764:	4825      	ldr	r0, [pc, #148]	; (80007fc <MX_GPIO_Init+0x120>)
 8000766:	f000 fcbb 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OneWire_GPIO_Port, OneWire_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000770:	4823      	ldr	r0, [pc, #140]	; (8000800 <MX_GPIO_Init+0x124>)
 8000772:	f000 fcb5 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	481a      	ldr	r0, [pc, #104]	; (80007f8 <MX_GPIO_Init+0x11c>)
 8000790:	f000 fb26 	bl	8000de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_NRST_Pin LoRa_NSS_Pin ID_PL_Pin ID_CS_Pin */
  GPIO_InitStruct.Pin = LoRa_NRST_Pin|LoRa_NSS_Pin|ID_PL_Pin|ID_CS_Pin;
 8000794:	f240 6311 	movw	r3, #1553	; 0x611
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	4813      	ldr	r0, [pc, #76]	; (80007fc <MX_GPIO_Init+0x120>)
 80007ae:	f000 fb17 	bl	8000de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_DIO3_Pin LoRa_DIO2_Pin LoRa_DIO1_Pin LoRa_BUSY_Pin */
  GPIO_InitStruct.Pin = LoRa_DIO3_Pin|LoRa_DIO2_Pin|LoRa_DIO1_Pin|LoRa_BUSY_Pin;
 80007b2:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	480d      	ldr	r0, [pc, #52]	; (80007fc <MX_GPIO_Init+0x120>)
 80007c8:	f000 fb0a 	bl	8000de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OneWire_Pin */
  GPIO_InitStruct.Pin = OneWire_Pin;
 80007cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OneWire_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	4806      	ldr	r0, [pc, #24]	; (8000800 <MX_GPIO_Init+0x124>)
 80007e6:	f000 fafb 	bl	8000de0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020800 	.word	0x40020800
 80007fc:	40020000 	.word	0x40020000
 8000800:	40020400 	.word	0x40020400

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	e7fe      	b.n	800080c <Error_Handler+0x8>
	...

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <HAL_MspInit+0x58>)
 8000818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800081a:	4a13      	ldr	r2, [pc, #76]	; (8000868 <HAL_MspInit+0x58>)
 800081c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000820:	6253      	str	r3, [r2, #36]	; 0x24
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <HAL_MspInit+0x58>)
 8000824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000826:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <HAL_MspInit+0x58>)
 8000830:	6a1b      	ldr	r3, [r3, #32]
 8000832:	4a0d      	ldr	r2, [pc, #52]	; (8000868 <HAL_MspInit+0x58>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6213      	str	r3, [r2, #32]
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <HAL_MspInit+0x58>)
 800083c:	6a1b      	ldr	r3, [r3, #32]
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <HAL_MspInit+0x58>)
 8000848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084a:	4a07      	ldr	r2, [pc, #28]	; (8000868 <HAL_MspInit+0x58>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000850:	6253      	str	r3, [r2, #36]	; 0x24
 8000852:	4b05      	ldr	r3, [pc, #20]	; (8000868 <HAL_MspInit+0x58>)
 8000854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	40023800 	.word	0x40023800

0800086c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <HAL_I2C_MspInit+0x7c>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d127      	bne.n	80008de <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <HAL_I2C_MspInit+0x80>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <HAL_I2C_MspInit+0x80>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	61d3      	str	r3, [r2, #28]
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <HAL_I2C_MspInit+0x80>)
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008a6:	23c0      	movs	r3, #192	; 0xc0
 80008a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008aa:	2312      	movs	r3, #18
 80008ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008b6:	2304      	movs	r3, #4
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	480b      	ldr	r0, [pc, #44]	; (80008f0 <HAL_I2C_MspInit+0x84>)
 80008c2:	f000 fa8d 	bl	8000de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <HAL_I2C_MspInit+0x80>)
 80008c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ca:	4a08      	ldr	r2, [pc, #32]	; (80008ec <HAL_I2C_MspInit+0x80>)
 80008cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008d0:	6253      	str	r3, [r2, #36]	; 0x24
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_I2C_MspInit+0x80>)
 80008d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008de:	bf00      	nop
 80008e0:	3728      	adds	r7, #40	; 0x28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40005400 	.word	0x40005400
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020400 	.word	0x40020400

080008f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	; 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a17      	ldr	r2, [pc, #92]	; (8000970 <HAL_SPI_MspInit+0x7c>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d127      	bne.n	8000966 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <HAL_SPI_MspInit+0x80>)
 8000918:	6a1b      	ldr	r3, [r3, #32]
 800091a:	4a16      	ldr	r2, [pc, #88]	; (8000974 <HAL_SPI_MspInit+0x80>)
 800091c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000920:	6213      	str	r3, [r2, #32]
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <HAL_SPI_MspInit+0x80>)
 8000924:	6a1b      	ldr	r3, [r3, #32]
 8000926:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <HAL_SPI_MspInit+0x80>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	4a10      	ldr	r2, [pc, #64]	; (8000974 <HAL_SPI_MspInit+0x80>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	61d3      	str	r3, [r2, #28]
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <HAL_SPI_MspInit+0x80>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000946:	23e0      	movs	r3, #224	; 0xe0
 8000948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000956:	2305      	movs	r3, #5
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <HAL_SPI_MspInit+0x84>)
 8000962:	f000 fa3d 	bl	8000de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	; 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40013000 	.word	0x40013000
 8000974:	40023800 	.word	0x40023800
 8000978:	40020000 	.word	0x40020000

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <MemManage_Handler+0x4>

0800098e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr

080009a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr

080009b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr

080009be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c2:	f000 f8c1 	bl	8000b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <USB_LP_IRQHandler+0x10>)
 80009d2:	f000 fde5 	bl	80015a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000f50 	.word	0x20000f50

080009e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e8:	4a14      	ldr	r2, [pc, #80]	; (8000a3c <_sbrk+0x5c>)
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <_sbrk+0x60>)
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f4:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <_sbrk+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d102      	bne.n	8000a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <_sbrk+0x64>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <_sbrk+0x68>)
 8000a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <_sbrk+0x64>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d207      	bcs.n	8000a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a10:	f008 f874 	bl	8008afc <__errno>
 8000a14:	4603      	mov	r3, r0
 8000a16:	220c      	movs	r2, #12
 8000a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1e:	e009      	b.n	8000a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <_sbrk+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a26:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <_sbrk+0x64>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <_sbrk+0x64>)
 8000a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a32:	68fb      	ldr	r3, [r7, #12]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20002800 	.word	0x20002800
 8000a40:	00000400 	.word	0x00000400
 8000a44:	200002a8 	.word	0x200002a8
 8000a48:	20001470 	.word	0x20001470

08000a4c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a58:	480c      	ldr	r0, [pc, #48]	; (8000a8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a5a:	490d      	ldr	r1, [pc, #52]	; (8000a90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a5c:	4a0d      	ldr	r2, [pc, #52]	; (8000a94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a70:	4c0a      	ldr	r4, [pc, #40]	; (8000a9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a7e:	f7ff ffe5 	bl	8000a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a82:	f008 f841 	bl	8008b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a86:	f7ff fd05 	bl	8000494 <main>
  bx lr
 8000a8a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a90:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000a94:	08009544 	.word	0x08009544
  ldr r2, =_sbss
 8000a98:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000a9c:	2000146c 	.word	0x2000146c

08000aa0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC1_IRQHandler>

08000aa2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aac:	2003      	movs	r0, #3
 8000aae:	f000 f955 	bl	8000d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ab2:	200f      	movs	r0, #15
 8000ab4:	f000 f80e 	bl	8000ad4 <HAL_InitTick>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d002      	beq.n	8000ac4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	71fb      	strb	r3, [r7, #7]
 8000ac2:	e001      	b.n	8000ac8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac4:	f7ff fea4 	bl	8000810 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000adc:	2300      	movs	r3, #0
 8000ade:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <HAL_InitTick+0x68>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d022      	beq.n	8000b2e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <HAL_InitTick+0x6c>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <HAL_InitTick+0x68>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000af4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 f962 	bl	8000dc6 <HAL_SYSTICK_Config>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d10f      	bne.n	8000b28 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b0f      	cmp	r3, #15
 8000b0c:	d809      	bhi.n	8000b22 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	6879      	ldr	r1, [r7, #4]
 8000b12:	f04f 30ff 	mov.w	r0, #4294967295
 8000b16:	f000 f92c 	bl	8000d72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <HAL_InitTick+0x70>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6013      	str	r3, [r2, #0]
 8000b20:	e007      	b.n	8000b32 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	73fb      	strb	r3, [r7, #15]
 8000b26:	e004      	b.n	8000b32 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	73fb      	strb	r3, [r7, #15]
 8000b2c:	e001      	b.n	8000b32 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000004 	.word	0x20000004

08000b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_IncTick+0x1c>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_IncTick+0x20>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4413      	add	r3, r2
 8000b56:	4a03      	ldr	r2, [pc, #12]	; (8000b64 <HAL_IncTick+0x1c>)
 8000b58:	6013      	str	r3, [r2, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	200002ac 	.word	0x200002ac
 8000b68:	20000008 	.word	0x20000008

08000b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b70:	4b02      	ldr	r3, [pc, #8]	; (8000b7c <HAL_GetTick+0x10>)
 8000b72:	681b      	ldr	r3, [r3, #0]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	200002ac 	.word	0x200002ac

08000b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b88:	f7ff fff0 	bl	8000b6c <HAL_GetTick>
 8000b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b98:	d004      	beq.n	8000ba4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_Delay+0x40>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ba4:	bf00      	nop
 8000ba6:	f7ff ffe1 	bl	8000b6c <HAL_GetTick>
 8000baa:	4602      	mov	r2, r0
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	1ad3      	subs	r3, r2, r3
 8000bb0:	68fa      	ldr	r2, [r7, #12]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d8f7      	bhi.n	8000ba6 <HAL_Delay+0x26>
  {
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000008 	.word	0x20000008

08000bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	60d3      	str	r3, [r2, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <__NVIC_GetPriorityGrouping+0x18>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	f003 0307 	and.w	r3, r3, #7
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db0b      	blt.n	8000c52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	f003 021f 	and.w	r2, r3, #31
 8000c40:	4906      	ldr	r1, [pc, #24]	; (8000c5c <__NVIC_EnableIRQ+0x34>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	095b      	lsrs	r3, r3, #5
 8000c48:	2001      	movs	r0, #1
 8000c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	e000e100 	.word	0xe000e100

08000c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	db0a      	blt.n	8000c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	490c      	ldr	r1, [pc, #48]	; (8000cac <__NVIC_SetPriority+0x4c>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	0112      	lsls	r2, r2, #4
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	440b      	add	r3, r1
 8000c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c88:	e00a      	b.n	8000ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4908      	ldr	r1, [pc, #32]	; (8000cb0 <__NVIC_SetPriority+0x50>)
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	f003 030f 	and.w	r3, r3, #15
 8000c96:	3b04      	subs	r3, #4
 8000c98:	0112      	lsls	r2, r2, #4
 8000c9a:	b2d2      	uxtb	r2, r2
 8000c9c:	440b      	add	r3, r1
 8000c9e:	761a      	strb	r2, [r3, #24]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000e100 	.word	0xe000e100
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b089      	sub	sp, #36	; 0x24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f1c3 0307 	rsb	r3, r3, #7
 8000cce:	2b04      	cmp	r3, #4
 8000cd0:	bf28      	it	cs
 8000cd2:	2304      	movcs	r3, #4
 8000cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3304      	adds	r3, #4
 8000cda:	2b06      	cmp	r3, #6
 8000cdc:	d902      	bls.n	8000ce4 <NVIC_EncodePriority+0x30>
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3b03      	subs	r3, #3
 8000ce2:	e000      	b.n	8000ce6 <NVIC_EncodePriority+0x32>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa01 f303 	lsl.w	r3, r1, r3
 8000d06:	43d9      	mvns	r1, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	4313      	orrs	r3, r2
         );
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3724      	adds	r7, #36	; 0x24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d28:	d301      	bcc.n	8000d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00f      	b.n	8000d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <SysTick_Config+0x40>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d36:	210f      	movs	r1, #15
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	f7ff ff90 	bl	8000c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <SysTick_Config+0x40>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d46:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <SysTick_Config+0x40>)
 8000d48:	2207      	movs	r2, #7
 8000d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	e000e010 	.word	0xe000e010

08000d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff ff2d 	bl	8000bc4 <__NVIC_SetPriorityGrouping>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b086      	sub	sp, #24
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	4603      	mov	r3, r0
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
 8000d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d84:	f7ff ff42 	bl	8000c0c <__NVIC_GetPriorityGrouping>
 8000d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	6978      	ldr	r0, [r7, #20]
 8000d90:	f7ff ff90 	bl	8000cb4 <NVIC_EncodePriority>
 8000d94:	4602      	mov	r2, r0
 8000d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff5f 	bl	8000c60 <__NVIC_SetPriority>
}
 8000da2:	bf00      	nop
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff35 	bl	8000c28 <__NVIC_EnableIRQ>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ffa2 	bl	8000d18 <SysTick_Config>
 8000dd4:	4603      	mov	r3, r0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b087      	sub	sp, #28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000df6:	e154      	b.n	80010a2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	fa01 f303 	lsl.w	r3, r1, r3
 8000e04:	4013      	ands	r3, r2
 8000e06:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 8146 	beq.w	800109c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d005      	beq.n	8000e28 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d130      	bne.n	8000e8a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	2203      	movs	r2, #3
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000e5e:	2201      	movs	r2, #1
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	091b      	lsrs	r3, r3, #4
 8000e74:	f003 0201 	and.w	r2, r3, #1
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 0303 	and.w	r3, r3, #3
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d017      	beq.n	8000ec6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d123      	bne.n	8000f1a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	08da      	lsrs	r2, r3, #3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3208      	adds	r2, #8
 8000eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ede:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	220f      	movs	r2, #15
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	691a      	ldr	r2, [r3, #16]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	f003 0307 	and.w	r3, r3, #7
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	08da      	lsrs	r2, r3, #3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3208      	adds	r2, #8
 8000f14:	6939      	ldr	r1, [r7, #16]
 8000f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	2203      	movs	r2, #3
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0203 	and.w	r2, r3, #3
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 80a0 	beq.w	800109c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5c:	4b58      	ldr	r3, [pc, #352]	; (80010c0 <HAL_GPIO_Init+0x2e0>)
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	4a57      	ldr	r2, [pc, #348]	; (80010c0 <HAL_GPIO_Init+0x2e0>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	6213      	str	r3, [r2, #32]
 8000f68:	4b55      	ldr	r3, [pc, #340]	; (80010c0 <HAL_GPIO_Init+0x2e0>)
 8000f6a:	6a1b      	ldr	r3, [r3, #32]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f74:	4a53      	ldr	r2, [pc, #332]	; (80010c4 <HAL_GPIO_Init+0x2e4>)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	089b      	lsrs	r3, r3, #2
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	220f      	movs	r2, #15
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a4b      	ldr	r2, [pc, #300]	; (80010c8 <HAL_GPIO_Init+0x2e8>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d019      	beq.n	8000fd4 <HAL_GPIO_Init+0x1f4>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a4a      	ldr	r2, [pc, #296]	; (80010cc <HAL_GPIO_Init+0x2ec>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d013      	beq.n	8000fd0 <HAL_GPIO_Init+0x1f0>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a49      	ldr	r2, [pc, #292]	; (80010d0 <HAL_GPIO_Init+0x2f0>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d00d      	beq.n	8000fcc <HAL_GPIO_Init+0x1ec>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a48      	ldr	r2, [pc, #288]	; (80010d4 <HAL_GPIO_Init+0x2f4>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d007      	beq.n	8000fc8 <HAL_GPIO_Init+0x1e8>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a47      	ldr	r2, [pc, #284]	; (80010d8 <HAL_GPIO_Init+0x2f8>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d101      	bne.n	8000fc4 <HAL_GPIO_Init+0x1e4>
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	e008      	b.n	8000fd6 <HAL_GPIO_Init+0x1f6>
 8000fc4:	2305      	movs	r3, #5
 8000fc6:	e006      	b.n	8000fd6 <HAL_GPIO_Init+0x1f6>
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e004      	b.n	8000fd6 <HAL_GPIO_Init+0x1f6>
 8000fcc:	2302      	movs	r3, #2
 8000fce:	e002      	b.n	8000fd6 <HAL_GPIO_Init+0x1f6>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e000      	b.n	8000fd6 <HAL_GPIO_Init+0x1f6>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	f002 0203 	and.w	r2, r2, #3
 8000fdc:	0092      	lsls	r2, r2, #2
 8000fde:	4093      	lsls	r3, r2
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fe6:	4937      	ldr	r1, [pc, #220]	; (80010c4 <HAL_GPIO_Init+0x2e4>)
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	089b      	lsrs	r3, r3, #2
 8000fec:	3302      	adds	r3, #2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff4:	4b39      	ldr	r3, [pc, #228]	; (80010dc <HAL_GPIO_Init+0x2fc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001018:	4a30      	ldr	r2, [pc, #192]	; (80010dc <HAL_GPIO_Init+0x2fc>)
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800101e:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <HAL_GPIO_Init+0x2fc>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	43db      	mvns	r3, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001042:	4a26      	ldr	r2, [pc, #152]	; (80010dc <HAL_GPIO_Init+0x2fc>)
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001048:	4b24      	ldr	r3, [pc, #144]	; (80010dc <HAL_GPIO_Init+0x2fc>)
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	43db      	mvns	r3, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800106c:	4a1b      	ldr	r2, [pc, #108]	; (80010dc <HAL_GPIO_Init+0x2fc>)
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <HAL_GPIO_Init+0x2fc>)
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	43db      	mvns	r3, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001096:	4a11      	ldr	r2, [pc, #68]	; (80010dc <HAL_GPIO_Init+0x2fc>)
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	3301      	adds	r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f47f aea3 	bne.w	8000df8 <HAL_GPIO_Init+0x18>
  }
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	371c      	adds	r7, #28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40010000 	.word	0x40010000
 80010c8:	40020000 	.word	0x40020000
 80010cc:	40020400 	.word	0x40020400
 80010d0:	40020800 	.word	0x40020800
 80010d4:	40020c00 	.word	0x40020c00
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010400 	.word	0x40010400

080010e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
 80010ec:	4613      	mov	r3, r2
 80010ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010f0:	787b      	ldrb	r3, [r7, #1]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010f6:	887a      	ldrh	r2, [r7, #2]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80010fc:	e003      	b.n	8001106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	041a      	lsls	r2, r3, #16
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	619a      	str	r2, [r3, #24]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e12b      	b.n	800137a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d106      	bne.n	800113c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff fb98 	bl	800086c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2224      	movs	r2, #36	; 0x24
 8001140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 0201 	bic.w	r2, r2, #1
 8001152:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001162:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001172:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001174:	f002 faa8 	bl	80036c8 <HAL_RCC_GetPCLK1Freq>
 8001178:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4a81      	ldr	r2, [pc, #516]	; (8001384 <HAL_I2C_Init+0x274>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d807      	bhi.n	8001194 <HAL_I2C_Init+0x84>
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4a80      	ldr	r2, [pc, #512]	; (8001388 <HAL_I2C_Init+0x278>)
 8001188:	4293      	cmp	r3, r2
 800118a:	bf94      	ite	ls
 800118c:	2301      	movls	r3, #1
 800118e:	2300      	movhi	r3, #0
 8001190:	b2db      	uxtb	r3, r3
 8001192:	e006      	b.n	80011a2 <HAL_I2C_Init+0x92>
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4a7d      	ldr	r2, [pc, #500]	; (800138c <HAL_I2C_Init+0x27c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	bf94      	ite	ls
 800119c:	2301      	movls	r3, #1
 800119e:	2300      	movhi	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e0e7      	b.n	800137a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	4a78      	ldr	r2, [pc, #480]	; (8001390 <HAL_I2C_Init+0x280>)
 80011ae:	fba2 2303 	umull	r2, r3, r2, r3
 80011b2:	0c9b      	lsrs	r3, r3, #18
 80011b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	4a6a      	ldr	r2, [pc, #424]	; (8001384 <HAL_I2C_Init+0x274>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d802      	bhi.n	80011e4 <HAL_I2C_Init+0xd4>
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	3301      	adds	r3, #1
 80011e2:	e009      	b.n	80011f8 <HAL_I2C_Init+0xe8>
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011ea:	fb02 f303 	mul.w	r3, r2, r3
 80011ee:	4a69      	ldr	r2, [pc, #420]	; (8001394 <HAL_I2C_Init+0x284>)
 80011f0:	fba2 2303 	umull	r2, r3, r2, r3
 80011f4:	099b      	lsrs	r3, r3, #6
 80011f6:	3301      	adds	r3, #1
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	6812      	ldr	r2, [r2, #0]
 80011fc:	430b      	orrs	r3, r1
 80011fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800120a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	495c      	ldr	r1, [pc, #368]	; (8001384 <HAL_I2C_Init+0x274>)
 8001214:	428b      	cmp	r3, r1
 8001216:	d819      	bhi.n	800124c <HAL_I2C_Init+0x13c>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	1e59      	subs	r1, r3, #1
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	fbb1 f3f3 	udiv	r3, r1, r3
 8001226:	1c59      	adds	r1, r3, #1
 8001228:	f640 73fc 	movw	r3, #4092	; 0xffc
 800122c:	400b      	ands	r3, r1
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00a      	beq.n	8001248 <HAL_I2C_Init+0x138>
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	1e59      	subs	r1, r3, #1
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001240:	3301      	adds	r3, #1
 8001242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001246:	e051      	b.n	80012ec <HAL_I2C_Init+0x1dc>
 8001248:	2304      	movs	r3, #4
 800124a:	e04f      	b.n	80012ec <HAL_I2C_Init+0x1dc>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d111      	bne.n	8001278 <HAL_I2C_Init+0x168>
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	1e58      	subs	r0, r3, #1
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6859      	ldr	r1, [r3, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	440b      	add	r3, r1
 8001262:	fbb0 f3f3 	udiv	r3, r0, r3
 8001266:	3301      	adds	r3, #1
 8001268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800126c:	2b00      	cmp	r3, #0
 800126e:	bf0c      	ite	eq
 8001270:	2301      	moveq	r3, #1
 8001272:	2300      	movne	r3, #0
 8001274:	b2db      	uxtb	r3, r3
 8001276:	e012      	b.n	800129e <HAL_I2C_Init+0x18e>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	1e58      	subs	r0, r3, #1
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6859      	ldr	r1, [r3, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	0099      	lsls	r1, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	fbb0 f3f3 	udiv	r3, r0, r3
 800128e:	3301      	adds	r3, #1
 8001290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001294:	2b00      	cmp	r3, #0
 8001296:	bf0c      	ite	eq
 8001298:	2301      	moveq	r3, #1
 800129a:	2300      	movne	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_I2C_Init+0x196>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e022      	b.n	80012ec <HAL_I2C_Init+0x1dc>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10e      	bne.n	80012cc <HAL_I2C_Init+0x1bc>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	1e58      	subs	r0, r3, #1
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6859      	ldr	r1, [r3, #4]
 80012b6:	460b      	mov	r3, r1
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	440b      	add	r3, r1
 80012bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80012c0:	3301      	adds	r3, #1
 80012c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ca:	e00f      	b.n	80012ec <HAL_I2C_Init+0x1dc>
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	1e58      	subs	r0, r3, #1
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6859      	ldr	r1, [r3, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	0099      	lsls	r1, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	fbb0 f3f3 	udiv	r3, r0, r3
 80012e2:	3301      	adds	r3, #1
 80012e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	6809      	ldr	r1, [r1, #0]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69da      	ldr	r2, [r3, #28]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a1b      	ldr	r3, [r3, #32]
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	430a      	orrs	r2, r1
 800130e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800131a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6911      	ldr	r1, [r2, #16]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68d2      	ldr	r2, [r2, #12]
 8001326:	4311      	orrs	r1, r2
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6812      	ldr	r2, [r2, #0]
 800132c:	430b      	orrs	r3, r1
 800132e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695a      	ldr	r2, [r3, #20]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	431a      	orrs	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 0201 	orr.w	r2, r2, #1
 800135a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2220      	movs	r2, #32
 8001366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	000186a0 	.word	0x000186a0
 8001388:	001e847f 	.word	0x001e847f
 800138c:	003d08ff 	.word	0x003d08ff
 8001390:	431bde83 	.word	0x431bde83
 8001394:	10624dd3 	.word	0x10624dd3

08001398 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139a:	b08b      	sub	sp, #44	; 0x2c
 800139c:	af06      	add	r7, sp, #24
 800139e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e0d0      	b.n	800154c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d106      	bne.n	80013c4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f007 f8fc 	bl	80085bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2203      	movs	r2, #3
 80013c8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f002 fe63 	bl	800409c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	73fb      	strb	r3, [r7, #15]
 80013da:	e04c      	b.n	8001476 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	1c5a      	adds	r2, r3, #1
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	440b      	add	r3, r1
 80013ec:	3301      	adds	r3, #1
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	440b      	add	r3, r1
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001406:	7bfa      	ldrb	r2, [r7, #15]
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	b298      	uxth	r0, r3
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	440b      	add	r3, r1
 8001418:	3336      	adds	r3, #54	; 0x36
 800141a:	4602      	mov	r2, r0
 800141c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	440b      	add	r3, r1
 800142e:	3303      	adds	r3, #3
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	440b      	add	r3, r1
 8001442:	3338      	adds	r3, #56	; 0x38
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001448:	7bfa      	ldrb	r2, [r7, #15]
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	440b      	add	r3, r1
 8001456:	333c      	adds	r3, #60	; 0x3c
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800145c:	7bfa      	ldrb	r2, [r7, #15]
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	440b      	add	r3, r1
 800146a:	3340      	adds	r3, #64	; 0x40
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	3301      	adds	r3, #1
 8001474:	73fb      	strb	r3, [r7, #15]
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	429a      	cmp	r2, r3
 800147e:	d3ad      	bcc.n	80013dc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001480:	2300      	movs	r3, #0
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	e044      	b.n	8001510 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001486:	7bfa      	ldrb	r2, [r7, #15]
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	440b      	add	r3, r1
 8001494:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001498:	2200      	movs	r2, #0
 800149a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800149c:	7bfa      	ldrb	r2, [r7, #15]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	440b      	add	r3, r1
 80014aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014b2:	7bfa      	ldrb	r2, [r7, #15]
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	440b      	add	r3, r1
 80014c0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014c8:	7bfa      	ldrb	r2, [r7, #15]
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	440b      	add	r3, r1
 80014d6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014de:	7bfa      	ldrb	r2, [r7, #15]
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	440b      	add	r3, r1
 80014ec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	440b      	add	r3, r1
 8001502:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800150a:	7bfb      	ldrb	r3, [r7, #15]
 800150c:	3301      	adds	r3, #1
 800150e:	73fb      	strb	r3, [r7, #15]
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	429a      	cmp	r2, r3
 8001518:	d3b5      	bcc.n	8001486 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	687e      	ldr	r6, [r7, #4]
 8001522:	466d      	mov	r5, sp
 8001524:	f106 0410 	add.w	r4, r6, #16
 8001528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800152a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152c:	6823      	ldr	r3, [r4, #0]
 800152e:	602b      	str	r3, [r5, #0]
 8001530:	1d33      	adds	r3, r6, #4
 8001532:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001534:	6838      	ldr	r0, [r7, #0]
 8001536:	f002 fdcb 	bl	80040d0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001554 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001562:	2b01      	cmp	r3, #1
 8001564:	d101      	bne.n	800156a <HAL_PCD_Start+0x16>
 8001566:	2302      	movs	r3, #2
 8001568:	e016      	b.n	8001598 <HAL_PCD_Start+0x44>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f002 fd7a 	bl	8004070 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800157c:	2101      	movs	r1, #1
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f006 fffe 	bl	8008580 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f005 fa5f 	bl	8006a4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f005 fa57 	bl	8006a60 <USB_ReadInterrupts>
 80015b2:	4603      	mov	r3, r0
 80015b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015bc:	d102      	bne.n	80015c4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 faf5 	bl	8001bae <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f005 fa49 	bl	8006a60 <USB_ReadInterrupts>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015d8:	d112      	bne.n	8001600 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015ec:	b292      	uxth	r2, r2
 80015ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f007 f85d 	bl	80086b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015f8:	2100      	movs	r1, #0
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f8c7 	bl	800178e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f005 fa2b 	bl	8006a60 <USB_ReadInterrupts>
 800160a:	4603      	mov	r3, r0
 800160c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001614:	d10b      	bne.n	800162e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800161e:	b29a      	uxth	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001628:	b292      	uxth	r2, r2
 800162a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f005 fa14 	bl	8006a60 <USB_ReadInterrupts>
 8001638:	4603      	mov	r3, r0
 800163a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800163e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001642:	d10b      	bne.n	800165c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800164c:	b29a      	uxth	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001656:	b292      	uxth	r2, r2
 8001658:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f005 f9fd 	bl	8006a60 <USB_ReadInterrupts>
 8001666:	4603      	mov	r3, r0
 8001668:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800166c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001670:	d126      	bne.n	80016c0 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800167a:	b29a      	uxth	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0204 	bic.w	r2, r2, #4
 8001684:	b292      	uxth	r2, r2
 8001686:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001692:	b29a      	uxth	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0208 	bic.w	r2, r2, #8
 800169c:	b292      	uxth	r2, r2
 800169e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f007 f83e 	bl	8008724 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016ba:	b292      	uxth	r2, r2
 80016bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f005 f9cb 	bl	8006a60 <USB_ReadInterrupts>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016d4:	d126      	bne.n	8001724 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016de:	b29a      	uxth	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 0208 	orr.w	r2, r2, #8
 80016e8:	b292      	uxth	r2, r2
 80016ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001700:	b292      	uxth	r2, r2
 8001702:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800170e:	b29a      	uxth	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f042 0204 	orr.w	r2, r2, #4
 8001718:	b292      	uxth	r2, r2
 800171a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f006 ffe6 	bl	80086f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f005 f999 	bl	8006a60 <USB_ReadInterrupts>
 800172e:	4603      	mov	r3, r0
 8001730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001738:	d10e      	bne.n	8001758 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001742:	b29a      	uxth	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800174c:	b292      	uxth	r2, r2
 800174e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f006 ff9f 	bl	8008696 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f005 f97f 	bl	8006a60 <USB_ReadInterrupts>
 8001762:	4603      	mov	r3, r0
 8001764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800176c:	d10b      	bne.n	8001786 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001776:	b29a      	uxth	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001780:	b292      	uxth	r2, r2
 8001782:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <HAL_PCD_SetAddress+0x1a>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e013      	b.n	80017d0 <HAL_PCD_SetAddress+0x42>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	78fa      	ldrb	r2, [r7, #3]
 80017b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	78fa      	ldrb	r2, [r7, #3]
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f005 f930 	bl	8006a26 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	4608      	mov	r0, r1
 80017e2:	4611      	mov	r1, r2
 80017e4:	461a      	mov	r2, r3
 80017e6:	4603      	mov	r3, r0
 80017e8:	70fb      	strb	r3, [r7, #3]
 80017ea:	460b      	mov	r3, r1
 80017ec:	803b      	strh	r3, [r7, #0]
 80017ee:	4613      	mov	r3, r2
 80017f0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	da0e      	bge.n	800181c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2201      	movs	r2, #1
 8001818:	705a      	strb	r2, [r3, #1]
 800181a:	e00e      	b.n	800183a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	f003 0207 	and.w	r2, r3, #7
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800183a:	78fb      	ldrb	r3, [r7, #3]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	b2da      	uxtb	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001846:	883a      	ldrh	r2, [r7, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	78ba      	ldrb	r2, [r7, #2]
 8001850:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	785b      	ldrb	r3, [r3, #1]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d004      	beq.n	8001864 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	b29a      	uxth	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001864:	78bb      	ldrb	r3, [r7, #2]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d102      	bne.n	8001870 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_PCD_EP_Open+0xa6>
 800187a:	2302      	movs	r3, #2
 800187c:	e00e      	b.n	800189c <HAL_PCD_EP_Open+0xc4>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68f9      	ldr	r1, [r7, #12]
 800188c:	4618      	mov	r0, r3
 800188e:	f002 fc3f 	bl	8004110 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800189a:	7afb      	ldrb	r3, [r7, #11]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	da0e      	bge.n	80018d6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	4413      	add	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2201      	movs	r2, #1
 80018d2:	705a      	strb	r2, [r3, #1]
 80018d4:	e00e      	b.n	80018f4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	f003 0207 	and.w	r2, r3, #7
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	4413      	add	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_PCD_EP_Close+0x6a>
 800190a:	2302      	movs	r3, #2
 800190c:	e00e      	b.n	800192c <HAL_PCD_EP_Close+0x88>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68f9      	ldr	r1, [r7, #12]
 800191c:	4618      	mov	r0, r3
 800191e:	f002 ff61 	bl	80047e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	460b      	mov	r3, r1
 8001942:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001944:	7afb      	ldrb	r3, [r7, #11]
 8001946:	f003 0207 	and.w	r2, r3, #7
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	4413      	add	r3, r2
 800195a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	2200      	movs	r2, #0
 800196c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2200      	movs	r2, #0
 8001972:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001974:	7afb      	ldrb	r3, [r7, #11]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	b2da      	uxtb	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001980:	7afb      	ldrb	r3, [r7, #11]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	2b00      	cmp	r3, #0
 8001988:	d106      	bne.n	8001998 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6979      	ldr	r1, [r7, #20]
 8001990:	4618      	mov	r0, r3
 8001992:	f003 f913 	bl	8004bbc <USB_EPStartXfer>
 8001996:	e005      	b.n	80019a4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6979      	ldr	r1, [r7, #20]
 800199e:	4618      	mov	r0, r3
 80019a0:	f003 f90c 	bl	8004bbc <USB_EPStartXfer>
  }

  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	460b      	mov	r3, r1
 80019b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	f003 0207 	and.w	r2, r3, #7
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	440b      	add	r3, r1
 80019cc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80019d0:	681b      	ldr	r3, [r3, #0]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	460b      	mov	r3, r1
 80019ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ec:	7afb      	ldrb	r3, [r7, #11]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	4413      	add	r3, r2
 8001a00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	2201      	movs	r2, #1
 8001a26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a28:	7afb      	ldrb	r3, [r7, #11]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a34:	7afb      	ldrb	r3, [r7, #11]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d106      	bne.n	8001a4c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6979      	ldr	r1, [r7, #20]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f003 f8b9 	bl	8004bbc <USB_EPStartXfer>
 8001a4a:	e005      	b.n	8001a58 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6979      	ldr	r1, [r7, #20]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f003 f8b2 	bl	8004bbc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b084      	sub	sp, #16
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	f003 0207 	and.w	r2, r3, #7
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d901      	bls.n	8001a80 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e03e      	b.n	8001afe <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	da0e      	bge.n	8001aa6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a88:	78fb      	ldrb	r3, [r7, #3]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	705a      	strb	r2, [r3, #1]
 8001aa4:	e00c      	b.n	8001ac0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001aa6:	78fa      	ldrb	r2, [r7, #3]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ac6:	78fb      	ldrb	r3, [r7, #3]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d101      	bne.n	8001ae0 <HAL_PCD_EP_SetStall+0x7e>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e00e      	b.n	8001afe <HAL_PCD_EP_SetStall+0x9c>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68f9      	ldr	r1, [r7, #12]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f004 fe9c 	bl	800682c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b084      	sub	sp, #16
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	f003 020f 	and.w	r2, r3, #15
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d901      	bls.n	8001b24 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e040      	b.n	8001ba6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	da0e      	bge.n	8001b4a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b2c:	78fb      	ldrb	r3, [r7, #3]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2201      	movs	r2, #1
 8001b46:	705a      	strb	r2, [r3, #1]
 8001b48:	e00e      	b.n	8001b68 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b4a:	78fb      	ldrb	r3, [r7, #3]
 8001b4c:	f003 0207 	and.w	r2, r3, #7
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4413      	add	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b6e:	78fb      	ldrb	r3, [r7, #3]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <HAL_PCD_EP_ClrStall+0x82>
 8001b84:	2302      	movs	r3, #2
 8001b86:	e00e      	b.n	8001ba6 <HAL_PCD_EP_ClrStall+0xa0>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68f9      	ldr	r1, [r7, #12]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f004 fe98 	bl	80068cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b08e      	sub	sp, #56	; 0x38
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001bb6:	e2ec      	b.n	8002192 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bc0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001bc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001bce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f040 8161 	bne.w	8001e9a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001bd8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bda:	f003 0310 	and.w	r3, r3, #16
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d152      	bne.n	8001c88 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bf2:	81fb      	strh	r3, [r7, #14]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	89fb      	ldrh	r3, [r7, #14]
 8001bfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3328      	adds	r3, #40	; 0x28
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	461a      	mov	r2, r3
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4413      	add	r3, r2
 8001c20:	3302      	adds	r3, #2
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	695a      	ldr	r2, [r3, #20]
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	441a      	add	r2, r3
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001c46:	2100      	movs	r1, #0
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f006 fd0a 	bl	8008662 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 829b 	beq.w	8002192 <PCD_EP_ISR_Handler+0x5e4>
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f040 8296 	bne.w	8002192 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	b292      	uxth	r2, r2
 8001c7a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c86:	e284      	b.n	8002192 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c98:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d034      	beq.n	8001d0c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3306      	adds	r3, #6
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	f004 ff11 	bl	8006b08 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	823b      	strh	r3, [r7, #16]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	8a3a      	ldrh	r2, [r7, #16]
 8001cfc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d00:	b292      	uxth	r2, r2
 8001d02:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f006 fc7f 	bl	8008608 <HAL_PCD_SetupStageCallback>
 8001d0a:	e242      	b.n	8002192 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d0c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f280 823e 	bge.w	8002192 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d22:	4013      	ands	r3, r2
 8001d24:	83bb      	strh	r3, [r7, #28]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	8bba      	ldrh	r2, [r7, #28]
 8001d2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d30:	b292      	uxth	r2, r2
 8001d32:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	3306      	adds	r3, #6
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d019      	beq.n	8001d9c <PCD_EP_ISR_Handler+0x1ee>
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d015      	beq.n	8001d9c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	6959      	ldr	r1, [r3, #20]
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	f004 fec1 	bl	8006b08 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	695a      	ldr	r2, [r3, #20]
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	441a      	add	r2, r3
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d94:	2100      	movs	r1, #0
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f006 fc48 	bl	800862c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f040 81f2 	bne.w	8002192 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	61bb      	str	r3, [r7, #24]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d112      	bne.n	8001dfc <PCD_EP_ISR_Handler+0x24e>
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	801a      	strh	r2, [r3, #0]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	801a      	strh	r2, [r3, #0]
 8001dfa:	e02f      	b.n	8001e5c <PCD_EP_ISR_Handler+0x2ae>
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	2b3e      	cmp	r3, #62	; 0x3e
 8001e02:	d813      	bhi.n	8001e2c <PCD_EP_ISR_Handler+0x27e>
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	085b      	lsrs	r3, r3, #1
 8001e0a:	633b      	str	r3, [r7, #48]	; 0x30
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <PCD_EP_ISR_Handler+0x270>
 8001e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	029b      	lsls	r3, r3, #10
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	801a      	strh	r2, [r3, #0]
 8001e2a:	e017      	b.n	8001e5c <PCD_EP_ISR_Handler+0x2ae>
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	095b      	lsrs	r3, r3, #5
 8001e32:	633b      	str	r3, [r7, #48]	; 0x30
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d102      	bne.n	8001e46 <PCD_EP_ISR_Handler+0x298>
 8001e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e42:	3b01      	subs	r3, #1
 8001e44:	633b      	str	r3, [r7, #48]	; 0x30
 8001e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	029b      	lsls	r3, r3, #10
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e6c:	827b      	strh	r3, [r7, #18]
 8001e6e:	8a7b      	ldrh	r3, [r7, #18]
 8001e70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e74:	827b      	strh	r3, [r7, #18]
 8001e76:	8a7b      	ldrh	r3, [r7, #18]
 8001e78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e7c:	827b      	strh	r3, [r7, #18]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	8a7b      	ldrh	r3, [r7, #18]
 8001e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	8013      	strh	r3, [r2, #0]
 8001e98:	e17b      	b.n	8002192 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001eac:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f280 80ea 	bge.w	800208a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ecc:	4013      	ands	r3, r2
 8001ece:	853b      	strh	r3, [r7, #40]	; 0x28
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ee0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ee4:	b292      	uxth	r2, r2
 8001ee6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ee8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	4413      	add	r3, r2
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	7b1b      	ldrb	r3, [r3, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d122      	bne.n	8001f4c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	461a      	mov	r2, r3
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4413      	add	r3, r2
 8001f1a:	3306      	adds	r3, #6
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f2e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001f30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 8087 	beq.w	8002046 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	6959      	ldr	r1, [r3, #20]
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	88da      	ldrh	r2, [r3, #6]
 8001f44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f46:	f004 fddf 	bl	8006b08 <USB_ReadPMA>
 8001f4a:	e07c      	b.n	8002046 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	78db      	ldrb	r3, [r3, #3]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d108      	bne.n	8001f66 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001f54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f56:	461a      	mov	r2, r3
 8001f58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f927 	bl	80021ae <HAL_PCD_EP_DB_Receive>
 8001f60:	4603      	mov	r3, r0
 8001f62:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001f64:	e06f      	b.n	8002046 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f80:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	441a      	add	r2, r3
 8001f90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d021      	beq.n	8002004 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fe8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001fea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d02a      	beq.n	8002046 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	6959      	ldr	r1, [r3, #20]
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	891a      	ldrh	r2, [r3, #8]
 8001ffc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ffe:	f004 fd83 	bl	8006b08 <USB_ReadPMA>
 8002002:	e020      	b.n	8002046 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800200c:	b29b      	uxth	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	3306      	adds	r3, #6
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	4413      	add	r3, r2
 8002022:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800202c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800202e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	6959      	ldr	r1, [r3, #20]
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	895a      	ldrh	r2, [r3, #10]
 8002040:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002042:	f004 fd61 	bl	8006b08 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	69da      	ldr	r2, [r3, #28]
 800204a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800204c:	441a      	add	r2, r3
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002058:	441a      	add	r2, r3
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d004      	beq.n	8002070 <PCD_EP_ISR_Handler+0x4c2>
 8002066:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	429a      	cmp	r2, r3
 800206e:	d206      	bcs.n	800207e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4619      	mov	r1, r3
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f006 fad8 	bl	800862c <HAL_PCD_DataOutStageCallback>
 800207c:	e005      	b.n	800208a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002084:	4618      	mov	r0, r3
 8002086:	f002 fd99 	bl	8004bbc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800208a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800208c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002090:	2b00      	cmp	r3, #0
 8002092:	d07e      	beq.n	8002192 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002094:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002098:	1c5a      	adds	r2, r3, #1
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80020be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c2:	843b      	strh	r3, [r7, #32]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	441a      	add	r2, r3
 80020d2:	8c3b      	ldrh	r3, [r7, #32]
 80020d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020dc:	b29b      	uxth	r3, r3
 80020de:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	78db      	ldrb	r3, [r3, #3]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d00c      	beq.n	8002102 <PCD_EP_ISR_Handler+0x554>
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	78db      	ldrb	r3, [r3, #3]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d146      	bne.n	8002186 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80020f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d141      	bne.n	8002186 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800210a:	b29b      	uxth	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	3302      	adds	r3, #2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	4413      	add	r3, r2
 8002120:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800212a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	699a      	ldr	r2, [r3, #24]
 8002130:	8bfb      	ldrh	r3, [r7, #30]
 8002132:	429a      	cmp	r2, r3
 8002134:	d906      	bls.n	8002144 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	699a      	ldr	r2, [r3, #24]
 800213a:	8bfb      	ldrh	r3, [r7, #30]
 800213c:	1ad2      	subs	r2, r2, r3
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	619a      	str	r2, [r3, #24]
 8002142:	e002      	b.n	800214a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	2200      	movs	r2, #0
 8002148:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	4619      	mov	r1, r3
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f006 fa82 	bl	8008662 <HAL_PCD_DataInStageCallback>
 800215e:	e018      	b.n	8002192 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	695a      	ldr	r2, [r3, #20]
 8002164:	8bfb      	ldrh	r3, [r7, #30]
 8002166:	441a      	add	r2, r3
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	69da      	ldr	r2, [r3, #28]
 8002170:	8bfb      	ldrh	r3, [r7, #30]
 8002172:	441a      	add	r2, r3
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800217e:	4618      	mov	r0, r3
 8002180:	f002 fd1c 	bl	8004bbc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002184:	e005      	b.n	8002192 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002186:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002188:	461a      	mov	r2, r3
 800218a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f91b 	bl	80023c8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800219a:	b29b      	uxth	r3, r3
 800219c:	b21b      	sxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f6ff ad0a 	blt.w	8001bb8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3738      	adds	r7, #56	; 0x38
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b088      	sub	sp, #32
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	60f8      	str	r0, [r7, #12]
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	4613      	mov	r3, r2
 80021ba:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021bc:	88fb      	ldrh	r3, [r7, #6]
 80021be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d07e      	beq.n	80022c4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	461a      	mov	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4413      	add	r3, r2
 80021da:	3302      	adds	r3, #2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	699a      	ldr	r2, [r3, #24]
 80021f4:	8b7b      	ldrh	r3, [r7, #26]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d306      	bcc.n	8002208 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	699a      	ldr	r2, [r3, #24]
 80021fe:	8b7b      	ldrh	r3, [r7, #26]
 8002200:	1ad2      	subs	r2, r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	619a      	str	r2, [r3, #24]
 8002206:	e002      	b.n	800220e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2200      	movs	r2, #0
 800220c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d123      	bne.n	800225e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	b29b      	uxth	r3, r3
 8002228:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800222c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002230:	833b      	strh	r3, [r7, #24]
 8002232:	8b3b      	ldrh	r3, [r7, #24]
 8002234:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002238:	833b      	strh	r3, [r7, #24]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	441a      	add	r2, r3
 8002248:	8b3b      	ldrh	r3, [r7, #24]
 800224a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800224e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800225a:	b29b      	uxth	r3, r3
 800225c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800225e:	88fb      	ldrh	r3, [r7, #6]
 8002260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002264:	2b00      	cmp	r3, #0
 8002266:	d01f      	beq.n	80022a8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	b29b      	uxth	r3, r3
 800227a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800227e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002282:	82fb      	strh	r3, [r7, #22]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	461a      	mov	r2, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	441a      	add	r2, r3
 8002292:	8afb      	ldrh	r3, [r7, #22]
 8002294:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002298:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800229c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022a8:	8b7b      	ldrh	r3, [r7, #26]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 8087 	beq.w	80023be <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	6959      	ldr	r1, [r3, #20]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	891a      	ldrh	r2, [r3, #8]
 80022bc:	8b7b      	ldrh	r3, [r7, #26]
 80022be:	f004 fc23 	bl	8006b08 <USB_ReadPMA>
 80022c2:	e07c      	b.n	80023be <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	461a      	mov	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4413      	add	r3, r2
 80022d8:	3306      	adds	r3, #6
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	699a      	ldr	r2, [r3, #24]
 80022f2:	8b7b      	ldrh	r3, [r7, #26]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d306      	bcc.n	8002306 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	699a      	ldr	r2, [r3, #24]
 80022fc:	8b7b      	ldrh	r3, [r7, #26]
 80022fe:	1ad2      	subs	r2, r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	619a      	str	r2, [r3, #24]
 8002304:	e002      	b.n	800230c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2200      	movs	r2, #0
 800230a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d123      	bne.n	800235c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	b29b      	uxth	r3, r3
 8002326:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800232a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800232e:	83fb      	strh	r3, [r7, #30]
 8002330:	8bfb      	ldrh	r3, [r7, #30]
 8002332:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002336:	83fb      	strh	r3, [r7, #30]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	441a      	add	r2, r3
 8002346:	8bfb      	ldrh	r3, [r7, #30]
 8002348:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800234c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002358:	b29b      	uxth	r3, r3
 800235a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800235c:	88fb      	ldrh	r3, [r7, #6]
 800235e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002362:	2b00      	cmp	r3, #0
 8002364:	d11f      	bne.n	80023a6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800237c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002380:	83bb      	strh	r3, [r7, #28]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	441a      	add	r2, r3
 8002390:	8bbb      	ldrh	r3, [r7, #28]
 8002392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800239a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800239e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023a6:	8b7b      	ldrh	r3, [r7, #26]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6818      	ldr	r0, [r3, #0]
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	6959      	ldr	r1, [r3, #20]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	895a      	ldrh	r2, [r3, #10]
 80023b8:	8b7b      	ldrh	r3, [r7, #26]
 80023ba:	f004 fba5 	bl	8006b08 <USB_ReadPMA>
    }
  }

  return count;
 80023be:	8b7b      	ldrh	r3, [r7, #26]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3720      	adds	r7, #32
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b0a2      	sub	sp, #136	; 0x88
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	4613      	mov	r3, r2
 80023d4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023d6:	88fb      	ldrh	r3, [r7, #6]
 80023d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 81c7 	beq.w	8002770 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4413      	add	r3, r2
 80023f6:	3302      	adds	r3, #2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800240a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002416:	429a      	cmp	r2, r3
 8002418:	d907      	bls.n	800242a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	699a      	ldr	r2, [r3, #24]
 800241e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002422:	1ad2      	subs	r2, r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	619a      	str	r2, [r3, #24]
 8002428:	e002      	b.n	8002430 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2200      	movs	r2, #0
 800242e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	2b00      	cmp	r3, #0
 8002436:	f040 80b9 	bne.w	80025ac <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	785b      	ldrb	r3, [r3, #1]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d126      	bne.n	8002490 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002450:	b29b      	uxth	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002456:	4413      	add	r3, r2
 8002458:	62bb      	str	r3, [r7, #40]	; 0x28
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	011a      	lsls	r2, r3, #4
 8002460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002462:	4413      	add	r3, r2
 8002464:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	b29b      	uxth	r3, r3
 8002470:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002474:	b29a      	uxth	r2, r3
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	801a      	strh	r2, [r3, #0]
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	b29b      	uxth	r3, r3
 8002480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002488:	b29a      	uxth	r2, r3
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	801a      	strh	r2, [r3, #0]
 800248e:	e01a      	b.n	80024c6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	785b      	ldrb	r3, [r3, #1]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d116      	bne.n	80024c6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	633b      	str	r3, [r7, #48]	; 0x30
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ac:	4413      	add	r3, r2
 80024ae:	633b      	str	r3, [r7, #48]	; 0x30
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	011a      	lsls	r2, r3, #4
 80024b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b8:	4413      	add	r3, r2
 80024ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c2:	2200      	movs	r2, #0
 80024c4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	623b      	str	r3, [r7, #32]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	785b      	ldrb	r3, [r3, #1]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d126      	bne.n	8002522 <HAL_PCD_EP_DB_Transmit+0x15a>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	461a      	mov	r2, r3
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	4413      	add	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	011a      	lsls	r2, r3, #4
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	4413      	add	r3, r2
 80024f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	b29b      	uxth	r3, r3
 8002502:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002506:	b29a      	uxth	r2, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	801a      	strh	r2, [r3, #0]
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	b29b      	uxth	r3, r3
 8002512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800251a:	b29a      	uxth	r2, r3
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	801a      	strh	r2, [r3, #0]
 8002520:	e017      	b.n	8002552 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	785b      	ldrb	r3, [r3, #1]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d113      	bne.n	8002552 <HAL_PCD_EP_DB_Transmit+0x18a>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002532:	b29b      	uxth	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	4413      	add	r3, r2
 800253a:	623b      	str	r3, [r7, #32]
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	011a      	lsls	r2, r3, #4
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	4413      	add	r3, r2
 8002546:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800254a:	61fb      	str	r3, [r7, #28]
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	2200      	movs	r2, #0
 8002550:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	4619      	mov	r1, r3
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f006 f882 	bl	8008662 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 82d4 	beq.w	8002b12 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002584:	827b      	strh	r3, [r7, #18]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	441a      	add	r2, r3
 8002594:	8a7b      	ldrh	r3, [r7, #18]
 8002596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800259a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800259e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	8013      	strh	r3, [r2, #0]
 80025aa:	e2b2      	b.n	8002b12 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d021      	beq.n	80025fa <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	441a      	add	r2, r3
 80025e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80025e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002600:	2b01      	cmp	r3, #1
 8002602:	f040 8286 	bne.w	8002b12 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	695a      	ldr	r2, [r3, #20]
 800260a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800260e:	441a      	add	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	69da      	ldr	r2, [r3, #28]
 8002618:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800261c:	441a      	add	r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	6a1a      	ldr	r2, [r3, #32]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	429a      	cmp	r2, r3
 800262c:	d309      	bcc.n	8002642 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	6a1a      	ldr	r2, [r3, #32]
 8002638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800263a:	1ad2      	subs	r2, r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	621a      	str	r2, [r3, #32]
 8002640:	e015      	b.n	800266e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d107      	bne.n	800265a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800264a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800264e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002658:	e009      	b.n	800266e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2200      	movs	r2, #0
 800266c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	785b      	ldrb	r3, [r3, #1]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d155      	bne.n	8002722 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	63bb      	str	r3, [r7, #56]	; 0x38
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002684:	b29b      	uxth	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800268a:	4413      	add	r3, r2
 800268c:	63bb      	str	r3, [r7, #56]	; 0x38
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	011a      	lsls	r2, r3, #4
 8002694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002696:	4413      	add	r3, r2
 8002698:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800269c:	637b      	str	r3, [r7, #52]	; 0x34
 800269e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d112      	bne.n	80026ca <HAL_PCD_EP_DB_Transmit+0x302>
 80026a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b2:	801a      	strh	r2, [r3, #0]
 80026b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c6:	801a      	strh	r2, [r3, #0]
 80026c8:	e047      	b.n	800275a <HAL_PCD_EP_DB_Transmit+0x392>
 80026ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026cc:	2b3e      	cmp	r3, #62	; 0x3e
 80026ce:	d811      	bhi.n	80026f4 <HAL_PCD_EP_DB_Transmit+0x32c>
 80026d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026d2:	085b      	lsrs	r3, r3, #1
 80026d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80026d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <HAL_PCD_EP_DB_Transmit+0x31e>
 80026e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026e2:	3301      	adds	r3, #1
 80026e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80026e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	029b      	lsls	r3, r3, #10
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f0:	801a      	strh	r2, [r3, #0]
 80026f2:	e032      	b.n	800275a <HAL_PCD_EP_DB_Transmit+0x392>
 80026f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80026fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	2b00      	cmp	r3, #0
 8002702:	d102      	bne.n	800270a <HAL_PCD_EP_DB_Transmit+0x342>
 8002704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002706:	3b01      	subs	r3, #1
 8002708:	64bb      	str	r3, [r7, #72]	; 0x48
 800270a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800270c:	b29b      	uxth	r3, r3
 800270e:	029b      	lsls	r3, r3, #10
 8002710:	b29b      	uxth	r3, r3
 8002712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800271a:	b29a      	uxth	r2, r3
 800271c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800271e:	801a      	strh	r2, [r3, #0]
 8002720:	e01b      	b.n	800275a <HAL_PCD_EP_DB_Transmit+0x392>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	785b      	ldrb	r3, [r3, #1]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d117      	bne.n	800275a <HAL_PCD_EP_DB_Transmit+0x392>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	643b      	str	r3, [r7, #64]	; 0x40
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002738:	b29b      	uxth	r3, r3
 800273a:	461a      	mov	r2, r3
 800273c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800273e:	4413      	add	r3, r2
 8002740:	643b      	str	r3, [r7, #64]	; 0x40
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	011a      	lsls	r2, r3, #4
 8002748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800274a:	4413      	add	r3, r2
 800274c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002750:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002754:	b29a      	uxth	r2, r3
 8002756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002758:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	6959      	ldr	r1, [r3, #20]
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	891a      	ldrh	r2, [r3, #8]
 8002766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002768:	b29b      	uxth	r3, r3
 800276a:	f004 f988 	bl	8006a7e <USB_WritePMA>
 800276e:	e1d0      	b.n	8002b12 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002778:	b29b      	uxth	r3, r3
 800277a:	461a      	mov	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4413      	add	r3, r2
 8002784:	3306      	adds	r3, #6
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	4413      	add	r3, r2
 800278e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002798:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	699a      	ldr	r2, [r3, #24]
 80027a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d307      	bcc.n	80027b8 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	699a      	ldr	r2, [r3, #24]
 80027ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027b0:	1ad2      	subs	r2, r2, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	619a      	str	r2, [r3, #24]
 80027b6:	e002      	b.n	80027be <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2200      	movs	r2, #0
 80027bc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f040 80c4 	bne.w	8002950 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	785b      	ldrb	r3, [r3, #1]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d126      	bne.n	800281e <HAL_PCD_EP_DB_Transmit+0x456>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027de:	b29b      	uxth	r3, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e4:	4413      	add	r3, r2
 80027e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	011a      	lsls	r2, r3, #4
 80027ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f0:	4413      	add	r3, r2
 80027f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80027f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002802:	b29a      	uxth	r2, r3
 8002804:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002806:	801a      	strh	r2, [r3, #0]
 8002808:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002816:	b29a      	uxth	r2, r3
 8002818:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800281a:	801a      	strh	r2, [r3, #0]
 800281c:	e01a      	b.n	8002854 <HAL_PCD_EP_DB_Transmit+0x48c>
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	785b      	ldrb	r3, [r3, #1]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d116      	bne.n	8002854 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	677b      	str	r3, [r7, #116]	; 0x74
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002834:	b29b      	uxth	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800283a:	4413      	add	r3, r2
 800283c:	677b      	str	r3, [r7, #116]	; 0x74
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	011a      	lsls	r2, r3, #4
 8002844:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002846:	4413      	add	r3, r2
 8002848:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800284c:	673b      	str	r3, [r7, #112]	; 0x70
 800284e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002850:	2200      	movs	r2, #0
 8002852:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	67bb      	str	r3, [r7, #120]	; 0x78
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	785b      	ldrb	r3, [r3, #1]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d12f      	bne.n	80028c2 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002872:	b29b      	uxth	r3, r3
 8002874:	461a      	mov	r2, r3
 8002876:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800287a:	4413      	add	r3, r2
 800287c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	011a      	lsls	r2, r3, #4
 8002886:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800288a:	4413      	add	r3, r2
 800288c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002890:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002894:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	b29b      	uxth	r3, r3
 800289c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028a6:	801a      	strh	r2, [r3, #0]
 80028a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028be:	801a      	strh	r2, [r3, #0]
 80028c0:	e017      	b.n	80028f2 <HAL_PCD_EP_DB_Transmit+0x52a>
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	785b      	ldrb	r3, [r3, #1]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d113      	bne.n	80028f2 <HAL_PCD_EP_DB_Transmit+0x52a>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028d8:	4413      	add	r3, r2
 80028da:	67bb      	str	r3, [r7, #120]	; 0x78
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	011a      	lsls	r2, r3, #4
 80028e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028e4:	4413      	add	r3, r2
 80028e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028ee:	2200      	movs	r2, #0
 80028f0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	4619      	mov	r1, r3
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f005 feb2 	bl	8008662 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028fe:	88fb      	ldrh	r3, [r7, #6]
 8002900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002904:	2b00      	cmp	r3, #0
 8002906:	f040 8104 	bne.w	8002b12 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	b29b      	uxth	r3, r3
 800291c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002924:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	461a      	mov	r2, r3
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	441a      	add	r2, r3
 8002936:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800293a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800293e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002942:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800294a:	b29b      	uxth	r3, r3
 800294c:	8013      	strh	r3, [r2, #0]
 800294e:	e0e0      	b.n	8002b12 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d121      	bne.n	800299e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	b29b      	uxth	r3, r3
 800296c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002974:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	461a      	mov	r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	441a      	add	r2, r3
 8002986:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800298a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800298e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002992:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800299a:	b29b      	uxth	r3, r3
 800299c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	f040 80b4 	bne.w	8002b12 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	695a      	ldr	r2, [r3, #20]
 80029ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029b2:	441a      	add	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	69da      	ldr	r2, [r3, #28]
 80029bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029c0:	441a      	add	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	6a1a      	ldr	r2, [r3, #32]
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d309      	bcc.n	80029e6 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	6a1a      	ldr	r2, [r3, #32]
 80029dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029de:	1ad2      	subs	r2, r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	621a      	str	r2, [r3, #32]
 80029e4:	e015      	b.n	8002a12 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d107      	bne.n	80029fe <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80029ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029f2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029fc:	e009      	b.n	8002a12 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2200      	movs	r2, #0
 8002a08:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	667b      	str	r3, [r7, #100]	; 0x64
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	785b      	ldrb	r3, [r3, #1]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d155      	bne.n	8002acc <HAL_PCD_EP_DB_Transmit+0x704>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a34:	4413      	add	r3, r2
 8002a36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	011a      	lsls	r2, r3, #4
 8002a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a40:	4413      	add	r3, r2
 8002a42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a46:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d112      	bne.n	8002a74 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002a4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a5c:	801a      	strh	r2, [r3, #0]
 8002a5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a70:	801a      	strh	r2, [r3, #0]
 8002a72:	e044      	b.n	8002afe <HAL_PCD_EP_DB_Transmit+0x736>
 8002a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a76:	2b3e      	cmp	r3, #62	; 0x3e
 8002a78:	d811      	bhi.n	8002a9e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a7c:	085b      	lsrs	r3, r3, #1
 8002a7e:	657b      	str	r3, [r7, #84]	; 0x54
 8002a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	657b      	str	r3, [r7, #84]	; 0x54
 8002a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	029b      	lsls	r3, r3, #10
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a9a:	801a      	strh	r2, [r3, #0]
 8002a9c:	e02f      	b.n	8002afe <HAL_PCD_EP_DB_Transmit+0x736>
 8002a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	657b      	str	r3, [r7, #84]	; 0x54
 8002aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d102      	bne.n	8002ab4 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	657b      	str	r3, [r7, #84]	; 0x54
 8002ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	029b      	lsls	r3, r3, #10
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ac8:	801a      	strh	r2, [r3, #0]
 8002aca:	e018      	b.n	8002afe <HAL_PCD_EP_DB_Transmit+0x736>
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	785b      	ldrb	r3, [r3, #1]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d114      	bne.n	8002afe <HAL_PCD_EP_DB_Transmit+0x736>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ae2:	4413      	add	r3, r2
 8002ae4:	667b      	str	r3, [r7, #100]	; 0x64
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	011a      	lsls	r2, r3, #4
 8002aec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aee:	4413      	add	r3, r2
 8002af0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002af4:	663b      	str	r3, [r7, #96]	; 0x60
 8002af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002afc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	6959      	ldr	r1, [r3, #20]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	895a      	ldrh	r2, [r3, #10]
 8002b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	f003 ffb6 	bl	8006a7e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b2c:	823b      	strh	r3, [r7, #16]
 8002b2e:	8a3b      	ldrh	r3, [r7, #16]
 8002b30:	f083 0310 	eor.w	r3, r3, #16
 8002b34:	823b      	strh	r3, [r7, #16]
 8002b36:	8a3b      	ldrh	r3, [r7, #16]
 8002b38:	f083 0320 	eor.w	r3, r3, #32
 8002b3c:	823b      	strh	r3, [r7, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	441a      	add	r2, r3
 8002b4c:	8a3b      	ldrh	r3, [r7, #16]
 8002b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3788      	adds	r7, #136	; 0x88
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b087      	sub	sp, #28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	607b      	str	r3, [r7, #4]
 8002b76:	460b      	mov	r3, r1
 8002b78:	817b      	strh	r3, [r7, #10]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b7e:	897b      	ldrh	r3, [r7, #10]
 8002b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00b      	beq.n	8002ba2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b8a:	897b      	ldrh	r3, [r7, #10]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	e009      	b.n	8002bb6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ba2:	897a      	ldrh	r2, [r7, #10]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002bb6:	893b      	ldrh	r3, [r7, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d107      	bne.n	8002bcc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	80da      	strh	r2, [r3, #6]
 8002bca:	e00b      	b.n	8002be4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	0c1b      	lsrs	r3, r3, #16
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	371c      	adds	r7, #28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e31d      	b.n	800323e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c02:	4b94      	ldr	r3, [pc, #592]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 030c 	and.w	r3, r3, #12
 8002c0a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c0c:	4b91      	ldr	r3, [pc, #580]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c14:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d07b      	beq.n	8002d1a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d006      	beq.n	8002c36 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	2b0c      	cmp	r3, #12
 8002c2c:	d10f      	bne.n	8002c4e <HAL_RCC_OscConfig+0x5e>
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c34:	d10b      	bne.n	8002c4e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c36:	4b87      	ldr	r3, [pc, #540]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d06a      	beq.n	8002d18 <HAL_RCC_OscConfig+0x128>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d166      	bne.n	8002d18 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e2f7      	b.n	800323e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d106      	bne.n	8002c64 <HAL_RCC_OscConfig+0x74>
 8002c56:	4b7f      	ldr	r3, [pc, #508]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a7e      	ldr	r2, [pc, #504]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	e02d      	b.n	8002cc0 <HAL_RCC_OscConfig+0xd0>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10c      	bne.n	8002c86 <HAL_RCC_OscConfig+0x96>
 8002c6c:	4b79      	ldr	r3, [pc, #484]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a78      	ldr	r2, [pc, #480]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	4b76      	ldr	r3, [pc, #472]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a75      	ldr	r2, [pc, #468]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	e01c      	b.n	8002cc0 <HAL_RCC_OscConfig+0xd0>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b05      	cmp	r3, #5
 8002c8c:	d10c      	bne.n	8002ca8 <HAL_RCC_OscConfig+0xb8>
 8002c8e:	4b71      	ldr	r3, [pc, #452]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a70      	ldr	r2, [pc, #448]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	4b6e      	ldr	r3, [pc, #440]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a6d      	ldr	r2, [pc, #436]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	e00b      	b.n	8002cc0 <HAL_RCC_OscConfig+0xd0>
 8002ca8:	4b6a      	ldr	r3, [pc, #424]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a69      	ldr	r2, [pc, #420]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	4b67      	ldr	r3, [pc, #412]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a66      	ldr	r2, [pc, #408]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d013      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7fd ff50 	bl	8000b6c <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd0:	f7fd ff4c 	bl	8000b6c <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	; 0x64
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e2ad      	b.n	800323e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ce2:	4b5c      	ldr	r3, [pc, #368]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0xe0>
 8002cee:	e014      	b.n	8002d1a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf0:	f7fd ff3c 	bl	8000b6c <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cf8:	f7fd ff38 	bl	8000b6c <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	; 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e299      	b.n	800323e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d0a:	4b52      	ldr	r3, [pc, #328]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x108>
 8002d16:	e000      	b.n	8002d1a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d05a      	beq.n	8002ddc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d005      	beq.n	8002d38 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b0c      	cmp	r3, #12
 8002d30:	d119      	bne.n	8002d66 <HAL_RCC_OscConfig+0x176>
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d116      	bne.n	8002d66 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d38:	4b46      	ldr	r3, [pc, #280]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_OscConfig+0x160>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e276      	b.n	800323e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d50:	4b40      	ldr	r3, [pc, #256]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	493d      	ldr	r1, [pc, #244]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d64:	e03a      	b.n	8002ddc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d020      	beq.n	8002db0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d6e:	4b3a      	ldr	r3, [pc, #232]	; (8002e58 <HAL_RCC_OscConfig+0x268>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7fd fefa 	bl	8000b6c <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d7c:	f7fd fef6 	bl	8000b6c <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e257      	b.n	800323e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d8e:	4b31      	ldr	r3, [pc, #196]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9a:	4b2e      	ldr	r3, [pc, #184]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	021b      	lsls	r3, r3, #8
 8002da8:	492a      	ldr	r1, [pc, #168]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	604b      	str	r3, [r1, #4]
 8002dae:	e015      	b.n	8002ddc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db0:	4b29      	ldr	r3, [pc, #164]	; (8002e58 <HAL_RCC_OscConfig+0x268>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db6:	f7fd fed9 	bl	8000b6c <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dbe:	f7fd fed5 	bl	8000b6c <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e236      	b.n	800323e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002dd0:	4b20      	ldr	r3, [pc, #128]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f0      	bne.n	8002dbe <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 80b8 	beq.w	8002f5a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d170      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002df0:	4b18      	ldr	r3, [pc, #96]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_OscConfig+0x218>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e21a      	b.n	800323e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1a      	ldr	r2, [r3, #32]
 8002e0c:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d921      	bls.n	8002e5c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 fc67 	bl	80036f0 <RCC_SetFlashLatencyFromMSIRange>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e208      	b.n	800323e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e2c:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	4906      	ldr	r1, [pc, #24]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e3e:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	061b      	lsls	r3, r3, #24
 8002e4c:	4901      	ldr	r1, [pc, #4]	; (8002e54 <HAL_RCC_OscConfig+0x264>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	604b      	str	r3, [r1, #4]
 8002e52:	e020      	b.n	8002e96 <HAL_RCC_OscConfig+0x2a6>
 8002e54:	40023800 	.word	0x40023800
 8002e58:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e5c:	4b99      	ldr	r3, [pc, #612]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	4996      	ldr	r1, [pc, #600]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e6e:	4b95      	ldr	r3, [pc, #596]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	061b      	lsls	r3, r3, #24
 8002e7c:	4991      	ldr	r1, [pc, #580]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fc32 	bl	80036f0 <RCC_SetFlashLatencyFromMSIRange>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e1d3      	b.n	800323e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	0b5b      	lsrs	r3, r3, #13
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002ea6:	4a87      	ldr	r2, [pc, #540]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8002ea8:	6892      	ldr	r2, [r2, #8]
 8002eaa:	0912      	lsrs	r2, r2, #4
 8002eac:	f002 020f 	and.w	r2, r2, #15
 8002eb0:	4985      	ldr	r1, [pc, #532]	; (80030c8 <HAL_RCC_OscConfig+0x4d8>)
 8002eb2:	5c8a      	ldrb	r2, [r1, r2]
 8002eb4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002eb6:	4a85      	ldr	r2, [pc, #532]	; (80030cc <HAL_RCC_OscConfig+0x4dc>)
 8002eb8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002eba:	4b85      	ldr	r3, [pc, #532]	; (80030d0 <HAL_RCC_OscConfig+0x4e0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd fe08 	bl	8000ad4 <HAL_InitTick>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d045      	beq.n	8002f5a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	e1b5      	b.n	800323e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d029      	beq.n	8002f2e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002eda:	4b7e      	ldr	r3, [pc, #504]	; (80030d4 <HAL_RCC_OscConfig+0x4e4>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee0:	f7fd fe44 	bl	8000b6c <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ee8:	f7fd fe40 	bl	8000b6c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e1a1      	b.n	800323e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002efa:	4b72      	ldr	r3, [pc, #456]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f06:	4b6f      	ldr	r3, [pc, #444]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	496c      	ldr	r1, [pc, #432]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f18:	4b6a      	ldr	r3, [pc, #424]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	061b      	lsls	r3, r3, #24
 8002f26:	4967      	ldr	r1, [pc, #412]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	604b      	str	r3, [r1, #4]
 8002f2c:	e015      	b.n	8002f5a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f2e:	4b69      	ldr	r3, [pc, #420]	; (80030d4 <HAL_RCC_OscConfig+0x4e4>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fd fe1a 	bl	8000b6c <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f3c:	f7fd fe16 	bl	8000b6c <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e177      	b.n	800323e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f4e:	4b5d      	ldr	r3, [pc, #372]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d030      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d016      	beq.n	8002f9c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f6e:	4b5a      	ldr	r3, [pc, #360]	; (80030d8 <HAL_RCC_OscConfig+0x4e8>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f74:	f7fd fdfa 	bl	8000b6c <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f7c:	f7fd fdf6 	bl	8000b6c <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e157      	b.n	800323e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f8e:	4b4d      	ldr	r3, [pc, #308]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8002f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0x38c>
 8002f9a:	e015      	b.n	8002fc8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f9c:	4b4e      	ldr	r3, [pc, #312]	; (80030d8 <HAL_RCC_OscConfig+0x4e8>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa2:	f7fd fde3 	bl	8000b6c <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002faa:	f7fd fddf 	bl	8000b6c <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e140      	b.n	800323e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fbc:	4b41      	ldr	r3, [pc, #260]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8002fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1f0      	bne.n	8002faa <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80b5 	beq.w	8003140 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fda:	4b3a      	ldr	r3, [pc, #232]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10d      	bne.n	8003002 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe6:	4b37      	ldr	r3, [pc, #220]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	4a36      	ldr	r2, [pc, #216]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6253      	str	r3, [r2, #36]	; 0x24
 8002ff2:	4b34      	ldr	r3, [pc, #208]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffe:	2301      	movs	r3, #1
 8003000:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003002:	4b36      	ldr	r3, [pc, #216]	; (80030dc <HAL_RCC_OscConfig+0x4ec>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d118      	bne.n	8003040 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800300e:	4b33      	ldr	r3, [pc, #204]	; (80030dc <HAL_RCC_OscConfig+0x4ec>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a32      	ldr	r2, [pc, #200]	; (80030dc <HAL_RCC_OscConfig+0x4ec>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301a:	f7fd fda7 	bl	8000b6c <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003022:	f7fd fda3 	bl	8000b6c <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b64      	cmp	r3, #100	; 0x64
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e104      	b.n	800323e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003034:	4b29      	ldr	r3, [pc, #164]	; (80030dc <HAL_RCC_OscConfig+0x4ec>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d106      	bne.n	8003056 <HAL_RCC_OscConfig+0x466>
 8003048:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 800304a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304c:	4a1d      	ldr	r2, [pc, #116]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 800304e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003052:	6353      	str	r3, [r2, #52]	; 0x34
 8003054:	e02d      	b.n	80030b2 <HAL_RCC_OscConfig+0x4c2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0x488>
 800305e:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8003060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003062:	4a18      	ldr	r2, [pc, #96]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8003064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003068:	6353      	str	r3, [r2, #52]	; 0x34
 800306a:	4b16      	ldr	r3, [pc, #88]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 800306c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306e:	4a15      	ldr	r2, [pc, #84]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8003070:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003074:	6353      	str	r3, [r2, #52]	; 0x34
 8003076:	e01c      	b.n	80030b2 <HAL_RCC_OscConfig+0x4c2>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b05      	cmp	r3, #5
 800307e:	d10c      	bne.n	800309a <HAL_RCC_OscConfig+0x4aa>
 8003080:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8003082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003084:	4a0f      	ldr	r2, [pc, #60]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8003086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800308a:	6353      	str	r3, [r2, #52]	; 0x34
 800308c:	4b0d      	ldr	r3, [pc, #52]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 800308e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003090:	4a0c      	ldr	r2, [pc, #48]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8003092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003096:	6353      	str	r3, [r2, #52]	; 0x34
 8003098:	e00b      	b.n	80030b2 <HAL_RCC_OscConfig+0x4c2>
 800309a:	4b0a      	ldr	r3, [pc, #40]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 800309c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309e:	4a09      	ldr	r2, [pc, #36]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 80030a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030a4:	6353      	str	r3, [r2, #52]	; 0x34
 80030a6:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 80030a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030aa:	4a06      	ldr	r2, [pc, #24]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 80030ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030b0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d024      	beq.n	8003104 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ba:	f7fd fd57 	bl	8000b6c <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030c0:	e019      	b.n	80030f6 <HAL_RCC_OscConfig+0x506>
 80030c2:	bf00      	nop
 80030c4:	40023800 	.word	0x40023800
 80030c8:	080094e8 	.word	0x080094e8
 80030cc:	20000000 	.word	0x20000000
 80030d0:	20000004 	.word	0x20000004
 80030d4:	42470020 	.word	0x42470020
 80030d8:	42470680 	.word	0x42470680
 80030dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e0:	f7fd fd44 	bl	8000b6c <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e0a3      	b.n	800323e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030f6:	4b54      	ldr	r3, [pc, #336]	; (8003248 <HAL_RCC_OscConfig+0x658>)
 80030f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0ee      	beq.n	80030e0 <HAL_RCC_OscConfig+0x4f0>
 8003102:	e014      	b.n	800312e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003104:	f7fd fd32 	bl	8000b6c <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800310a:	e00a      	b.n	8003122 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800310c:	f7fd fd2e 	bl	8000b6c <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f241 3288 	movw	r2, #5000	; 0x1388
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e08d      	b.n	800323e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003122:	4b49      	ldr	r3, [pc, #292]	; (8003248 <HAL_RCC_OscConfig+0x658>)
 8003124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1ee      	bne.n	800310c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800312e:	7ffb      	ldrb	r3, [r7, #31]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d105      	bne.n	8003140 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003134:	4b44      	ldr	r3, [pc, #272]	; (8003248 <HAL_RCC_OscConfig+0x658>)
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	4a43      	ldr	r2, [pc, #268]	; (8003248 <HAL_RCC_OscConfig+0x658>)
 800313a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800313e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	2b00      	cmp	r3, #0
 8003146:	d079      	beq.n	800323c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2b0c      	cmp	r3, #12
 800314c:	d056      	beq.n	80031fc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	2b02      	cmp	r3, #2
 8003154:	d13b      	bne.n	80031ce <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003156:	4b3d      	ldr	r3, [pc, #244]	; (800324c <HAL_RCC_OscConfig+0x65c>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fd fd06 	bl	8000b6c <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003164:	f7fd fd02 	bl	8000b6c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e063      	b.n	800323e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003176:	4b34      	ldr	r3, [pc, #208]	; (8003248 <HAL_RCC_OscConfig+0x658>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003182:	4b31      	ldr	r3, [pc, #196]	; (8003248 <HAL_RCC_OscConfig+0x658>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	4319      	orrs	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	430b      	orrs	r3, r1
 800319a:	492b      	ldr	r1, [pc, #172]	; (8003248 <HAL_RCC_OscConfig+0x658>)
 800319c:	4313      	orrs	r3, r2
 800319e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031a0:	4b2a      	ldr	r3, [pc, #168]	; (800324c <HAL_RCC_OscConfig+0x65c>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a6:	f7fd fce1 	bl	8000b6c <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ae:	f7fd fcdd 	bl	8000b6c <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e03e      	b.n	800323e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031c0:	4b21      	ldr	r3, [pc, #132]	; (8003248 <HAL_RCC_OscConfig+0x658>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f0      	beq.n	80031ae <HAL_RCC_OscConfig+0x5be>
 80031cc:	e036      	b.n	800323c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ce:	4b1f      	ldr	r3, [pc, #124]	; (800324c <HAL_RCC_OscConfig+0x65c>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7fd fcca 	bl	8000b6c <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fd fcc6 	bl	8000b6c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e027      	b.n	800323e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031ee:	4b16      	ldr	r3, [pc, #88]	; (8003248 <HAL_RCC_OscConfig+0x658>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x5ec>
 80031fa:	e01f      	b.n	800323c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e01a      	b.n	800323e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003208:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <HAL_RCC_OscConfig+0x658>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	429a      	cmp	r2, r3
 800321a:	d10d      	bne.n	8003238 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003226:	429a      	cmp	r2, r3
 8003228:	d106      	bne.n	8003238 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3720      	adds	r7, #32
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40023800 	.word	0x40023800
 800324c:	42470060 	.word	0x42470060

08003250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e11a      	b.n	800349a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003264:	4b8f      	ldr	r3, [pc, #572]	; (80034a4 <HAL_RCC_ClockConfig+0x254>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d919      	bls.n	80032a6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d105      	bne.n	8003284 <HAL_RCC_ClockConfig+0x34>
 8003278:	4b8a      	ldr	r3, [pc, #552]	; (80034a4 <HAL_RCC_ClockConfig+0x254>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a89      	ldr	r2, [pc, #548]	; (80034a4 <HAL_RCC_ClockConfig+0x254>)
 800327e:	f043 0304 	orr.w	r3, r3, #4
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b87      	ldr	r3, [pc, #540]	; (80034a4 <HAL_RCC_ClockConfig+0x254>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f023 0201 	bic.w	r2, r3, #1
 800328c:	4985      	ldr	r1, [pc, #532]	; (80034a4 <HAL_RCC_ClockConfig+0x254>)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	4313      	orrs	r3, r2
 8003292:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003294:	4b83      	ldr	r3, [pc, #524]	; (80034a4 <HAL_RCC_ClockConfig+0x254>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d001      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e0f9      	b.n	800349a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d008      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b2:	4b7d      	ldr	r3, [pc, #500]	; (80034a8 <HAL_RCC_ClockConfig+0x258>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	497a      	ldr	r1, [pc, #488]	; (80034a8 <HAL_RCC_ClockConfig+0x258>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 808e 	beq.w	80033ee <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d107      	bne.n	80032ea <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032da:	4b73      	ldr	r3, [pc, #460]	; (80034a8 <HAL_RCC_ClockConfig+0x258>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d121      	bne.n	800332a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e0d7      	b.n	800349a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d107      	bne.n	8003302 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032f2:	4b6d      	ldr	r3, [pc, #436]	; (80034a8 <HAL_RCC_ClockConfig+0x258>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d115      	bne.n	800332a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e0cb      	b.n	800349a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d107      	bne.n	800331a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800330a:	4b67      	ldr	r3, [pc, #412]	; (80034a8 <HAL_RCC_ClockConfig+0x258>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e0bf      	b.n	800349a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800331a:	4b63      	ldr	r3, [pc, #396]	; (80034a8 <HAL_RCC_ClockConfig+0x258>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e0b7      	b.n	800349a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332a:	4b5f      	ldr	r3, [pc, #380]	; (80034a8 <HAL_RCC_ClockConfig+0x258>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f023 0203 	bic.w	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	495c      	ldr	r1, [pc, #368]	; (80034a8 <HAL_RCC_ClockConfig+0x258>)
 8003338:	4313      	orrs	r3, r2
 800333a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800333c:	f7fd fc16 	bl	8000b6c <HAL_GetTick>
 8003340:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d112      	bne.n	8003370 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800334a:	e00a      	b.n	8003362 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800334c:	f7fd fc0e 	bl	8000b6c <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	; 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e09b      	b.n	800349a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003362:	4b51      	ldr	r3, [pc, #324]	; (80034a8 <HAL_RCC_ClockConfig+0x258>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 030c 	and.w	r3, r3, #12
 800336a:	2b08      	cmp	r3, #8
 800336c:	d1ee      	bne.n	800334c <HAL_RCC_ClockConfig+0xfc>
 800336e:	e03e      	b.n	80033ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b03      	cmp	r3, #3
 8003376:	d112      	bne.n	800339e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003378:	e00a      	b.n	8003390 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800337a:	f7fd fbf7 	bl	8000b6c <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	f241 3288 	movw	r2, #5000	; 0x1388
 8003388:	4293      	cmp	r3, r2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e084      	b.n	800349a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003390:	4b45      	ldr	r3, [pc, #276]	; (80034a8 <HAL_RCC_ClockConfig+0x258>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 030c 	and.w	r3, r3, #12
 8003398:	2b0c      	cmp	r3, #12
 800339a:	d1ee      	bne.n	800337a <HAL_RCC_ClockConfig+0x12a>
 800339c:	e027      	b.n	80033ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d11d      	bne.n	80033e2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033a6:	e00a      	b.n	80033be <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a8:	f7fd fbe0 	bl	8000b6c <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e06d      	b.n	800349a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033be:	4b3a      	ldr	r3, [pc, #232]	; (80034a8 <HAL_RCC_ClockConfig+0x258>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d1ee      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x158>
 80033ca:	e010      	b.n	80033ee <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033cc:	f7fd fbce 	bl	8000b6c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e05b      	b.n	800349a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80033e2:	4b31      	ldr	r3, [pc, #196]	; (80034a8 <HAL_RCC_ClockConfig+0x258>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1ee      	bne.n	80033cc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033ee:	4b2d      	ldr	r3, [pc, #180]	; (80034a4 <HAL_RCC_ClockConfig+0x254>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d219      	bcs.n	8003430 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d105      	bne.n	800340e <HAL_RCC_ClockConfig+0x1be>
 8003402:	4b28      	ldr	r3, [pc, #160]	; (80034a4 <HAL_RCC_ClockConfig+0x254>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a27      	ldr	r2, [pc, #156]	; (80034a4 <HAL_RCC_ClockConfig+0x254>)
 8003408:	f043 0304 	orr.w	r3, r3, #4
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	4b25      	ldr	r3, [pc, #148]	; (80034a4 <HAL_RCC_ClockConfig+0x254>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 0201 	bic.w	r2, r3, #1
 8003416:	4923      	ldr	r1, [pc, #140]	; (80034a4 <HAL_RCC_ClockConfig+0x254>)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	4313      	orrs	r3, r2
 800341c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800341e:	4b21      	ldr	r3, [pc, #132]	; (80034a4 <HAL_RCC_ClockConfig+0x254>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d001      	beq.n	8003430 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e034      	b.n	800349a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800343c:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <HAL_RCC_ClockConfig+0x258>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	4917      	ldr	r1, [pc, #92]	; (80034a8 <HAL_RCC_ClockConfig+0x258>)
 800344a:	4313      	orrs	r3, r2
 800344c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d009      	beq.n	800346e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800345a:	4b13      	ldr	r3, [pc, #76]	; (80034a8 <HAL_RCC_ClockConfig+0x258>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	490f      	ldr	r1, [pc, #60]	; (80034a8 <HAL_RCC_ClockConfig+0x258>)
 800346a:	4313      	orrs	r3, r2
 800346c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800346e:	f000 f823 	bl	80034b8 <HAL_RCC_GetSysClockFreq>
 8003472:	4602      	mov	r2, r0
 8003474:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <HAL_RCC_ClockConfig+0x258>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	091b      	lsrs	r3, r3, #4
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	490b      	ldr	r1, [pc, #44]	; (80034ac <HAL_RCC_ClockConfig+0x25c>)
 8003480:	5ccb      	ldrb	r3, [r1, r3]
 8003482:	fa22 f303 	lsr.w	r3, r2, r3
 8003486:	4a0a      	ldr	r2, [pc, #40]	; (80034b0 <HAL_RCC_ClockConfig+0x260>)
 8003488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800348a:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <HAL_RCC_ClockConfig+0x264>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7fd fb20 	bl	8000ad4 <HAL_InitTick>
 8003494:	4603      	mov	r3, r0
 8003496:	72fb      	strb	r3, [r7, #11]

  return status;
 8003498:	7afb      	ldrb	r3, [r7, #11]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40023c00 	.word	0x40023c00
 80034a8:	40023800 	.word	0x40023800
 80034ac:	080094e8 	.word	0x080094e8
 80034b0:	20000000 	.word	0x20000000
 80034b4:	20000004 	.word	0x20000004

080034b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034bc:	b092      	sub	sp, #72	; 0x48
 80034be:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80034c0:	4b79      	ldr	r3, [pc, #484]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c8:	f003 030c 	and.w	r3, r3, #12
 80034cc:	2b0c      	cmp	r3, #12
 80034ce:	d00d      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0x34>
 80034d0:	2b0c      	cmp	r3, #12
 80034d2:	f200 80d5 	bhi.w	8003680 <HAL_RCC_GetSysClockFreq+0x1c8>
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d002      	beq.n	80034e0 <HAL_RCC_GetSysClockFreq+0x28>
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d003      	beq.n	80034e6 <HAL_RCC_GetSysClockFreq+0x2e>
 80034de:	e0cf      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034e0:	4b72      	ldr	r3, [pc, #456]	; (80036ac <HAL_RCC_GetSysClockFreq+0x1f4>)
 80034e2:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80034e4:	e0da      	b.n	800369c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034e6:	4b71      	ldr	r3, [pc, #452]	; (80036ac <HAL_RCC_GetSysClockFreq+0x1f4>)
 80034e8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80034ea:	e0d7      	b.n	800369c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80034ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ee:	0c9b      	lsrs	r3, r3, #18
 80034f0:	f003 020f 	and.w	r2, r3, #15
 80034f4:	4b6e      	ldr	r3, [pc, #440]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80034f6:	5c9b      	ldrb	r3, [r3, r2]
 80034f8:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80034fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034fc:	0d9b      	lsrs	r3, r3, #22
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	3301      	adds	r3, #1
 8003504:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003506:	4b68      	ldr	r3, [pc, #416]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d05d      	beq.n	80035ce <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003514:	2200      	movs	r2, #0
 8003516:	4618      	mov	r0, r3
 8003518:	4611      	mov	r1, r2
 800351a:	4604      	mov	r4, r0
 800351c:	460d      	mov	r5, r1
 800351e:	4622      	mov	r2, r4
 8003520:	462b      	mov	r3, r5
 8003522:	f04f 0000 	mov.w	r0, #0
 8003526:	f04f 0100 	mov.w	r1, #0
 800352a:	0159      	lsls	r1, r3, #5
 800352c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003530:	0150      	lsls	r0, r2, #5
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	4621      	mov	r1, r4
 8003538:	1a51      	subs	r1, r2, r1
 800353a:	6139      	str	r1, [r7, #16]
 800353c:	4629      	mov	r1, r5
 800353e:	eb63 0301 	sbc.w	r3, r3, r1
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003550:	4659      	mov	r1, fp
 8003552:	018b      	lsls	r3, r1, #6
 8003554:	4651      	mov	r1, sl
 8003556:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800355a:	4651      	mov	r1, sl
 800355c:	018a      	lsls	r2, r1, #6
 800355e:	46d4      	mov	ip, sl
 8003560:	ebb2 080c 	subs.w	r8, r2, ip
 8003564:	4659      	mov	r1, fp
 8003566:	eb63 0901 	sbc.w	r9, r3, r1
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003576:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800357a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800357e:	4690      	mov	r8, r2
 8003580:	4699      	mov	r9, r3
 8003582:	4623      	mov	r3, r4
 8003584:	eb18 0303 	adds.w	r3, r8, r3
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	462b      	mov	r3, r5
 800358c:	eb49 0303 	adc.w	r3, r9, r3
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	f04f 0300 	mov.w	r3, #0
 800359a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800359e:	4629      	mov	r1, r5
 80035a0:	028b      	lsls	r3, r1, #10
 80035a2:	4620      	mov	r0, r4
 80035a4:	4629      	mov	r1, r5
 80035a6:	4604      	mov	r4, r0
 80035a8:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80035ac:	4601      	mov	r1, r0
 80035ae:	028a      	lsls	r2, r1, #10
 80035b0:	4610      	mov	r0, r2
 80035b2:	4619      	mov	r1, r3
 80035b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b6:	2200      	movs	r2, #0
 80035b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035c0:	f7fc fde4 	bl	800018c <__aeabi_uldivmod>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4613      	mov	r3, r2
 80035ca:	647b      	str	r3, [r7, #68]	; 0x44
 80035cc:	e055      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80035ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d0:	2200      	movs	r2, #0
 80035d2:	623b      	str	r3, [r7, #32]
 80035d4:	627a      	str	r2, [r7, #36]	; 0x24
 80035d6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035da:	4642      	mov	r2, r8
 80035dc:	464b      	mov	r3, r9
 80035de:	f04f 0000 	mov.w	r0, #0
 80035e2:	f04f 0100 	mov.w	r1, #0
 80035e6:	0159      	lsls	r1, r3, #5
 80035e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ec:	0150      	lsls	r0, r2, #5
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	46c4      	mov	ip, r8
 80035f4:	ebb2 0a0c 	subs.w	sl, r2, ip
 80035f8:	4640      	mov	r0, r8
 80035fa:	4649      	mov	r1, r9
 80035fc:	468c      	mov	ip, r1
 80035fe:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800360e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003612:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003616:	ebb2 040a 	subs.w	r4, r2, sl
 800361a:	eb63 050b 	sbc.w	r5, r3, fp
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	00eb      	lsls	r3, r5, #3
 8003628:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800362c:	00e2      	lsls	r2, r4, #3
 800362e:	4614      	mov	r4, r2
 8003630:	461d      	mov	r5, r3
 8003632:	4603      	mov	r3, r0
 8003634:	18e3      	adds	r3, r4, r3
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	460b      	mov	r3, r1
 800363a:	eb45 0303 	adc.w	r3, r5, r3
 800363e:	607b      	str	r3, [r7, #4]
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	e9d7 4500 	ldrd	r4, r5, [r7]
 800364c:	4629      	mov	r1, r5
 800364e:	028b      	lsls	r3, r1, #10
 8003650:	4620      	mov	r0, r4
 8003652:	4629      	mov	r1, r5
 8003654:	4604      	mov	r4, r0
 8003656:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800365a:	4601      	mov	r1, r0
 800365c:	028a      	lsls	r2, r1, #10
 800365e:	4610      	mov	r0, r2
 8003660:	4619      	mov	r1, r3
 8003662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003664:	2200      	movs	r2, #0
 8003666:	61bb      	str	r3, [r7, #24]
 8003668:	61fa      	str	r2, [r7, #28]
 800366a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800366e:	f7fc fd8d 	bl	800018c <__aeabi_uldivmod>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4613      	mov	r3, r2
 8003678:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800367a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800367c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800367e:	e00d      	b.n	800369c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003680:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	0b5b      	lsrs	r3, r3, #13
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800368c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368e:	3301      	adds	r3, #1
 8003690:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800369a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800369c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3748      	adds	r7, #72	; 0x48
 80036a2:	46bd      	mov	sp, r7
 80036a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036a8:	40023800 	.word	0x40023800
 80036ac:	00f42400 	.word	0x00f42400
 80036b0:	080094dc 	.word	0x080094dc

080036b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036b8:	4b02      	ldr	r3, [pc, #8]	; (80036c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80036ba:	681b      	ldr	r3, [r3, #0]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr
 80036c4:	20000000 	.word	0x20000000

080036c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036cc:	f7ff fff2 	bl	80036b4 <HAL_RCC_GetHCLKFreq>
 80036d0:	4602      	mov	r2, r0
 80036d2:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	0a1b      	lsrs	r3, r3, #8
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	4903      	ldr	r1, [pc, #12]	; (80036ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80036de:	5ccb      	ldrb	r3, [r1, r3]
 80036e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40023800 	.word	0x40023800
 80036ec:	080094f8 	.word	0x080094f8

080036f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036f8:	2300      	movs	r3, #0
 80036fa:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80036fc:	4b29      	ldr	r3, [pc, #164]	; (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d12c      	bne.n	8003762 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003708:	4b26      	ldr	r3, [pc, #152]	; (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003714:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	e016      	b.n	800374e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003720:	4b20      	ldr	r3, [pc, #128]	; (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	4a1f      	ldr	r2, [pc, #124]	; (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372a:	6253      	str	r3, [r2, #36]	; 0x24
 800372c:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003738:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003740:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003742:	4b18      	ldr	r3, [pc, #96]	; (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	4a17      	ldr	r2, [pc, #92]	; (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003754:	d105      	bne.n	8003762 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800375c:	d101      	bne.n	8003762 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800375e:	2301      	movs	r3, #1
 8003760:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d105      	bne.n	8003774 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003768:	4b10      	ldr	r3, [pc, #64]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a0f      	ldr	r2, [pc, #60]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800376e:	f043 0304 	orr.w	r3, r3, #4
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f023 0201 	bic.w	r2, r3, #1
 800377c:	490b      	ldr	r1, [pc, #44]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003784:	4b09      	ldr	r3, [pc, #36]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	429a      	cmp	r2, r3
 8003790:	d001      	beq.n	8003796 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	371c      	adds	r7, #28
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40023800 	.word	0x40023800
 80037a8:	40007000 	.word	0x40007000
 80037ac:	40023c00 	.word	0x40023c00

080037b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e06e      	b.n	80038a0 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d108      	bne.n	80037dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037d2:	d009      	beq.n	80037e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	61da      	str	r2, [r3, #28]
 80037da:	e005      	b.n	80037e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fd f876 	bl	80008f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800381e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386c:	ea42 0103 	orr.w	r1, r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003874:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	0c1a      	lsrs	r2, r3, #16
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f002 0204 	and.w	r2, r2, #4
 800388e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	4613      	mov	r3, r2
 80038b6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038c4:	d112      	bne.n	80038ec <HAL_SPI_Receive+0x44>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10e      	bne.n	80038ec <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2204      	movs	r2, #4
 80038d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80038d6:	88fa      	ldrh	r2, [r7, #6]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	4613      	mov	r3, r2
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f8f1 	bl	8003aca <HAL_SPI_TransmitReceive>
 80038e8:	4603      	mov	r3, r0
 80038ea:	e0ea      	b.n	8003ac2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_SPI_Receive+0x52>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e0e3      	b.n	8003ac2 <HAL_SPI_Receive+0x21a>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003902:	f7fd f933 	bl	8000b6c <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b01      	cmp	r3, #1
 8003912:	d002      	beq.n	800391a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003914:	2302      	movs	r3, #2
 8003916:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003918:	e0ca      	b.n	8003ab0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <HAL_SPI_Receive+0x7e>
 8003920:	88fb      	ldrh	r3, [r7, #6]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d102      	bne.n	800392c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	75fb      	strb	r3, [r7, #23]
    goto error;
 800392a:	e0c1      	b.n	8003ab0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2204      	movs	r2, #4
 8003930:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	88fa      	ldrh	r2, [r7, #6]
 8003944:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	88fa      	ldrh	r2, [r7, #6]
 800394a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003972:	d10f      	bne.n	8003994 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003982:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003992:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399e:	2b40      	cmp	r3, #64	; 0x40
 80039a0:	d007      	beq.n	80039b2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d162      	bne.n	8003a80 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80039ba:	e02e      	b.n	8003a1a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d115      	bne.n	80039f6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f103 020c 	add.w	r2, r3, #12
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d6:	7812      	ldrb	r2, [r2, #0]
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039f4:	e011      	b.n	8003a1a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039f6:	f7fd f8b9 	bl	8000b6c <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d803      	bhi.n	8003a0e <HAL_SPI_Receive+0x166>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0c:	d102      	bne.n	8003a14 <HAL_SPI_Receive+0x16c>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d102      	bne.n	8003a1a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a18:	e04a      	b.n	8003ab0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1cb      	bne.n	80039bc <HAL_SPI_Receive+0x114>
 8003a24:	e031      	b.n	8003a8a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d113      	bne.n	8003a5c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3e:	b292      	uxth	r2, r2
 8003a40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	1c9a      	adds	r2, r3, #2
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a5a:	e011      	b.n	8003a80 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a5c:	f7fd f886 	bl	8000b6c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d803      	bhi.n	8003a74 <HAL_SPI_Receive+0x1cc>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a72:	d102      	bne.n	8003a7a <HAL_SPI_Receive+0x1d2>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d102      	bne.n	8003a80 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a7e:	e017      	b.n	8003ab0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1cd      	bne.n	8003a26 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	6839      	ldr	r1, [r7, #0]
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 fa46 	bl	8003f20 <SPI_EndRxTransaction>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	75fb      	strb	r3, [r7, #23]
 8003aac:	e000      	b.n	8003ab0 <HAL_SPI_Receive+0x208>
  }

error :
 8003aae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b08c      	sub	sp, #48	; 0x30
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_SPI_TransmitReceive+0x26>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e18a      	b.n	8003e06 <HAL_SPI_TransmitReceive+0x33c>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003af8:	f7fd f838 	bl	8000b6c <HAL_GetTick>
 8003afc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003b0e:	887b      	ldrh	r3, [r7, #2]
 8003b10:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d00f      	beq.n	8003b3a <HAL_SPI_TransmitReceive+0x70>
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b20:	d107      	bne.n	8003b32 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d103      	bne.n	8003b32 <HAL_SPI_TransmitReceive+0x68>
 8003b2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d003      	beq.n	8003b3a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003b32:	2302      	movs	r3, #2
 8003b34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b38:	e15b      	b.n	8003df2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <HAL_SPI_TransmitReceive+0x82>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <HAL_SPI_TransmitReceive+0x82>
 8003b46:	887b      	ldrh	r3, [r7, #2]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d103      	bne.n	8003b54 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b52:	e14e      	b.n	8003df2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d003      	beq.n	8003b68 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2205      	movs	r2, #5
 8003b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	887a      	ldrh	r2, [r7, #2]
 8003b78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	887a      	ldrh	r2, [r7, #2]
 8003b7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	887a      	ldrh	r2, [r7, #2]
 8003b8a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	887a      	ldrh	r2, [r7, #2]
 8003b90:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba8:	2b40      	cmp	r3, #64	; 0x40
 8003baa:	d007      	beq.n	8003bbc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bc4:	d178      	bne.n	8003cb8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_SPI_TransmitReceive+0x10a>
 8003bce:	8b7b      	ldrh	r3, [r7, #26]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d166      	bne.n	8003ca2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd8:	881a      	ldrh	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be4:	1c9a      	adds	r2, r3, #2
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bf8:	e053      	b.n	8003ca2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d11b      	bne.n	8003c40 <HAL_SPI_TransmitReceive+0x176>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d016      	beq.n	8003c40 <HAL_SPI_TransmitReceive+0x176>
 8003c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d113      	bne.n	8003c40 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1c:	881a      	ldrh	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c28:	1c9a      	adds	r2, r3, #2
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d119      	bne.n	8003c82 <HAL_SPI_TransmitReceive+0x1b8>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d014      	beq.n	8003c82 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	b292      	uxth	r2, r2
 8003c64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6a:	1c9a      	adds	r2, r3, #2
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c82:	f7fc ff73 	bl	8000b6c <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d807      	bhi.n	8003ca2 <HAL_SPI_TransmitReceive+0x1d8>
 8003c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c98:	d003      	beq.n	8003ca2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ca0:	e0a7      	b.n	8003df2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1a6      	bne.n	8003bfa <HAL_SPI_TransmitReceive+0x130>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1a1      	bne.n	8003bfa <HAL_SPI_TransmitReceive+0x130>
 8003cb6:	e07c      	b.n	8003db2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <HAL_SPI_TransmitReceive+0x1fc>
 8003cc0:	8b7b      	ldrh	r3, [r7, #26]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d16b      	bne.n	8003d9e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	330c      	adds	r3, #12
 8003cd0:	7812      	ldrb	r2, [r2, #0]
 8003cd2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cec:	e057      	b.n	8003d9e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d11c      	bne.n	8003d36 <HAL_SPI_TransmitReceive+0x26c>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d017      	beq.n	8003d36 <HAL_SPI_TransmitReceive+0x26c>
 8003d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d114      	bne.n	8003d36 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	330c      	adds	r3, #12
 8003d16:	7812      	ldrb	r2, [r2, #0]
 8003d18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d119      	bne.n	8003d78 <HAL_SPI_TransmitReceive+0x2ae>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d014      	beq.n	8003d78 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d74:	2301      	movs	r3, #1
 8003d76:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d78:	f7fc fef8 	bl	8000b6c <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d803      	bhi.n	8003d90 <HAL_SPI_TransmitReceive+0x2c6>
 8003d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8e:	d102      	bne.n	8003d96 <HAL_SPI_TransmitReceive+0x2cc>
 8003d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d103      	bne.n	8003d9e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d9c:	e029      	b.n	8003df2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1a2      	bne.n	8003cee <HAL_SPI_TransmitReceive+0x224>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d19d      	bne.n	8003cee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f918 	bl	8003fec <SPI_EndRxTxTransaction>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d006      	beq.n	8003dd0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003dce:	e010      	b.n	8003df2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10b      	bne.n	8003df0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	e000      	b.n	8003df2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003df0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3730      	adds	r7, #48	; 0x30
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	603b      	str	r3, [r7, #0]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e20:	f7fc fea4 	bl	8000b6c <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e30:	f7fc fe9c 	bl	8000b6c <HAL_GetTick>
 8003e34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e36:	4b39      	ldr	r3, [pc, #228]	; (8003f1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	015b      	lsls	r3, r3, #5
 8003e3c:	0d1b      	lsrs	r3, r3, #20
 8003e3e:	69fa      	ldr	r2, [r7, #28]
 8003e40:	fb02 f303 	mul.w	r3, r2, r3
 8003e44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e46:	e054      	b.n	8003ef2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4e:	d050      	beq.n	8003ef2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e50:	f7fc fe8c 	bl	8000b6c <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	69fa      	ldr	r2, [r7, #28]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d902      	bls.n	8003e66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d13d      	bne.n	8003ee2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e7e:	d111      	bne.n	8003ea4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e88:	d004      	beq.n	8003e94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e92:	d107      	bne.n	8003ea4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ea2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eac:	d10f      	bne.n	8003ece <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ecc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e017      	b.n	8003f12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	4013      	ands	r3, r2
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	bf0c      	ite	eq
 8003f02:	2301      	moveq	r3, #1
 8003f04:	2300      	movne	r3, #0
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	461a      	mov	r2, r3
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d19b      	bne.n	8003e48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3720      	adds	r7, #32
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000000 	.word	0x20000000

08003f20 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f34:	d111      	bne.n	8003f5a <SPI_EndRxTransaction+0x3a>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f3e:	d004      	beq.n	8003f4a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f48:	d107      	bne.n	8003f5a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f58:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f62:	d12a      	bne.n	8003fba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6c:	d012      	beq.n	8003f94 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2200      	movs	r2, #0
 8003f76:	2180      	movs	r1, #128	; 0x80
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f7ff ff49 	bl	8003e10 <SPI_WaitFlagStateUntilTimeout>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d02d      	beq.n	8003fe0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f88:	f043 0220 	orr.w	r2, r3, #32
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e026      	b.n	8003fe2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f7ff ff36 	bl	8003e10 <SPI_WaitFlagStateUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d01a      	beq.n	8003fe0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fae:	f043 0220 	orr.w	r2, r3, #32
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e013      	b.n	8003fe2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f7ff ff23 	bl	8003e10 <SPI_WaitFlagStateUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d007      	beq.n	8003fe0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd4:	f043 0220 	orr.w	r2, r3, #32
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e000      	b.n	8003fe2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
	...

08003fec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af02      	add	r7, sp, #8
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ff8:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <SPI_EndRxTxTransaction+0x7c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a1b      	ldr	r2, [pc, #108]	; (800406c <SPI_EndRxTxTransaction+0x80>)
 8003ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8004002:	0d5b      	lsrs	r3, r3, #21
 8004004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004008:	fb02 f303 	mul.w	r3, r2, r3
 800400c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004016:	d112      	bne.n	800403e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2200      	movs	r2, #0
 8004020:	2180      	movs	r1, #128	; 0x80
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f7ff fef4 	bl	8003e10 <SPI_WaitFlagStateUntilTimeout>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d016      	beq.n	800405c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004032:	f043 0220 	orr.w	r2, r3, #32
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e00f      	b.n	800405e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	3b01      	subs	r3, #1
 8004048:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004054:	2b80      	cmp	r3, #128	; 0x80
 8004056:	d0f2      	beq.n	800403e <SPI_EndRxTxTransaction+0x52>
 8004058:	e000      	b.n	800405c <SPI_EndRxTxTransaction+0x70>
        break;
 800405a:	bf00      	nop
  }

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	20000000 	.word	0x20000000
 800406c:	165e9f81 	.word	0x165e9f81

08004070 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004080:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004084:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	b29a      	uxth	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr

0800409c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040a4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80040a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	43db      	mvns	r3, r3
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	4013      	ands	r3, r2
 80040bc:	b29a      	uxth	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr

080040d0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80040d0:	b084      	sub	sp, #16
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	f107 0014 	add.w	r0, r7, #20
 80040de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	b004      	add	sp, #16
 800410e:	4770      	bx	lr

08004110 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004110:	b480      	push	{r7}
 8004112:	b09b      	sub	sp, #108	; 0x6c
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	b29b      	uxth	r3, r3
 800412e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004136:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	78db      	ldrb	r3, [r3, #3]
 800413e:	2b03      	cmp	r3, #3
 8004140:	d81f      	bhi.n	8004182 <USB_ActivateEndpoint+0x72>
 8004142:	a201      	add	r2, pc, #4	; (adr r2, 8004148 <USB_ActivateEndpoint+0x38>)
 8004144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004148:	08004159 	.word	0x08004159
 800414c:	08004175 	.word	0x08004175
 8004150:	0800418b 	.word	0x0800418b
 8004154:	08004167 	.word	0x08004167
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004158:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800415c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004160:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004164:	e012      	b.n	800418c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004166:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800416a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800416e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004172:	e00b      	b.n	800418c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004174:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004178:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800417c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004180:	e004      	b.n	800418c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004188:	e000      	b.n	800418c <USB_ActivateEndpoint+0x7c>
      break;
 800418a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	441a      	add	r2, r3
 8004196:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800419a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800419e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	441a      	add	r2, r3
 80041dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80041e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	7b1b      	ldrb	r3, [r3, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f040 8149 	bne.w	8004490 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	785b      	ldrb	r3, [r3, #1]
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 8084 	beq.w	8004310 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004212:	b29b      	uxth	r3, r3
 8004214:	461a      	mov	r2, r3
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	4413      	add	r3, r2
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	011a      	lsls	r2, r3, #4
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	4413      	add	r3, r2
 8004226:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	88db      	ldrh	r3, [r3, #6]
 8004230:	085b      	lsrs	r3, r3, #1
 8004232:	b29b      	uxth	r3, r3
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	81fb      	strh	r3, [r7, #14]
 800424a:	89fb      	ldrh	r3, [r7, #14]
 800424c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004250:	2b00      	cmp	r3, #0
 8004252:	d01b      	beq.n	800428c <USB_ActivateEndpoint+0x17c>
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	b29b      	uxth	r3, r3
 8004262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426a:	81bb      	strh	r3, [r7, #12]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	441a      	add	r2, r3
 8004276:	89bb      	ldrh	r3, [r7, #12]
 8004278:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800427c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004284:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004288:	b29b      	uxth	r3, r3
 800428a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	78db      	ldrb	r3, [r3, #3]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d020      	beq.n	80042d6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042aa:	813b      	strh	r3, [r7, #8]
 80042ac:	893b      	ldrh	r3, [r7, #8]
 80042ae:	f083 0320 	eor.w	r3, r3, #32
 80042b2:	813b      	strh	r3, [r7, #8]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	441a      	add	r2, r3
 80042be:	893b      	ldrh	r3, [r7, #8]
 80042c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	8013      	strh	r3, [r2, #0]
 80042d4:	e27f      	b.n	80047d6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	881b      	ldrh	r3, [r3, #0]
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ec:	817b      	strh	r3, [r7, #10]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	441a      	add	r2, r3
 80042f8:	897b      	ldrh	r3, [r7, #10]
 80042fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800430a:	b29b      	uxth	r3, r3
 800430c:	8013      	strh	r3, [r2, #0]
 800430e:	e262      	b.n	80047d6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800431a:	b29b      	uxth	r3, r3
 800431c:	461a      	mov	r2, r3
 800431e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004320:	4413      	add	r3, r2
 8004322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	011a      	lsls	r2, r3, #4
 800432a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432c:	4413      	add	r3, r2
 800432e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004332:	62bb      	str	r3, [r7, #40]	; 0x28
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	88db      	ldrh	r3, [r3, #6]
 8004338:	085b      	lsrs	r3, r3, #1
 800433a:	b29b      	uxth	r3, r3
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800434e:	b29b      	uxth	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	4413      	add	r3, r2
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	011a      	lsls	r2, r3, #4
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	4413      	add	r3, r2
 8004362:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004366:	623b      	str	r3, [r7, #32]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d112      	bne.n	8004396 <USB_ActivateEndpoint+0x286>
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	b29b      	uxth	r3, r3
 8004376:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800437a:	b29a      	uxth	r2, r3
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	801a      	strh	r2, [r3, #0]
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	b29b      	uxth	r3, r3
 8004386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800438a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800438e:	b29a      	uxth	r2, r3
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	801a      	strh	r2, [r3, #0]
 8004394:	e02f      	b.n	80043f6 <USB_ActivateEndpoint+0x2e6>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b3e      	cmp	r3, #62	; 0x3e
 800439c:	d813      	bhi.n	80043c6 <USB_ActivateEndpoint+0x2b6>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	085b      	lsrs	r3, r3, #1
 80043a4:	663b      	str	r3, [r7, #96]	; 0x60
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <USB_ActivateEndpoint+0x2a8>
 80043b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043b4:	3301      	adds	r3, #1
 80043b6:	663b      	str	r3, [r7, #96]	; 0x60
 80043b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	029b      	lsls	r3, r3, #10
 80043be:	b29a      	uxth	r2, r3
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	801a      	strh	r2, [r3, #0]
 80043c4:	e017      	b.n	80043f6 <USB_ActivateEndpoint+0x2e6>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	663b      	str	r3, [r7, #96]	; 0x60
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f003 031f 	and.w	r3, r3, #31
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d102      	bne.n	80043e0 <USB_ActivateEndpoint+0x2d0>
 80043da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043dc:	3b01      	subs	r3, #1
 80043de:	663b      	str	r3, [r7, #96]	; 0x60
 80043e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	029b      	lsls	r3, r3, #10
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	83fb      	strh	r3, [r7, #30]
 8004404:	8bfb      	ldrh	r3, [r7, #30]
 8004406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d01b      	beq.n	8004446 <USB_ActivateEndpoint+0x336>
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004424:	83bb      	strh	r3, [r7, #28]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	441a      	add	r2, r3
 8004430:	8bbb      	ldrh	r3, [r7, #28]
 8004432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800443a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800443e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004442:	b29b      	uxth	r3, r3
 8004444:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	b29b      	uxth	r3, r3
 8004454:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445c:	837b      	strh	r3, [r7, #26]
 800445e:	8b7b      	ldrh	r3, [r7, #26]
 8004460:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004464:	837b      	strh	r3, [r7, #26]
 8004466:	8b7b      	ldrh	r3, [r7, #26]
 8004468:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800446c:	837b      	strh	r3, [r7, #26]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	441a      	add	r2, r3
 8004478:	8b7b      	ldrh	r3, [r7, #26]
 800447a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800447e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800448a:	b29b      	uxth	r3, r3
 800448c:	8013      	strh	r3, [r2, #0]
 800448e:	e1a2      	b.n	80047d6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	b29b      	uxth	r3, r3
 800449e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	441a      	add	r2, r3
 80044b4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80044b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80044c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	461a      	mov	r2, r3
 80044da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044dc:	4413      	add	r3, r2
 80044de:	65bb      	str	r3, [r7, #88]	; 0x58
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	011a      	lsls	r2, r3, #4
 80044e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044ee:	657b      	str	r3, [r7, #84]	; 0x54
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	891b      	ldrh	r3, [r3, #8]
 80044f4:	085b      	lsrs	r3, r3, #1
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044fe:	801a      	strh	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	653b      	str	r3, [r7, #80]	; 0x50
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800450a:	b29b      	uxth	r3, r3
 800450c:	461a      	mov	r2, r3
 800450e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004510:	4413      	add	r3, r2
 8004512:	653b      	str	r3, [r7, #80]	; 0x50
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	011a      	lsls	r2, r3, #4
 800451a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800451c:	4413      	add	r3, r2
 800451e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	895b      	ldrh	r3, [r3, #10]
 8004528:	085b      	lsrs	r3, r3, #1
 800452a:	b29b      	uxth	r3, r3
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004532:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	785b      	ldrb	r3, [r3, #1]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f040 8091 	bne.w	8004660 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800454c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800454e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d01b      	beq.n	800458e <USB_ActivateEndpoint+0x47e>
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	b29b      	uxth	r3, r3
 8004564:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	441a      	add	r2, r3
 8004578:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800457a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800457e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004582:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458a:	b29b      	uxth	r3, r3
 800458c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	873b      	strh	r3, [r7, #56]	; 0x38
 800459c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800459e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d01b      	beq.n	80045de <USB_ActivateEndpoint+0x4ce>
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	441a      	add	r2, r3
 80045c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045da:	b29b      	uxth	r3, r3
 80045dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80045f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80045f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80045fc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80045fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004600:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004604:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	441a      	add	r2, r3
 8004610:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800461a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800461e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004622:	b29b      	uxth	r3, r3
 8004624:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	b29b      	uxth	r3, r3
 8004634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800463c:	867b      	strh	r3, [r7, #50]	; 0x32
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	441a      	add	r2, r3
 8004648:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800464a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800464e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800465a:	b29b      	uxth	r3, r3
 800465c:	8013      	strh	r3, [r2, #0]
 800465e:	e0ba      	b.n	80047d6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004670:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01d      	beq.n	80046b8 <USB_ActivateEndpoint+0x5a8>
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	b29b      	uxth	r3, r3
 800468a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800468e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004692:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	441a      	add	r2, r3
 80046a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80046a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80046c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80046cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01d      	beq.n	8004710 <USB_ActivateEndpoint+0x600>
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	441a      	add	r2, r3
 80046f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80046fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004708:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800470c:	b29b      	uxth	r3, r3
 800470e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	78db      	ldrb	r3, [r3, #3]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d024      	beq.n	8004762 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	b29b      	uxth	r3, r3
 8004726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800472a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800472e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004732:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004736:	f083 0320 	eor.w	r3, r3, #32
 800473a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	441a      	add	r2, r3
 8004748:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800474c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800475c:	b29b      	uxth	r3, r3
 800475e:	8013      	strh	r3, [r2, #0]
 8004760:	e01d      	b.n	800479e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	b29b      	uxth	r3, r3
 8004770:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004778:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	441a      	add	r2, r3
 8004786:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800478a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800478e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800479a:	b29b      	uxth	r3, r3
 800479c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	441a      	add	r2, r3
 80047c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80047c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80047d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80047da:	4618      	mov	r0, r3
 80047dc:	376c      	adds	r7, #108	; 0x6c
 80047de:	46bd      	mov	sp, r7
 80047e0:	bc80      	pop	{r7}
 80047e2:	4770      	bx	lr

080047e4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b08d      	sub	sp, #52	; 0x34
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	7b1b      	ldrb	r3, [r3, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f040 808e 	bne.w	8004914 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	785b      	ldrb	r3, [r3, #1]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d044      	beq.n	800488a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	81bb      	strh	r3, [r7, #12]
 800480e:	89bb      	ldrh	r3, [r7, #12]
 8004810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004814:	2b00      	cmp	r3, #0
 8004816:	d01b      	beq.n	8004850 <USB_DeactivateEndpoint+0x6c>
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	b29b      	uxth	r3, r3
 8004826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800482a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482e:	817b      	strh	r3, [r7, #10]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	441a      	add	r2, r3
 800483a:	897b      	ldrh	r3, [r7, #10]
 800483c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004848:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800484c:	b29b      	uxth	r3, r3
 800484e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	b29b      	uxth	r3, r3
 800485e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004866:	813b      	strh	r3, [r7, #8]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	441a      	add	r2, r3
 8004872:	893b      	ldrh	r3, [r7, #8]
 8004874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800487c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004884:	b29b      	uxth	r3, r3
 8004886:	8013      	strh	r3, [r2, #0]
 8004888:	e192      	b.n	8004bb0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	827b      	strh	r3, [r7, #18]
 8004898:	8a7b      	ldrh	r3, [r7, #18]
 800489a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d01b      	beq.n	80048da <USB_DeactivateEndpoint+0xf6>
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b8:	823b      	strh	r3, [r7, #16]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	441a      	add	r2, r3
 80048c4:	8a3b      	ldrh	r3, [r7, #16]
 80048c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f0:	81fb      	strh	r3, [r7, #14]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	441a      	add	r2, r3
 80048fc:	89fb      	ldrh	r3, [r7, #14]
 80048fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800490a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800490e:	b29b      	uxth	r3, r3
 8004910:	8013      	strh	r3, [r2, #0]
 8004912:	e14d      	b.n	8004bb0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	785b      	ldrb	r3, [r3, #1]
 8004918:	2b00      	cmp	r3, #0
 800491a:	f040 80a5 	bne.w	8004a68 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	843b      	strh	r3, [r7, #32]
 800492c:	8c3b      	ldrh	r3, [r7, #32]
 800492e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d01b      	beq.n	800496e <USB_DeactivateEndpoint+0x18a>
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b29b      	uxth	r3, r3
 8004944:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494c:	83fb      	strh	r3, [r7, #30]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	441a      	add	r2, r3
 8004958:	8bfb      	ldrh	r3, [r7, #30]
 800495a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800495e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004962:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800496a:	b29b      	uxth	r3, r3
 800496c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	83bb      	strh	r3, [r7, #28]
 800497c:	8bbb      	ldrh	r3, [r7, #28]
 800497e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004982:	2b00      	cmp	r3, #0
 8004984:	d01b      	beq.n	80049be <USB_DeactivateEndpoint+0x1da>
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	b29b      	uxth	r3, r3
 8004994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499c:	837b      	strh	r3, [r7, #26]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	441a      	add	r2, r3
 80049a8:	8b7b      	ldrh	r3, [r7, #26]
 80049aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d4:	833b      	strh	r3, [r7, #24]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	441a      	add	r2, r3
 80049e0:	8b3b      	ldrh	r3, [r7, #24]
 80049e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0c:	82fb      	strh	r3, [r7, #22]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	441a      	add	r2, r3
 8004a18:	8afb      	ldrh	r3, [r7, #22]
 8004a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a44:	82bb      	strh	r3, [r7, #20]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	441a      	add	r2, r3
 8004a50:	8abb      	ldrh	r3, [r7, #20]
 8004a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	8013      	strh	r3, [r2, #0]
 8004a66:	e0a3      	b.n	8004bb0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01b      	beq.n	8004ab8 <USB_DeactivateEndpoint+0x2d4>
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a96:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	441a      	add	r2, r3
 8004aa2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004ac6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d01b      	beq.n	8004b08 <USB_DeactivateEndpoint+0x324>
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae6:	853b      	strh	r3, [r7, #40]	; 0x28
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	441a      	add	r2, r3
 8004af2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	441a      	add	r2, r3
 8004b2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b56:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	441a      	add	r2, r3
 8004b62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	441a      	add	r2, r3
 8004b9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3734      	adds	r7, #52	; 0x34
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr

08004bbc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b0cc      	sub	sp, #304	; 0x130
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bca:	6018      	str	r0, [r3, #0]
 8004bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bd4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	785b      	ldrb	r3, [r3, #1]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	f041 817d 	bne.w	8005ee2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	699a      	ldr	r2, [r3, #24]
 8004bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d908      	bls.n	8004c16 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004c14:	e007      	b.n	8004c26 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	7b1b      	ldrb	r3, [r3, #12]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d152      	bne.n	8004cdc <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6959      	ldr	r1, [r3, #20]
 8004c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	88da      	ldrh	r2, [r3, #6]
 8004c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004c58:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004c5c:	6800      	ldr	r0, [r0, #0]
 8004c5e:	f001 ff0e 	bl	8006a7e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c66:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004c6a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c6e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004c72:	6812      	ldr	r2, [r2, #0]
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	4619      	mov	r1, r3
 8004c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c8c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004c90:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c94:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004c98:	6812      	ldr	r2, [r2, #0]
 8004c9a:	440a      	add	r2, r1
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	011a      	lsls	r2, r3, #4
 8004cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cb0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cc0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cd0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	801a      	strh	r2, [r3, #0]
 8004cd8:	f001 b8b5 	b.w	8005e46 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	78db      	ldrb	r3, [r3, #3]
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	f040 84c6 	bne.w	800567a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6a1a      	ldr	r2, [r3, #32]
 8004cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	f240 8443 	bls.w	8005592 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d32:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	441a      	add	r2, r3
 8004d50:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004d54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d5c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6a1a      	ldr	r2, [r3, #32]
 8004d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d78:	1ad2      	subs	r2, r2, r3
 8004d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 823e 	beq.w	800522a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004db6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004dba:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004dbe:	6812      	ldr	r2, [r2, #0]
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	785b      	ldrb	r3, [r3, #1]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f040 809a 	bne.w	8004f08 <USB_EPStartXfer+0x34c>
 8004dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ddc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004de0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004de4:	6812      	ldr	r2, [r2, #0]
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	4619      	mov	r1, r3
 8004dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e06:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004e0a:	6812      	ldr	r2, [r2, #0]
 8004e0c:	440a      	add	r2, r1
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	011a      	lsls	r2, r3, #4
 8004e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d122      	bne.n	8004e86 <USB_EPStartXfer+0x2ca>
 8004e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e58:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	801a      	strh	r2, [r3, #0]
 8004e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e64:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	801a      	strh	r2, [r3, #0]
 8004e84:	e079      	b.n	8004f7a <USB_EPStartXfer+0x3be>
 8004e86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e8a:	2b3e      	cmp	r3, #62	; 0x3e
 8004e8c:	d81b      	bhi.n	8004ec6 <USB_EPStartXfer+0x30a>
 8004e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e92:	085b      	lsrs	r3, r3, #1
 8004e94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004e98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d004      	beq.n	8004eae <USB_EPStartXfer+0x2f2>
 8004ea4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004eae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	029b      	lsls	r3, r3, #10
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ebc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	801a      	strh	r2, [r3, #0]
 8004ec4:	e059      	b.n	8004f7a <USB_EPStartXfer+0x3be>
 8004ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ed4:	f003 031f 	and.w	r3, r3, #31
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d104      	bne.n	8004ee6 <USB_EPStartXfer+0x32a>
 8004edc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ee6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	029b      	lsls	r3, r3, #10
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ef4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004efe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	801a      	strh	r2, [r3, #0]
 8004f06:	e038      	b.n	8004f7a <USB_EPStartXfer+0x3be>
 8004f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	785b      	ldrb	r3, [r3, #1]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d130      	bne.n	8004f7a <USB_EPStartXfer+0x3be>
 8004f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	4619      	mov	r1, r3
 8004f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f2e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f36:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004f3a:	6812      	ldr	r2, [r2, #0]
 8004f3c:	440a      	add	r2, r1
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	011a      	lsls	r2, r3, #4
 8004f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f52:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	895b      	ldrh	r3, [r3, #10]
 8004f86:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6959      	ldr	r1, [r3, #20]
 8004f96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004fa0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004fa4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004fa8:	6800      	ldr	r0, [r0, #0]
 8004faa:	f001 fd68 	bl	8006a7e <USB_WritePMA>
            ep->xfer_buff += len;
 8004fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695a      	ldr	r2, [r3, #20]
 8004fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fbe:	441a      	add	r2, r3
 8004fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6a1a      	ldr	r2, [r3, #32]
 8004fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d90f      	bls.n	8005008 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6a1a      	ldr	r2, [r3, #32]
 8004ff4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ff8:	1ad2      	subs	r2, r2, r3
 8004ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ffe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	621a      	str	r2, [r3, #32]
 8005006:	e00e      	b.n	8005026 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800500c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800501c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2200      	movs	r2, #0
 8005024:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	785b      	ldrb	r3, [r3, #1]
 8005032:	2b00      	cmp	r3, #0
 8005034:	f040 809a 	bne.w	800516c <USB_EPStartXfer+0x5b0>
 8005038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800503c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005040:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005044:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005048:	6812      	ldr	r2, [r2, #0]
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005050:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800505a:	b29b      	uxth	r3, r3
 800505c:	4619      	mov	r1, r3
 800505e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005062:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005066:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800506a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800506e:	6812      	ldr	r2, [r2, #0]
 8005070:	440a      	add	r2, r1
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005078:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	011a      	lsls	r2, r3, #4
 8005082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005086:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4413      	add	r3, r2
 800508e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005096:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d122      	bne.n	80050ea <USB_EPStartXfer+0x52e>
 80050a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	801a      	strh	r2, [r3, #0]
 80050c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050da:	b29a      	uxth	r2, r3
 80050dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	801a      	strh	r2, [r3, #0]
 80050e8:	e083      	b.n	80051f2 <USB_EPStartXfer+0x636>
 80050ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ee:	2b3e      	cmp	r3, #62	; 0x3e
 80050f0:	d81b      	bhi.n	800512a <USB_EPStartXfer+0x56e>
 80050f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050f6:	085b      	lsrs	r3, r3, #1
 80050f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80050fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d004      	beq.n	8005112 <USB_EPStartXfer+0x556>
 8005108:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800510c:	3301      	adds	r3, #1
 800510e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005112:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005116:	b29b      	uxth	r3, r3
 8005118:	029b      	lsls	r3, r3, #10
 800511a:	b29a      	uxth	r2, r3
 800511c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005120:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	801a      	strh	r2, [r3, #0]
 8005128:	e063      	b.n	80051f2 <USB_EPStartXfer+0x636>
 800512a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800512e:	095b      	lsrs	r3, r3, #5
 8005130:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005134:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005138:	f003 031f 	and.w	r3, r3, #31
 800513c:	2b00      	cmp	r3, #0
 800513e:	d104      	bne.n	800514a <USB_EPStartXfer+0x58e>
 8005140:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005144:	3b01      	subs	r3, #1
 8005146:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800514a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800514e:	b29b      	uxth	r3, r3
 8005150:	029b      	lsls	r3, r3, #10
 8005152:	b29b      	uxth	r3, r3
 8005154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800515c:	b29a      	uxth	r2, r3
 800515e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005162:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	801a      	strh	r2, [r3, #0]
 800516a:	e042      	b.n	80051f2 <USB_EPStartXfer+0x636>
 800516c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005170:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	785b      	ldrb	r3, [r3, #1]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d13a      	bne.n	80051f2 <USB_EPStartXfer+0x636>
 800517c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005180:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005184:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005188:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800518c:	6812      	ldr	r2, [r2, #0]
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005194:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800519e:	b29b      	uxth	r3, r3
 80051a0:	4619      	mov	r1, r3
 80051a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051ae:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80051b2:	6812      	ldr	r2, [r2, #0]
 80051b4:	440a      	add	r2, r1
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	011a      	lsls	r2, r3, #4
 80051c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4413      	add	r3, r2
 80051d2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80051d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80051f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	891b      	ldrh	r3, [r3, #8]
 80051fe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005206:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6959      	ldr	r1, [r3, #20]
 800520e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005212:	b29b      	uxth	r3, r3
 8005214:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005218:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800521c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005220:	6800      	ldr	r0, [r0, #0]
 8005222:	f001 fc2c 	bl	8006a7e <USB_WritePMA>
 8005226:	f000 be0e 	b.w	8005e46 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800522a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800522e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	785b      	ldrb	r3, [r3, #1]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d16d      	bne.n	8005316 <USB_EPStartXfer+0x75a>
 800523a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800523e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	64bb      	str	r3, [r7, #72]	; 0x48
 8005246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800524a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005254:	b29b      	uxth	r3, r3
 8005256:	461a      	mov	r2, r3
 8005258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800525a:	4413      	add	r3, r2
 800525c:	64bb      	str	r3, [r7, #72]	; 0x48
 800525e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005262:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	011a      	lsls	r2, r3, #4
 800526c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800526e:	4413      	add	r3, r2
 8005270:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005274:	647b      	str	r3, [r7, #68]	; 0x44
 8005276:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800527a:	2b00      	cmp	r3, #0
 800527c:	d112      	bne.n	80052a4 <USB_EPStartXfer+0x6e8>
 800527e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	b29b      	uxth	r3, r3
 8005284:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005288:	b29a      	uxth	r2, r3
 800528a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800528c:	801a      	strh	r2, [r3, #0]
 800528e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	b29b      	uxth	r3, r3
 8005294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800529c:	b29a      	uxth	r2, r3
 800529e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052a0:	801a      	strh	r2, [r3, #0]
 80052a2:	e063      	b.n	800536c <USB_EPStartXfer+0x7b0>
 80052a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a8:	2b3e      	cmp	r3, #62	; 0x3e
 80052aa:	d817      	bhi.n	80052dc <USB_EPStartXfer+0x720>
 80052ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052b0:	085b      	lsrs	r3, r3, #1
 80052b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80052b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d004      	beq.n	80052cc <USB_EPStartXfer+0x710>
 80052c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80052c6:	3301      	adds	r3, #1
 80052c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80052cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	029b      	lsls	r3, r3, #10
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d8:	801a      	strh	r2, [r3, #0]
 80052da:	e047      	b.n	800536c <USB_EPStartXfer+0x7b0>
 80052dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052e0:	095b      	lsrs	r3, r3, #5
 80052e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80052e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ea:	f003 031f 	and.w	r3, r3, #31
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d104      	bne.n	80052fc <USB_EPStartXfer+0x740>
 80052f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80052f6:	3b01      	subs	r3, #1
 80052f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80052fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005300:	b29b      	uxth	r3, r3
 8005302:	029b      	lsls	r3, r3, #10
 8005304:	b29b      	uxth	r3, r3
 8005306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800530a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800530e:	b29a      	uxth	r2, r3
 8005310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005312:	801a      	strh	r2, [r3, #0]
 8005314:	e02a      	b.n	800536c <USB_EPStartXfer+0x7b0>
 8005316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800531a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	785b      	ldrb	r3, [r3, #1]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d122      	bne.n	800536c <USB_EPStartXfer+0x7b0>
 8005326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800532a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	653b      	str	r3, [r7, #80]	; 0x50
 8005332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005336:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005340:	b29b      	uxth	r3, r3
 8005342:	461a      	mov	r2, r3
 8005344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005346:	4413      	add	r3, r2
 8005348:	653b      	str	r3, [r7, #80]	; 0x50
 800534a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800534e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	011a      	lsls	r2, r3, #4
 8005358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800535a:	4413      	add	r3, r2
 800535c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005360:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005362:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005366:	b29a      	uxth	r2, r3
 8005368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800536a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800536c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005370:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	891b      	ldrh	r3, [r3, #8]
 8005378:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800537c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005380:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6959      	ldr	r1, [r3, #20]
 8005388:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800538c:	b29b      	uxth	r3, r3
 800538e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005392:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005396:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800539a:	6800      	ldr	r0, [r0, #0]
 800539c:	f001 fb6f 	bl	8006a7e <USB_WritePMA>
            ep->xfer_buff += len;
 80053a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	695a      	ldr	r2, [r3, #20]
 80053ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053b0:	441a      	add	r2, r3
 80053b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6a1a      	ldr	r2, [r3, #32]
 80053ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d90f      	bls.n	80053fa <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80053da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6a1a      	ldr	r2, [r3, #32]
 80053e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ea:	1ad2      	subs	r2, r2, r3
 80053ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	621a      	str	r2, [r3, #32]
 80053f8:	e00e      	b.n	8005418 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80053fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800540a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800540e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2200      	movs	r2, #0
 8005416:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800541c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	643b      	str	r3, [r7, #64]	; 0x40
 8005424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005428:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	785b      	ldrb	r3, [r3, #1]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d16d      	bne.n	8005510 <USB_EPStartXfer+0x954>
 8005434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005438:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005444:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800544e:	b29b      	uxth	r3, r3
 8005450:	461a      	mov	r2, r3
 8005452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005454:	4413      	add	r3, r2
 8005456:	63bb      	str	r3, [r7, #56]	; 0x38
 8005458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800545c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	011a      	lsls	r2, r3, #4
 8005466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005468:	4413      	add	r3, r2
 800546a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800546e:	637b      	str	r3, [r7, #52]	; 0x34
 8005470:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005474:	2b00      	cmp	r3, #0
 8005476:	d112      	bne.n	800549e <USB_EPStartXfer+0x8e2>
 8005478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	b29b      	uxth	r3, r3
 800547e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005482:	b29a      	uxth	r2, r3
 8005484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005486:	801a      	strh	r2, [r3, #0]
 8005488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	b29b      	uxth	r3, r3
 800548e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005492:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005496:	b29a      	uxth	r2, r3
 8005498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549a:	801a      	strh	r2, [r3, #0]
 800549c:	e05d      	b.n	800555a <USB_EPStartXfer+0x99e>
 800549e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054a2:	2b3e      	cmp	r3, #62	; 0x3e
 80054a4:	d817      	bhi.n	80054d6 <USB_EPStartXfer+0x91a>
 80054a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054aa:	085b      	lsrs	r3, r3, #1
 80054ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80054b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d004      	beq.n	80054c6 <USB_EPStartXfer+0x90a>
 80054bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054c0:	3301      	adds	r3, #1
 80054c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80054c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	029b      	lsls	r3, r3, #10
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d2:	801a      	strh	r2, [r3, #0]
 80054d4:	e041      	b.n	800555a <USB_EPStartXfer+0x99e>
 80054d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80054e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e4:	f003 031f 	and.w	r3, r3, #31
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d104      	bne.n	80054f6 <USB_EPStartXfer+0x93a>
 80054ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054f0:	3b01      	subs	r3, #1
 80054f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80054f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	029b      	lsls	r3, r3, #10
 80054fe:	b29b      	uxth	r3, r3
 8005500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005508:	b29a      	uxth	r2, r3
 800550a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550c:	801a      	strh	r2, [r3, #0]
 800550e:	e024      	b.n	800555a <USB_EPStartXfer+0x99e>
 8005510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	785b      	ldrb	r3, [r3, #1]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d11c      	bne.n	800555a <USB_EPStartXfer+0x99e>
 8005520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005524:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800552e:	b29b      	uxth	r3, r3
 8005530:	461a      	mov	r2, r3
 8005532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005534:	4413      	add	r3, r2
 8005536:	643b      	str	r3, [r7, #64]	; 0x40
 8005538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800553c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	011a      	lsls	r2, r3, #4
 8005546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005548:	4413      	add	r3, r2
 800554a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800554e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005554:	b29a      	uxth	r2, r3
 8005556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005558:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800555a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800555e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	895b      	ldrh	r3, [r3, #10]
 8005566:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800556a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800556e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6959      	ldr	r1, [r3, #20]
 8005576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800557a:	b29b      	uxth	r3, r3
 800557c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005580:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005584:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005588:	6800      	ldr	r0, [r0, #0]
 800558a:	f001 fa78 	bl	8006a7e <USB_WritePMA>
 800558e:	f000 bc5a 	b.w	8005e46 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005596:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80055a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80055c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80055cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	441a      	add	r2, r3
 80055e6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80055ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80055fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005602:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	65fb      	str	r3, [r7, #92]	; 0x5c
 800560a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005618:	b29b      	uxth	r3, r3
 800561a:	461a      	mov	r2, r3
 800561c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800561e:	4413      	add	r3, r2
 8005620:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005626:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	011a      	lsls	r2, r3, #4
 8005630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005632:	4413      	add	r3, r2
 8005634:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005638:	65bb      	str	r3, [r7, #88]	; 0x58
 800563a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800563e:	b29a      	uxth	r2, r3
 8005640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005642:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005648:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	891b      	ldrh	r3, [r3, #8]
 8005650:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005658:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6959      	ldr	r1, [r3, #20]
 8005660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005664:	b29b      	uxth	r3, r3
 8005666:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800566a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800566e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005672:	6800      	ldr	r0, [r0, #0]
 8005674:	f001 fa03 	bl	8006a7e <USB_WritePMA>
 8005678:	e3e5      	b.n	8005e46 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800567a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800567e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	b29b      	uxth	r3, r3
 8005698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80056a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	441a      	add	r2, r3
 80056be:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80056c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056ca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80056ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80056d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6a1a      	ldr	r2, [r3, #32]
 80056e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056e6:	1ad2      	subs	r2, r2, r3
 80056e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005702:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	b29b      	uxth	r3, r3
 8005712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 81bc 	beq.w	8005a94 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800571c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005720:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800572a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800572e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	785b      	ldrb	r3, [r3, #1]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d16d      	bne.n	8005816 <USB_EPStartXfer+0xc5a>
 800573a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800573e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	67bb      	str	r3, [r7, #120]	; 0x78
 8005746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800574a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005754:	b29b      	uxth	r3, r3
 8005756:	461a      	mov	r2, r3
 8005758:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800575a:	4413      	add	r3, r2
 800575c:	67bb      	str	r3, [r7, #120]	; 0x78
 800575e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005762:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	011a      	lsls	r2, r3, #4
 800576c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800576e:	4413      	add	r3, r2
 8005770:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005774:	677b      	str	r3, [r7, #116]	; 0x74
 8005776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800577a:	2b00      	cmp	r3, #0
 800577c:	d112      	bne.n	80057a4 <USB_EPStartXfer+0xbe8>
 800577e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	b29b      	uxth	r3, r3
 8005784:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005788:	b29a      	uxth	r2, r3
 800578a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800578c:	801a      	strh	r2, [r3, #0]
 800578e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	b29b      	uxth	r3, r3
 8005794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800579c:	b29a      	uxth	r2, r3
 800579e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057a0:	801a      	strh	r2, [r3, #0]
 80057a2:	e060      	b.n	8005866 <USB_EPStartXfer+0xcaa>
 80057a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057a8:	2b3e      	cmp	r3, #62	; 0x3e
 80057aa:	d817      	bhi.n	80057dc <USB_EPStartXfer+0xc20>
 80057ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057b0:	085b      	lsrs	r3, r3, #1
 80057b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80057b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d004      	beq.n	80057cc <USB_EPStartXfer+0xc10>
 80057c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80057c6:	3301      	adds	r3, #1
 80057c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80057cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	029b      	lsls	r3, r3, #10
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057d8:	801a      	strh	r2, [r3, #0]
 80057da:	e044      	b.n	8005866 <USB_EPStartXfer+0xcaa>
 80057dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e0:	095b      	lsrs	r3, r3, #5
 80057e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80057e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ea:	f003 031f 	and.w	r3, r3, #31
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d104      	bne.n	80057fc <USB_EPStartXfer+0xc40>
 80057f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80057f6:	3b01      	subs	r3, #1
 80057f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80057fc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005800:	b29b      	uxth	r3, r3
 8005802:	029b      	lsls	r3, r3, #10
 8005804:	b29b      	uxth	r3, r3
 8005806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800580a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800580e:	b29a      	uxth	r2, r3
 8005810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005812:	801a      	strh	r2, [r3, #0]
 8005814:	e027      	b.n	8005866 <USB_EPStartXfer+0xcaa>
 8005816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800581a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	785b      	ldrb	r3, [r3, #1]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d11f      	bne.n	8005866 <USB_EPStartXfer+0xcaa>
 8005826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005834:	b29b      	uxth	r3, r3
 8005836:	461a      	mov	r2, r3
 8005838:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800583c:	4413      	add	r3, r2
 800583e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005846:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	011a      	lsls	r2, r3, #4
 8005850:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005854:	4413      	add	r3, r2
 8005856:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800585a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800585c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005860:	b29a      	uxth	r2, r3
 8005862:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005864:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	895b      	ldrh	r3, [r3, #10]
 8005872:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6959      	ldr	r1, [r3, #20]
 8005882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005886:	b29b      	uxth	r3, r3
 8005888:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800588c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005890:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005894:	6800      	ldr	r0, [r0, #0]
 8005896:	f001 f8f2 	bl	8006a7e <USB_WritePMA>
          ep->xfer_buff += len;
 800589a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	695a      	ldr	r2, [r3, #20]
 80058a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058aa:	441a      	add	r2, r3
 80058ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80058b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6a1a      	ldr	r2, [r3, #32]
 80058c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d90f      	bls.n	80058f4 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80058d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6a1a      	ldr	r2, [r3, #32]
 80058e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058e4:	1ad2      	subs	r2, r2, r3
 80058e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	621a      	str	r2, [r3, #32]
 80058f2:	e00e      	b.n	8005912 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80058f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005908:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2200      	movs	r2, #0
 8005910:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 8295 	beq.w	8005e46 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800591c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005920:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	785b      	ldrb	r3, [r3, #1]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d16d      	bne.n	8005a08 <USB_EPStartXfer+0xe4c>
 800592c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005930:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	66bb      	str	r3, [r7, #104]	; 0x68
 8005938:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800593c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005946:	b29b      	uxth	r3, r3
 8005948:	461a      	mov	r2, r3
 800594a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800594c:	4413      	add	r3, r2
 800594e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005954:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	011a      	lsls	r2, r3, #4
 800595e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005960:	4413      	add	r3, r2
 8005962:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005966:	667b      	str	r3, [r7, #100]	; 0x64
 8005968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800596c:	2b00      	cmp	r3, #0
 800596e:	d112      	bne.n	8005996 <USB_EPStartXfer+0xdda>
 8005970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	b29b      	uxth	r3, r3
 8005976:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800597a:	b29a      	uxth	r2, r3
 800597c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800597e:	801a      	strh	r2, [r3, #0]
 8005980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	b29b      	uxth	r3, r3
 8005986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800598a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800598e:	b29a      	uxth	r2, r3
 8005990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005992:	801a      	strh	r2, [r3, #0]
 8005994:	e063      	b.n	8005a5e <USB_EPStartXfer+0xea2>
 8005996:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800599a:	2b3e      	cmp	r3, #62	; 0x3e
 800599c:	d817      	bhi.n	80059ce <USB_EPStartXfer+0xe12>
 800599e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059a2:	085b      	lsrs	r3, r3, #1
 80059a4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80059a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d004      	beq.n	80059be <USB_EPStartXfer+0xe02>
 80059b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059b8:	3301      	adds	r3, #1
 80059ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80059be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	029b      	lsls	r3, r3, #10
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ca:	801a      	strh	r2, [r3, #0]
 80059cc:	e047      	b.n	8005a5e <USB_EPStartXfer+0xea2>
 80059ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059d2:	095b      	lsrs	r3, r3, #5
 80059d4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80059d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059dc:	f003 031f 	and.w	r3, r3, #31
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d104      	bne.n	80059ee <USB_EPStartXfer+0xe32>
 80059e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059e8:	3b01      	subs	r3, #1
 80059ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80059ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	029b      	lsls	r3, r3, #10
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a04:	801a      	strh	r2, [r3, #0]
 8005a06:	e02a      	b.n	8005a5e <USB_EPStartXfer+0xea2>
 8005a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	785b      	ldrb	r3, [r3, #1]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d122      	bne.n	8005a5e <USB_EPStartXfer+0xea2>
 8005a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	673b      	str	r3, [r7, #112]	; 0x70
 8005a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	461a      	mov	r2, r3
 8005a36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a38:	4413      	add	r3, r2
 8005a3a:	673b      	str	r3, [r7, #112]	; 0x70
 8005a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	011a      	lsls	r2, r3, #4
 8005a4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	891b      	ldrh	r3, [r3, #8]
 8005a6a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6959      	ldr	r1, [r3, #20]
 8005a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a84:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a88:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a8c:	6800      	ldr	r0, [r0, #0]
 8005a8e:	f000 fff6 	bl	8006a7e <USB_WritePMA>
 8005a92:	e1d8      	b.n	8005e46 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	785b      	ldrb	r3, [r3, #1]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d178      	bne.n	8005b96 <USB_EPStartXfer+0xfda>
 8005aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ac8:	4413      	add	r3, r2
 8005aca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	011a      	lsls	r2, r3, #4
 8005adc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ae6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d116      	bne.n	8005b20 <USB_EPStartXfer+0xf64>
 8005af2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b04:	801a      	strh	r2, [r3, #0]
 8005b06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b1c:	801a      	strh	r2, [r3, #0]
 8005b1e:	e06b      	b.n	8005bf8 <USB_EPStartXfer+0x103c>
 8005b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b24:	2b3e      	cmp	r3, #62	; 0x3e
 8005b26:	d818      	bhi.n	8005b5a <USB_EPStartXfer+0xf9e>
 8005b28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b2c:	085b      	lsrs	r3, r3, #1
 8005b2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d004      	beq.n	8005b48 <USB_EPStartXfer+0xf8c>
 8005b3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b42:	3301      	adds	r3, #1
 8005b44:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b48:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	029b      	lsls	r3, r3, #10
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b56:	801a      	strh	r2, [r3, #0]
 8005b58:	e04e      	b.n	8005bf8 <USB_EPStartXfer+0x103c>
 8005b5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b5e:	095b      	lsrs	r3, r3, #5
 8005b60:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b68:	f003 031f 	and.w	r3, r3, #31
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d104      	bne.n	8005b7a <USB_EPStartXfer+0xfbe>
 8005b70:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b74:	3b01      	subs	r3, #1
 8005b76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	029b      	lsls	r3, r3, #10
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b92:	801a      	strh	r2, [r3, #0]
 8005b94:	e030      	b.n	8005bf8 <USB_EPStartXfer+0x103c>
 8005b96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	785b      	ldrb	r3, [r3, #1]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d128      	bne.n	8005bf8 <USB_EPStartXfer+0x103c>
 8005ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005baa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005bca:	4413      	add	r3, r2
 8005bcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	011a      	lsls	r2, r3, #4
 8005bde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005be2:	4413      	add	r3, r2
 8005be4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005be8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005bf6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	891b      	ldrh	r3, [r3, #8]
 8005c04:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6959      	ldr	r1, [r3, #20]
 8005c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c1e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005c22:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005c26:	6800      	ldr	r0, [r0, #0]
 8005c28:	f000 ff29 	bl	8006a7e <USB_WritePMA>
          ep->xfer_buff += len;
 8005c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695a      	ldr	r2, [r3, #20]
 8005c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c3c:	441a      	add	r2, r3
 8005c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6a1a      	ldr	r2, [r3, #32]
 8005c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d90f      	bls.n	8005c86 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6a1a      	ldr	r2, [r3, #32]
 8005c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c76:	1ad2      	subs	r2, r2, r3
 8005c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	621a      	str	r2, [r3, #32]
 8005c84:	e00e      	b.n	8005ca4 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005ca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 80cc 	beq.w	8005e46 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	785b      	ldrb	r3, [r3, #1]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d178      	bne.n	8005dbe <USB_EPStartXfer+0x1202>
 8005ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	461a      	mov	r2, r3
 8005cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	011a      	lsls	r2, r3, #4
 8005d04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d08:	4413      	add	r3, r2
 8005d0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d116      	bne.n	8005d48 <USB_EPStartXfer+0x118c>
 8005d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d1e:	881b      	ldrh	r3, [r3, #0]
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d2c:	801a      	strh	r2, [r3, #0]
 8005d2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d44:	801a      	strh	r2, [r3, #0]
 8005d46:	e064      	b.n	8005e12 <USB_EPStartXfer+0x1256>
 8005d48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d4c:	2b3e      	cmp	r3, #62	; 0x3e
 8005d4e:	d818      	bhi.n	8005d82 <USB_EPStartXfer+0x11c6>
 8005d50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d54:	085b      	lsrs	r3, r3, #1
 8005d56:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d004      	beq.n	8005d70 <USB_EPStartXfer+0x11b4>
 8005d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	029b      	lsls	r3, r3, #10
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d7e:	801a      	strh	r2, [r3, #0]
 8005d80:	e047      	b.n	8005e12 <USB_EPStartXfer+0x1256>
 8005d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005d8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d90:	f003 031f 	and.w	r3, r3, #31
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d104      	bne.n	8005da2 <USB_EPStartXfer+0x11e6>
 8005d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	029b      	lsls	r3, r3, #10
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dba:	801a      	strh	r2, [r3, #0]
 8005dbc:	e029      	b.n	8005e12 <USB_EPStartXfer+0x1256>
 8005dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	785b      	ldrb	r3, [r3, #1]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d121      	bne.n	8005e12 <USB_EPStartXfer+0x1256>
 8005dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005de4:	4413      	add	r3, r2
 8005de6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	011a      	lsls	r2, r3, #4
 8005df8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	895b      	ldrh	r3, [r3, #10]
 8005e1e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6959      	ldr	r1, [r3, #20]
 8005e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e38:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e3c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e40:	6800      	ldr	r0, [r0, #0]
 8005e42:	f000 fe1c 	bl	8006a7e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005e68:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e74:	8013      	strh	r3, [r2, #0]
 8005e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e7a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005e7e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005e82:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005e86:	8812      	ldrh	r2, [r2, #0]
 8005e88:	f082 0210 	eor.w	r2, r2, #16
 8005e8c:	801a      	strh	r2, [r3, #0]
 8005e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e92:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005e96:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005e9a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005e9e:	8812      	ldrh	r2, [r2, #0]
 8005ea0:	f082 0220 	eor.w	r2, r2, #32
 8005ea4:	801a      	strh	r2, [r3, #0]
 8005ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eaa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	441a      	add	r2, r3
 8005ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	8013      	strh	r3, [r2, #0]
 8005ede:	f000 bc9f 	b.w	8006820 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	7b1b      	ldrb	r3, [r3, #12]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f040 80ae 	bne.w	8006050 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	699a      	ldr	r2, [r3, #24]
 8005f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d917      	bls.n	8005f40 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	699a      	ldr	r2, [r3, #24]
 8005f2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f30:	1ad2      	subs	r2, r2, r3
 8005f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	619a      	str	r2, [r3, #24]
 8005f3e:	e00e      	b.n	8005f5e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005f50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f82:	4413      	add	r3, r2
 8005f84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	011a      	lsls	r2, r3, #4
 8005f96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d116      	bne.n	8005fda <USB_EPStartXfer+0x141e>
 8005fac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fbe:	801a      	strh	r2, [r3, #0]
 8005fc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fd6:	801a      	strh	r2, [r3, #0]
 8005fd8:	e3e8      	b.n	80067ac <USB_EPStartXfer+0x1bf0>
 8005fda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fde:	2b3e      	cmp	r3, #62	; 0x3e
 8005fe0:	d818      	bhi.n	8006014 <USB_EPStartXfer+0x1458>
 8005fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fe6:	085b      	lsrs	r3, r3, #1
 8005fe8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d004      	beq.n	8006002 <USB_EPStartXfer+0x1446>
 8005ff8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006002:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006006:	b29b      	uxth	r3, r3
 8006008:	029b      	lsls	r3, r3, #10
 800600a:	b29a      	uxth	r2, r3
 800600c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006010:	801a      	strh	r2, [r3, #0]
 8006012:	e3cb      	b.n	80067ac <USB_EPStartXfer+0x1bf0>
 8006014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006018:	095b      	lsrs	r3, r3, #5
 800601a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800601e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006022:	f003 031f 	and.w	r3, r3, #31
 8006026:	2b00      	cmp	r3, #0
 8006028:	d104      	bne.n	8006034 <USB_EPStartXfer+0x1478>
 800602a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800602e:	3b01      	subs	r3, #1
 8006030:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006034:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006038:	b29b      	uxth	r3, r3
 800603a:	029b      	lsls	r3, r3, #10
 800603c:	b29b      	uxth	r3, r3
 800603e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006046:	b29a      	uxth	r2, r3
 8006048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800604c:	801a      	strh	r2, [r3, #0]
 800604e:	e3ad      	b.n	80067ac <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006054:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	78db      	ldrb	r3, [r3, #3]
 800605c:	2b02      	cmp	r3, #2
 800605e:	f040 8200 	bne.w	8006462 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006066:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	785b      	ldrb	r3, [r3, #1]
 800606e:	2b00      	cmp	r3, #0
 8006070:	f040 8091 	bne.w	8006196 <USB_EPStartXfer+0x15da>
 8006074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006078:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006086:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006090:	b29b      	uxth	r3, r3
 8006092:	461a      	mov	r2, r3
 8006094:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006098:	4413      	add	r3, r2
 800609a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800609e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	011a      	lsls	r2, r3, #4
 80060ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060b0:	4413      	add	r3, r2
 80060b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d116      	bne.n	80060f8 <USB_EPStartXfer+0x153c>
 80060ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060dc:	801a      	strh	r2, [r3, #0]
 80060de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060f4:	801a      	strh	r2, [r3, #0]
 80060f6:	e083      	b.n	8006200 <USB_EPStartXfer+0x1644>
 80060f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	2b3e      	cmp	r3, #62	; 0x3e
 8006106:	d820      	bhi.n	800614a <USB_EPStartXfer+0x158e>
 8006108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800610c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	085b      	lsrs	r3, r3, #1
 8006116:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800611a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800611e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	d004      	beq.n	8006138 <USB_EPStartXfer+0x157c>
 800612e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006132:	3301      	adds	r3, #1
 8006134:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800613c:	b29b      	uxth	r3, r3
 800613e:	029b      	lsls	r3, r3, #10
 8006140:	b29a      	uxth	r2, r3
 8006142:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006146:	801a      	strh	r2, [r3, #0]
 8006148:	e05a      	b.n	8006200 <USB_EPStartXfer+0x1644>
 800614a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800614e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	095b      	lsrs	r3, r3, #5
 8006158:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800615c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006160:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	f003 031f 	and.w	r3, r3, #31
 800616c:	2b00      	cmp	r3, #0
 800616e:	d104      	bne.n	800617a <USB_EPStartXfer+0x15be>
 8006170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006174:	3b01      	subs	r3, #1
 8006176:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800617a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800617e:	b29b      	uxth	r3, r3
 8006180:	029b      	lsls	r3, r3, #10
 8006182:	b29b      	uxth	r3, r3
 8006184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800618c:	b29a      	uxth	r2, r3
 800618e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006192:	801a      	strh	r2, [r3, #0]
 8006194:	e034      	b.n	8006200 <USB_EPStartXfer+0x1644>
 8006196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800619a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	785b      	ldrb	r3, [r3, #1]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d12c      	bne.n	8006200 <USB_EPStartXfer+0x1644>
 80061a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80061b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	461a      	mov	r2, r3
 80061c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061ca:	4413      	add	r3, r2
 80061cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80061d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	011a      	lsls	r2, r3, #4
 80061de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061e2:	4413      	add	r3, r2
 80061e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80061fe:	801a      	strh	r2, [r3, #0]
 8006200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006204:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800620e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006212:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	785b      	ldrb	r3, [r3, #1]
 800621a:	2b00      	cmp	r3, #0
 800621c:	f040 8091 	bne.w	8006342 <USB_EPStartXfer+0x1786>
 8006220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006224:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800622e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006232:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800623c:	b29b      	uxth	r3, r3
 800623e:	461a      	mov	r2, r3
 8006240:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006244:	4413      	add	r3, r2
 8006246:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800624a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	011a      	lsls	r2, r3, #4
 8006258:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800625c:	4413      	add	r3, r2
 800625e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006262:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800626a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d116      	bne.n	80062a4 <USB_EPStartXfer+0x16e8>
 8006276:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	b29b      	uxth	r3, r3
 800627e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006282:	b29a      	uxth	r2, r3
 8006284:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006288:	801a      	strh	r2, [r3, #0]
 800628a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	b29b      	uxth	r3, r3
 8006292:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006296:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800629a:	b29a      	uxth	r2, r3
 800629c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062a0:	801a      	strh	r2, [r3, #0]
 80062a2:	e07c      	b.n	800639e <USB_EPStartXfer+0x17e2>
 80062a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	2b3e      	cmp	r3, #62	; 0x3e
 80062b2:	d820      	bhi.n	80062f6 <USB_EPStartXfer+0x173a>
 80062b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	085b      	lsrs	r3, r3, #1
 80062c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d004      	beq.n	80062e4 <USB_EPStartXfer+0x1728>
 80062da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80062de:	3301      	adds	r3, #1
 80062e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	029b      	lsls	r3, r3, #10
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062f2:	801a      	strh	r2, [r3, #0]
 80062f4:	e053      	b.n	800639e <USB_EPStartXfer+0x17e2>
 80062f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	095b      	lsrs	r3, r3, #5
 8006304:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800630c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	f003 031f 	and.w	r3, r3, #31
 8006318:	2b00      	cmp	r3, #0
 800631a:	d104      	bne.n	8006326 <USB_EPStartXfer+0x176a>
 800631c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006320:	3b01      	subs	r3, #1
 8006322:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006326:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800632a:	b29b      	uxth	r3, r3
 800632c:	029b      	lsls	r3, r3, #10
 800632e:	b29b      	uxth	r3, r3
 8006330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006338:	b29a      	uxth	r2, r3
 800633a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800633e:	801a      	strh	r2, [r3, #0]
 8006340:	e02d      	b.n	800639e <USB_EPStartXfer+0x17e2>
 8006342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	785b      	ldrb	r3, [r3, #1]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d125      	bne.n	800639e <USB_EPStartXfer+0x17e2>
 8006352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006356:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006360:	b29b      	uxth	r3, r3
 8006362:	461a      	mov	r2, r3
 8006364:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006368:	4413      	add	r3, r2
 800636a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800636e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	011a      	lsls	r2, r3, #4
 800637c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006380:	4413      	add	r3, r2
 8006382:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006386:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800638a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800638e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	b29a      	uxth	r2, r3
 8006398:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800639c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800639e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 81fe 	beq.w	80067ac <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80063b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063d0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80063d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d005      	beq.n	80063e8 <USB_EPStartXfer+0x182c>
 80063dc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80063e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10d      	bne.n	8006404 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063e8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80063ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f040 81db 	bne.w	80067ac <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063f6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80063fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f040 81d4 	bne.w	80067ac <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006408:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006412:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	b29b      	uxth	r3, r3
 8006422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800642e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006432:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800643c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	441a      	add	r2, r3
 8006448:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800644c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006458:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800645c:	b29b      	uxth	r3, r3
 800645e:	8013      	strh	r3, [r2, #0]
 8006460:	e1a4      	b.n	80067ac <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006466:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	78db      	ldrb	r3, [r3, #3]
 800646e:	2b01      	cmp	r3, #1
 8006470:	f040 819a 	bne.w	80067a8 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006478:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	699a      	ldr	r2, [r3, #24]
 8006480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006484:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	429a      	cmp	r2, r3
 800648e:	d917      	bls.n	80064c0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80064a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	699a      	ldr	r2, [r3, #24]
 80064ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b0:	1ad2      	subs	r2, r2, r3
 80064b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	619a      	str	r2, [r3, #24]
 80064be:	e00e      	b.n	80064de <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80064c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80064d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2200      	movs	r2, #0
 80064dc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80064de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d178      	bne.n	80065e0 <USB_EPStartXfer+0x1a24>
 80064ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006500:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800650a:	b29b      	uxth	r3, r3
 800650c:	461a      	mov	r2, r3
 800650e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006512:	4413      	add	r3, r2
 8006514:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800651c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	011a      	lsls	r2, r3, #4
 8006526:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800652a:	4413      	add	r3, r2
 800652c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006530:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006538:	2b00      	cmp	r3, #0
 800653a:	d116      	bne.n	800656a <USB_EPStartXfer+0x19ae>
 800653c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	b29b      	uxth	r3, r3
 8006544:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006548:	b29a      	uxth	r2, r3
 800654a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800654e:	801a      	strh	r2, [r3, #0]
 8006550:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	b29b      	uxth	r3, r3
 8006558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800655c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006560:	b29a      	uxth	r2, r3
 8006562:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006566:	801a      	strh	r2, [r3, #0]
 8006568:	e06b      	b.n	8006642 <USB_EPStartXfer+0x1a86>
 800656a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800656e:	2b3e      	cmp	r3, #62	; 0x3e
 8006570:	d818      	bhi.n	80065a4 <USB_EPStartXfer+0x19e8>
 8006572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006576:	085b      	lsrs	r3, r3, #1
 8006578:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800657c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	2b00      	cmp	r3, #0
 8006586:	d004      	beq.n	8006592 <USB_EPStartXfer+0x19d6>
 8006588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800658c:	3301      	adds	r3, #1
 800658e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006596:	b29b      	uxth	r3, r3
 8006598:	029b      	lsls	r3, r3, #10
 800659a:	b29a      	uxth	r2, r3
 800659c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065a0:	801a      	strh	r2, [r3, #0]
 80065a2:	e04e      	b.n	8006642 <USB_EPStartXfer+0x1a86>
 80065a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a8:	095b      	lsrs	r3, r3, #5
 80065aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065b2:	f003 031f 	and.w	r3, r3, #31
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d104      	bne.n	80065c4 <USB_EPStartXfer+0x1a08>
 80065ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065be:	3b01      	subs	r3, #1
 80065c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	029b      	lsls	r3, r3, #10
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065dc:	801a      	strh	r2, [r3, #0]
 80065de:	e030      	b.n	8006642 <USB_EPStartXfer+0x1a86>
 80065e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	785b      	ldrb	r3, [r3, #1]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d128      	bne.n	8006642 <USB_EPStartXfer+0x1a86>
 80065f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80065fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006602:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800660c:	b29b      	uxth	r3, r3
 800660e:	461a      	mov	r2, r3
 8006610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006614:	4413      	add	r3, r2
 8006616:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800661a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800661e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	011a      	lsls	r2, r3, #4
 8006628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800662c:	4413      	add	r3, r2
 800662e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006632:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800663a:	b29a      	uxth	r2, r3
 800663c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006640:	801a      	strh	r2, [r3, #0]
 8006642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006646:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006654:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	785b      	ldrb	r3, [r3, #1]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d178      	bne.n	8006752 <USB_EPStartXfer+0x1b96>
 8006660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006664:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800666e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006672:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800667c:	b29b      	uxth	r3, r3
 800667e:	461a      	mov	r2, r3
 8006680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006684:	4413      	add	r3, r2
 8006686:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800668a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800668e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	011a      	lsls	r2, r3, #4
 8006698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800669c:	4413      	add	r3, r2
 800669e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d116      	bne.n	80066dc <USB_EPStartXfer+0x1b20>
 80066ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066c0:	801a      	strh	r2, [r3, #0]
 80066c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066c6:	881b      	ldrh	r3, [r3, #0]
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066d8:	801a      	strh	r2, [r3, #0]
 80066da:	e067      	b.n	80067ac <USB_EPStartXfer+0x1bf0>
 80066dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066e0:	2b3e      	cmp	r3, #62	; 0x3e
 80066e2:	d818      	bhi.n	8006716 <USB_EPStartXfer+0x1b5a>
 80066e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066e8:	085b      	lsrs	r3, r3, #1
 80066ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80066ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d004      	beq.n	8006704 <USB_EPStartXfer+0x1b48>
 80066fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066fe:	3301      	adds	r3, #1
 8006700:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006704:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006708:	b29b      	uxth	r3, r3
 800670a:	029b      	lsls	r3, r3, #10
 800670c:	b29a      	uxth	r2, r3
 800670e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006712:	801a      	strh	r2, [r3, #0]
 8006714:	e04a      	b.n	80067ac <USB_EPStartXfer+0x1bf0>
 8006716:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800671a:	095b      	lsrs	r3, r3, #5
 800671c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006724:	f003 031f 	and.w	r3, r3, #31
 8006728:	2b00      	cmp	r3, #0
 800672a:	d104      	bne.n	8006736 <USB_EPStartXfer+0x1b7a>
 800672c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006730:	3b01      	subs	r3, #1
 8006732:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006736:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800673a:	b29b      	uxth	r3, r3
 800673c:	029b      	lsls	r3, r3, #10
 800673e:	b29b      	uxth	r3, r3
 8006740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006748:	b29a      	uxth	r2, r3
 800674a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800674e:	801a      	strh	r2, [r3, #0]
 8006750:	e02c      	b.n	80067ac <USB_EPStartXfer+0x1bf0>
 8006752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006756:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	785b      	ldrb	r3, [r3, #1]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d124      	bne.n	80067ac <USB_EPStartXfer+0x1bf0>
 8006762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006766:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006770:	b29b      	uxth	r3, r3
 8006772:	461a      	mov	r2, r3
 8006774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006778:	4413      	add	r3, r2
 800677a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800677e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006782:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	011a      	lsls	r2, r3, #4
 800678c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006790:	4413      	add	r3, r2
 8006792:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006796:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800679a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800679e:	b29a      	uxth	r2, r3
 80067a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067a4:	801a      	strh	r2, [r3, #0]
 80067a6:	e001      	b.n	80067ac <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e03a      	b.n	8006822 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	881b      	ldrh	r3, [r3, #0]
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80067d6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80067da:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067de:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80067e2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80067e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067ea:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80067ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	441a      	add	r2, r3
 8006808:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800680c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800681c:	b29b      	uxth	r3, r3
 800681e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	785b      	ldrb	r3, [r3, #1]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d020      	beq.n	8006880 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	b29b      	uxth	r3, r3
 800684c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006854:	81bb      	strh	r3, [r7, #12]
 8006856:	89bb      	ldrh	r3, [r7, #12]
 8006858:	f083 0310 	eor.w	r3, r3, #16
 800685c:	81bb      	strh	r3, [r7, #12]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	441a      	add	r2, r3
 8006868:	89bb      	ldrh	r3, [r7, #12]
 800686a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800686e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800687a:	b29b      	uxth	r3, r3
 800687c:	8013      	strh	r3, [r2, #0]
 800687e:	e01f      	b.n	80068c0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	b29b      	uxth	r3, r3
 800688e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006896:	81fb      	strh	r3, [r7, #14]
 8006898:	89fb      	ldrh	r3, [r7, #14]
 800689a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800689e:	81fb      	strh	r3, [r7, #14]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	441a      	add	r2, r3
 80068aa:	89fb      	ldrh	r3, [r7, #14]
 80068ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068bc:	b29b      	uxth	r3, r3
 80068be:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bc80      	pop	{r7}
 80068ca:	4770      	bx	lr

080068cc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	7b1b      	ldrb	r3, [r3, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f040 809d 	bne.w	8006a1a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	785b      	ldrb	r3, [r3, #1]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d04c      	beq.n	8006982 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	881b      	ldrh	r3, [r3, #0]
 80068f4:	823b      	strh	r3, [r7, #16]
 80068f6:	8a3b      	ldrh	r3, [r7, #16]
 80068f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d01b      	beq.n	8006938 <USB_EPClearStall+0x6c>
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4413      	add	r3, r2
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	b29b      	uxth	r3, r3
 800690e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006916:	81fb      	strh	r3, [r7, #14]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	441a      	add	r2, r3
 8006922:	89fb      	ldrh	r3, [r7, #14]
 8006924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800692c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006930:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006934:	b29b      	uxth	r3, r3
 8006936:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	78db      	ldrb	r3, [r3, #3]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d06c      	beq.n	8006a1a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	b29b      	uxth	r3, r3
 800694e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006952:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006956:	81bb      	strh	r3, [r7, #12]
 8006958:	89bb      	ldrh	r3, [r7, #12]
 800695a:	f083 0320 	eor.w	r3, r3, #32
 800695e:	81bb      	strh	r3, [r7, #12]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	441a      	add	r2, r3
 800696a:	89bb      	ldrh	r3, [r7, #12]
 800696c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800697c:	b29b      	uxth	r3, r3
 800697e:	8013      	strh	r3, [r2, #0]
 8006980:	e04b      	b.n	8006a1a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	82fb      	strh	r3, [r7, #22]
 8006990:	8afb      	ldrh	r3, [r7, #22]
 8006992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d01b      	beq.n	80069d2 <USB_EPClearStall+0x106>
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b0:	82bb      	strh	r3, [r7, #20]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	441a      	add	r2, r3
 80069bc:	8abb      	ldrh	r3, [r7, #20]
 80069be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	b29b      	uxth	r3, r3
 80069e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e8:	827b      	strh	r3, [r7, #18]
 80069ea:	8a7b      	ldrh	r3, [r7, #18]
 80069ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069f0:	827b      	strh	r3, [r7, #18]
 80069f2:	8a7b      	ldrh	r3, [r7, #18]
 80069f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069f8:	827b      	strh	r3, [r7, #18]
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	441a      	add	r2, r3
 8006a04:	8a7b      	ldrh	r3, [r7, #18]
 8006a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	371c      	adds	r7, #28
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bc80      	pop	{r7}
 8006a24:	4770      	bx	lr

08006a26 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
 8006a2e:	460b      	mov	r3, r1
 8006a30:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a32:	78fb      	ldrb	r3, [r7, #3]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d103      	bne.n	8006a40 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2280      	movs	r2, #128	; 0x80
 8006a3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bc80      	pop	{r7}
 8006a4a:	4770      	bx	lr

08006a4c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bc80      	pop	{r7}
 8006a5e:	4770      	bx	lr

08006a60 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a72:	68fb      	ldr	r3, [r7, #12]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bc80      	pop	{r7}
 8006a7c:	4770      	bx	lr

08006a7e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b08d      	sub	sp, #52	; 0x34
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	60f8      	str	r0, [r7, #12]
 8006a86:	60b9      	str	r1, [r7, #8]
 8006a88:	4611      	mov	r1, r2
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	80fb      	strh	r3, [r7, #6]
 8006a90:	4613      	mov	r3, r2
 8006a92:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006a94:	88bb      	ldrh	r3, [r7, #4]
 8006a96:	3301      	adds	r3, #1
 8006a98:	085b      	lsrs	r3, r3, #1
 8006a9a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006aa4:	88fb      	ldrh	r3, [r7, #6]
 8006aa6:	005a      	lsls	r2, r3, #1
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ab0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ab6:	e01e      	b.n	8006af6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	021b      	lsls	r3, r3, #8
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	461a      	mov	r2, r3
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006adc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae0:	3302      	adds	r3, #2
 8006ae2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae6:	3302      	adds	r3, #2
 8006ae8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	3301      	adds	r3, #1
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af2:	3b01      	subs	r3, #1
 8006af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1dd      	bne.n	8006ab8 <USB_WritePMA+0x3a>
  }
}
 8006afc:	bf00      	nop
 8006afe:	bf00      	nop
 8006b00:	3734      	adds	r7, #52	; 0x34
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bc80      	pop	{r7}
 8006b06:	4770      	bx	lr

08006b08 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b08b      	sub	sp, #44	; 0x2c
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	4611      	mov	r1, r2
 8006b14:	461a      	mov	r2, r3
 8006b16:	460b      	mov	r3, r1
 8006b18:	80fb      	strh	r3, [r7, #6]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b1e:	88bb      	ldrh	r3, [r7, #4]
 8006b20:	085b      	lsrs	r3, r3, #1
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b2e:	88fb      	ldrh	r3, [r7, #6]
 8006b30:	005a      	lsls	r2, r3, #1
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b3a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b40:	e01b      	b.n	8006b7a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	3302      	adds	r3, #2
 8006b4e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	0a1b      	lsrs	r3, r3, #8
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	3302      	adds	r3, #2
 8006b72:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	3b01      	subs	r3, #1
 8006b78:	627b      	str	r3, [r7, #36]	; 0x24
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1e0      	bne.n	8006b42 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006b80:	88bb      	ldrh	r3, [r7, #4]
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d007      	beq.n	8006b9c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006b8c:	6a3b      	ldr	r3, [r7, #32]
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	701a      	strb	r2, [r3, #0]
  }
}
 8006b9c:	bf00      	nop
 8006b9e:	372c      	adds	r7, #44	; 0x2c
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bc80      	pop	{r7}
 8006ba4:	4770      	bx	lr

08006ba6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b084      	sub	sp, #16
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	7c1b      	ldrb	r3, [r3, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d115      	bne.n	8006bea <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	2181      	movs	r1, #129	; 0x81
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f001 fe2f 	bl	800882a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006bd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	2101      	movs	r1, #1
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f001 fe25 	bl	800882a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8006be8:	e012      	b.n	8006c10 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006bea:	2340      	movs	r3, #64	; 0x40
 8006bec:	2202      	movs	r2, #2
 8006bee:	2181      	movs	r1, #129	; 0x81
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f001 fe1a 	bl	800882a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006bfc:	2340      	movs	r3, #64	; 0x40
 8006bfe:	2202      	movs	r2, #2
 8006c00:	2101      	movs	r1, #1
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f001 fe11 	bl	800882a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c10:	2308      	movs	r3, #8
 8006c12:	2203      	movs	r2, #3
 8006c14:	2182      	movs	r1, #130	; 0x82
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f001 fe07 	bl	800882a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006c22:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c26:	f001 ff27 	bl	8008a78 <USBD_static_malloc>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d102      	bne.n	8006c42 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	73fb      	strb	r3, [r7, #15]
 8006c40:	e026      	b.n	8006c90 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c48:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	7c1b      	ldrb	r3, [r3, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d109      	bne.n	8006c80 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c76:	2101      	movs	r1, #1
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f001 fec7 	bl	8008a0c <USBD_LL_PrepareReceive>
 8006c7e:	e007      	b.n	8006c90 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c86:	2340      	movs	r3, #64	; 0x40
 8006c88:	2101      	movs	r1, #1
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f001 febe 	bl	8008a0c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b084      	sub	sp, #16
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006caa:	2181      	movs	r1, #129	; 0x81
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 fde2 	bl	8008876 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006cb8:	2101      	movs	r1, #1
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f001 fddb 	bl	8008876 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006cc8:	2182      	movs	r1, #130	; 0x82
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f001 fdd3 	bl	8008876 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00e      	beq.n	8006cfe <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f001 fecd 	bl	8008a90 <USBD_static_free>
    pdev->pClassData = NULL;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d18:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006d22:	2300      	movs	r3, #0
 8006d24:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d039      	beq.n	8006da6 <USBD_CDC_Setup+0x9e>
 8006d32:	2b20      	cmp	r3, #32
 8006d34:	d17f      	bne.n	8006e36 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	88db      	ldrh	r3, [r3, #6]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d029      	beq.n	8006d92 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	b25b      	sxtb	r3, r3
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	da11      	bge.n	8006d6c <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	683a      	ldr	r2, [r7, #0]
 8006d52:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006d54:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	88d2      	ldrh	r2, [r2, #6]
 8006d5a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d5c:	6939      	ldr	r1, [r7, #16]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	88db      	ldrh	r3, [r3, #6]
 8006d62:	461a      	mov	r2, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f001 f994 	bl	8008092 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006d6a:	e06b      	b.n	8006e44 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	785a      	ldrb	r2, [r3, #1]
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	88db      	ldrh	r3, [r3, #6]
 8006d7a:	b2da      	uxtb	r2, r3
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d82:	6939      	ldr	r1, [r7, #16]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	88db      	ldrh	r3, [r3, #6]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f001 f9af 	bl	80080ee <USBD_CtlPrepareRx>
    break;
 8006d90:	e058      	b.n	8006e44 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	7850      	ldrb	r0, [r2, #1]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	6839      	ldr	r1, [r7, #0]
 8006da2:	4798      	blx	r3
    break;
 8006da4:	e04e      	b.n	8006e44 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	785b      	ldrb	r3, [r3, #1]
 8006daa:	2b0b      	cmp	r3, #11
 8006dac:	d02e      	beq.n	8006e0c <USBD_CDC_Setup+0x104>
 8006dae:	2b0b      	cmp	r3, #11
 8006db0:	dc38      	bgt.n	8006e24 <USBD_CDC_Setup+0x11c>
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <USBD_CDC_Setup+0xb4>
 8006db6:	2b0a      	cmp	r3, #10
 8006db8:	d014      	beq.n	8006de4 <USBD_CDC_Setup+0xdc>
 8006dba:	e033      	b.n	8006e24 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	d107      	bne.n	8006dd6 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006dc6:	f107 030c 	add.w	r3, r7, #12
 8006dca:	2202      	movs	r2, #2
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f001 f95f 	bl	8008092 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006dd4:	e02e      	b.n	8006e34 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f001 f8f0 	bl	8007fbe <USBD_CtlError>
			  ret = USBD_FAIL;
 8006dde:	2302      	movs	r3, #2
 8006de0:	75fb      	strb	r3, [r7, #23]
      break;
 8006de2:	e027      	b.n	8006e34 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d107      	bne.n	8006dfe <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006dee:	f107 030f 	add.w	r3, r7, #15
 8006df2:	2201      	movs	r2, #1
 8006df4:	4619      	mov	r1, r3
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f001 f94b 	bl	8008092 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006dfc:	e01a      	b.n	8006e34 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f001 f8dc 	bl	8007fbe <USBD_CtlError>
			  ret = USBD_FAIL;
 8006e06:	2302      	movs	r3, #2
 8006e08:	75fb      	strb	r3, [r7, #23]
      break;
 8006e0a:	e013      	b.n	8006e34 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d00d      	beq.n	8006e32 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 f8d0 	bl	8007fbe <USBD_CtlError>
			  ret = USBD_FAIL;
 8006e1e:	2302      	movs	r3, #2
 8006e20:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006e22:	e006      	b.n	8006e32 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f001 f8c9 	bl	8007fbe <USBD_CtlError>
      ret = USBD_FAIL;
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e30:	e000      	b.n	8006e34 <USBD_CDC_Setup+0x12c>
      break;
 8006e32:	bf00      	nop
    }
    break;
 8006e34:	e006      	b.n	8006e44 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 f8c0 	bl	8007fbe <USBD_CtlError>
    ret = USBD_FAIL;
 8006e3e:	2302      	movs	r3, #2
 8006e40:	75fb      	strb	r3, [r7, #23]
    break;
 8006e42:	bf00      	nop
  }

  return ret;
 8006e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b084      	sub	sp, #16
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	460b      	mov	r3, r1
 8006e58:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006e60:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006e68:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d03a      	beq.n	8006eea <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006e74:	78fa      	ldrb	r2, [r7, #3]
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	440b      	add	r3, r1
 8006e82:	331c      	adds	r3, #28
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d029      	beq.n	8006ede <USBD_CDC_DataIn+0x90>
 8006e8a:	78fa      	ldrb	r2, [r7, #3]
 8006e8c:	6879      	ldr	r1, [r7, #4]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	440b      	add	r3, r1
 8006e98:	331c      	adds	r3, #28
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	78f9      	ldrb	r1, [r7, #3]
 8006e9e:	68b8      	ldr	r0, [r7, #8]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	440b      	add	r3, r1
 8006ea6:	00db      	lsls	r3, r3, #3
 8006ea8:	4403      	add	r3, r0
 8006eaa:	3338      	adds	r3, #56	; 0x38
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	fbb2 f1f3 	udiv	r1, r2, r3
 8006eb2:	fb01 f303 	mul.w	r3, r1, r3
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d110      	bne.n	8006ede <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006ebc:	78fa      	ldrb	r2, [r7, #3]
 8006ebe:	6879      	ldr	r1, [r7, #4]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	440b      	add	r3, r1
 8006eca:	331c      	adds	r3, #28
 8006ecc:	2200      	movs	r2, #0
 8006ece:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006ed0:	78f9      	ldrb	r1, [r7, #3]
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f001 fd75 	bl	80089c6 <USBD_LL_Transmit>
 8006edc:	e003      	b.n	8006ee6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	e000      	b.n	8006eec <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006eea:	2302      	movs	r3, #2
  }
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f06:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006f08:	78fb      	ldrb	r3, [r7, #3]
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f001 fda0 	bl	8008a52 <USBD_LL_GetRxDataSize>
 8006f12:	4602      	mov	r2, r0
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00d      	beq.n	8006f40 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f38:	4611      	mov	r1, r2
 8006f3a:	4798      	blx	r3

    return USBD_OK;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	e000      	b.n	8006f42 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006f40:	2302      	movs	r3, #2
  }
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b084      	sub	sp, #16
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f58:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d015      	beq.n	8006f90 <USBD_CDC_EP0_RxReady+0x46>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006f6a:	2bff      	cmp	r3, #255	; 0xff
 8006f6c:	d010      	beq.n	8006f90 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006f7c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f84:	b292      	uxth	r2, r2
 8006f86:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	22ff      	movs	r2, #255	; 0xff
 8006f8c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
	...

08006f9c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2243      	movs	r2, #67	; 0x43
 8006fa8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006faa:	4b03      	ldr	r3, [pc, #12]	; (8006fb8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bc80      	pop	{r7}
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	20000094 	.word	0x20000094

08006fbc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2243      	movs	r2, #67	; 0x43
 8006fc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006fca:	4b03      	ldr	r3, [pc, #12]	; (8006fd8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bc80      	pop	{r7}
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	20000050 	.word	0x20000050

08006fdc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2243      	movs	r2, #67	; 0x43
 8006fe8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006fea:	4b03      	ldr	r3, [pc, #12]	; (8006ff8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bc80      	pop	{r7}
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	200000d8 	.word	0x200000d8

08006ffc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	220a      	movs	r2, #10
 8007008:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800700a:	4b03      	ldr	r3, [pc, #12]	; (8007018 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800700c:	4618      	mov	r0, r3
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	bc80      	pop	{r7}
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	2000000c 	.word	0x2000000c

0800701c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007026:	2302      	movs	r3, #2
 8007028:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d005      	beq.n	800703c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800703c:	7bfb      	ldrb	r3, [r7, #15]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	bc80      	pop	{r7}
 8007046:	4770      	bx	lr

08007048 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8007048:	b480      	push	{r7}
 800704a:	b087      	sub	sp, #28
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	4613      	mov	r3, r2
 8007054:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800705c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007066:	88fa      	ldrh	r2, [r7, #6]
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	371c      	adds	r7, #28
 8007074:	46bd      	mov	sp, r7
 8007076:	bc80      	pop	{r7}
 8007078:	4770      	bx	lr

0800707a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800707a:	b480      	push	{r7}
 800707c:	b085      	sub	sp, #20
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800708a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	bc80      	pop	{r7}
 800709e:	4770      	bx	lr

080070a0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80070ae:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d01c      	beq.n	80070f4 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d115      	bne.n	80070f0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	2181      	movs	r1, #129	; 0x81
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f001 fc6d 	bl	80089c6 <USBD_LL_Transmit>

      return USBD_OK;
 80070ec:	2300      	movs	r3, #0
 80070ee:	e002      	b.n	80070f6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e000      	b.n	80070f6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80070f4:	2302      	movs	r3, #2
  }
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b084      	sub	sp, #16
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800710c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007114:	2b00      	cmp	r3, #0
 8007116:	d017      	beq.n	8007148 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	7c1b      	ldrb	r3, [r3, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d109      	bne.n	8007134 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800712a:	2101      	movs	r1, #1
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f001 fc6d 	bl	8008a0c <USBD_LL_PrepareReceive>
 8007132:	e007      	b.n	8007144 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800713a:	2340      	movs	r3, #64	; 0x40
 800713c:	2101      	movs	r1, #1
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f001 fc64 	bl	8008a0c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007144:	2300      	movs	r3, #0
 8007146:	e000      	b.n	800714a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007148:	2302      	movs	r3, #2
  }
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b084      	sub	sp, #16
 8007156:	af00      	add	r7, sp, #0
 8007158:	60f8      	str	r0, [r7, #12]
 800715a:	60b9      	str	r1, [r7, #8]
 800715c:	4613      	mov	r3, r2
 800715e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007166:	2302      	movs	r3, #2
 8007168:	e01a      	b.n	80071a0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d003      	beq.n	800718a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	79fa      	ldrb	r2, [r7, #7]
 8007196:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f001 fad1 	bl	8008740 <USBD_LL_Init>

  return USBD_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d006      	beq.n	80071ca <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	73fb      	strb	r3, [r7, #15]
 80071c8:	e001      	b.n	80071ce <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80071ca:	2302      	movs	r3, #2
 80071cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bc80      	pop	{r7}
 80071d8:	4770      	bx	lr

080071da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b082      	sub	sp, #8
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f001 fb06 	bl	80087f4 <USBD_LL_Start>

  return USBD_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3708      	adds	r7, #8
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b083      	sub	sp, #12
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	bc80      	pop	{r7}
 8007204:	4770      	bx	lr

08007206 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b084      	sub	sp, #16
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	460b      	mov	r3, r1
 8007210:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007212:	2302      	movs	r3, #2
 8007214:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00c      	beq.n	800723a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	78fa      	ldrb	r2, [r7, #3]
 800722a:	4611      	mov	r1, r2
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	4798      	blx	r3
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800723a:	7bfb      	ldrb	r3, [r7, #15]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	460b      	mov	r3, r1
 800724e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	78fa      	ldrb	r2, [r7, #3]
 800725a:	4611      	mov	r1, r2
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	4798      	blx	r3
  return USBD_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b082      	sub	sp, #8
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800727a:	6839      	ldr	r1, [r7, #0]
 800727c:	4618      	mov	r0, r3
 800727e:	f000 fe62 	bl	8007f46 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8007290:	461a      	mov	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800729e:	f003 031f 	and.w	r3, r3, #31
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d016      	beq.n	80072d4 <USBD_LL_SetupStage+0x6a>
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d81c      	bhi.n	80072e4 <USBD_LL_SetupStage+0x7a>
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d002      	beq.n	80072b4 <USBD_LL_SetupStage+0x4a>
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d008      	beq.n	80072c4 <USBD_LL_SetupStage+0x5a>
 80072b2:	e017      	b.n	80072e4 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f9c5 	bl	800764c <USBD_StdDevReq>
    break;
 80072c2:	e01a      	b.n	80072fa <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80072ca:	4619      	mov	r1, r3
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fa27 	bl	8007720 <USBD_StdItfReq>
    break;
 80072d2:	e012      	b.n	80072fa <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fa67 	bl	80077b0 <USBD_StdEPReq>
    break;
 80072e2:	e00a      	b.n	80072fa <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80072ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	4619      	mov	r1, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f001 fade 	bl	80088b4 <USBD_LL_StallEP>
    break;
 80072f8:	bf00      	nop
  }

  return USBD_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	460b      	mov	r3, r1
 800730e:	607a      	str	r2, [r7, #4]
 8007310:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007312:	7afb      	ldrb	r3, [r7, #11]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d14b      	bne.n	80073b0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800731e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007326:	2b03      	cmp	r3, #3
 8007328:	d134      	bne.n	8007394 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	68da      	ldr	r2, [r3, #12]
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	429a      	cmp	r2, r3
 8007334:	d919      	bls.n	800736a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	68da      	ldr	r2, [r3, #12]
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	1ad2      	subs	r2, r2, r3
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	68da      	ldr	r2, [r3, #12]
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800734c:	429a      	cmp	r2, r3
 800734e:	d203      	bcs.n	8007358 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8007354:	b29b      	uxth	r3, r3
 8007356:	e002      	b.n	800735e <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800735c:	b29b      	uxth	r3, r3
 800735e:	461a      	mov	r2, r3
 8007360:	6879      	ldr	r1, [r7, #4]
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f000 fee1 	bl	800812a <USBD_CtlContinueRx>
 8007368:	e038      	b.n	80073dc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00a      	beq.n	800738c <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800737c:	2b03      	cmp	r3, #3
 800737e:	d105      	bne.n	800738c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 fede 	bl	800814e <USBD_CtlSendStatus>
 8007392:	e023      	b.n	80073dc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800739a:	2b05      	cmp	r3, #5
 800739c:	d11e      	bne.n	80073dc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80073a6:	2100      	movs	r1, #0
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f001 fa83 	bl	80088b4 <USBD_LL_StallEP>
 80073ae:	e015      	b.n	80073dc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00d      	beq.n	80073d8 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d108      	bne.n	80073d8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	7afa      	ldrb	r2, [r7, #11]
 80073d0:	4611      	mov	r1, r2
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	4798      	blx	r3
 80073d6:	e001      	b.n	80073dc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80073d8:	2302      	movs	r3, #2
 80073da:	e000      	b.n	80073de <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3718      	adds	r7, #24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b086      	sub	sp, #24
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	60f8      	str	r0, [r7, #12]
 80073ee:	460b      	mov	r3, r1
 80073f0:	607a      	str	r2, [r7, #4]
 80073f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80073f4:	7afb      	ldrb	r3, [r7, #11]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d17f      	bne.n	80074fa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	3314      	adds	r3, #20
 80073fe:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007406:	2b02      	cmp	r3, #2
 8007408:	d15c      	bne.n	80074c4 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	68da      	ldr	r2, [r3, #12]
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	429a      	cmp	r2, r3
 8007414:	d915      	bls.n	8007442 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	1ad2      	subs	r2, r2, r3
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	b29b      	uxth	r3, r3
 800742a:	461a      	mov	r2, r3
 800742c:	6879      	ldr	r1, [r7, #4]
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 fe4b 	bl	80080ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007434:	2300      	movs	r3, #0
 8007436:	2200      	movs	r2, #0
 8007438:	2100      	movs	r1, #0
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f001 fae6 	bl	8008a0c <USBD_LL_PrepareReceive>
 8007440:	e04e      	b.n	80074e0 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	6912      	ldr	r2, [r2, #16]
 800744a:	fbb3 f1f2 	udiv	r1, r3, r2
 800744e:	fb01 f202 	mul.w	r2, r1, r2
 8007452:	1a9b      	subs	r3, r3, r2
 8007454:	2b00      	cmp	r3, #0
 8007456:	d11c      	bne.n	8007492 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	689a      	ldr	r2, [r3, #8]
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007460:	429a      	cmp	r2, r3
 8007462:	d316      	bcc.n	8007492 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	689a      	ldr	r2, [r3, #8]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800746e:	429a      	cmp	r2, r3
 8007470:	d20f      	bcs.n	8007492 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007472:	2200      	movs	r2, #0
 8007474:	2100      	movs	r1, #0
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f000 fe27 	bl	80080ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007484:	2300      	movs	r3, #0
 8007486:	2200      	movs	r2, #0
 8007488:	2100      	movs	r1, #0
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f001 fabe 	bl	8008a0c <USBD_LL_PrepareReceive>
 8007490:	e026      	b.n	80074e0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00a      	beq.n	80074b4 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80074a4:	2b03      	cmp	r3, #3
 80074a6:	d105      	bne.n	80074b4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80074b4:	2180      	movs	r1, #128	; 0x80
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f001 f9fc 	bl	80088b4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 fe59 	bl	8008174 <USBD_CtlReceiveStatus>
 80074c2:	e00d      	b.n	80074e0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80074ca:	2b04      	cmp	r3, #4
 80074cc:	d004      	beq.n	80074d8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d103      	bne.n	80074e0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80074d8:	2180      	movs	r1, #128	; 0x80
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f001 f9ea 	bl	80088b4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d11d      	bne.n	8007526 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f7ff fe81 	bl	80071f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80074f8:	e015      	b.n	8007526 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00d      	beq.n	8007522 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800750c:	2b03      	cmp	r3, #3
 800750e:	d108      	bne.n	8007522 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	7afa      	ldrb	r2, [r7, #11]
 800751a:	4611      	mov	r1, r2
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	4798      	blx	r3
 8007520:	e001      	b.n	8007526 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007522:	2302      	movs	r3, #2
 8007524:	e000      	b.n	8007528 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3718      	adds	r7, #24
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007538:	2340      	movs	r3, #64	; 0x40
 800753a:	2200      	movs	r2, #0
 800753c:	2100      	movs	r1, #0
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f001 f973 	bl	800882a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2240      	movs	r2, #64	; 0x40
 8007550:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007554:	2340      	movs	r3, #64	; 0x40
 8007556:	2200      	movs	r2, #0
 8007558:	2180      	movs	r1, #128	; 0x80
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f001 f965 	bl	800882a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2240      	movs	r2, #64	; 0x40
 800756a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007590:	2b00      	cmp	r3, #0
 8007592:	d009      	beq.n	80075a8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	6852      	ldr	r2, [r2, #4]
 80075a0:	b2d2      	uxtb	r2, r2
 80075a2:	4611      	mov	r1, r2
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	4798      	blx	r3
  }

  return USBD_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	460b      	mov	r3, r1
 80075bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	78fa      	ldrb	r2, [r7, #3]
 80075c2:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bc80      	pop	{r7}
 80075ce:	4770      	bx	lr

080075d0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2204      	movs	r2, #4
 80075e8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bc80      	pop	{r7}
 80075f6:	4770      	bx	lr

080075f8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	bc80      	pop	{r7}
 8007616:	4770      	bx	lr

08007618 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007626:	2b03      	cmp	r3, #3
 8007628:	d10b      	bne.n	8007642 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d005      	beq.n	8007642 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007662:	2b40      	cmp	r3, #64	; 0x40
 8007664:	d005      	beq.n	8007672 <USBD_StdDevReq+0x26>
 8007666:	2b40      	cmp	r3, #64	; 0x40
 8007668:	d84f      	bhi.n	800770a <USBD_StdDevReq+0xbe>
 800766a:	2b00      	cmp	r3, #0
 800766c:	d009      	beq.n	8007682 <USBD_StdDevReq+0x36>
 800766e:	2b20      	cmp	r3, #32
 8007670:	d14b      	bne.n	800770a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	4798      	blx	r3
    break;
 8007680:	e048      	b.n	8007714 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	785b      	ldrb	r3, [r3, #1]
 8007686:	2b09      	cmp	r3, #9
 8007688:	d839      	bhi.n	80076fe <USBD_StdDevReq+0xb2>
 800768a:	a201      	add	r2, pc, #4	; (adr r2, 8007690 <USBD_StdDevReq+0x44>)
 800768c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007690:	080076e1 	.word	0x080076e1
 8007694:	080076f5 	.word	0x080076f5
 8007698:	080076ff 	.word	0x080076ff
 800769c:	080076eb 	.word	0x080076eb
 80076a0:	080076ff 	.word	0x080076ff
 80076a4:	080076c3 	.word	0x080076c3
 80076a8:	080076b9 	.word	0x080076b9
 80076ac:	080076ff 	.word	0x080076ff
 80076b0:	080076d7 	.word	0x080076d7
 80076b4:	080076cd 	.word	0x080076cd
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f9da 	bl	8007a74 <USBD_GetDescriptor>
      break;
 80076c0:	e022      	b.n	8007708 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80076c2:	6839      	ldr	r1, [r7, #0]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 facf 	bl	8007c68 <USBD_SetAddress>
      break;
 80076ca:	e01d      	b.n	8007708 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fb0e 	bl	8007cf0 <USBD_SetConfig>
      break;
 80076d4:	e018      	b.n	8007708 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fb97 	bl	8007e0c <USBD_GetConfig>
      break;
 80076de:	e013      	b.n	8007708 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fbc7 	bl	8007e76 <USBD_GetStatus>
      break;
 80076e8:	e00e      	b.n	8007708 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80076ea:	6839      	ldr	r1, [r7, #0]
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fbf5 	bl	8007edc <USBD_SetFeature>
      break;
 80076f2:	e009      	b.n	8007708 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fc04 	bl	8007f04 <USBD_ClrFeature>
      break;
 80076fc:	e004      	b.n	8007708 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fc5c 	bl	8007fbe <USBD_CtlError>
      break;
 8007706:	bf00      	nop
    }
    break;
 8007708:	e004      	b.n	8007714 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800770a:	6839      	ldr	r1, [r7, #0]
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fc56 	bl	8007fbe <USBD_CtlError>
    break;
 8007712:	bf00      	nop
  }

  return ret;
 8007714:	7bfb      	ldrb	r3, [r7, #15]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop

08007720 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007736:	2b40      	cmp	r3, #64	; 0x40
 8007738:	d005      	beq.n	8007746 <USBD_StdItfReq+0x26>
 800773a:	2b40      	cmp	r3, #64	; 0x40
 800773c:	d82e      	bhi.n	800779c <USBD_StdItfReq+0x7c>
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <USBD_StdItfReq+0x26>
 8007742:	2b20      	cmp	r3, #32
 8007744:	d12a      	bne.n	800779c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800774c:	3b01      	subs	r3, #1
 800774e:	2b02      	cmp	r3, #2
 8007750:	d81d      	bhi.n	800778e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	889b      	ldrh	r3, [r3, #4]
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b01      	cmp	r3, #1
 800775a:	d813      	bhi.n	8007784 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	4798      	blx	r3
 800776a:	4603      	mov	r3, r0
 800776c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	88db      	ldrh	r3, [r3, #6]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d110      	bne.n	8007798 <USBD_StdItfReq+0x78>
 8007776:	7bfb      	ldrb	r3, [r7, #15]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10d      	bne.n	8007798 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fce6 	bl	800814e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007782:	e009      	b.n	8007798 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8007784:	6839      	ldr	r1, [r7, #0]
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fc19 	bl	8007fbe <USBD_CtlError>
      break;
 800778c:	e004      	b.n	8007798 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fc14 	bl	8007fbe <USBD_CtlError>
      break;
 8007796:	e000      	b.n	800779a <USBD_StdItfReq+0x7a>
      break;
 8007798:	bf00      	nop
    }
    break;
 800779a:	e004      	b.n	80077a6 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fc0d 	bl	8007fbe <USBD_CtlError>
    break;
 80077a4:	bf00      	nop
  }

  return USBD_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	889b      	ldrh	r3, [r3, #4]
 80077c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077cc:	2b40      	cmp	r3, #64	; 0x40
 80077ce:	d007      	beq.n	80077e0 <USBD_StdEPReq+0x30>
 80077d0:	2b40      	cmp	r3, #64	; 0x40
 80077d2:	f200 8144 	bhi.w	8007a5e <USBD_StdEPReq+0x2ae>
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00a      	beq.n	80077f0 <USBD_StdEPReq+0x40>
 80077da:	2b20      	cmp	r3, #32
 80077dc:	f040 813f 	bne.w	8007a5e <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	4798      	blx	r3
    break;
 80077ee:	e13b      	b.n	8007a68 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077f8:	2b20      	cmp	r3, #32
 80077fa:	d10a      	bne.n	8007812 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	4798      	blx	r3
 800780a:	4603      	mov	r3, r0
 800780c:	73fb      	strb	r3, [r7, #15]

      return ret;
 800780e:	7bfb      	ldrb	r3, [r7, #15]
 8007810:	e12b      	b.n	8007a6a <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	785b      	ldrb	r3, [r3, #1]
 8007816:	2b03      	cmp	r3, #3
 8007818:	d007      	beq.n	800782a <USBD_StdEPReq+0x7a>
 800781a:	2b03      	cmp	r3, #3
 800781c:	f300 8119 	bgt.w	8007a52 <USBD_StdEPReq+0x2a2>
 8007820:	2b00      	cmp	r3, #0
 8007822:	d072      	beq.n	800790a <USBD_StdEPReq+0x15a>
 8007824:	2b01      	cmp	r3, #1
 8007826:	d03a      	beq.n	800789e <USBD_StdEPReq+0xee>
 8007828:	e113      	b.n	8007a52 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007830:	2b02      	cmp	r3, #2
 8007832:	d002      	beq.n	800783a <USBD_StdEPReq+0x8a>
 8007834:	2b03      	cmp	r3, #3
 8007836:	d015      	beq.n	8007864 <USBD_StdEPReq+0xb4>
 8007838:	e02b      	b.n	8007892 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800783a:	7bbb      	ldrb	r3, [r7, #14]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00c      	beq.n	800785a <USBD_StdEPReq+0xaa>
 8007840:	7bbb      	ldrb	r3, [r7, #14]
 8007842:	2b80      	cmp	r3, #128	; 0x80
 8007844:	d009      	beq.n	800785a <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	4619      	mov	r1, r3
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f001 f832 	bl	80088b4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007850:	2180      	movs	r1, #128	; 0x80
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f001 f82e 	bl	80088b4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007858:	e020      	b.n	800789c <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fbae 	bl	8007fbe <USBD_CtlError>
        break;
 8007862:	e01b      	b.n	800789c <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	885b      	ldrh	r3, [r3, #2]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10e      	bne.n	800788a <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800786c:	7bbb      	ldrb	r3, [r7, #14]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00b      	beq.n	800788a <USBD_StdEPReq+0xda>
 8007872:	7bbb      	ldrb	r3, [r7, #14]
 8007874:	2b80      	cmp	r3, #128	; 0x80
 8007876:	d008      	beq.n	800788a <USBD_StdEPReq+0xda>
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	88db      	ldrh	r3, [r3, #6]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d104      	bne.n	800788a <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f001 f815 	bl	80088b4 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fc5f 	bl	800814e <USBD_CtlSendStatus>

        break;
 8007890:	e004      	b.n	800789c <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fb92 	bl	8007fbe <USBD_CtlError>
        break;
 800789a:	bf00      	nop
      }
      break;
 800789c:	e0de      	b.n	8007a5c <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d002      	beq.n	80078ae <USBD_StdEPReq+0xfe>
 80078a8:	2b03      	cmp	r3, #3
 80078aa:	d015      	beq.n	80078d8 <USBD_StdEPReq+0x128>
 80078ac:	e026      	b.n	80078fc <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00c      	beq.n	80078ce <USBD_StdEPReq+0x11e>
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	2b80      	cmp	r3, #128	; 0x80
 80078b8:	d009      	beq.n	80078ce <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fff8 	bl	80088b4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80078c4:	2180      	movs	r1, #128	; 0x80
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fff4 	bl	80088b4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80078cc:	e01c      	b.n	8007908 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fb74 	bl	8007fbe <USBD_CtlError>
        break;
 80078d6:	e017      	b.n	8007908 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	885b      	ldrh	r3, [r3, #2]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d112      	bne.n	8007906 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80078e0:	7bbb      	ldrb	r3, [r7, #14]
 80078e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d004      	beq.n	80078f4 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80078ea:	7bbb      	ldrb	r3, [r7, #14]
 80078ec:	4619      	mov	r1, r3
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 ffff 	bl	80088f2 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fc2a 	bl	800814e <USBD_CtlSendStatus>
        }
        break;
 80078fa:	e004      	b.n	8007906 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fb5d 	bl	8007fbe <USBD_CtlError>
        break;
 8007904:	e000      	b.n	8007908 <USBD_StdEPReq+0x158>
        break;
 8007906:	bf00      	nop
      }
      break;
 8007908:	e0a8      	b.n	8007a5c <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007910:	2b02      	cmp	r3, #2
 8007912:	d002      	beq.n	800791a <USBD_StdEPReq+0x16a>
 8007914:	2b03      	cmp	r3, #3
 8007916:	d031      	beq.n	800797c <USBD_StdEPReq+0x1cc>
 8007918:	e095      	b.n	8007a46 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800791a:	7bbb      	ldrb	r3, [r7, #14]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d007      	beq.n	8007930 <USBD_StdEPReq+0x180>
 8007920:	7bbb      	ldrb	r3, [r7, #14]
 8007922:	2b80      	cmp	r3, #128	; 0x80
 8007924:	d004      	beq.n	8007930 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fb48 	bl	8007fbe <USBD_CtlError>
          break;
 800792e:	e08f      	b.n	8007a50 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007930:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007934:	2b00      	cmp	r3, #0
 8007936:	da0b      	bge.n	8007950 <USBD_StdEPReq+0x1a0>
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800793e:	4613      	mov	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	3310      	adds	r3, #16
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	4413      	add	r3, r2
 800794c:	3304      	adds	r3, #4
 800794e:	e00a      	b.n	8007966 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007956:	4613      	mov	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	4413      	add	r3, r2
 8007966:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	2200      	movs	r2, #0
 800796c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2202      	movs	r2, #2
 8007972:	4619      	mov	r1, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fb8c 	bl	8008092 <USBD_CtlSendData>
          break;
 800797a:	e069      	b.n	8007a50 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800797c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007980:	2b00      	cmp	r3, #0
 8007982:	da11      	bge.n	80079a8 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007984:	7bbb      	ldrb	r3, [r7, #14]
 8007986:	f003 020f 	and.w	r2, r3, #15
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	4613      	mov	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	440b      	add	r3, r1
 8007996:	3318      	adds	r3, #24
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d117      	bne.n	80079ce <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fb0c 	bl	8007fbe <USBD_CtlError>
            break;
 80079a6:	e053      	b.n	8007a50 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079a8:	7bbb      	ldrb	r3, [r7, #14]
 80079aa:	f003 020f 	and.w	r2, r3, #15
 80079ae:	6879      	ldr	r1, [r7, #4]
 80079b0:	4613      	mov	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	440b      	add	r3, r1
 80079ba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d104      	bne.n	80079ce <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 faf9 	bl	8007fbe <USBD_CtlError>
            break;
 80079cc:	e040      	b.n	8007a50 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80079ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	da0b      	bge.n	80079ee <USBD_StdEPReq+0x23e>
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
 80079d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079dc:	4613      	mov	r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4413      	add	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	3310      	adds	r3, #16
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	4413      	add	r3, r2
 80079ea:	3304      	adds	r3, #4
 80079ec:	e00a      	b.n	8007a04 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 80079ee:	7bbb      	ldrb	r3, [r7, #14]
 80079f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80079f4:	4613      	mov	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	4413      	add	r3, r2
 8007a04:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a06:	7bbb      	ldrb	r3, [r7, #14]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <USBD_StdEPReq+0x262>
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	2b80      	cmp	r3, #128	; 0x80
 8007a10:	d103      	bne.n	8007a1a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	2200      	movs	r2, #0
 8007a16:	601a      	str	r2, [r3, #0]
 8007a18:	e00e      	b.n	8007a38 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 ff86 	bl	8008930 <USBD_LL_IsStallEP>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d003      	beq.n	8007a32 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	601a      	str	r2, [r3, #0]
 8007a30:	e002      	b.n	8007a38 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	2200      	movs	r2, #0
 8007a36:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fb27 	bl	8008092 <USBD_CtlSendData>
          break;
 8007a44:	e004      	b.n	8007a50 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 fab8 	bl	8007fbe <USBD_CtlError>
        break;
 8007a4e:	bf00      	nop
      }
      break;
 8007a50:	e004      	b.n	8007a5c <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fab2 	bl	8007fbe <USBD_CtlError>
      break;
 8007a5a:	bf00      	nop
    }
    break;
 8007a5c:	e004      	b.n	8007a68 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8007a5e:	6839      	ldr	r1, [r7, #0]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 faac 	bl	8007fbe <USBD_CtlError>
    break;
 8007a66:	bf00      	nop
  }

  return ret;
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
	...

08007a74 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	885b      	ldrh	r3, [r3, #2]
 8007a82:	0a1b      	lsrs	r3, r3, #8
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	3b01      	subs	r3, #1
 8007a88:	2b06      	cmp	r3, #6
 8007a8a:	f200 80c9 	bhi.w	8007c20 <USBD_GetDescriptor+0x1ac>
 8007a8e:	a201      	add	r2, pc, #4	; (adr r2, 8007a94 <USBD_GetDescriptor+0x20>)
 8007a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a94:	08007ab1 	.word	0x08007ab1
 8007a98:	08007ac9 	.word	0x08007ac9
 8007a9c:	08007b09 	.word	0x08007b09
 8007aa0:	08007c21 	.word	0x08007c21
 8007aa4:	08007c21 	.word	0x08007c21
 8007aa8:	08007bcd 	.word	0x08007bcd
 8007aac:	08007bf3 	.word	0x08007bf3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	7c12      	ldrb	r2, [r2, #16]
 8007abc:	f107 010a 	add.w	r1, r7, #10
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	4798      	blx	r3
 8007ac4:	60f8      	str	r0, [r7, #12]
    break;
 8007ac6:	e0b0      	b.n	8007c2a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	7c1b      	ldrb	r3, [r3, #16]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10d      	bne.n	8007aec <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad8:	f107 020a 	add.w	r2, r7, #10
 8007adc:	4610      	mov	r0, r2
 8007ade:	4798      	blx	r3
 8007ae0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007aea:	e09e      	b.n	8007c2a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	f107 020a 	add.w	r2, r7, #10
 8007af8:	4610      	mov	r0, r2
 8007afa:	4798      	blx	r3
 8007afc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	3301      	adds	r3, #1
 8007b02:	2202      	movs	r2, #2
 8007b04:	701a      	strb	r2, [r3, #0]
    break;
 8007b06:	e090      	b.n	8007c2a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	885b      	ldrh	r3, [r3, #2]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b05      	cmp	r3, #5
 8007b10:	d856      	bhi.n	8007bc0 <USBD_GetDescriptor+0x14c>
 8007b12:	a201      	add	r2, pc, #4	; (adr r2, 8007b18 <USBD_GetDescriptor+0xa4>)
 8007b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b18:	08007b31 	.word	0x08007b31
 8007b1c:	08007b49 	.word	0x08007b49
 8007b20:	08007b61 	.word	0x08007b61
 8007b24:	08007b79 	.word	0x08007b79
 8007b28:	08007b91 	.word	0x08007b91
 8007b2c:	08007ba9 	.word	0x08007ba9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	7c12      	ldrb	r2, [r2, #16]
 8007b3c:	f107 010a 	add.w	r1, r7, #10
 8007b40:	4610      	mov	r0, r2
 8007b42:	4798      	blx	r3
 8007b44:	60f8      	str	r0, [r7, #12]
      break;
 8007b46:	e040      	b.n	8007bca <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	7c12      	ldrb	r2, [r2, #16]
 8007b54:	f107 010a 	add.w	r1, r7, #10
 8007b58:	4610      	mov	r0, r2
 8007b5a:	4798      	blx	r3
 8007b5c:	60f8      	str	r0, [r7, #12]
      break;
 8007b5e:	e034      	b.n	8007bca <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	7c12      	ldrb	r2, [r2, #16]
 8007b6c:	f107 010a 	add.w	r1, r7, #10
 8007b70:	4610      	mov	r0, r2
 8007b72:	4798      	blx	r3
 8007b74:	60f8      	str	r0, [r7, #12]
      break;
 8007b76:	e028      	b.n	8007bca <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	7c12      	ldrb	r2, [r2, #16]
 8007b84:	f107 010a 	add.w	r1, r7, #10
 8007b88:	4610      	mov	r0, r2
 8007b8a:	4798      	blx	r3
 8007b8c:	60f8      	str	r0, [r7, #12]
      break;
 8007b8e:	e01c      	b.n	8007bca <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007b96:	695b      	ldr	r3, [r3, #20]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	7c12      	ldrb	r2, [r2, #16]
 8007b9c:	f107 010a 	add.w	r1, r7, #10
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	4798      	blx	r3
 8007ba4:	60f8      	str	r0, [r7, #12]
      break;
 8007ba6:	e010      	b.n	8007bca <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	7c12      	ldrb	r2, [r2, #16]
 8007bb4:	f107 010a 	add.w	r1, r7, #10
 8007bb8:	4610      	mov	r0, r2
 8007bba:	4798      	blx	r3
 8007bbc:	60f8      	str	r0, [r7, #12]
      break;
 8007bbe:	e004      	b.n	8007bca <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f9fb 	bl	8007fbe <USBD_CtlError>
      return;
 8007bc8:	e04b      	b.n	8007c62 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8007bca:	e02e      	b.n	8007c2a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	7c1b      	ldrb	r3, [r3, #16]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d109      	bne.n	8007be8 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bdc:	f107 020a 	add.w	r2, r7, #10
 8007be0:	4610      	mov	r0, r2
 8007be2:	4798      	blx	r3
 8007be4:	60f8      	str	r0, [r7, #12]
      break;
 8007be6:	e020      	b.n	8007c2a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f9e7 	bl	8007fbe <USBD_CtlError>
      return;
 8007bf0:	e037      	b.n	8007c62 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	7c1b      	ldrb	r3, [r3, #16]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10d      	bne.n	8007c16 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c02:	f107 020a 	add.w	r2, r7, #10
 8007c06:	4610      	mov	r0, r2
 8007c08:	4798      	blx	r3
 8007c0a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	2207      	movs	r2, #7
 8007c12:	701a      	strb	r2, [r3, #0]
      break;
 8007c14:	e009      	b.n	8007c2a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007c16:	6839      	ldr	r1, [r7, #0]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f9d0 	bl	8007fbe <USBD_CtlError>
      return;
 8007c1e:	e020      	b.n	8007c62 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007c20:	6839      	ldr	r1, [r7, #0]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f9cb 	bl	8007fbe <USBD_CtlError>
    return;
 8007c28:	e01b      	b.n	8007c62 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007c2a:	897b      	ldrh	r3, [r7, #10]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d011      	beq.n	8007c54 <USBD_GetDescriptor+0x1e0>
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	88db      	ldrh	r3, [r3, #6]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00d      	beq.n	8007c54 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	88da      	ldrh	r2, [r3, #6]
 8007c3c:	897b      	ldrh	r3, [r7, #10]
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	bf28      	it	cs
 8007c42:	4613      	movcs	r3, r2
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007c48:	897b      	ldrh	r3, [r7, #10]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	68f9      	ldr	r1, [r7, #12]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fa1f 	bl	8008092 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	88db      	ldrh	r3, [r3, #6]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d102      	bne.n	8007c62 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fa76 	bl	800814e <USBD_CtlSendStatus>
  }
}
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	889b      	ldrh	r3, [r3, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d130      	bne.n	8007cdc <USBD_SetAddress+0x74>
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	88db      	ldrh	r3, [r3, #6]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d12c      	bne.n	8007cdc <USBD_SetAddress+0x74>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	885b      	ldrh	r3, [r3, #2]
 8007c86:	2b7f      	cmp	r3, #127	; 0x7f
 8007c88:	d828      	bhi.n	8007cdc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	885b      	ldrh	r3, [r3, #2]
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c94:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007c9c:	2b03      	cmp	r3, #3
 8007c9e:	d104      	bne.n	8007caa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f98b 	bl	8007fbe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ca8:	e01d      	b.n	8007ce6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	7bfa      	ldrb	r2, [r7, #15]
 8007cae:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007cb2:	7bfb      	ldrb	r3, [r7, #15]
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fe66 	bl	8008988 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fa46 	bl	800814e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d004      	beq.n	8007cd2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cd0:	e009      	b.n	8007ce6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cda:	e004      	b.n	8007ce6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f96d 	bl	8007fbe <USBD_CtlError>
  }
}
 8007ce4:	bf00      	nop
 8007ce6:	bf00      	nop
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
	...

08007cf0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	885b      	ldrh	r3, [r3, #2]
 8007cfe:	b2da      	uxtb	r2, r3
 8007d00:	4b41      	ldr	r3, [pc, #260]	; (8007e08 <USBD_SetConfig+0x118>)
 8007d02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d04:	4b40      	ldr	r3, [pc, #256]	; (8007e08 <USBD_SetConfig+0x118>)
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d904      	bls.n	8007d16 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f955 	bl	8007fbe <USBD_CtlError>
 8007d14:	e075      	b.n	8007e02 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d002      	beq.n	8007d26 <USBD_SetConfig+0x36>
 8007d20:	2b03      	cmp	r3, #3
 8007d22:	d023      	beq.n	8007d6c <USBD_SetConfig+0x7c>
 8007d24:	e062      	b.n	8007dec <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007d26:	4b38      	ldr	r3, [pc, #224]	; (8007e08 <USBD_SetConfig+0x118>)
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d01a      	beq.n	8007d64 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007d2e:	4b36      	ldr	r3, [pc, #216]	; (8007e08 <USBD_SetConfig+0x118>)
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	461a      	mov	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2203      	movs	r2, #3
 8007d3c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d40:	4b31      	ldr	r3, [pc, #196]	; (8007e08 <USBD_SetConfig+0x118>)
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	4619      	mov	r1, r3
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7ff fa5d 	bl	8007206 <USBD_SetClassConfig>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d104      	bne.n	8007d5c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f932 	bl	8007fbe <USBD_CtlError>
          return;
 8007d5a:	e052      	b.n	8007e02 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f9f6 	bl	800814e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007d62:	e04e      	b.n	8007e02 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f9f2 	bl	800814e <USBD_CtlSendStatus>
      break;
 8007d6a:	e04a      	b.n	8007e02 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007d6c:	4b26      	ldr	r3, [pc, #152]	; (8007e08 <USBD_SetConfig+0x118>)
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d112      	bne.n	8007d9a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2202      	movs	r2, #2
 8007d78:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007d7c:	4b22      	ldr	r3, [pc, #136]	; (8007e08 <USBD_SetConfig+0x118>)
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	461a      	mov	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007d86:	4b20      	ldr	r3, [pc, #128]	; (8007e08 <USBD_SetConfig+0x118>)
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7ff fa59 	bl	8007244 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f9db 	bl	800814e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007d98:	e033      	b.n	8007e02 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8007d9a:	4b1b      	ldr	r3, [pc, #108]	; (8007e08 <USBD_SetConfig+0x118>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d01d      	beq.n	8007de4 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	4619      	mov	r1, r3
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f7ff fa47 	bl	8007244 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007db6:	4b14      	ldr	r3, [pc, #80]	; (8007e08 <USBD_SetConfig+0x118>)
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	461a      	mov	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007dc0:	4b11      	ldr	r3, [pc, #68]	; (8007e08 <USBD_SetConfig+0x118>)
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7ff fa1d 	bl	8007206 <USBD_SetClassConfig>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d104      	bne.n	8007ddc <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007dd2:	6839      	ldr	r1, [r7, #0]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f8f2 	bl	8007fbe <USBD_CtlError>
          return;
 8007dda:	e012      	b.n	8007e02 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f9b6 	bl	800814e <USBD_CtlSendStatus>
      break;
 8007de2:	e00e      	b.n	8007e02 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f9b2 	bl	800814e <USBD_CtlSendStatus>
      break;
 8007dea:	e00a      	b.n	8007e02 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f8e5 	bl	8007fbe <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007df4:	4b04      	ldr	r3, [pc, #16]	; (8007e08 <USBD_SetConfig+0x118>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7ff fa22 	bl	8007244 <USBD_ClrClassConfig>
      break;
 8007e00:	bf00      	nop
    }
  }
}
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	200002b0 	.word	0x200002b0

08007e0c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	88db      	ldrh	r3, [r3, #6]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d004      	beq.n	8007e28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007e1e:	6839      	ldr	r1, [r7, #0]
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 f8cc 	bl	8007fbe <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007e26:	e022      	b.n	8007e6e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	dc02      	bgt.n	8007e38 <USBD_GetConfig+0x2c>
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	dc03      	bgt.n	8007e3e <USBD_GetConfig+0x32>
 8007e36:	e015      	b.n	8007e64 <USBD_GetConfig+0x58>
 8007e38:	2b03      	cmp	r3, #3
 8007e3a:	d00b      	beq.n	8007e54 <USBD_GetConfig+0x48>
 8007e3c:	e012      	b.n	8007e64 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	3308      	adds	r3, #8
 8007e48:	2201      	movs	r2, #1
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 f920 	bl	8008092 <USBD_CtlSendData>
      break;
 8007e52:	e00c      	b.n	8007e6e <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	3304      	adds	r3, #4
 8007e58:	2201      	movs	r2, #1
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 f918 	bl	8008092 <USBD_CtlSendData>
      break;
 8007e62:	e004      	b.n	8007e6e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8007e64:	6839      	ldr	r1, [r7, #0]
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f8a9 	bl	8007fbe <USBD_CtlError>
      break;
 8007e6c:	bf00      	nop
}
 8007e6e:	bf00      	nop
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b082      	sub	sp, #8
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007e86:	3b01      	subs	r3, #1
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d81e      	bhi.n	8007eca <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	88db      	ldrh	r3, [r3, #6]
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d004      	beq.n	8007e9e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007e94:	6839      	ldr	r1, [r7, #0]
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f891 	bl	8007fbe <USBD_CtlError>
      break;
 8007e9c:	e01a      	b.n	8007ed4 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d005      	beq.n	8007eba <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	f043 0202 	orr.w	r2, r3, #2
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	330c      	adds	r3, #12
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f8e5 	bl	8008092 <USBD_CtlSendData>
    break;
 8007ec8:	e004      	b.n	8007ed4 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f876 	bl	8007fbe <USBD_CtlError>
    break;
 8007ed2:	bf00      	nop
  }
}
 8007ed4:	bf00      	nop
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	885b      	ldrh	r3, [r3, #2]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d106      	bne.n	8007efc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f929 	bl	800814e <USBD_CtlSendStatus>
  }

}
 8007efc:	bf00      	nop
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007f14:	3b01      	subs	r3, #1
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d80b      	bhi.n	8007f32 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	885b      	ldrh	r3, [r3, #2]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d10c      	bne.n	8007f3c <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f90f 	bl	800814e <USBD_CtlSendStatus>
    }
    break;
 8007f30:	e004      	b.n	8007f3c <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f842 	bl	8007fbe <USBD_CtlError>
    break;
 8007f3a:	e000      	b.n	8007f3e <USBD_ClrFeature+0x3a>
    break;
 8007f3c:	bf00      	nop
  }
}
 8007f3e:	bf00      	nop
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b083      	sub	sp, #12
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781a      	ldrb	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	785a      	ldrb	r2, [r3, #1]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	3302      	adds	r3, #2
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	3303      	adds	r3, #3
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	021b      	lsls	r3, r3, #8
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	4413      	add	r3, r2
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	3304      	adds	r3, #4
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	3305      	adds	r3, #5
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	021b      	lsls	r3, r3, #8
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	4413      	add	r3, r2
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	3306      	adds	r3, #6
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	3307      	adds	r3, #7
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	021b      	lsls	r3, r3, #8
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	4413      	add	r3, r2
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	80da      	strh	r2, [r3, #6]

}
 8007fb4:	bf00      	nop
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bc80      	pop	{r7}
 8007fbc:	4770      	bx	lr

08007fbe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b082      	sub	sp, #8
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007fc8:	2180      	movs	r1, #128	; 0x80
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fc72 	bl	80088b4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 fc6e 	bl	80088b4 <USBD_LL_StallEP>
}
 8007fd8:	bf00      	nop
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007fec:	2300      	movs	r3, #0
 8007fee:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d032      	beq.n	800805c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f000 f834 	bl	8008064 <USBD_GetLen>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	3301      	adds	r3, #1
 8008000:	b29b      	uxth	r3, r3
 8008002:	005b      	lsls	r3, r3, #1
 8008004:	b29a      	uxth	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800800a:	7dfb      	ldrb	r3, [r7, #23]
 800800c:	1c5a      	adds	r2, r3, #1
 800800e:	75fa      	strb	r2, [r7, #23]
 8008010:	461a      	mov	r2, r3
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	4413      	add	r3, r2
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	7812      	ldrb	r2, [r2, #0]
 800801a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800801c:	7dfb      	ldrb	r3, [r7, #23]
 800801e:	1c5a      	adds	r2, r3, #1
 8008020:	75fa      	strb	r2, [r7, #23]
 8008022:	461a      	mov	r2, r3
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	4413      	add	r3, r2
 8008028:	2203      	movs	r2, #3
 800802a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800802c:	e012      	b.n	8008054 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	1c5a      	adds	r2, r3, #1
 8008032:	60fa      	str	r2, [r7, #12]
 8008034:	7dfa      	ldrb	r2, [r7, #23]
 8008036:	1c51      	adds	r1, r2, #1
 8008038:	75f9      	strb	r1, [r7, #23]
 800803a:	4611      	mov	r1, r2
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	440a      	add	r2, r1
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008044:	7dfb      	ldrb	r3, [r7, #23]
 8008046:	1c5a      	adds	r2, r3, #1
 8008048:	75fa      	strb	r2, [r7, #23]
 800804a:	461a      	mov	r2, r3
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	4413      	add	r3, r2
 8008050:	2200      	movs	r2, #0
 8008052:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1e8      	bne.n	800802e <USBD_GetString+0x4e>
    }
  }
}
 800805c:	bf00      	nop
 800805e:	3718      	adds	r7, #24
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8008070:	e005      	b.n	800807e <USBD_GetLen+0x1a>
    {
        len++;
 8008072:	7bfb      	ldrb	r3, [r7, #15]
 8008074:	3301      	adds	r3, #1
 8008076:	73fb      	strb	r3, [r7, #15]
        buf++;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	3301      	adds	r3, #1
 800807c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1f5      	bne.n	8008072 <USBD_GetLen+0xe>
    }

    return len;
 8008086:	7bfb      	ldrb	r3, [r7, #15]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	bc80      	pop	{r7}
 8008090:	4770      	bx	lr

08008092 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	60f8      	str	r0, [r7, #12]
 800809a:	60b9      	str	r1, [r7, #8]
 800809c:	4613      	mov	r3, r2
 800809e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2202      	movs	r2, #2
 80080a4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80080a8:	88fa      	ldrh	r2, [r7, #6]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80080ae:	88fa      	ldrh	r2, [r7, #6]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80080b4:	88fb      	ldrh	r3, [r7, #6]
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	2100      	movs	r1, #0
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f000 fc83 	bl	80089c6 <USBD_LL_Transmit>

  return USBD_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	60f8      	str	r0, [r7, #12]
 80080d2:	60b9      	str	r1, [r7, #8]
 80080d4:	4613      	mov	r3, r2
 80080d6:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80080d8:	88fb      	ldrh	r3, [r7, #6]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	2100      	movs	r1, #0
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f000 fc71 	bl	80089c6 <USBD_LL_Transmit>

  return USBD_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	60f8      	str	r0, [r7, #12]
 80080f6:	60b9      	str	r1, [r7, #8]
 80080f8:	4613      	mov	r3, r2
 80080fa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2203      	movs	r2, #3
 8008100:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008104:	88fa      	ldrh	r2, [r7, #6]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800810c:	88fa      	ldrh	r2, [r7, #6]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008114:	88fb      	ldrh	r3, [r7, #6]
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	2100      	movs	r1, #0
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 fc76 	bl	8008a0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b084      	sub	sp, #16
 800812e:	af00      	add	r7, sp, #0
 8008130:	60f8      	str	r0, [r7, #12]
 8008132:	60b9      	str	r1, [r7, #8]
 8008134:	4613      	mov	r3, r2
 8008136:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008138:	88fb      	ldrh	r3, [r7, #6]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	2100      	movs	r1, #0
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f000 fc64 	bl	8008a0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b082      	sub	sp, #8
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2204      	movs	r2, #4
 800815a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800815e:	2300      	movs	r3, #0
 8008160:	2200      	movs	r2, #0
 8008162:	2100      	movs	r1, #0
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fc2e 	bl	80089c6 <USBD_LL_Transmit>

  return USBD_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2205      	movs	r2, #5
 8008180:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008184:	2300      	movs	r3, #0
 8008186:	2200      	movs	r2, #0
 8008188:	2100      	movs	r1, #0
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fc3e 	bl	8008a0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
	...

0800819c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80081a0:	2200      	movs	r2, #0
 80081a2:	4912      	ldr	r1, [pc, #72]	; (80081ec <MX_USB_DEVICE_Init+0x50>)
 80081a4:	4812      	ldr	r0, [pc, #72]	; (80081f0 <MX_USB_DEVICE_Init+0x54>)
 80081a6:	f7fe ffd4 	bl	8007152 <USBD_Init>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d001      	beq.n	80081b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80081b0:	f7f8 fb28 	bl	8000804 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80081b4:	490f      	ldr	r1, [pc, #60]	; (80081f4 <MX_USB_DEVICE_Init+0x58>)
 80081b6:	480e      	ldr	r0, [pc, #56]	; (80081f0 <MX_USB_DEVICE_Init+0x54>)
 80081b8:	f7fe fff6 	bl	80071a8 <USBD_RegisterClass>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80081c2:	f7f8 fb1f 	bl	8000804 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80081c6:	490c      	ldr	r1, [pc, #48]	; (80081f8 <MX_USB_DEVICE_Init+0x5c>)
 80081c8:	4809      	ldr	r0, [pc, #36]	; (80081f0 <MX_USB_DEVICE_Init+0x54>)
 80081ca:	f7fe ff27 	bl	800701c <USBD_CDC_RegisterInterface>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80081d4:	f7f8 fb16 	bl	8000804 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80081d8:	4805      	ldr	r0, [pc, #20]	; (80081f0 <MX_USB_DEVICE_Init+0x54>)
 80081da:	f7fe fffe 	bl	80071da <USBD_Start>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d001      	beq.n	80081e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80081e4:	f7f8 fb0e 	bl	8000804 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80081e8:	bf00      	nop
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	2000012c 	.word	0x2000012c
 80081f0:	200002b4 	.word	0x200002b4
 80081f4:	20000018 	.word	0x20000018
 80081f8:	2000011c 	.word	0x2000011c

080081fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008200:	2200      	movs	r2, #0
 8008202:	4905      	ldr	r1, [pc, #20]	; (8008218 <CDC_Init_FS+0x1c>)
 8008204:	4805      	ldr	r0, [pc, #20]	; (800821c <CDC_Init_FS+0x20>)
 8008206:	f7fe ff1f 	bl	8007048 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800820a:	4905      	ldr	r1, [pc, #20]	; (8008220 <CDC_Init_FS+0x24>)
 800820c:	4803      	ldr	r0, [pc, #12]	; (800821c <CDC_Init_FS+0x20>)
 800820e:	f7fe ff34 	bl	800707a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008212:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008214:	4618      	mov	r0, r3
 8008216:	bd80      	pop	{r7, pc}
 8008218:	20000950 	.word	0x20000950
 800821c:	200002b4 	.word	0x200002b4
 8008220:	20000550 	.word	0x20000550

08008224 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008224:	b480      	push	{r7}
 8008226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008228:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800822a:	4618      	mov	r0, r3
 800822c:	46bd      	mov	sp, r7
 800822e:	bc80      	pop	{r7}
 8008230:	4770      	bx	lr
	...

08008234 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	4603      	mov	r3, r0
 800823c:	6039      	str	r1, [r7, #0]
 800823e:	71fb      	strb	r3, [r7, #7]
 8008240:	4613      	mov	r3, r2
 8008242:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008244:	79fb      	ldrb	r3, [r7, #7]
 8008246:	2b23      	cmp	r3, #35	; 0x23
 8008248:	d84a      	bhi.n	80082e0 <CDC_Control_FS+0xac>
 800824a:	a201      	add	r2, pc, #4	; (adr r2, 8008250 <CDC_Control_FS+0x1c>)
 800824c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008250:	080082e1 	.word	0x080082e1
 8008254:	080082e1 	.word	0x080082e1
 8008258:	080082e1 	.word	0x080082e1
 800825c:	080082e1 	.word	0x080082e1
 8008260:	080082e1 	.word	0x080082e1
 8008264:	080082e1 	.word	0x080082e1
 8008268:	080082e1 	.word	0x080082e1
 800826c:	080082e1 	.word	0x080082e1
 8008270:	080082e1 	.word	0x080082e1
 8008274:	080082e1 	.word	0x080082e1
 8008278:	080082e1 	.word	0x080082e1
 800827c:	080082e1 	.word	0x080082e1
 8008280:	080082e1 	.word	0x080082e1
 8008284:	080082e1 	.word	0x080082e1
 8008288:	080082e1 	.word	0x080082e1
 800828c:	080082e1 	.word	0x080082e1
 8008290:	080082e1 	.word	0x080082e1
 8008294:	080082e1 	.word	0x080082e1
 8008298:	080082e1 	.word	0x080082e1
 800829c:	080082e1 	.word	0x080082e1
 80082a0:	080082e1 	.word	0x080082e1
 80082a4:	080082e1 	.word	0x080082e1
 80082a8:	080082e1 	.word	0x080082e1
 80082ac:	080082e1 	.word	0x080082e1
 80082b0:	080082e1 	.word	0x080082e1
 80082b4:	080082e1 	.word	0x080082e1
 80082b8:	080082e1 	.word	0x080082e1
 80082bc:	080082e1 	.word	0x080082e1
 80082c0:	080082e1 	.word	0x080082e1
 80082c4:	080082e1 	.word	0x080082e1
 80082c8:	080082e1 	.word	0x080082e1
 80082cc:	080082e1 	.word	0x080082e1
 80082d0:	080082e1 	.word	0x080082e1
 80082d4:	080082e1 	.word	0x080082e1
 80082d8:	080082e1 	.word	0x080082e1
 80082dc:	080082e1 	.word	0x080082e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80082e0:	bf00      	nop
  }

  return (USBD_OK);
 80082e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bc80      	pop	{r7}
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop

080082f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80082fa:	6879      	ldr	r1, [r7, #4]
 80082fc:	4805      	ldr	r0, [pc, #20]	; (8008314 <CDC_Receive_FS+0x24>)
 80082fe:	f7fe febc 	bl	800707a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008302:	4804      	ldr	r0, [pc, #16]	; (8008314 <CDC_Receive_FS+0x24>)
 8008304:	f7fe fefb 	bl	80070fe <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008308:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800830a:	4618      	mov	r0, r3
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	200002b4 	.word	0x200002b4

08008318 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008324:	2300      	movs	r3, #0
 8008326:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008328:	4b0d      	ldr	r3, [pc, #52]	; (8008360 <CDC_Transmit_FS+0x48>)
 800832a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800832e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800833a:	2301      	movs	r3, #1
 800833c:	e00b      	b.n	8008356 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800833e:	887b      	ldrh	r3, [r7, #2]
 8008340:	461a      	mov	r2, r3
 8008342:	6879      	ldr	r1, [r7, #4]
 8008344:	4806      	ldr	r0, [pc, #24]	; (8008360 <CDC_Transmit_FS+0x48>)
 8008346:	f7fe fe7f 	bl	8007048 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800834a:	4805      	ldr	r0, [pc, #20]	; (8008360 <CDC_Transmit_FS+0x48>)
 800834c:	f7fe fea8 	bl	80070a0 <USBD_CDC_TransmitPacket>
 8008350:	4603      	mov	r3, r0
 8008352:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008354:	7bfb      	ldrb	r3, [r7, #15]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	200002b4 	.word	0x200002b4

08008364 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	4603      	mov	r3, r0
 800836c:	6039      	str	r1, [r7, #0]
 800836e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	2212      	movs	r2, #18
 8008374:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008376:	4b03      	ldr	r3, [pc, #12]	; (8008384 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008378:	4618      	mov	r0, r3
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	bc80      	pop	{r7}
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	20000148 	.word	0x20000148

08008388 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	4603      	mov	r3, r0
 8008390:	6039      	str	r1, [r7, #0]
 8008392:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	2204      	movs	r2, #4
 8008398:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800839a:	4b03      	ldr	r3, [pc, #12]	; (80083a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800839c:	4618      	mov	r0, r3
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bc80      	pop	{r7}
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	2000015c 	.word	0x2000015c

080083ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	6039      	str	r1, [r7, #0]
 80083b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083b8:	79fb      	ldrb	r3, [r7, #7]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d105      	bne.n	80083ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	4907      	ldr	r1, [pc, #28]	; (80083e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80083c2:	4808      	ldr	r0, [pc, #32]	; (80083e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80083c4:	f7ff fe0c 	bl	8007fe0 <USBD_GetString>
 80083c8:	e004      	b.n	80083d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	4904      	ldr	r1, [pc, #16]	; (80083e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80083ce:	4805      	ldr	r0, [pc, #20]	; (80083e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80083d0:	f7ff fe06 	bl	8007fe0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083d4:	4b02      	ldr	r3, [pc, #8]	; (80083e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	20000d50 	.word	0x20000d50
 80083e4:	08009494 	.word	0x08009494

080083e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	4603      	mov	r3, r0
 80083f0:	6039      	str	r1, [r7, #0]
 80083f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80083f4:	683a      	ldr	r2, [r7, #0]
 80083f6:	4904      	ldr	r1, [pc, #16]	; (8008408 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80083f8:	4804      	ldr	r0, [pc, #16]	; (800840c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80083fa:	f7ff fdf1 	bl	8007fe0 <USBD_GetString>
  return USBD_StrDesc;
 80083fe:	4b02      	ldr	r3, [pc, #8]	; (8008408 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008400:	4618      	mov	r0, r3
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	20000d50 	.word	0x20000d50
 800840c:	080094ac 	.word	0x080094ac

08008410 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	4603      	mov	r3, r0
 8008418:	6039      	str	r1, [r7, #0]
 800841a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	221a      	movs	r2, #26
 8008420:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008422:	f000 f843 	bl	80084ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008426:	4b02      	ldr	r3, [pc, #8]	; (8008430 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008428:	4618      	mov	r0, r3
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	20000160 	.word	0x20000160

08008434 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	4603      	mov	r3, r0
 800843c:	6039      	str	r1, [r7, #0]
 800843e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008440:	79fb      	ldrb	r3, [r7, #7]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d105      	bne.n	8008452 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	4907      	ldr	r1, [pc, #28]	; (8008468 <USBD_FS_ConfigStrDescriptor+0x34>)
 800844a:	4808      	ldr	r0, [pc, #32]	; (800846c <USBD_FS_ConfigStrDescriptor+0x38>)
 800844c:	f7ff fdc8 	bl	8007fe0 <USBD_GetString>
 8008450:	e004      	b.n	800845c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	4904      	ldr	r1, [pc, #16]	; (8008468 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008456:	4805      	ldr	r0, [pc, #20]	; (800846c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008458:	f7ff fdc2 	bl	8007fe0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800845c:	4b02      	ldr	r3, [pc, #8]	; (8008468 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800845e:	4618      	mov	r0, r3
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	20000d50 	.word	0x20000d50
 800846c:	080094c0 	.word	0x080094c0

08008470 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	4603      	mov	r3, r0
 8008478:	6039      	str	r1, [r7, #0]
 800847a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800847c:	79fb      	ldrb	r3, [r7, #7]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d105      	bne.n	800848e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008482:	683a      	ldr	r2, [r7, #0]
 8008484:	4907      	ldr	r1, [pc, #28]	; (80084a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008486:	4808      	ldr	r0, [pc, #32]	; (80084a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008488:	f7ff fdaa 	bl	8007fe0 <USBD_GetString>
 800848c:	e004      	b.n	8008498 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	4904      	ldr	r1, [pc, #16]	; (80084a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008492:	4805      	ldr	r0, [pc, #20]	; (80084a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008494:	f7ff fda4 	bl	8007fe0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008498:	4b02      	ldr	r3, [pc, #8]	; (80084a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800849a:	4618      	mov	r0, r3
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	20000d50 	.word	0x20000d50
 80084a8:	080094cc 	.word	0x080094cc

080084ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80084b2:	4b0f      	ldr	r3, [pc, #60]	; (80084f0 <Get_SerialNum+0x44>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80084b8:	4b0e      	ldr	r3, [pc, #56]	; (80084f4 <Get_SerialNum+0x48>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80084be:	4b0e      	ldr	r3, [pc, #56]	; (80084f8 <Get_SerialNum+0x4c>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4413      	add	r3, r2
 80084ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d009      	beq.n	80084e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80084d2:	2208      	movs	r2, #8
 80084d4:	4909      	ldr	r1, [pc, #36]	; (80084fc <Get_SerialNum+0x50>)
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f000 f814 	bl	8008504 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80084dc:	2204      	movs	r2, #4
 80084de:	4908      	ldr	r1, [pc, #32]	; (8008500 <Get_SerialNum+0x54>)
 80084e0:	68b8      	ldr	r0, [r7, #8]
 80084e2:	f000 f80f 	bl	8008504 <IntToUnicode>
  }
}
 80084e6:	bf00      	nop
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	1ff80050 	.word	0x1ff80050
 80084f4:	1ff80054 	.word	0x1ff80054
 80084f8:	1ff80058 	.word	0x1ff80058
 80084fc:	20000162 	.word	0x20000162
 8008500:	20000172 	.word	0x20000172

08008504 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008504:	b480      	push	{r7}
 8008506:	b087      	sub	sp, #28
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	4613      	mov	r3, r2
 8008510:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008512:	2300      	movs	r3, #0
 8008514:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008516:	2300      	movs	r3, #0
 8008518:	75fb      	strb	r3, [r7, #23]
 800851a:	e027      	b.n	800856c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	0f1b      	lsrs	r3, r3, #28
 8008520:	2b09      	cmp	r3, #9
 8008522:	d80b      	bhi.n	800853c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	0f1b      	lsrs	r3, r3, #28
 8008528:	b2da      	uxtb	r2, r3
 800852a:	7dfb      	ldrb	r3, [r7, #23]
 800852c:	005b      	lsls	r3, r3, #1
 800852e:	4619      	mov	r1, r3
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	440b      	add	r3, r1
 8008534:	3230      	adds	r2, #48	; 0x30
 8008536:	b2d2      	uxtb	r2, r2
 8008538:	701a      	strb	r2, [r3, #0]
 800853a:	e00a      	b.n	8008552 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	0f1b      	lsrs	r3, r3, #28
 8008540:	b2da      	uxtb	r2, r3
 8008542:	7dfb      	ldrb	r3, [r7, #23]
 8008544:	005b      	lsls	r3, r3, #1
 8008546:	4619      	mov	r1, r3
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	440b      	add	r3, r1
 800854c:	3237      	adds	r2, #55	; 0x37
 800854e:	b2d2      	uxtb	r2, r2
 8008550:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	011b      	lsls	r3, r3, #4
 8008556:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008558:	7dfb      	ldrb	r3, [r7, #23]
 800855a:	005b      	lsls	r3, r3, #1
 800855c:	3301      	adds	r3, #1
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	4413      	add	r3, r2
 8008562:	2200      	movs	r2, #0
 8008564:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008566:	7dfb      	ldrb	r3, [r7, #23]
 8008568:	3301      	adds	r3, #1
 800856a:	75fb      	strb	r3, [r7, #23]
 800856c:	7dfa      	ldrb	r2, [r7, #23]
 800856e:	79fb      	ldrb	r3, [r7, #7]
 8008570:	429a      	cmp	r2, r3
 8008572:	d3d3      	bcc.n	800851c <IntToUnicode+0x18>
  }
}
 8008574:	bf00      	nop
 8008576:	bf00      	nop
 8008578:	371c      	adds	r7, #28
 800857a:	46bd      	mov	sp, r7
 800857c:	bc80      	pop	{r7}
 800857e:	4770      	bx	lr

08008580 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	460b      	mov	r3, r1
 800858a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800858c:	78fb      	ldrb	r3, [r7, #3]
 800858e:	2b01      	cmp	r3, #1
 8008590:	d106      	bne.n	80085a0 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8008592:	4b09      	ldr	r3, [pc, #36]	; (80085b8 <HAL_PCDEx_SetConnectionState+0x38>)
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	4a08      	ldr	r2, [pc, #32]	; (80085b8 <HAL_PCDEx_SetConnectionState+0x38>)
 8008598:	f043 0301 	orr.w	r3, r3, #1
 800859c:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 800859e:	e005      	b.n	80085ac <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 80085a0:	4b05      	ldr	r3, [pc, #20]	; (80085b8 <HAL_PCDEx_SetConnectionState+0x38>)
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	4a04      	ldr	r2, [pc, #16]	; (80085b8 <HAL_PCDEx_SetConnectionState+0x38>)
 80085a6:	f023 0301 	bic.w	r3, r3, #1
 80085aa:	6053      	str	r3, [r2, #4]
}
 80085ac:	bf00      	nop
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bc80      	pop	{r7}
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	40010000 	.word	0x40010000

080085bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a0d      	ldr	r2, [pc, #52]	; (8008600 <HAL_PCD_MspInit+0x44>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d113      	bne.n	80085f6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80085ce:	4b0d      	ldr	r3, [pc, #52]	; (8008604 <HAL_PCD_MspInit+0x48>)
 80085d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d2:	4a0c      	ldr	r2, [pc, #48]	; (8008604 <HAL_PCD_MspInit+0x48>)
 80085d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80085d8:	6253      	str	r3, [r2, #36]	; 0x24
 80085da:	4b0a      	ldr	r3, [pc, #40]	; (8008604 <HAL_PCD_MspInit+0x48>)
 80085dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085e2:	60fb      	str	r3, [r7, #12]
 80085e4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80085e6:	2200      	movs	r2, #0
 80085e8:	2100      	movs	r1, #0
 80085ea:	2014      	movs	r0, #20
 80085ec:	f7f8 fbc1 	bl	8000d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80085f0:	2014      	movs	r0, #20
 80085f2:	f7f8 fbda 	bl	8000daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80085f6:	bf00      	nop
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	40005c00 	.word	0x40005c00
 8008604:	40023800 	.word	0x40023800

08008608 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800861c:	4619      	mov	r1, r3
 800861e:	4610      	mov	r0, r2
 8008620:	f7fe fe23 	bl	800726a <USBD_LL_SetupStage>
}
 8008624:	bf00      	nop
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	460b      	mov	r3, r1
 8008636:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800863e:	78fa      	ldrb	r2, [r7, #3]
 8008640:	6879      	ldr	r1, [r7, #4]
 8008642:	4613      	mov	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4413      	add	r3, r2
 8008648:	00db      	lsls	r3, r3, #3
 800864a:	440b      	add	r3, r1
 800864c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	78fb      	ldrb	r3, [r7, #3]
 8008654:	4619      	mov	r1, r3
 8008656:	f7fe fe55 	bl	8007304 <USBD_LL_DataOutStage>
}
 800865a:	bf00      	nop
 800865c:	3708      	adds	r7, #8
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b082      	sub	sp, #8
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
 800866a:	460b      	mov	r3, r1
 800866c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008674:	78fa      	ldrb	r2, [r7, #3]
 8008676:	6879      	ldr	r1, [r7, #4]
 8008678:	4613      	mov	r3, r2
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	4413      	add	r3, r2
 800867e:	00db      	lsls	r3, r3, #3
 8008680:	440b      	add	r3, r1
 8008682:	333c      	adds	r3, #60	; 0x3c
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	78fb      	ldrb	r3, [r7, #3]
 8008688:	4619      	mov	r1, r3
 800868a:	f7fe feac 	bl	80073e6 <USBD_LL_DataInStage>
}
 800868e:	bf00      	nop
 8008690:	3708      	adds	r7, #8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b082      	sub	sp, #8
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fe ffb7 	bl	8007618 <USBD_LL_SOF>
}
 80086aa:	bf00      	nop
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b084      	sub	sp, #16
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80086ba:	2301      	movs	r3, #1
 80086bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d001      	beq.n	80086ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80086c6:	f7f8 f89d 	bl	8000804 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086d0:	7bfa      	ldrb	r2, [r7, #15]
 80086d2:	4611      	mov	r1, r2
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7fe ff6c 	bl	80075b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7fe ff25 	bl	8007530 <USBD_LL_Reset>
}
 80086e6:	bf00      	nop
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
	...

080086f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fe ff66 	bl	80075d0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d005      	beq.n	8008718 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800870c:	4b04      	ldr	r3, [pc, #16]	; (8008720 <HAL_PCD_SuspendCallback+0x30>)
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	4a03      	ldr	r2, [pc, #12]	; (8008720 <HAL_PCD_SuspendCallback+0x30>)
 8008712:	f043 0306 	orr.w	r3, r3, #6
 8008716:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008718:	bf00      	nop
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	e000ed00 	.word	0xe000ed00

08008724 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008732:	4618      	mov	r0, r3
 8008734:	f7fe ff60 	bl	80075f8 <USBD_LL_Resume>
}
 8008738:	bf00      	nop
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008748:	4a28      	ldr	r2, [pc, #160]	; (80087ec <USBD_LL_Init+0xac>)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a26      	ldr	r2, [pc, #152]	; (80087ec <USBD_LL_Init+0xac>)
 8008754:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8008758:	4b24      	ldr	r3, [pc, #144]	; (80087ec <USBD_LL_Init+0xac>)
 800875a:	4a25      	ldr	r2, [pc, #148]	; (80087f0 <USBD_LL_Init+0xb0>)
 800875c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800875e:	4b23      	ldr	r3, [pc, #140]	; (80087ec <USBD_LL_Init+0xac>)
 8008760:	2208      	movs	r2, #8
 8008762:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008764:	4b21      	ldr	r3, [pc, #132]	; (80087ec <USBD_LL_Init+0xac>)
 8008766:	2202      	movs	r2, #2
 8008768:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800876a:	4b20      	ldr	r3, [pc, #128]	; (80087ec <USBD_LL_Init+0xac>)
 800876c:	2202      	movs	r2, #2
 800876e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008770:	4b1e      	ldr	r3, [pc, #120]	; (80087ec <USBD_LL_Init+0xac>)
 8008772:	2200      	movs	r2, #0
 8008774:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008776:	4b1d      	ldr	r3, [pc, #116]	; (80087ec <USBD_LL_Init+0xac>)
 8008778:	2200      	movs	r2, #0
 800877a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800877c:	481b      	ldr	r0, [pc, #108]	; (80087ec <USBD_LL_Init+0xac>)
 800877e:	f7f8 fe0b 	bl	8001398 <HAL_PCD_Init>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d001      	beq.n	800878c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008788:	f7f8 f83c 	bl	8000804 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008792:	2318      	movs	r3, #24
 8008794:	2200      	movs	r2, #0
 8008796:	2100      	movs	r1, #0
 8008798:	f7fa f9e8 	bl	8002b6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80087a2:	2358      	movs	r3, #88	; 0x58
 80087a4:	2200      	movs	r2, #0
 80087a6:	2180      	movs	r1, #128	; 0x80
 80087a8:	f7fa f9e0 	bl	8002b6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80087b2:	23c0      	movs	r3, #192	; 0xc0
 80087b4:	2200      	movs	r2, #0
 80087b6:	2181      	movs	r1, #129	; 0x81
 80087b8:	f7fa f9d8 	bl	8002b6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80087c2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80087c6:	2200      	movs	r2, #0
 80087c8:	2101      	movs	r1, #1
 80087ca:	f7fa f9cf 	bl	8002b6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80087d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087d8:	2200      	movs	r2, #0
 80087da:	2182      	movs	r1, #130	; 0x82
 80087dc:	f7fa f9c6 	bl	8002b6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	20000f50 	.word	0x20000f50
 80087f0:	40005c00 	.word	0x40005c00

080087f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087fc:	2300      	movs	r3, #0
 80087fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800880a:	4618      	mov	r0, r3
 800880c:	f7f8 fea2 	bl	8001554 <HAL_PCD_Start>
 8008810:	4603      	mov	r3, r0
 8008812:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	4618      	mov	r0, r3
 8008818:	f000 f944 	bl	8008aa4 <USBD_Get_USB_Status>
 800881c:	4603      	mov	r3, r0
 800881e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008820:	7bbb      	ldrb	r3, [r7, #14]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	4608      	mov	r0, r1
 8008834:	4611      	mov	r1, r2
 8008836:	461a      	mov	r2, r3
 8008838:	4603      	mov	r3, r0
 800883a:	70fb      	strb	r3, [r7, #3]
 800883c:	460b      	mov	r3, r1
 800883e:	70bb      	strb	r3, [r7, #2]
 8008840:	4613      	mov	r3, r2
 8008842:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008844:	2300      	movs	r3, #0
 8008846:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008852:	78bb      	ldrb	r3, [r7, #2]
 8008854:	883a      	ldrh	r2, [r7, #0]
 8008856:	78f9      	ldrb	r1, [r7, #3]
 8008858:	f7f8 ffbe 	bl	80017d8 <HAL_PCD_EP_Open>
 800885c:	4603      	mov	r3, r0
 800885e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008860:	7bfb      	ldrb	r3, [r7, #15]
 8008862:	4618      	mov	r0, r3
 8008864:	f000 f91e 	bl	8008aa4 <USBD_Get_USB_Status>
 8008868:	4603      	mov	r3, r0
 800886a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800886c:	7bbb      	ldrb	r3, [r7, #14]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b084      	sub	sp, #16
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
 800887e:	460b      	mov	r3, r1
 8008880:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008890:	78fa      	ldrb	r2, [r7, #3]
 8008892:	4611      	mov	r1, r2
 8008894:	4618      	mov	r0, r3
 8008896:	f7f9 f805 	bl	80018a4 <HAL_PCD_EP_Close>
 800889a:	4603      	mov	r3, r0
 800889c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f000 f8ff 	bl	8008aa4 <USBD_Get_USB_Status>
 80088a6:	4603      	mov	r3, r0
 80088a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80088ce:	78fa      	ldrb	r2, [r7, #3]
 80088d0:	4611      	mov	r1, r2
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7f9 f8c5 	bl	8001a62 <HAL_PCD_EP_SetStall>
 80088d8:	4603      	mov	r3, r0
 80088da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
 80088de:	4618      	mov	r0, r3
 80088e0:	f000 f8e0 	bl	8008aa4 <USBD_Get_USB_Status>
 80088e4:	4603      	mov	r3, r0
 80088e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	460b      	mov	r3, r1
 80088fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800890c:	78fa      	ldrb	r2, [r7, #3]
 800890e:	4611      	mov	r1, r2
 8008910:	4618      	mov	r0, r3
 8008912:	f7f9 f8f8 	bl	8001b06 <HAL_PCD_EP_ClrStall>
 8008916:	4603      	mov	r3, r0
 8008918:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800891a:	7bfb      	ldrb	r3, [r7, #15]
 800891c:	4618      	mov	r0, r3
 800891e:	f000 f8c1 	bl	8008aa4 <USBD_Get_USB_Status>
 8008922:	4603      	mov	r3, r0
 8008924:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008926:	7bbb      	ldrb	r3, [r7, #14]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	460b      	mov	r3, r1
 800893a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008942:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008944:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008948:	2b00      	cmp	r3, #0
 800894a:	da0c      	bge.n	8008966 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800894c:	78fb      	ldrb	r3, [r7, #3]
 800894e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008952:	68f9      	ldr	r1, [r7, #12]
 8008954:	1c5a      	adds	r2, r3, #1
 8008956:	4613      	mov	r3, r2
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	4413      	add	r3, r2
 800895c:	00db      	lsls	r3, r3, #3
 800895e:	440b      	add	r3, r1
 8008960:	3302      	adds	r3, #2
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	e00b      	b.n	800897e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008966:	78fb      	ldrb	r3, [r7, #3]
 8008968:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800896c:	68f9      	ldr	r1, [r7, #12]
 800896e:	4613      	mov	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	00db      	lsls	r3, r3, #3
 8008976:	440b      	add	r3, r1
 8008978:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800897c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800897e:	4618      	mov	r0, r3
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	bc80      	pop	{r7}
 8008986:	4770      	bx	lr

08008988 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	460b      	mov	r3, r1
 8008992:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008998:	2300      	movs	r3, #0
 800899a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80089a2:	78fa      	ldrb	r2, [r7, #3]
 80089a4:	4611      	mov	r1, r2
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7f8 fef1 	bl	800178e <HAL_PCD_SetAddress>
 80089ac:	4603      	mov	r3, r0
 80089ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 f876 	bl	8008aa4 <USBD_Get_USB_Status>
 80089b8:	4603      	mov	r3, r0
 80089ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b086      	sub	sp, #24
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	60f8      	str	r0, [r7, #12]
 80089ce:	607a      	str	r2, [r7, #4]
 80089d0:	461a      	mov	r2, r3
 80089d2:	460b      	mov	r3, r1
 80089d4:	72fb      	strb	r3, [r7, #11]
 80089d6:	4613      	mov	r3, r2
 80089d8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089de:	2300      	movs	r3, #0
 80089e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80089e8:	893b      	ldrh	r3, [r7, #8]
 80089ea:	7af9      	ldrb	r1, [r7, #11]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	f7f8 fff5 	bl	80019dc <HAL_PCD_EP_Transmit>
 80089f2:	4603      	mov	r3, r0
 80089f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 f853 	bl	8008aa4 <USBD_Get_USB_Status>
 80089fe:	4603      	mov	r3, r0
 8008a00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a02:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3718      	adds	r7, #24
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	607a      	str	r2, [r7, #4]
 8008a16:	461a      	mov	r2, r3
 8008a18:	460b      	mov	r3, r1
 8008a1a:	72fb      	strb	r3, [r7, #11]
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008a2e:	893b      	ldrh	r3, [r7, #8]
 8008a30:	7af9      	ldrb	r1, [r7, #11]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	f7f8 ff7e 	bl	8001934 <HAL_PCD_EP_Receive>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a3c:	7dfb      	ldrb	r3, [r7, #23]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 f830 	bl	8008aa4 <USBD_Get_USB_Status>
 8008a44:	4603      	mov	r3, r0
 8008a46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a48:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3718      	adds	r7, #24
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b082      	sub	sp, #8
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008a64:	78fa      	ldrb	r2, [r7, #3]
 8008a66:	4611      	mov	r1, r2
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7f8 ffa0 	bl	80019ae <HAL_PCD_EP_GetRxCount>
 8008a6e:	4603      	mov	r3, r0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008a80:	4b02      	ldr	r3, [pc, #8]	; (8008a8c <USBD_static_malloc+0x14>)
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	370c      	adds	r7, #12
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bc80      	pop	{r7}
 8008a8a:	4770      	bx	lr
 8008a8c:	2000123c 	.word	0x2000123c

08008a90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]

}
 8008a98:	bf00      	nop
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bc80      	pop	{r7}
 8008aa0:	4770      	bx	lr
	...

08008aa4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	4603      	mov	r3, r0
 8008aac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ab2:	79fb      	ldrb	r3, [r7, #7]
 8008ab4:	2b03      	cmp	r3, #3
 8008ab6:	d817      	bhi.n	8008ae8 <USBD_Get_USB_Status+0x44>
 8008ab8:	a201      	add	r2, pc, #4	; (adr r2, 8008ac0 <USBD_Get_USB_Status+0x1c>)
 8008aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008abe:	bf00      	nop
 8008ac0:	08008ad1 	.word	0x08008ad1
 8008ac4:	08008ad7 	.word	0x08008ad7
 8008ac8:	08008add 	.word	0x08008add
 8008acc:	08008ae3 	.word	0x08008ae3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad4:	e00b      	b.n	8008aee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	73fb      	strb	r3, [r7, #15]
    break;
 8008ada:	e008      	b.n	8008aee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008adc:	2301      	movs	r3, #1
 8008ade:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae0:	e005      	b.n	8008aee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ae2:	2302      	movs	r3, #2
 8008ae4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae6:	e002      	b.n	8008aee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ae8:	2302      	movs	r3, #2
 8008aea:	73fb      	strb	r3, [r7, #15]
    break;
 8008aec:	bf00      	nop
  }
  return usb_status;
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3714      	adds	r7, #20
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bc80      	pop	{r7}
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop

08008afc <__errno>:
 8008afc:	4b01      	ldr	r3, [pc, #4]	; (8008b04 <__errno+0x8>)
 8008afe:	6818      	ldr	r0, [r3, #0]
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop
 8008b04:	2000017c 	.word	0x2000017c

08008b08 <__libc_init_array>:
 8008b08:	b570      	push	{r4, r5, r6, lr}
 8008b0a:	2600      	movs	r6, #0
 8008b0c:	4d0c      	ldr	r5, [pc, #48]	; (8008b40 <__libc_init_array+0x38>)
 8008b0e:	4c0d      	ldr	r4, [pc, #52]	; (8008b44 <__libc_init_array+0x3c>)
 8008b10:	1b64      	subs	r4, r4, r5
 8008b12:	10a4      	asrs	r4, r4, #2
 8008b14:	42a6      	cmp	r6, r4
 8008b16:	d109      	bne.n	8008b2c <__libc_init_array+0x24>
 8008b18:	f000 fc9c 	bl	8009454 <_init>
 8008b1c:	2600      	movs	r6, #0
 8008b1e:	4d0a      	ldr	r5, [pc, #40]	; (8008b48 <__libc_init_array+0x40>)
 8008b20:	4c0a      	ldr	r4, [pc, #40]	; (8008b4c <__libc_init_array+0x44>)
 8008b22:	1b64      	subs	r4, r4, r5
 8008b24:	10a4      	asrs	r4, r4, #2
 8008b26:	42a6      	cmp	r6, r4
 8008b28:	d105      	bne.n	8008b36 <__libc_init_array+0x2e>
 8008b2a:	bd70      	pop	{r4, r5, r6, pc}
 8008b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b30:	4798      	blx	r3
 8008b32:	3601      	adds	r6, #1
 8008b34:	e7ee      	b.n	8008b14 <__libc_init_array+0xc>
 8008b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b3a:	4798      	blx	r3
 8008b3c:	3601      	adds	r6, #1
 8008b3e:	e7f2      	b.n	8008b26 <__libc_init_array+0x1e>
 8008b40:	0800953c 	.word	0x0800953c
 8008b44:	0800953c 	.word	0x0800953c
 8008b48:	0800953c 	.word	0x0800953c
 8008b4c:	08009540 	.word	0x08009540

08008b50 <memset>:
 8008b50:	4603      	mov	r3, r0
 8008b52:	4402      	add	r2, r0
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d100      	bne.n	8008b5a <memset+0xa>
 8008b58:	4770      	bx	lr
 8008b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b5e:	e7f9      	b.n	8008b54 <memset+0x4>

08008b60 <siprintf>:
 8008b60:	b40e      	push	{r1, r2, r3}
 8008b62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b66:	b500      	push	{lr}
 8008b68:	b09c      	sub	sp, #112	; 0x70
 8008b6a:	ab1d      	add	r3, sp, #116	; 0x74
 8008b6c:	9002      	str	r0, [sp, #8]
 8008b6e:	9006      	str	r0, [sp, #24]
 8008b70:	9107      	str	r1, [sp, #28]
 8008b72:	9104      	str	r1, [sp, #16]
 8008b74:	4808      	ldr	r0, [pc, #32]	; (8008b98 <siprintf+0x38>)
 8008b76:	4909      	ldr	r1, [pc, #36]	; (8008b9c <siprintf+0x3c>)
 8008b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b7c:	9105      	str	r1, [sp, #20]
 8008b7e:	6800      	ldr	r0, [r0, #0]
 8008b80:	a902      	add	r1, sp, #8
 8008b82:	9301      	str	r3, [sp, #4]
 8008b84:	f000 f868 	bl	8008c58 <_svfiprintf_r>
 8008b88:	2200      	movs	r2, #0
 8008b8a:	9b02      	ldr	r3, [sp, #8]
 8008b8c:	701a      	strb	r2, [r3, #0]
 8008b8e:	b01c      	add	sp, #112	; 0x70
 8008b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b94:	b003      	add	sp, #12
 8008b96:	4770      	bx	lr
 8008b98:	2000017c 	.word	0x2000017c
 8008b9c:	ffff0208 	.word	0xffff0208

08008ba0 <__ssputs_r>:
 8008ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba4:	688e      	ldr	r6, [r1, #8]
 8008ba6:	4682      	mov	sl, r0
 8008ba8:	429e      	cmp	r6, r3
 8008baa:	460c      	mov	r4, r1
 8008bac:	4690      	mov	r8, r2
 8008bae:	461f      	mov	r7, r3
 8008bb0:	d838      	bhi.n	8008c24 <__ssputs_r+0x84>
 8008bb2:	898a      	ldrh	r2, [r1, #12]
 8008bb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008bb8:	d032      	beq.n	8008c20 <__ssputs_r+0x80>
 8008bba:	6825      	ldr	r5, [r4, #0]
 8008bbc:	6909      	ldr	r1, [r1, #16]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	eba5 0901 	sub.w	r9, r5, r1
 8008bc4:	6965      	ldr	r5, [r4, #20]
 8008bc6:	444b      	add	r3, r9
 8008bc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bd0:	106d      	asrs	r5, r5, #1
 8008bd2:	429d      	cmp	r5, r3
 8008bd4:	bf38      	it	cc
 8008bd6:	461d      	movcc	r5, r3
 8008bd8:	0553      	lsls	r3, r2, #21
 8008bda:	d531      	bpl.n	8008c40 <__ssputs_r+0xa0>
 8008bdc:	4629      	mov	r1, r5
 8008bde:	f000 fb6f 	bl	80092c0 <_malloc_r>
 8008be2:	4606      	mov	r6, r0
 8008be4:	b950      	cbnz	r0, 8008bfc <__ssputs_r+0x5c>
 8008be6:	230c      	movs	r3, #12
 8008be8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bec:	f8ca 3000 	str.w	r3, [sl]
 8008bf0:	89a3      	ldrh	r3, [r4, #12]
 8008bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bf6:	81a3      	strh	r3, [r4, #12]
 8008bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bfc:	464a      	mov	r2, r9
 8008bfe:	6921      	ldr	r1, [r4, #16]
 8008c00:	f000 face 	bl	80091a0 <memcpy>
 8008c04:	89a3      	ldrh	r3, [r4, #12]
 8008c06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c0e:	81a3      	strh	r3, [r4, #12]
 8008c10:	6126      	str	r6, [r4, #16]
 8008c12:	444e      	add	r6, r9
 8008c14:	6026      	str	r6, [r4, #0]
 8008c16:	463e      	mov	r6, r7
 8008c18:	6165      	str	r5, [r4, #20]
 8008c1a:	eba5 0509 	sub.w	r5, r5, r9
 8008c1e:	60a5      	str	r5, [r4, #8]
 8008c20:	42be      	cmp	r6, r7
 8008c22:	d900      	bls.n	8008c26 <__ssputs_r+0x86>
 8008c24:	463e      	mov	r6, r7
 8008c26:	4632      	mov	r2, r6
 8008c28:	4641      	mov	r1, r8
 8008c2a:	6820      	ldr	r0, [r4, #0]
 8008c2c:	f000 fac6 	bl	80091bc <memmove>
 8008c30:	68a3      	ldr	r3, [r4, #8]
 8008c32:	2000      	movs	r0, #0
 8008c34:	1b9b      	subs	r3, r3, r6
 8008c36:	60a3      	str	r3, [r4, #8]
 8008c38:	6823      	ldr	r3, [r4, #0]
 8008c3a:	4433      	add	r3, r6
 8008c3c:	6023      	str	r3, [r4, #0]
 8008c3e:	e7db      	b.n	8008bf8 <__ssputs_r+0x58>
 8008c40:	462a      	mov	r2, r5
 8008c42:	f000 fbb1 	bl	80093a8 <_realloc_r>
 8008c46:	4606      	mov	r6, r0
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	d1e1      	bne.n	8008c10 <__ssputs_r+0x70>
 8008c4c:	4650      	mov	r0, sl
 8008c4e:	6921      	ldr	r1, [r4, #16]
 8008c50:	f000 face 	bl	80091f0 <_free_r>
 8008c54:	e7c7      	b.n	8008be6 <__ssputs_r+0x46>
	...

08008c58 <_svfiprintf_r>:
 8008c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c5c:	4698      	mov	r8, r3
 8008c5e:	898b      	ldrh	r3, [r1, #12]
 8008c60:	4607      	mov	r7, r0
 8008c62:	061b      	lsls	r3, r3, #24
 8008c64:	460d      	mov	r5, r1
 8008c66:	4614      	mov	r4, r2
 8008c68:	b09d      	sub	sp, #116	; 0x74
 8008c6a:	d50e      	bpl.n	8008c8a <_svfiprintf_r+0x32>
 8008c6c:	690b      	ldr	r3, [r1, #16]
 8008c6e:	b963      	cbnz	r3, 8008c8a <_svfiprintf_r+0x32>
 8008c70:	2140      	movs	r1, #64	; 0x40
 8008c72:	f000 fb25 	bl	80092c0 <_malloc_r>
 8008c76:	6028      	str	r0, [r5, #0]
 8008c78:	6128      	str	r0, [r5, #16]
 8008c7a:	b920      	cbnz	r0, 8008c86 <_svfiprintf_r+0x2e>
 8008c7c:	230c      	movs	r3, #12
 8008c7e:	603b      	str	r3, [r7, #0]
 8008c80:	f04f 30ff 	mov.w	r0, #4294967295
 8008c84:	e0d1      	b.n	8008e2a <_svfiprintf_r+0x1d2>
 8008c86:	2340      	movs	r3, #64	; 0x40
 8008c88:	616b      	str	r3, [r5, #20]
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c8e:	2320      	movs	r3, #32
 8008c90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c94:	2330      	movs	r3, #48	; 0x30
 8008c96:	f04f 0901 	mov.w	r9, #1
 8008c9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c9e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008e44 <_svfiprintf_r+0x1ec>
 8008ca2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ca6:	4623      	mov	r3, r4
 8008ca8:	469a      	mov	sl, r3
 8008caa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cae:	b10a      	cbz	r2, 8008cb4 <_svfiprintf_r+0x5c>
 8008cb0:	2a25      	cmp	r2, #37	; 0x25
 8008cb2:	d1f9      	bne.n	8008ca8 <_svfiprintf_r+0x50>
 8008cb4:	ebba 0b04 	subs.w	fp, sl, r4
 8008cb8:	d00b      	beq.n	8008cd2 <_svfiprintf_r+0x7a>
 8008cba:	465b      	mov	r3, fp
 8008cbc:	4622      	mov	r2, r4
 8008cbe:	4629      	mov	r1, r5
 8008cc0:	4638      	mov	r0, r7
 8008cc2:	f7ff ff6d 	bl	8008ba0 <__ssputs_r>
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	f000 80aa 	beq.w	8008e20 <_svfiprintf_r+0x1c8>
 8008ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cce:	445a      	add	r2, fp
 8008cd0:	9209      	str	r2, [sp, #36]	; 0x24
 8008cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f000 80a2 	beq.w	8008e20 <_svfiprintf_r+0x1c8>
 8008cdc:	2300      	movs	r3, #0
 8008cde:	f04f 32ff 	mov.w	r2, #4294967295
 8008ce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ce6:	f10a 0a01 	add.w	sl, sl, #1
 8008cea:	9304      	str	r3, [sp, #16]
 8008cec:	9307      	str	r3, [sp, #28]
 8008cee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cf2:	931a      	str	r3, [sp, #104]	; 0x68
 8008cf4:	4654      	mov	r4, sl
 8008cf6:	2205      	movs	r2, #5
 8008cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cfc:	4851      	ldr	r0, [pc, #324]	; (8008e44 <_svfiprintf_r+0x1ec>)
 8008cfe:	f000 fa41 	bl	8009184 <memchr>
 8008d02:	9a04      	ldr	r2, [sp, #16]
 8008d04:	b9d8      	cbnz	r0, 8008d3e <_svfiprintf_r+0xe6>
 8008d06:	06d0      	lsls	r0, r2, #27
 8008d08:	bf44      	itt	mi
 8008d0a:	2320      	movmi	r3, #32
 8008d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d10:	0711      	lsls	r1, r2, #28
 8008d12:	bf44      	itt	mi
 8008d14:	232b      	movmi	r3, #43	; 0x2b
 8008d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d20:	d015      	beq.n	8008d4e <_svfiprintf_r+0xf6>
 8008d22:	4654      	mov	r4, sl
 8008d24:	2000      	movs	r0, #0
 8008d26:	f04f 0c0a 	mov.w	ip, #10
 8008d2a:	9a07      	ldr	r2, [sp, #28]
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d32:	3b30      	subs	r3, #48	; 0x30
 8008d34:	2b09      	cmp	r3, #9
 8008d36:	d94e      	bls.n	8008dd6 <_svfiprintf_r+0x17e>
 8008d38:	b1b0      	cbz	r0, 8008d68 <_svfiprintf_r+0x110>
 8008d3a:	9207      	str	r2, [sp, #28]
 8008d3c:	e014      	b.n	8008d68 <_svfiprintf_r+0x110>
 8008d3e:	eba0 0308 	sub.w	r3, r0, r8
 8008d42:	fa09 f303 	lsl.w	r3, r9, r3
 8008d46:	4313      	orrs	r3, r2
 8008d48:	46a2      	mov	sl, r4
 8008d4a:	9304      	str	r3, [sp, #16]
 8008d4c:	e7d2      	b.n	8008cf4 <_svfiprintf_r+0x9c>
 8008d4e:	9b03      	ldr	r3, [sp, #12]
 8008d50:	1d19      	adds	r1, r3, #4
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	9103      	str	r1, [sp, #12]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	bfbb      	ittet	lt
 8008d5a:	425b      	neglt	r3, r3
 8008d5c:	f042 0202 	orrlt.w	r2, r2, #2
 8008d60:	9307      	strge	r3, [sp, #28]
 8008d62:	9307      	strlt	r3, [sp, #28]
 8008d64:	bfb8      	it	lt
 8008d66:	9204      	strlt	r2, [sp, #16]
 8008d68:	7823      	ldrb	r3, [r4, #0]
 8008d6a:	2b2e      	cmp	r3, #46	; 0x2e
 8008d6c:	d10c      	bne.n	8008d88 <_svfiprintf_r+0x130>
 8008d6e:	7863      	ldrb	r3, [r4, #1]
 8008d70:	2b2a      	cmp	r3, #42	; 0x2a
 8008d72:	d135      	bne.n	8008de0 <_svfiprintf_r+0x188>
 8008d74:	9b03      	ldr	r3, [sp, #12]
 8008d76:	3402      	adds	r4, #2
 8008d78:	1d1a      	adds	r2, r3, #4
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	9203      	str	r2, [sp, #12]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	bfb8      	it	lt
 8008d82:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d86:	9305      	str	r3, [sp, #20]
 8008d88:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008e48 <_svfiprintf_r+0x1f0>
 8008d8c:	2203      	movs	r2, #3
 8008d8e:	4650      	mov	r0, sl
 8008d90:	7821      	ldrb	r1, [r4, #0]
 8008d92:	f000 f9f7 	bl	8009184 <memchr>
 8008d96:	b140      	cbz	r0, 8008daa <_svfiprintf_r+0x152>
 8008d98:	2340      	movs	r3, #64	; 0x40
 8008d9a:	eba0 000a 	sub.w	r0, r0, sl
 8008d9e:	fa03 f000 	lsl.w	r0, r3, r0
 8008da2:	9b04      	ldr	r3, [sp, #16]
 8008da4:	3401      	adds	r4, #1
 8008da6:	4303      	orrs	r3, r0
 8008da8:	9304      	str	r3, [sp, #16]
 8008daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dae:	2206      	movs	r2, #6
 8008db0:	4826      	ldr	r0, [pc, #152]	; (8008e4c <_svfiprintf_r+0x1f4>)
 8008db2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008db6:	f000 f9e5 	bl	8009184 <memchr>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	d038      	beq.n	8008e30 <_svfiprintf_r+0x1d8>
 8008dbe:	4b24      	ldr	r3, [pc, #144]	; (8008e50 <_svfiprintf_r+0x1f8>)
 8008dc0:	bb1b      	cbnz	r3, 8008e0a <_svfiprintf_r+0x1b2>
 8008dc2:	9b03      	ldr	r3, [sp, #12]
 8008dc4:	3307      	adds	r3, #7
 8008dc6:	f023 0307 	bic.w	r3, r3, #7
 8008dca:	3308      	adds	r3, #8
 8008dcc:	9303      	str	r3, [sp, #12]
 8008dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dd0:	4433      	add	r3, r6
 8008dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8008dd4:	e767      	b.n	8008ca6 <_svfiprintf_r+0x4e>
 8008dd6:	460c      	mov	r4, r1
 8008dd8:	2001      	movs	r0, #1
 8008dda:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dde:	e7a5      	b.n	8008d2c <_svfiprintf_r+0xd4>
 8008de0:	2300      	movs	r3, #0
 8008de2:	f04f 0c0a 	mov.w	ip, #10
 8008de6:	4619      	mov	r1, r3
 8008de8:	3401      	adds	r4, #1
 8008dea:	9305      	str	r3, [sp, #20]
 8008dec:	4620      	mov	r0, r4
 8008dee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008df2:	3a30      	subs	r2, #48	; 0x30
 8008df4:	2a09      	cmp	r2, #9
 8008df6:	d903      	bls.n	8008e00 <_svfiprintf_r+0x1a8>
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d0c5      	beq.n	8008d88 <_svfiprintf_r+0x130>
 8008dfc:	9105      	str	r1, [sp, #20]
 8008dfe:	e7c3      	b.n	8008d88 <_svfiprintf_r+0x130>
 8008e00:	4604      	mov	r4, r0
 8008e02:	2301      	movs	r3, #1
 8008e04:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e08:	e7f0      	b.n	8008dec <_svfiprintf_r+0x194>
 8008e0a:	ab03      	add	r3, sp, #12
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	462a      	mov	r2, r5
 8008e10:	4638      	mov	r0, r7
 8008e12:	4b10      	ldr	r3, [pc, #64]	; (8008e54 <_svfiprintf_r+0x1fc>)
 8008e14:	a904      	add	r1, sp, #16
 8008e16:	f3af 8000 	nop.w
 8008e1a:	1c42      	adds	r2, r0, #1
 8008e1c:	4606      	mov	r6, r0
 8008e1e:	d1d6      	bne.n	8008dce <_svfiprintf_r+0x176>
 8008e20:	89ab      	ldrh	r3, [r5, #12]
 8008e22:	065b      	lsls	r3, r3, #25
 8008e24:	f53f af2c 	bmi.w	8008c80 <_svfiprintf_r+0x28>
 8008e28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e2a:	b01d      	add	sp, #116	; 0x74
 8008e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e30:	ab03      	add	r3, sp, #12
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	462a      	mov	r2, r5
 8008e36:	4638      	mov	r0, r7
 8008e38:	4b06      	ldr	r3, [pc, #24]	; (8008e54 <_svfiprintf_r+0x1fc>)
 8008e3a:	a904      	add	r1, sp, #16
 8008e3c:	f000 f87c 	bl	8008f38 <_printf_i>
 8008e40:	e7eb      	b.n	8008e1a <_svfiprintf_r+0x1c2>
 8008e42:	bf00      	nop
 8008e44:	08009500 	.word	0x08009500
 8008e48:	08009506 	.word	0x08009506
 8008e4c:	0800950a 	.word	0x0800950a
 8008e50:	00000000 	.word	0x00000000
 8008e54:	08008ba1 	.word	0x08008ba1

08008e58 <_printf_common>:
 8008e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e5c:	4616      	mov	r6, r2
 8008e5e:	4699      	mov	r9, r3
 8008e60:	688a      	ldr	r2, [r1, #8]
 8008e62:	690b      	ldr	r3, [r1, #16]
 8008e64:	4607      	mov	r7, r0
 8008e66:	4293      	cmp	r3, r2
 8008e68:	bfb8      	it	lt
 8008e6a:	4613      	movlt	r3, r2
 8008e6c:	6033      	str	r3, [r6, #0]
 8008e6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e72:	460c      	mov	r4, r1
 8008e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e78:	b10a      	cbz	r2, 8008e7e <_printf_common+0x26>
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	6033      	str	r3, [r6, #0]
 8008e7e:	6823      	ldr	r3, [r4, #0]
 8008e80:	0699      	lsls	r1, r3, #26
 8008e82:	bf42      	ittt	mi
 8008e84:	6833      	ldrmi	r3, [r6, #0]
 8008e86:	3302      	addmi	r3, #2
 8008e88:	6033      	strmi	r3, [r6, #0]
 8008e8a:	6825      	ldr	r5, [r4, #0]
 8008e8c:	f015 0506 	ands.w	r5, r5, #6
 8008e90:	d106      	bne.n	8008ea0 <_printf_common+0x48>
 8008e92:	f104 0a19 	add.w	sl, r4, #25
 8008e96:	68e3      	ldr	r3, [r4, #12]
 8008e98:	6832      	ldr	r2, [r6, #0]
 8008e9a:	1a9b      	subs	r3, r3, r2
 8008e9c:	42ab      	cmp	r3, r5
 8008e9e:	dc28      	bgt.n	8008ef2 <_printf_common+0x9a>
 8008ea0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ea4:	1e13      	subs	r3, r2, #0
 8008ea6:	6822      	ldr	r2, [r4, #0]
 8008ea8:	bf18      	it	ne
 8008eaa:	2301      	movne	r3, #1
 8008eac:	0692      	lsls	r2, r2, #26
 8008eae:	d42d      	bmi.n	8008f0c <_printf_common+0xb4>
 8008eb0:	4649      	mov	r1, r9
 8008eb2:	4638      	mov	r0, r7
 8008eb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008eb8:	47c0      	blx	r8
 8008eba:	3001      	adds	r0, #1
 8008ebc:	d020      	beq.n	8008f00 <_printf_common+0xa8>
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	68e5      	ldr	r5, [r4, #12]
 8008ec2:	f003 0306 	and.w	r3, r3, #6
 8008ec6:	2b04      	cmp	r3, #4
 8008ec8:	bf18      	it	ne
 8008eca:	2500      	movne	r5, #0
 8008ecc:	6832      	ldr	r2, [r6, #0]
 8008ece:	f04f 0600 	mov.w	r6, #0
 8008ed2:	68a3      	ldr	r3, [r4, #8]
 8008ed4:	bf08      	it	eq
 8008ed6:	1aad      	subeq	r5, r5, r2
 8008ed8:	6922      	ldr	r2, [r4, #16]
 8008eda:	bf08      	it	eq
 8008edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	bfc4      	itt	gt
 8008ee4:	1a9b      	subgt	r3, r3, r2
 8008ee6:	18ed      	addgt	r5, r5, r3
 8008ee8:	341a      	adds	r4, #26
 8008eea:	42b5      	cmp	r5, r6
 8008eec:	d11a      	bne.n	8008f24 <_printf_common+0xcc>
 8008eee:	2000      	movs	r0, #0
 8008ef0:	e008      	b.n	8008f04 <_printf_common+0xac>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	4652      	mov	r2, sl
 8008ef6:	4649      	mov	r1, r9
 8008ef8:	4638      	mov	r0, r7
 8008efa:	47c0      	blx	r8
 8008efc:	3001      	adds	r0, #1
 8008efe:	d103      	bne.n	8008f08 <_printf_common+0xb0>
 8008f00:	f04f 30ff 	mov.w	r0, #4294967295
 8008f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f08:	3501      	adds	r5, #1
 8008f0a:	e7c4      	b.n	8008e96 <_printf_common+0x3e>
 8008f0c:	2030      	movs	r0, #48	; 0x30
 8008f0e:	18e1      	adds	r1, r4, r3
 8008f10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f14:	1c5a      	adds	r2, r3, #1
 8008f16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f1a:	4422      	add	r2, r4
 8008f1c:	3302      	adds	r3, #2
 8008f1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f22:	e7c5      	b.n	8008eb0 <_printf_common+0x58>
 8008f24:	2301      	movs	r3, #1
 8008f26:	4622      	mov	r2, r4
 8008f28:	4649      	mov	r1, r9
 8008f2a:	4638      	mov	r0, r7
 8008f2c:	47c0      	blx	r8
 8008f2e:	3001      	adds	r0, #1
 8008f30:	d0e6      	beq.n	8008f00 <_printf_common+0xa8>
 8008f32:	3601      	adds	r6, #1
 8008f34:	e7d9      	b.n	8008eea <_printf_common+0x92>
	...

08008f38 <_printf_i>:
 8008f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f3c:	7e0f      	ldrb	r7, [r1, #24]
 8008f3e:	4691      	mov	r9, r2
 8008f40:	2f78      	cmp	r7, #120	; 0x78
 8008f42:	4680      	mov	r8, r0
 8008f44:	460c      	mov	r4, r1
 8008f46:	469a      	mov	sl, r3
 8008f48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f4e:	d807      	bhi.n	8008f60 <_printf_i+0x28>
 8008f50:	2f62      	cmp	r7, #98	; 0x62
 8008f52:	d80a      	bhi.n	8008f6a <_printf_i+0x32>
 8008f54:	2f00      	cmp	r7, #0
 8008f56:	f000 80d9 	beq.w	800910c <_printf_i+0x1d4>
 8008f5a:	2f58      	cmp	r7, #88	; 0x58
 8008f5c:	f000 80a4 	beq.w	80090a8 <_printf_i+0x170>
 8008f60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f68:	e03a      	b.n	8008fe0 <_printf_i+0xa8>
 8008f6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f6e:	2b15      	cmp	r3, #21
 8008f70:	d8f6      	bhi.n	8008f60 <_printf_i+0x28>
 8008f72:	a101      	add	r1, pc, #4	; (adr r1, 8008f78 <_printf_i+0x40>)
 8008f74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f78:	08008fd1 	.word	0x08008fd1
 8008f7c:	08008fe5 	.word	0x08008fe5
 8008f80:	08008f61 	.word	0x08008f61
 8008f84:	08008f61 	.word	0x08008f61
 8008f88:	08008f61 	.word	0x08008f61
 8008f8c:	08008f61 	.word	0x08008f61
 8008f90:	08008fe5 	.word	0x08008fe5
 8008f94:	08008f61 	.word	0x08008f61
 8008f98:	08008f61 	.word	0x08008f61
 8008f9c:	08008f61 	.word	0x08008f61
 8008fa0:	08008f61 	.word	0x08008f61
 8008fa4:	080090f3 	.word	0x080090f3
 8008fa8:	08009015 	.word	0x08009015
 8008fac:	080090d5 	.word	0x080090d5
 8008fb0:	08008f61 	.word	0x08008f61
 8008fb4:	08008f61 	.word	0x08008f61
 8008fb8:	08009115 	.word	0x08009115
 8008fbc:	08008f61 	.word	0x08008f61
 8008fc0:	08009015 	.word	0x08009015
 8008fc4:	08008f61 	.word	0x08008f61
 8008fc8:	08008f61 	.word	0x08008f61
 8008fcc:	080090dd 	.word	0x080090dd
 8008fd0:	682b      	ldr	r3, [r5, #0]
 8008fd2:	1d1a      	adds	r2, r3, #4
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	602a      	str	r2, [r5, #0]
 8008fd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e0a4      	b.n	800912e <_printf_i+0x1f6>
 8008fe4:	6820      	ldr	r0, [r4, #0]
 8008fe6:	6829      	ldr	r1, [r5, #0]
 8008fe8:	0606      	lsls	r6, r0, #24
 8008fea:	f101 0304 	add.w	r3, r1, #4
 8008fee:	d50a      	bpl.n	8009006 <_printf_i+0xce>
 8008ff0:	680e      	ldr	r6, [r1, #0]
 8008ff2:	602b      	str	r3, [r5, #0]
 8008ff4:	2e00      	cmp	r6, #0
 8008ff6:	da03      	bge.n	8009000 <_printf_i+0xc8>
 8008ff8:	232d      	movs	r3, #45	; 0x2d
 8008ffa:	4276      	negs	r6, r6
 8008ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009000:	230a      	movs	r3, #10
 8009002:	485e      	ldr	r0, [pc, #376]	; (800917c <_printf_i+0x244>)
 8009004:	e019      	b.n	800903a <_printf_i+0x102>
 8009006:	680e      	ldr	r6, [r1, #0]
 8009008:	f010 0f40 	tst.w	r0, #64	; 0x40
 800900c:	602b      	str	r3, [r5, #0]
 800900e:	bf18      	it	ne
 8009010:	b236      	sxthne	r6, r6
 8009012:	e7ef      	b.n	8008ff4 <_printf_i+0xbc>
 8009014:	682b      	ldr	r3, [r5, #0]
 8009016:	6820      	ldr	r0, [r4, #0]
 8009018:	1d19      	adds	r1, r3, #4
 800901a:	6029      	str	r1, [r5, #0]
 800901c:	0601      	lsls	r1, r0, #24
 800901e:	d501      	bpl.n	8009024 <_printf_i+0xec>
 8009020:	681e      	ldr	r6, [r3, #0]
 8009022:	e002      	b.n	800902a <_printf_i+0xf2>
 8009024:	0646      	lsls	r6, r0, #25
 8009026:	d5fb      	bpl.n	8009020 <_printf_i+0xe8>
 8009028:	881e      	ldrh	r6, [r3, #0]
 800902a:	2f6f      	cmp	r7, #111	; 0x6f
 800902c:	bf0c      	ite	eq
 800902e:	2308      	moveq	r3, #8
 8009030:	230a      	movne	r3, #10
 8009032:	4852      	ldr	r0, [pc, #328]	; (800917c <_printf_i+0x244>)
 8009034:	2100      	movs	r1, #0
 8009036:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800903a:	6865      	ldr	r5, [r4, #4]
 800903c:	2d00      	cmp	r5, #0
 800903e:	bfa8      	it	ge
 8009040:	6821      	ldrge	r1, [r4, #0]
 8009042:	60a5      	str	r5, [r4, #8]
 8009044:	bfa4      	itt	ge
 8009046:	f021 0104 	bicge.w	r1, r1, #4
 800904a:	6021      	strge	r1, [r4, #0]
 800904c:	b90e      	cbnz	r6, 8009052 <_printf_i+0x11a>
 800904e:	2d00      	cmp	r5, #0
 8009050:	d04d      	beq.n	80090ee <_printf_i+0x1b6>
 8009052:	4615      	mov	r5, r2
 8009054:	fbb6 f1f3 	udiv	r1, r6, r3
 8009058:	fb03 6711 	mls	r7, r3, r1, r6
 800905c:	5dc7      	ldrb	r7, [r0, r7]
 800905e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009062:	4637      	mov	r7, r6
 8009064:	42bb      	cmp	r3, r7
 8009066:	460e      	mov	r6, r1
 8009068:	d9f4      	bls.n	8009054 <_printf_i+0x11c>
 800906a:	2b08      	cmp	r3, #8
 800906c:	d10b      	bne.n	8009086 <_printf_i+0x14e>
 800906e:	6823      	ldr	r3, [r4, #0]
 8009070:	07de      	lsls	r6, r3, #31
 8009072:	d508      	bpl.n	8009086 <_printf_i+0x14e>
 8009074:	6923      	ldr	r3, [r4, #16]
 8009076:	6861      	ldr	r1, [r4, #4]
 8009078:	4299      	cmp	r1, r3
 800907a:	bfde      	ittt	le
 800907c:	2330      	movle	r3, #48	; 0x30
 800907e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009082:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009086:	1b52      	subs	r2, r2, r5
 8009088:	6122      	str	r2, [r4, #16]
 800908a:	464b      	mov	r3, r9
 800908c:	4621      	mov	r1, r4
 800908e:	4640      	mov	r0, r8
 8009090:	f8cd a000 	str.w	sl, [sp]
 8009094:	aa03      	add	r2, sp, #12
 8009096:	f7ff fedf 	bl	8008e58 <_printf_common>
 800909a:	3001      	adds	r0, #1
 800909c:	d14c      	bne.n	8009138 <_printf_i+0x200>
 800909e:	f04f 30ff 	mov.w	r0, #4294967295
 80090a2:	b004      	add	sp, #16
 80090a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090a8:	4834      	ldr	r0, [pc, #208]	; (800917c <_printf_i+0x244>)
 80090aa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80090ae:	6829      	ldr	r1, [r5, #0]
 80090b0:	6823      	ldr	r3, [r4, #0]
 80090b2:	f851 6b04 	ldr.w	r6, [r1], #4
 80090b6:	6029      	str	r1, [r5, #0]
 80090b8:	061d      	lsls	r5, r3, #24
 80090ba:	d514      	bpl.n	80090e6 <_printf_i+0x1ae>
 80090bc:	07df      	lsls	r7, r3, #31
 80090be:	bf44      	itt	mi
 80090c0:	f043 0320 	orrmi.w	r3, r3, #32
 80090c4:	6023      	strmi	r3, [r4, #0]
 80090c6:	b91e      	cbnz	r6, 80090d0 <_printf_i+0x198>
 80090c8:	6823      	ldr	r3, [r4, #0]
 80090ca:	f023 0320 	bic.w	r3, r3, #32
 80090ce:	6023      	str	r3, [r4, #0]
 80090d0:	2310      	movs	r3, #16
 80090d2:	e7af      	b.n	8009034 <_printf_i+0xfc>
 80090d4:	6823      	ldr	r3, [r4, #0]
 80090d6:	f043 0320 	orr.w	r3, r3, #32
 80090da:	6023      	str	r3, [r4, #0]
 80090dc:	2378      	movs	r3, #120	; 0x78
 80090de:	4828      	ldr	r0, [pc, #160]	; (8009180 <_printf_i+0x248>)
 80090e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090e4:	e7e3      	b.n	80090ae <_printf_i+0x176>
 80090e6:	0659      	lsls	r1, r3, #25
 80090e8:	bf48      	it	mi
 80090ea:	b2b6      	uxthmi	r6, r6
 80090ec:	e7e6      	b.n	80090bc <_printf_i+0x184>
 80090ee:	4615      	mov	r5, r2
 80090f0:	e7bb      	b.n	800906a <_printf_i+0x132>
 80090f2:	682b      	ldr	r3, [r5, #0]
 80090f4:	6826      	ldr	r6, [r4, #0]
 80090f6:	1d18      	adds	r0, r3, #4
 80090f8:	6961      	ldr	r1, [r4, #20]
 80090fa:	6028      	str	r0, [r5, #0]
 80090fc:	0635      	lsls	r5, r6, #24
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	d501      	bpl.n	8009106 <_printf_i+0x1ce>
 8009102:	6019      	str	r1, [r3, #0]
 8009104:	e002      	b.n	800910c <_printf_i+0x1d4>
 8009106:	0670      	lsls	r0, r6, #25
 8009108:	d5fb      	bpl.n	8009102 <_printf_i+0x1ca>
 800910a:	8019      	strh	r1, [r3, #0]
 800910c:	2300      	movs	r3, #0
 800910e:	4615      	mov	r5, r2
 8009110:	6123      	str	r3, [r4, #16]
 8009112:	e7ba      	b.n	800908a <_printf_i+0x152>
 8009114:	682b      	ldr	r3, [r5, #0]
 8009116:	2100      	movs	r1, #0
 8009118:	1d1a      	adds	r2, r3, #4
 800911a:	602a      	str	r2, [r5, #0]
 800911c:	681d      	ldr	r5, [r3, #0]
 800911e:	6862      	ldr	r2, [r4, #4]
 8009120:	4628      	mov	r0, r5
 8009122:	f000 f82f 	bl	8009184 <memchr>
 8009126:	b108      	cbz	r0, 800912c <_printf_i+0x1f4>
 8009128:	1b40      	subs	r0, r0, r5
 800912a:	6060      	str	r0, [r4, #4]
 800912c:	6863      	ldr	r3, [r4, #4]
 800912e:	6123      	str	r3, [r4, #16]
 8009130:	2300      	movs	r3, #0
 8009132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009136:	e7a8      	b.n	800908a <_printf_i+0x152>
 8009138:	462a      	mov	r2, r5
 800913a:	4649      	mov	r1, r9
 800913c:	4640      	mov	r0, r8
 800913e:	6923      	ldr	r3, [r4, #16]
 8009140:	47d0      	blx	sl
 8009142:	3001      	adds	r0, #1
 8009144:	d0ab      	beq.n	800909e <_printf_i+0x166>
 8009146:	6823      	ldr	r3, [r4, #0]
 8009148:	079b      	lsls	r3, r3, #30
 800914a:	d413      	bmi.n	8009174 <_printf_i+0x23c>
 800914c:	68e0      	ldr	r0, [r4, #12]
 800914e:	9b03      	ldr	r3, [sp, #12]
 8009150:	4298      	cmp	r0, r3
 8009152:	bfb8      	it	lt
 8009154:	4618      	movlt	r0, r3
 8009156:	e7a4      	b.n	80090a2 <_printf_i+0x16a>
 8009158:	2301      	movs	r3, #1
 800915a:	4632      	mov	r2, r6
 800915c:	4649      	mov	r1, r9
 800915e:	4640      	mov	r0, r8
 8009160:	47d0      	blx	sl
 8009162:	3001      	adds	r0, #1
 8009164:	d09b      	beq.n	800909e <_printf_i+0x166>
 8009166:	3501      	adds	r5, #1
 8009168:	68e3      	ldr	r3, [r4, #12]
 800916a:	9903      	ldr	r1, [sp, #12]
 800916c:	1a5b      	subs	r3, r3, r1
 800916e:	42ab      	cmp	r3, r5
 8009170:	dcf2      	bgt.n	8009158 <_printf_i+0x220>
 8009172:	e7eb      	b.n	800914c <_printf_i+0x214>
 8009174:	2500      	movs	r5, #0
 8009176:	f104 0619 	add.w	r6, r4, #25
 800917a:	e7f5      	b.n	8009168 <_printf_i+0x230>
 800917c:	08009511 	.word	0x08009511
 8009180:	08009522 	.word	0x08009522

08009184 <memchr>:
 8009184:	4603      	mov	r3, r0
 8009186:	b510      	push	{r4, lr}
 8009188:	b2c9      	uxtb	r1, r1
 800918a:	4402      	add	r2, r0
 800918c:	4293      	cmp	r3, r2
 800918e:	4618      	mov	r0, r3
 8009190:	d101      	bne.n	8009196 <memchr+0x12>
 8009192:	2000      	movs	r0, #0
 8009194:	e003      	b.n	800919e <memchr+0x1a>
 8009196:	7804      	ldrb	r4, [r0, #0]
 8009198:	3301      	adds	r3, #1
 800919a:	428c      	cmp	r4, r1
 800919c:	d1f6      	bne.n	800918c <memchr+0x8>
 800919e:	bd10      	pop	{r4, pc}

080091a0 <memcpy>:
 80091a0:	440a      	add	r2, r1
 80091a2:	4291      	cmp	r1, r2
 80091a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80091a8:	d100      	bne.n	80091ac <memcpy+0xc>
 80091aa:	4770      	bx	lr
 80091ac:	b510      	push	{r4, lr}
 80091ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091b2:	4291      	cmp	r1, r2
 80091b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091b8:	d1f9      	bne.n	80091ae <memcpy+0xe>
 80091ba:	bd10      	pop	{r4, pc}

080091bc <memmove>:
 80091bc:	4288      	cmp	r0, r1
 80091be:	b510      	push	{r4, lr}
 80091c0:	eb01 0402 	add.w	r4, r1, r2
 80091c4:	d902      	bls.n	80091cc <memmove+0x10>
 80091c6:	4284      	cmp	r4, r0
 80091c8:	4623      	mov	r3, r4
 80091ca:	d807      	bhi.n	80091dc <memmove+0x20>
 80091cc:	1e43      	subs	r3, r0, #1
 80091ce:	42a1      	cmp	r1, r4
 80091d0:	d008      	beq.n	80091e4 <memmove+0x28>
 80091d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091da:	e7f8      	b.n	80091ce <memmove+0x12>
 80091dc:	4601      	mov	r1, r0
 80091de:	4402      	add	r2, r0
 80091e0:	428a      	cmp	r2, r1
 80091e2:	d100      	bne.n	80091e6 <memmove+0x2a>
 80091e4:	bd10      	pop	{r4, pc}
 80091e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091ee:	e7f7      	b.n	80091e0 <memmove+0x24>

080091f0 <_free_r>:
 80091f0:	b538      	push	{r3, r4, r5, lr}
 80091f2:	4605      	mov	r5, r0
 80091f4:	2900      	cmp	r1, #0
 80091f6:	d040      	beq.n	800927a <_free_r+0x8a>
 80091f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091fc:	1f0c      	subs	r4, r1, #4
 80091fe:	2b00      	cmp	r3, #0
 8009200:	bfb8      	it	lt
 8009202:	18e4      	addlt	r4, r4, r3
 8009204:	f000 f910 	bl	8009428 <__malloc_lock>
 8009208:	4a1c      	ldr	r2, [pc, #112]	; (800927c <_free_r+0x8c>)
 800920a:	6813      	ldr	r3, [r2, #0]
 800920c:	b933      	cbnz	r3, 800921c <_free_r+0x2c>
 800920e:	6063      	str	r3, [r4, #4]
 8009210:	6014      	str	r4, [r2, #0]
 8009212:	4628      	mov	r0, r5
 8009214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009218:	f000 b90c 	b.w	8009434 <__malloc_unlock>
 800921c:	42a3      	cmp	r3, r4
 800921e:	d908      	bls.n	8009232 <_free_r+0x42>
 8009220:	6820      	ldr	r0, [r4, #0]
 8009222:	1821      	adds	r1, r4, r0
 8009224:	428b      	cmp	r3, r1
 8009226:	bf01      	itttt	eq
 8009228:	6819      	ldreq	r1, [r3, #0]
 800922a:	685b      	ldreq	r3, [r3, #4]
 800922c:	1809      	addeq	r1, r1, r0
 800922e:	6021      	streq	r1, [r4, #0]
 8009230:	e7ed      	b.n	800920e <_free_r+0x1e>
 8009232:	461a      	mov	r2, r3
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	b10b      	cbz	r3, 800923c <_free_r+0x4c>
 8009238:	42a3      	cmp	r3, r4
 800923a:	d9fa      	bls.n	8009232 <_free_r+0x42>
 800923c:	6811      	ldr	r1, [r2, #0]
 800923e:	1850      	adds	r0, r2, r1
 8009240:	42a0      	cmp	r0, r4
 8009242:	d10b      	bne.n	800925c <_free_r+0x6c>
 8009244:	6820      	ldr	r0, [r4, #0]
 8009246:	4401      	add	r1, r0
 8009248:	1850      	adds	r0, r2, r1
 800924a:	4283      	cmp	r3, r0
 800924c:	6011      	str	r1, [r2, #0]
 800924e:	d1e0      	bne.n	8009212 <_free_r+0x22>
 8009250:	6818      	ldr	r0, [r3, #0]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	4401      	add	r1, r0
 8009256:	6011      	str	r1, [r2, #0]
 8009258:	6053      	str	r3, [r2, #4]
 800925a:	e7da      	b.n	8009212 <_free_r+0x22>
 800925c:	d902      	bls.n	8009264 <_free_r+0x74>
 800925e:	230c      	movs	r3, #12
 8009260:	602b      	str	r3, [r5, #0]
 8009262:	e7d6      	b.n	8009212 <_free_r+0x22>
 8009264:	6820      	ldr	r0, [r4, #0]
 8009266:	1821      	adds	r1, r4, r0
 8009268:	428b      	cmp	r3, r1
 800926a:	bf01      	itttt	eq
 800926c:	6819      	ldreq	r1, [r3, #0]
 800926e:	685b      	ldreq	r3, [r3, #4]
 8009270:	1809      	addeq	r1, r1, r0
 8009272:	6021      	streq	r1, [r4, #0]
 8009274:	6063      	str	r3, [r4, #4]
 8009276:	6054      	str	r4, [r2, #4]
 8009278:	e7cb      	b.n	8009212 <_free_r+0x22>
 800927a:	bd38      	pop	{r3, r4, r5, pc}
 800927c:	2000145c 	.word	0x2000145c

08009280 <sbrk_aligned>:
 8009280:	b570      	push	{r4, r5, r6, lr}
 8009282:	4e0e      	ldr	r6, [pc, #56]	; (80092bc <sbrk_aligned+0x3c>)
 8009284:	460c      	mov	r4, r1
 8009286:	6831      	ldr	r1, [r6, #0]
 8009288:	4605      	mov	r5, r0
 800928a:	b911      	cbnz	r1, 8009292 <sbrk_aligned+0x12>
 800928c:	f000 f8bc 	bl	8009408 <_sbrk_r>
 8009290:	6030      	str	r0, [r6, #0]
 8009292:	4621      	mov	r1, r4
 8009294:	4628      	mov	r0, r5
 8009296:	f000 f8b7 	bl	8009408 <_sbrk_r>
 800929a:	1c43      	adds	r3, r0, #1
 800929c:	d00a      	beq.n	80092b4 <sbrk_aligned+0x34>
 800929e:	1cc4      	adds	r4, r0, #3
 80092a0:	f024 0403 	bic.w	r4, r4, #3
 80092a4:	42a0      	cmp	r0, r4
 80092a6:	d007      	beq.n	80092b8 <sbrk_aligned+0x38>
 80092a8:	1a21      	subs	r1, r4, r0
 80092aa:	4628      	mov	r0, r5
 80092ac:	f000 f8ac 	bl	8009408 <_sbrk_r>
 80092b0:	3001      	adds	r0, #1
 80092b2:	d101      	bne.n	80092b8 <sbrk_aligned+0x38>
 80092b4:	f04f 34ff 	mov.w	r4, #4294967295
 80092b8:	4620      	mov	r0, r4
 80092ba:	bd70      	pop	{r4, r5, r6, pc}
 80092bc:	20001460 	.word	0x20001460

080092c0 <_malloc_r>:
 80092c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092c4:	1ccd      	adds	r5, r1, #3
 80092c6:	f025 0503 	bic.w	r5, r5, #3
 80092ca:	3508      	adds	r5, #8
 80092cc:	2d0c      	cmp	r5, #12
 80092ce:	bf38      	it	cc
 80092d0:	250c      	movcc	r5, #12
 80092d2:	2d00      	cmp	r5, #0
 80092d4:	4607      	mov	r7, r0
 80092d6:	db01      	blt.n	80092dc <_malloc_r+0x1c>
 80092d8:	42a9      	cmp	r1, r5
 80092da:	d905      	bls.n	80092e8 <_malloc_r+0x28>
 80092dc:	230c      	movs	r3, #12
 80092de:	2600      	movs	r6, #0
 80092e0:	603b      	str	r3, [r7, #0]
 80092e2:	4630      	mov	r0, r6
 80092e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092e8:	4e2e      	ldr	r6, [pc, #184]	; (80093a4 <_malloc_r+0xe4>)
 80092ea:	f000 f89d 	bl	8009428 <__malloc_lock>
 80092ee:	6833      	ldr	r3, [r6, #0]
 80092f0:	461c      	mov	r4, r3
 80092f2:	bb34      	cbnz	r4, 8009342 <_malloc_r+0x82>
 80092f4:	4629      	mov	r1, r5
 80092f6:	4638      	mov	r0, r7
 80092f8:	f7ff ffc2 	bl	8009280 <sbrk_aligned>
 80092fc:	1c43      	adds	r3, r0, #1
 80092fe:	4604      	mov	r4, r0
 8009300:	d14d      	bne.n	800939e <_malloc_r+0xde>
 8009302:	6834      	ldr	r4, [r6, #0]
 8009304:	4626      	mov	r6, r4
 8009306:	2e00      	cmp	r6, #0
 8009308:	d140      	bne.n	800938c <_malloc_r+0xcc>
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	4631      	mov	r1, r6
 800930e:	4638      	mov	r0, r7
 8009310:	eb04 0803 	add.w	r8, r4, r3
 8009314:	f000 f878 	bl	8009408 <_sbrk_r>
 8009318:	4580      	cmp	r8, r0
 800931a:	d13a      	bne.n	8009392 <_malloc_r+0xd2>
 800931c:	6821      	ldr	r1, [r4, #0]
 800931e:	3503      	adds	r5, #3
 8009320:	1a6d      	subs	r5, r5, r1
 8009322:	f025 0503 	bic.w	r5, r5, #3
 8009326:	3508      	adds	r5, #8
 8009328:	2d0c      	cmp	r5, #12
 800932a:	bf38      	it	cc
 800932c:	250c      	movcc	r5, #12
 800932e:	4638      	mov	r0, r7
 8009330:	4629      	mov	r1, r5
 8009332:	f7ff ffa5 	bl	8009280 <sbrk_aligned>
 8009336:	3001      	adds	r0, #1
 8009338:	d02b      	beq.n	8009392 <_malloc_r+0xd2>
 800933a:	6823      	ldr	r3, [r4, #0]
 800933c:	442b      	add	r3, r5
 800933e:	6023      	str	r3, [r4, #0]
 8009340:	e00e      	b.n	8009360 <_malloc_r+0xa0>
 8009342:	6822      	ldr	r2, [r4, #0]
 8009344:	1b52      	subs	r2, r2, r5
 8009346:	d41e      	bmi.n	8009386 <_malloc_r+0xc6>
 8009348:	2a0b      	cmp	r2, #11
 800934a:	d916      	bls.n	800937a <_malloc_r+0xba>
 800934c:	1961      	adds	r1, r4, r5
 800934e:	42a3      	cmp	r3, r4
 8009350:	6025      	str	r5, [r4, #0]
 8009352:	bf18      	it	ne
 8009354:	6059      	strne	r1, [r3, #4]
 8009356:	6863      	ldr	r3, [r4, #4]
 8009358:	bf08      	it	eq
 800935a:	6031      	streq	r1, [r6, #0]
 800935c:	5162      	str	r2, [r4, r5]
 800935e:	604b      	str	r3, [r1, #4]
 8009360:	4638      	mov	r0, r7
 8009362:	f104 060b 	add.w	r6, r4, #11
 8009366:	f000 f865 	bl	8009434 <__malloc_unlock>
 800936a:	f026 0607 	bic.w	r6, r6, #7
 800936e:	1d23      	adds	r3, r4, #4
 8009370:	1af2      	subs	r2, r6, r3
 8009372:	d0b6      	beq.n	80092e2 <_malloc_r+0x22>
 8009374:	1b9b      	subs	r3, r3, r6
 8009376:	50a3      	str	r3, [r4, r2]
 8009378:	e7b3      	b.n	80092e2 <_malloc_r+0x22>
 800937a:	6862      	ldr	r2, [r4, #4]
 800937c:	42a3      	cmp	r3, r4
 800937e:	bf0c      	ite	eq
 8009380:	6032      	streq	r2, [r6, #0]
 8009382:	605a      	strne	r2, [r3, #4]
 8009384:	e7ec      	b.n	8009360 <_malloc_r+0xa0>
 8009386:	4623      	mov	r3, r4
 8009388:	6864      	ldr	r4, [r4, #4]
 800938a:	e7b2      	b.n	80092f2 <_malloc_r+0x32>
 800938c:	4634      	mov	r4, r6
 800938e:	6876      	ldr	r6, [r6, #4]
 8009390:	e7b9      	b.n	8009306 <_malloc_r+0x46>
 8009392:	230c      	movs	r3, #12
 8009394:	4638      	mov	r0, r7
 8009396:	603b      	str	r3, [r7, #0]
 8009398:	f000 f84c 	bl	8009434 <__malloc_unlock>
 800939c:	e7a1      	b.n	80092e2 <_malloc_r+0x22>
 800939e:	6025      	str	r5, [r4, #0]
 80093a0:	e7de      	b.n	8009360 <_malloc_r+0xa0>
 80093a2:	bf00      	nop
 80093a4:	2000145c 	.word	0x2000145c

080093a8 <_realloc_r>:
 80093a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ac:	4680      	mov	r8, r0
 80093ae:	4614      	mov	r4, r2
 80093b0:	460e      	mov	r6, r1
 80093b2:	b921      	cbnz	r1, 80093be <_realloc_r+0x16>
 80093b4:	4611      	mov	r1, r2
 80093b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093ba:	f7ff bf81 	b.w	80092c0 <_malloc_r>
 80093be:	b92a      	cbnz	r2, 80093cc <_realloc_r+0x24>
 80093c0:	f7ff ff16 	bl	80091f0 <_free_r>
 80093c4:	4625      	mov	r5, r4
 80093c6:	4628      	mov	r0, r5
 80093c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093cc:	f000 f838 	bl	8009440 <_malloc_usable_size_r>
 80093d0:	4284      	cmp	r4, r0
 80093d2:	4607      	mov	r7, r0
 80093d4:	d802      	bhi.n	80093dc <_realloc_r+0x34>
 80093d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80093da:	d812      	bhi.n	8009402 <_realloc_r+0x5a>
 80093dc:	4621      	mov	r1, r4
 80093de:	4640      	mov	r0, r8
 80093e0:	f7ff ff6e 	bl	80092c0 <_malloc_r>
 80093e4:	4605      	mov	r5, r0
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d0ed      	beq.n	80093c6 <_realloc_r+0x1e>
 80093ea:	42bc      	cmp	r4, r7
 80093ec:	4622      	mov	r2, r4
 80093ee:	4631      	mov	r1, r6
 80093f0:	bf28      	it	cs
 80093f2:	463a      	movcs	r2, r7
 80093f4:	f7ff fed4 	bl	80091a0 <memcpy>
 80093f8:	4631      	mov	r1, r6
 80093fa:	4640      	mov	r0, r8
 80093fc:	f7ff fef8 	bl	80091f0 <_free_r>
 8009400:	e7e1      	b.n	80093c6 <_realloc_r+0x1e>
 8009402:	4635      	mov	r5, r6
 8009404:	e7df      	b.n	80093c6 <_realloc_r+0x1e>
	...

08009408 <_sbrk_r>:
 8009408:	b538      	push	{r3, r4, r5, lr}
 800940a:	2300      	movs	r3, #0
 800940c:	4d05      	ldr	r5, [pc, #20]	; (8009424 <_sbrk_r+0x1c>)
 800940e:	4604      	mov	r4, r0
 8009410:	4608      	mov	r0, r1
 8009412:	602b      	str	r3, [r5, #0]
 8009414:	f7f7 fae4 	bl	80009e0 <_sbrk>
 8009418:	1c43      	adds	r3, r0, #1
 800941a:	d102      	bne.n	8009422 <_sbrk_r+0x1a>
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	b103      	cbz	r3, 8009422 <_sbrk_r+0x1a>
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	bd38      	pop	{r3, r4, r5, pc}
 8009424:	20001464 	.word	0x20001464

08009428 <__malloc_lock>:
 8009428:	4801      	ldr	r0, [pc, #4]	; (8009430 <__malloc_lock+0x8>)
 800942a:	f000 b811 	b.w	8009450 <__retarget_lock_acquire_recursive>
 800942e:	bf00      	nop
 8009430:	20001468 	.word	0x20001468

08009434 <__malloc_unlock>:
 8009434:	4801      	ldr	r0, [pc, #4]	; (800943c <__malloc_unlock+0x8>)
 8009436:	f000 b80c 	b.w	8009452 <__retarget_lock_release_recursive>
 800943a:	bf00      	nop
 800943c:	20001468 	.word	0x20001468

08009440 <_malloc_usable_size_r>:
 8009440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009444:	1f18      	subs	r0, r3, #4
 8009446:	2b00      	cmp	r3, #0
 8009448:	bfbc      	itt	lt
 800944a:	580b      	ldrlt	r3, [r1, r0]
 800944c:	18c0      	addlt	r0, r0, r3
 800944e:	4770      	bx	lr

08009450 <__retarget_lock_acquire_recursive>:
 8009450:	4770      	bx	lr

08009452 <__retarget_lock_release_recursive>:
 8009452:	4770      	bx	lr

08009454 <_init>:
 8009454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009456:	bf00      	nop
 8009458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800945a:	bc08      	pop	{r3}
 800945c:	469e      	mov	lr, r3
 800945e:	4770      	bx	lr

08009460 <_fini>:
 8009460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009462:	bf00      	nop
 8009464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009466:	bc08      	pop	{r3}
 8009468:	469e      	mov	lr, r3
 800946a:	4770      	bx	lr
