
Wireless Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009320  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800945c  0800945c  0001945c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009524  08009524  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009524  08009524  00019524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800952c  0800952c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800952c  0800952c  0001952c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009530  08009530  00019530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001290  200001e0  08009714  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001470  08009714  00021470  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d3f  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030de  00000000  00000000  00031f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  00035028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  00035f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016acc  00000000  00000000  00036d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143e8  00000000  00000000  0004d824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c497  00000000  00000000  00061c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de0a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004230  00000000  00000000  000de0f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001e0 	.word	0x200001e0
 8000158:	00000000 	.word	0x00000000
 800015c:	08009444 	.word	0x08009444

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001e4 	.word	0x200001e4
 8000178:	08009444 	.word	0x08009444

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b0c2      	sub	sp, #264	; 0x108
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049a:	f000 fad8 	bl	8000a4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049e:	f000 f859 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a2:	f000 f90b 	bl	80006bc <MX_GPIO_Init>
  MX_I2C1_Init();
 80004a6:	f000 f8a7 	bl	80005f8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004aa:	f000 f8d3 	bl	8000654 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004ae:	f007 fe6d 	bl	800818c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* initialize the LoRa chip */
  LoRa_Init(&hspi1);
 80004b2:	4824      	ldr	r0, [pc, #144]	; (8000544 <main+0xb0>)
 80004b4:	f007 fd0e 	bl	8007ed4 <LoRa_Init>

  /* Send a status message to USB port */
  uint8_t buffer[256];
  sprintf((char *)buffer, "Entering transmit loop\r\n");
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	4923      	ldr	r1, [pc, #140]	; (8000548 <main+0xb4>)
 80004bc:	4618      	mov	r0, r3
 80004be:	f008 fb47 	bl	8008b50 <siprintf>
  CDC_Transmit_FS(buffer, strlen((char *)buffer)); /* Send the message on USB */
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff fe59 	bl	800017c <strlen>
 80004ca:	4603      	mov	r3, r0
 80004cc:	b29a      	uxth	r2, r3
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	4611      	mov	r1, r2
 80004d2:	4618      	mov	r0, r3
 80004d4:	f007 ff18 	bl	8008308 <CDC_Transmit_FS>

  int count = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count++;
 80004de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80004e2:	3301      	adds	r3, #1
 80004e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	  sprintf((char *)buffer, "Count = %d", count);
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80004ee:	4917      	ldr	r1, [pc, #92]	; (800054c <main+0xb8>)
 80004f0:	4618      	mov	r0, r3
 80004f2:	f008 fb2d 	bl	8008b50 <siprintf>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); /* Turn on the LED */
 80004f6:	2201      	movs	r2, #1
 80004f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fc:	4814      	ldr	r0, [pc, #80]	; (8000550 <main+0xbc>)
 80004fe:	f000 fddc 	bl	80010ba <HAL_GPIO_WritePin>
	  LoRaTransmit(buffer, strlen((char *)buffer));
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff fe39 	bl	800017c <strlen>
 800050a:	4603      	mov	r3, r0
 800050c:	b2da      	uxtb	r2, r3
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	4611      	mov	r1, r2
 8000512:	4618      	mov	r0, r3
 8000514:	f007 fdb2 	bl	800807c <LoRaTransmit>
	  HAL_GPIO_WritePin (LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); /* Turn off the LED */
 8000518:	2200      	movs	r2, #0
 800051a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800051e:	480c      	ldr	r0, [pc, #48]	; (8000550 <main+0xbc>)
 8000520:	f000 fdcb 	bl	80010ba <HAL_GPIO_WritePin>
//	  LoRaReceive(buffer, 0); /* go to receive mode with timeout = 0 (wait forever for one message) */
	  CDC_Transmit_FS(buffer, strlen((char *)buffer)); /* Send the message on USB */
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff fe28 	bl	800017c <strlen>
 800052c:	4603      	mov	r3, r0
 800052e:	b29a      	uxth	r2, r3
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	4611      	mov	r1, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f007 fee7 	bl	8008308 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 800053a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800053e:	f000 faf5 	bl	8000b2c <HAL_Delay>
	  count++;
 8000542:	e7cc      	b.n	80004de <main+0x4a>
 8000544:	20000250 	.word	0x20000250
 8000548:	0800945c 	.word	0x0800945c
 800054c:	08009478 	.word	0x08009478
 8000550:	40020800 	.word	0x40020800

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b092      	sub	sp, #72	; 0x48
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	2234      	movs	r2, #52	; 0x34
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f008 faec 	bl	8008b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	463b      	mov	r3, r7
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000576:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <SystemClock_Config+0xa0>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800057e:	4a1d      	ldr	r2, [pc, #116]	; (80005f4 <SystemClock_Config+0xa0>)
 8000580:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000584:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000586:	2303      	movs	r3, #3
 8000588:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058a:	2301      	movs	r3, #1
 800058c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058e:	2301      	movs	r3, #1
 8000590:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000592:	2310      	movs	r3, #16
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80005a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005aa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	4618      	mov	r0, r3
 80005b2:	f002 fb0b 	bl	8002bcc <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80005bc:	f000 f8f8 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c4:	2301      	movs	r3, #1
 80005c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80005d0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d6:	463b      	mov	r3, r7
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fe26 	bl	800322c <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005e6:	f000 f8e3 	bl	80007b0 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3748      	adds	r7, #72	; 0x48
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_I2C1_Init+0x50>)
 80005fe:	4a13      	ldr	r2, [pc, #76]	; (800064c <MX_I2C1_Init+0x54>)
 8000600:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_I2C1_Init+0x50>)
 8000604:	4a12      	ldr	r2, [pc, #72]	; (8000650 <MX_I2C1_Init+0x58>)
 8000606:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_I2C1_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_I2C1_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_I2C1_Init+0x50>)
 8000616:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800061a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <MX_I2C1_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_I2C1_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_I2C1_Init+0x50>)
 8000636:	f000 fd59 	bl	80010ec <HAL_I2C_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000640:	f000 f8b6 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200001fc 	.word	0x200001fc
 800064c:	40005400 	.word	0x40005400
 8000650:	000186a0 	.word	0x000186a0

08000654 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <MX_SPI1_Init+0x60>)
 800065a:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <MX_SPI1_Init+0x64>)
 800065c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <MX_SPI1_Init+0x60>)
 8000660:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000664:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_SPI1_Init+0x60>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_SPI1_Init+0x60>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_SPI1_Init+0x60>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000678:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_SPI1_Init+0x60>)
 800067a:	2200      	movs	r2, #0
 800067c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <MX_SPI1_Init+0x60>)
 8000680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000684:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_SPI1_Init+0x60>)
 8000688:	2200      	movs	r2, #0
 800068a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_SPI1_Init+0x60>)
 800068e:	2200      	movs	r2, #0
 8000690:	621a      	str	r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_SPI1_Init+0x60>)
 8000694:	2200      	movs	r2, #0
 8000696:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_SPI1_Init+0x60>)
 800069a:	220a      	movs	r2, #10
 800069c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_SPI1_Init+0x60>)
 80006a0:	f003 f874 	bl	800378c <HAL_SPI_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 80006aa:	f000 f881 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000250 	.word	0x20000250
 80006b8:	40013000 	.word	0x40013000

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	; 0x28
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	4b34      	ldr	r3, [pc, #208]	; (80007a4 <MX_GPIO_Init+0xe8>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a33      	ldr	r2, [pc, #204]	; (80007a4 <MX_GPIO_Init+0xe8>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b31      	ldr	r3, [pc, #196]	; (80007a4 <MX_GPIO_Init+0xe8>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <MX_GPIO_Init+0xe8>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	4a2d      	ldr	r2, [pc, #180]	; (80007a4 <MX_GPIO_Init+0xe8>)
 80006f0:	f043 0320 	orr.w	r3, r3, #32
 80006f4:	61d3      	str	r3, [r2, #28]
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <MX_GPIO_Init+0xe8>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	f003 0320 	and.w	r3, r3, #32
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <MX_GPIO_Init+0xe8>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a27      	ldr	r2, [pc, #156]	; (80007a4 <MX_GPIO_Init+0xe8>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	61d3      	str	r3, [r2, #28]
 800070e:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <MX_GPIO_Init+0xe8>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <MX_GPIO_Init+0xe8>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <MX_GPIO_Init+0xe8>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	61d3      	str	r3, [r2, #28]
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_GPIO_Init+0xe8>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000738:	481b      	ldr	r0, [pc, #108]	; (80007a8 <MX_GPIO_Init+0xec>)
 800073a:	f000 fcbe 	bl	80010ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LoRa_NRST_Pin|LoRa_NSS_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2111      	movs	r1, #17
 8000742:	481a      	ldr	r0, [pc, #104]	; (80007ac <MX_GPIO_Init+0xf0>)
 8000744:	f000 fcb9 	bl	80010ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	2301      	movs	r3, #1
 8000750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	4811      	ldr	r0, [pc, #68]	; (80007a8 <MX_GPIO_Init+0xec>)
 8000762:	f000 fb13 	bl	8000d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_NRST_Pin LoRa_NSS_Pin */
  GPIO_InitStruct.Pin = LoRa_NRST_Pin|LoRa_NSS_Pin;
 8000766:	2311      	movs	r3, #17
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	480b      	ldr	r0, [pc, #44]	; (80007ac <MX_GPIO_Init+0xf0>)
 800077e:	f000 fb05 	bl	8000d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_DIO3_Pin LoRa_DIO2_Pin LoRa_DIO1_Pin LoRa_BUSY_Pin */
  GPIO_InitStruct.Pin = LoRa_DIO3_Pin|LoRa_DIO2_Pin|LoRa_DIO1_Pin|LoRa_BUSY_Pin;
 8000782:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_GPIO_Init+0xf0>)
 8000798:	f000 faf8 	bl	8000d8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020800 	.word	0x40020800
 80007ac:	40020000 	.word	0x40020000

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <Error_Handler+0x8>
	...

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <HAL_MspInit+0x58>)
 80007c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c6:	4a13      	ldr	r2, [pc, #76]	; (8000814 <HAL_MspInit+0x58>)
 80007c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007cc:	6253      	str	r3, [r2, #36]	; 0x24
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <HAL_MspInit+0x58>)
 80007d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <HAL_MspInit+0x58>)
 80007dc:	6a1b      	ldr	r3, [r3, #32]
 80007de:	4a0d      	ldr	r2, [pc, #52]	; (8000814 <HAL_MspInit+0x58>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6213      	str	r3, [r2, #32]
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <HAL_MspInit+0x58>)
 80007e8:	6a1b      	ldr	r3, [r3, #32]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_MspInit+0x58>)
 80007f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f6:	4a07      	ldr	r2, [pc, #28]	; (8000814 <HAL_MspInit+0x58>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fc:	6253      	str	r3, [r2, #36]	; 0x24
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <HAL_MspInit+0x58>)
 8000800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080a:	bf00      	nop
 800080c:	3714      	adds	r7, #20
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	40023800 	.word	0x40023800

08000818 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a17      	ldr	r2, [pc, #92]	; (8000894 <HAL_I2C_MspInit+0x7c>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d127      	bne.n	800088a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <HAL_I2C_MspInit+0x80>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	4a16      	ldr	r2, [pc, #88]	; (8000898 <HAL_I2C_MspInit+0x80>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	61d3      	str	r3, [r2, #28]
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <HAL_I2C_MspInit+0x80>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000852:	23c0      	movs	r3, #192	; 0xc0
 8000854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000856:	2312      	movs	r3, #18
 8000858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085e:	2303      	movs	r3, #3
 8000860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000862:	2304      	movs	r3, #4
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	480b      	ldr	r0, [pc, #44]	; (800089c <HAL_I2C_MspInit+0x84>)
 800086e:	f000 fa8d 	bl	8000d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <HAL_I2C_MspInit+0x80>)
 8000874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000876:	4a08      	ldr	r2, [pc, #32]	; (8000898 <HAL_I2C_MspInit+0x80>)
 8000878:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800087c:	6253      	str	r3, [r2, #36]	; 0x24
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_I2C_MspInit+0x80>)
 8000880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	; 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40005400 	.word	0x40005400
 8000898:	40023800 	.word	0x40023800
 800089c:	40020400 	.word	0x40020400

080008a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a17      	ldr	r2, [pc, #92]	; (800091c <HAL_SPI_MspInit+0x7c>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d127      	bne.n	8000912 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008c2:	4b17      	ldr	r3, [pc, #92]	; (8000920 <HAL_SPI_MspInit+0x80>)
 80008c4:	6a1b      	ldr	r3, [r3, #32]
 80008c6:	4a16      	ldr	r2, [pc, #88]	; (8000920 <HAL_SPI_MspInit+0x80>)
 80008c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008cc:	6213      	str	r3, [r2, #32]
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <HAL_SPI_MspInit+0x80>)
 80008d0:	6a1b      	ldr	r3, [r3, #32]
 80008d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <HAL_SPI_MspInit+0x80>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	4a10      	ldr	r2, [pc, #64]	; (8000920 <HAL_SPI_MspInit+0x80>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	61d3      	str	r3, [r2, #28]
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <HAL_SPI_MspInit+0x80>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008f2:	23e0      	movs	r3, #224	; 0xe0
 80008f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fe:	2303      	movs	r3, #3
 8000900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000902:	2305      	movs	r3, #5
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <HAL_SPI_MspInit+0x84>)
 800090e:	f000 fa3d 	bl	8000d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000912:	bf00      	nop
 8000914:	3728      	adds	r7, #40	; 0x28
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40013000 	.word	0x40013000
 8000920:	40023800 	.word	0x40023800
 8000924:	40020000 	.word	0x40020000

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800092c:	e7fe      	b.n	800092c <NMI_Handler+0x4>

0800092e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <HardFault_Handler+0x4>

08000934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <MemManage_Handler+0x4>

0800093a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <BusFault_Handler+0x4>

08000940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <UsageFault_Handler+0x4>

08000946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr

08000952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr

0800095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr

0800096a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800096e:	f000 f8c1 	bl	8000af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <USB_LP_IRQHandler+0x10>)
 800097e:	f000 fdfd 	bl	800157c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000f54 	.word	0x20000f54

0800098c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000994:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <_sbrk+0x5c>)
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <_sbrk+0x60>)
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <_sbrk+0x64>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d102      	bne.n	80009ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <_sbrk+0x64>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <_sbrk+0x68>)
 80009ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <_sbrk+0x64>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d207      	bcs.n	80009cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009bc:	f008 f896 	bl	8008aec <__errno>
 80009c0:	4603      	mov	r3, r0
 80009c2:	220c      	movs	r2, #12
 80009c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ca:	e009      	b.n	80009e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <_sbrk+0x64>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009d2:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <_sbrk+0x64>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	4a05      	ldr	r2, [pc, #20]	; (80009f0 <_sbrk+0x64>)
 80009dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009de:	68fb      	ldr	r3, [r7, #12]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20002800 	.word	0x20002800
 80009ec:	00000400 	.word	0x00000400
 80009f0:	200002a8 	.word	0x200002a8
 80009f4:	20001470 	.word	0x20001470

080009f8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a04:	480c      	ldr	r0, [pc, #48]	; (8000a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a06:	490d      	ldr	r1, [pc, #52]	; (8000a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a08:	4a0d      	ldr	r2, [pc, #52]	; (8000a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a0c:	e002      	b.n	8000a14 <LoopCopyDataInit>

08000a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a12:	3304      	adds	r3, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a18:	d3f9      	bcc.n	8000a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a1c:	4c0a      	ldr	r4, [pc, #40]	; (8000a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a20:	e001      	b.n	8000a26 <LoopFillZerobss>

08000a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a24:	3204      	adds	r2, #4

08000a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a28:	d3fb      	bcc.n	8000a22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a2a:	f7ff ffe5 	bl	80009f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2e:	f008 f863 	bl	8008af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a32:	f7ff fd2f 	bl	8000494 <main>
  bx lr
 8000a36:	4770      	bx	lr
  ldr r0, =_sdata
 8000a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a3c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000a40:	08009534 	.word	0x08009534
  ldr r2, =_sbss
 8000a44:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000a48:	20001470 	.word	0x20001470

08000a4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC1_IRQHandler>

08000a4e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b082      	sub	sp, #8
 8000a52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a54:	2300      	movs	r3, #0
 8000a56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a58:	2003      	movs	r0, #3
 8000a5a:	f000 f955 	bl	8000d08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a5e:	200f      	movs	r0, #15
 8000a60:	f000 f80e 	bl	8000a80 <HAL_InitTick>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d002      	beq.n	8000a70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	71fb      	strb	r3, [r7, #7]
 8000a6e:	e001      	b.n	8000a74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a70:	f7ff fea4 	bl	80007bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a74:	79fb      	ldrb	r3, [r7, #7]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <HAL_InitTick+0x68>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d022      	beq.n	8000ada <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <HAL_InitTick+0x6c>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <HAL_InitTick+0x68>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000aa0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 f962 	bl	8000d72 <HAL_SYSTICK_Config>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d10f      	bne.n	8000ad4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b0f      	cmp	r3, #15
 8000ab8:	d809      	bhi.n	8000ace <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aba:	2200      	movs	r2, #0
 8000abc:	6879      	ldr	r1, [r7, #4]
 8000abe:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac2:	f000 f92c 	bl	8000d1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <HAL_InitTick+0x70>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	e007      	b.n	8000ade <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	73fb      	strb	r3, [r7, #15]
 8000ad2:	e004      	b.n	8000ade <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	73fb      	strb	r3, [r7, #15]
 8000ad8:	e001      	b.n	8000ade <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000000 	.word	0x20000000
 8000af0:	20000004 	.word	0x20000004

08000af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_IncTick+0x1c>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <HAL_IncTick+0x20>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4413      	add	r3, r2
 8000b02:	4a03      	ldr	r2, [pc, #12]	; (8000b10 <HAL_IncTick+0x1c>)
 8000b04:	6013      	str	r3, [r2, #0]
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	200002ac 	.word	0x200002ac
 8000b14:	20000008 	.word	0x20000008

08000b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b1c:	4b02      	ldr	r3, [pc, #8]	; (8000b28 <HAL_GetTick+0x10>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	200002ac 	.word	0x200002ac

08000b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b34:	f7ff fff0 	bl	8000b18 <HAL_GetTick>
 8000b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b44:	d004      	beq.n	8000b50 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <HAL_Delay+0x40>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b50:	bf00      	nop
 8000b52:	f7ff ffe1 	bl	8000b18 <HAL_GetTick>
 8000b56:	4602      	mov	r2, r0
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d8f7      	bhi.n	8000b52 <HAL_Delay+0x26>
  {
  }
}
 8000b62:	bf00      	nop
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000008 	.word	0x20000008

08000b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba2:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	60d3      	str	r3, [r2, #12]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	f003 0307 	and.w	r3, r3, #7
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	db0b      	blt.n	8000bfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	f003 021f 	and.w	r2, r3, #31
 8000bec:	4906      	ldr	r1, [pc, #24]	; (8000c08 <__NVIC_EnableIRQ+0x34>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	095b      	lsrs	r3, r3, #5
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db0a      	blt.n	8000c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	490c      	ldr	r1, [pc, #48]	; (8000c58 <__NVIC_SetPriority+0x4c>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c34:	e00a      	b.n	8000c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <__NVIC_SetPriority+0x50>)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	3b04      	subs	r3, #4
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	440b      	add	r3, r1
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	; 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf28      	it	cs
 8000c7e:	2304      	movcs	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3304      	adds	r3, #4
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d902      	bls.n	8000c90 <NVIC_EncodePriority+0x30>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <NVIC_EncodePriority+0x32>
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43d9      	mvns	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	4313      	orrs	r3, r2
         );
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	; 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd4:	d301      	bcc.n	8000cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e00f      	b.n	8000cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <SysTick_Config+0x40>)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce2:	210f      	movs	r1, #15
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce8:	f7ff ff90 	bl	8000c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <SysTick_Config+0x40>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf2:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <SysTick_Config+0x40>)
 8000cf4:	2207      	movs	r2, #7
 8000cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	e000e010 	.word	0xe000e010

08000d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff ff2d 	bl	8000b70 <__NVIC_SetPriorityGrouping>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b086      	sub	sp, #24
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
 8000d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d30:	f7ff ff42 	bl	8000bb8 <__NVIC_GetPriorityGrouping>
 8000d34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	6978      	ldr	r0, [r7, #20]
 8000d3c:	f7ff ff90 	bl	8000c60 <NVIC_EncodePriority>
 8000d40:	4602      	mov	r2, r0
 8000d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d46:	4611      	mov	r1, r2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff5f 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d4e:	bf00      	nop
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff35 	bl	8000bd4 <__NVIC_EnableIRQ>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffa2 	bl	8000cc4 <SysTick_Config>
 8000d80:	4603      	mov	r3, r0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b087      	sub	sp, #28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000da2:	e154      	b.n	800104e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	2101      	movs	r1, #1
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	fa01 f303 	lsl.w	r3, r1, r3
 8000db0:	4013      	ands	r3, r2
 8000db2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f000 8146 	beq.w	8001048 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0303 	and.w	r3, r3, #3
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d005      	beq.n	8000dd4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d130      	bne.n	8000e36 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	2203      	movs	r2, #3
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	68da      	ldr	r2, [r3, #12]
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	091b      	lsrs	r3, r3, #4
 8000e20:	f003 0201 	and.w	r2, r3, #1
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	d017      	beq.n	8000e72 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d123      	bne.n	8000ec6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	08da      	lsrs	r2, r3, #3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3208      	adds	r2, #8
 8000e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	220f      	movs	r2, #15
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	691a      	ldr	r2, [r3, #16]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	08da      	lsrs	r2, r3, #3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3208      	adds	r2, #8
 8000ec0:	6939      	ldr	r1, [r7, #16]
 8000ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0203 	and.w	r2, r3, #3
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f000 80a0 	beq.w	8001048 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f08:	4b58      	ldr	r3, [pc, #352]	; (800106c <HAL_GPIO_Init+0x2e0>)
 8000f0a:	6a1b      	ldr	r3, [r3, #32]
 8000f0c:	4a57      	ldr	r2, [pc, #348]	; (800106c <HAL_GPIO_Init+0x2e0>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6213      	str	r3, [r2, #32]
 8000f14:	4b55      	ldr	r3, [pc, #340]	; (800106c <HAL_GPIO_Init+0x2e0>)
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f20:	4a53      	ldr	r2, [pc, #332]	; (8001070 <HAL_GPIO_Init+0x2e4>)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	089b      	lsrs	r3, r3, #2
 8000f26:	3302      	adds	r3, #2
 8000f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	220f      	movs	r2, #15
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a4b      	ldr	r2, [pc, #300]	; (8001074 <HAL_GPIO_Init+0x2e8>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d019      	beq.n	8000f80 <HAL_GPIO_Init+0x1f4>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a4a      	ldr	r2, [pc, #296]	; (8001078 <HAL_GPIO_Init+0x2ec>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d013      	beq.n	8000f7c <HAL_GPIO_Init+0x1f0>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a49      	ldr	r2, [pc, #292]	; (800107c <HAL_GPIO_Init+0x2f0>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d00d      	beq.n	8000f78 <HAL_GPIO_Init+0x1ec>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a48      	ldr	r2, [pc, #288]	; (8001080 <HAL_GPIO_Init+0x2f4>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d007      	beq.n	8000f74 <HAL_GPIO_Init+0x1e8>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a47      	ldr	r2, [pc, #284]	; (8001084 <HAL_GPIO_Init+0x2f8>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d101      	bne.n	8000f70 <HAL_GPIO_Init+0x1e4>
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	e008      	b.n	8000f82 <HAL_GPIO_Init+0x1f6>
 8000f70:	2305      	movs	r3, #5
 8000f72:	e006      	b.n	8000f82 <HAL_GPIO_Init+0x1f6>
 8000f74:	2303      	movs	r3, #3
 8000f76:	e004      	b.n	8000f82 <HAL_GPIO_Init+0x1f6>
 8000f78:	2302      	movs	r3, #2
 8000f7a:	e002      	b.n	8000f82 <HAL_GPIO_Init+0x1f6>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e000      	b.n	8000f82 <HAL_GPIO_Init+0x1f6>
 8000f80:	2300      	movs	r3, #0
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	f002 0203 	and.w	r2, r2, #3
 8000f88:	0092      	lsls	r2, r2, #2
 8000f8a:	4093      	lsls	r3, r2
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f92:	4937      	ldr	r1, [pc, #220]	; (8001070 <HAL_GPIO_Init+0x2e4>)
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	089b      	lsrs	r3, r3, #2
 8000f98:	3302      	adds	r3, #2
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa0:	4b39      	ldr	r3, [pc, #228]	; (8001088 <HAL_GPIO_Init+0x2fc>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fc4:	4a30      	ldr	r2, [pc, #192]	; (8001088 <HAL_GPIO_Init+0x2fc>)
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fca:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <HAL_GPIO_Init+0x2fc>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fee:	4a26      	ldr	r2, [pc, #152]	; (8001088 <HAL_GPIO_Init+0x2fc>)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff4:	4b24      	ldr	r3, [pc, #144]	; (8001088 <HAL_GPIO_Init+0x2fc>)
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001018:	4a1b      	ldr	r2, [pc, #108]	; (8001088 <HAL_GPIO_Init+0x2fc>)
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <HAL_GPIO_Init+0x2fc>)
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	43db      	mvns	r3, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001042:	4a11      	ldr	r2, [pc, #68]	; (8001088 <HAL_GPIO_Init+0x2fc>)
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	3301      	adds	r3, #1
 800104c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	fa22 f303 	lsr.w	r3, r2, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	f47f aea3 	bne.w	8000da4 <HAL_GPIO_Init+0x18>
  }
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	371c      	adds	r7, #28
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	40010000 	.word	0x40010000
 8001074:	40020000 	.word	0x40020000
 8001078:	40020400 	.word	0x40020400
 800107c:	40020800 	.word	0x40020800
 8001080:	40020c00 	.word	0x40020c00
 8001084:	40021000 	.word	0x40021000
 8001088:	40010400 	.word	0x40010400

0800108c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691a      	ldr	r2, [r3, #16]
 800109c:	887b      	ldrh	r3, [r7, #2]
 800109e:	4013      	ands	r3, r2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	e001      	b.n	80010ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr

080010ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	460b      	mov	r3, r1
 80010c4:	807b      	strh	r3, [r7, #2]
 80010c6:	4613      	mov	r3, r2
 80010c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010ca:	787b      	ldrb	r3, [r7, #1]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010d0:	887a      	ldrh	r2, [r7, #2]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80010d6:	e003      	b.n	80010e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80010d8:	887b      	ldrh	r3, [r7, #2]
 80010da:	041a      	lsls	r2, r3, #16
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	619a      	str	r2, [r3, #24]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
	...

080010ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e12b      	b.n	8001356 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d106      	bne.n	8001118 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff fb80 	bl	8000818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2224      	movs	r2, #36	; 0x24
 800111c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0201 	bic.w	r2, r2, #1
 800112e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800113e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800114e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001150:	f002 faa8 	bl	80036a4 <HAL_RCC_GetPCLK1Freq>
 8001154:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	4a81      	ldr	r2, [pc, #516]	; (8001360 <HAL_I2C_Init+0x274>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d807      	bhi.n	8001170 <HAL_I2C_Init+0x84>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4a80      	ldr	r2, [pc, #512]	; (8001364 <HAL_I2C_Init+0x278>)
 8001164:	4293      	cmp	r3, r2
 8001166:	bf94      	ite	ls
 8001168:	2301      	movls	r3, #1
 800116a:	2300      	movhi	r3, #0
 800116c:	b2db      	uxtb	r3, r3
 800116e:	e006      	b.n	800117e <HAL_I2C_Init+0x92>
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4a7d      	ldr	r2, [pc, #500]	; (8001368 <HAL_I2C_Init+0x27c>)
 8001174:	4293      	cmp	r3, r2
 8001176:	bf94      	ite	ls
 8001178:	2301      	movls	r3, #1
 800117a:	2300      	movhi	r3, #0
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e0e7      	b.n	8001356 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4a78      	ldr	r2, [pc, #480]	; (800136c <HAL_I2C_Init+0x280>)
 800118a:	fba2 2303 	umull	r2, r3, r2, r3
 800118e:	0c9b      	lsrs	r3, r3, #18
 8001190:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	68ba      	ldr	r2, [r7, #8]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	4a6a      	ldr	r2, [pc, #424]	; (8001360 <HAL_I2C_Init+0x274>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d802      	bhi.n	80011c0 <HAL_I2C_Init+0xd4>
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	3301      	adds	r3, #1
 80011be:	e009      	b.n	80011d4 <HAL_I2C_Init+0xe8>
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011c6:	fb02 f303 	mul.w	r3, r2, r3
 80011ca:	4a69      	ldr	r2, [pc, #420]	; (8001370 <HAL_I2C_Init+0x284>)
 80011cc:	fba2 2303 	umull	r2, r3, r2, r3
 80011d0:	099b      	lsrs	r3, r3, #6
 80011d2:	3301      	adds	r3, #1
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	430b      	orrs	r3, r1
 80011da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	495c      	ldr	r1, [pc, #368]	; (8001360 <HAL_I2C_Init+0x274>)
 80011f0:	428b      	cmp	r3, r1
 80011f2:	d819      	bhi.n	8001228 <HAL_I2C_Init+0x13c>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	1e59      	subs	r1, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001202:	1c59      	adds	r1, r3, #1
 8001204:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001208:	400b      	ands	r3, r1
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00a      	beq.n	8001224 <HAL_I2C_Init+0x138>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	1e59      	subs	r1, r3, #1
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fbb1 f3f3 	udiv	r3, r1, r3
 800121c:	3301      	adds	r3, #1
 800121e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001222:	e051      	b.n	80012c8 <HAL_I2C_Init+0x1dc>
 8001224:	2304      	movs	r3, #4
 8001226:	e04f      	b.n	80012c8 <HAL_I2C_Init+0x1dc>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d111      	bne.n	8001254 <HAL_I2C_Init+0x168>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	1e58      	subs	r0, r3, #1
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6859      	ldr	r1, [r3, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	440b      	add	r3, r1
 800123e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001242:	3301      	adds	r3, #1
 8001244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001248:	2b00      	cmp	r3, #0
 800124a:	bf0c      	ite	eq
 800124c:	2301      	moveq	r3, #1
 800124e:	2300      	movne	r3, #0
 8001250:	b2db      	uxtb	r3, r3
 8001252:	e012      	b.n	800127a <HAL_I2C_Init+0x18e>
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	1e58      	subs	r0, r3, #1
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6859      	ldr	r1, [r3, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	0099      	lsls	r1, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	fbb0 f3f3 	udiv	r3, r0, r3
 800126a:	3301      	adds	r3, #1
 800126c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001270:	2b00      	cmp	r3, #0
 8001272:	bf0c      	ite	eq
 8001274:	2301      	moveq	r3, #1
 8001276:	2300      	movne	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_I2C_Init+0x196>
 800127e:	2301      	movs	r3, #1
 8001280:	e022      	b.n	80012c8 <HAL_I2C_Init+0x1dc>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10e      	bne.n	80012a8 <HAL_I2C_Init+0x1bc>
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	1e58      	subs	r0, r3, #1
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6859      	ldr	r1, [r3, #4]
 8001292:	460b      	mov	r3, r1
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	440b      	add	r3, r1
 8001298:	fbb0 f3f3 	udiv	r3, r0, r3
 800129c:	3301      	adds	r3, #1
 800129e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012a6:	e00f      	b.n	80012c8 <HAL_I2C_Init+0x1dc>
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	1e58      	subs	r0, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6859      	ldr	r1, [r3, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	440b      	add	r3, r1
 80012b6:	0099      	lsls	r1, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80012be:	3301      	adds	r3, #1
 80012c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	6809      	ldr	r1, [r1, #0]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69da      	ldr	r2, [r3, #28]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	6911      	ldr	r1, [r2, #16]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	68d2      	ldr	r2, [r2, #12]
 8001302:	4311      	orrs	r1, r2
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	430b      	orrs	r3, r1
 800130a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	695a      	ldr	r2, [r3, #20]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 0201 	orr.w	r2, r2, #1
 8001336:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2220      	movs	r2, #32
 8001342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	000186a0 	.word	0x000186a0
 8001364:	001e847f 	.word	0x001e847f
 8001368:	003d08ff 	.word	0x003d08ff
 800136c:	431bde83 	.word	0x431bde83
 8001370:	10624dd3 	.word	0x10624dd3

08001374 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001376:	b08b      	sub	sp, #44	; 0x2c
 8001378:	af06      	add	r7, sp, #24
 800137a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e0d0      	b.n	8001528 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d106      	bne.n	80013a0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f007 f906 	bl	80085ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2203      	movs	r2, #3
 80013a4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 fc85 	bl	8003cbc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	73fb      	strb	r3, [r7, #15]
 80013b6:	e04c      	b.n	8001452 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	1c5a      	adds	r2, r3, #1
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	440b      	add	r3, r1
 80013c8:	3301      	adds	r3, #1
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	440b      	add	r3, r1
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	b298      	uxth	r0, r3
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	440b      	add	r3, r1
 80013f4:	3336      	adds	r3, #54	; 0x36
 80013f6:	4602      	mov	r2, r0
 80013f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	440b      	add	r3, r1
 800140a:	3303      	adds	r3, #3
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001410:	7bfa      	ldrb	r2, [r7, #15]
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	440b      	add	r3, r1
 800141e:	3338      	adds	r3, #56	; 0x38
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	440b      	add	r3, r1
 8001432:	333c      	adds	r3, #60	; 0x3c
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001438:	7bfa      	ldrb	r2, [r7, #15]
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	440b      	add	r3, r1
 8001446:	3340      	adds	r3, #64	; 0x40
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	3301      	adds	r3, #1
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	7bfa      	ldrb	r2, [r7, #15]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	d3ad      	bcc.n	80013b8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800145c:	2300      	movs	r3, #0
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	e044      	b.n	80014ec <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001462:	7bfa      	ldrb	r2, [r7, #15]
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	4613      	mov	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	440b      	add	r3, r1
 8001470:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001478:	7bfa      	ldrb	r2, [r7, #15]
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	440b      	add	r3, r1
 8001486:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800148e:	7bfa      	ldrb	r2, [r7, #15]
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	440b      	add	r3, r1
 800149c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014a4:	7bfa      	ldrb	r2, [r7, #15]
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	4613      	mov	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	440b      	add	r3, r1
 80014b2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014ba:	7bfa      	ldrb	r2, [r7, #15]
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	440b      	add	r3, r1
 80014c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014d0:	7bfa      	ldrb	r2, [r7, #15]
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	440b      	add	r3, r1
 80014de:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	3301      	adds	r3, #1
 80014ea:	73fb      	strb	r3, [r7, #15]
 80014ec:	7bfa      	ldrb	r2, [r7, #15]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d3b5      	bcc.n	8001462 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	687e      	ldr	r6, [r7, #4]
 80014fe:	466d      	mov	r5, sp
 8001500:	f106 0410 	add.w	r4, r6, #16
 8001504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001508:	6823      	ldr	r3, [r4, #0]
 800150a:	602b      	str	r3, [r5, #0]
 800150c:	1d33      	adds	r3, r6, #4
 800150e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001510:	6838      	ldr	r0, [r7, #0]
 8001512:	f002 fbed 	bl	8003cf0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001530 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800153e:	2b01      	cmp	r3, #1
 8001540:	d101      	bne.n	8001546 <HAL_PCD_Start+0x16>
 8001542:	2302      	movs	r3, #2
 8001544:	e016      	b.n	8001574 <HAL_PCD_Start+0x44>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2201      	movs	r2, #1
 800154a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f002 fb9c 	bl	8003c90 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001558:	2101      	movs	r1, #1
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f007 f808 	bl	8008570 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f005 f881 	bl	800666c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f005 f879 	bl	8006680 <USB_ReadInterrupts>
 800158e:	4603      	mov	r3, r0
 8001590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001598:	d102      	bne.n	80015a0 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 faf5 	bl	8001b8a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f005 f86b 	bl	8006680 <USB_ReadInterrupts>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b4:	d112      	bne.n	80015dc <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015be:	b29a      	uxth	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015c8:	b292      	uxth	r2, r2
 80015ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f007 f867 	bl	80086a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015d4:	2100      	movs	r1, #0
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 f8c7 	bl	800176a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f005 f84d 	bl	8006680 <USB_ReadInterrupts>
 80015e6:	4603      	mov	r3, r0
 80015e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015f0:	d10b      	bne.n	800160a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001604:	b292      	uxth	r2, r2
 8001606:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f005 f836 	bl	8006680 <USB_ReadInterrupts>
 8001614:	4603      	mov	r3, r0
 8001616:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800161a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800161e:	d10b      	bne.n	8001638 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001628:	b29a      	uxth	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001632:	b292      	uxth	r2, r2
 8001634:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f005 f81f 	bl	8006680 <USB_ReadInterrupts>
 8001642:	4603      	mov	r3, r0
 8001644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800164c:	d126      	bne.n	800169c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001656:	b29a      	uxth	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0204 	bic.w	r2, r2, #4
 8001660:	b292      	uxth	r2, r2
 8001662:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800166e:	b29a      	uxth	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0208 	bic.w	r2, r2, #8
 8001678:	b292      	uxth	r2, r2
 800167a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f007 f848 	bl	8008714 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800168c:	b29a      	uxth	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001696:	b292      	uxth	r2, r2
 8001698:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f004 ffed 	bl	8006680 <USB_ReadInterrupts>
 80016a6:	4603      	mov	r3, r0
 80016a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016b0:	d126      	bne.n	8001700 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f042 0208 	orr.w	r2, r2, #8
 80016c4:	b292      	uxth	r2, r2
 80016c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016dc:	b292      	uxth	r2, r2
 80016de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f042 0204 	orr.w	r2, r2, #4
 80016f4:	b292      	uxth	r2, r2
 80016f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f006 fff0 	bl	80086e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f004 ffbb 	bl	8006680 <USB_ReadInterrupts>
 800170a:	4603      	mov	r3, r0
 800170c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001714:	d10e      	bne.n	8001734 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800171e:	b29a      	uxth	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001728:	b292      	uxth	r2, r2
 800172a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f006 ffa9 	bl	8008686 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f004 ffa1 	bl	8006680 <USB_ReadInterrupts>
 800173e:	4603      	mov	r3, r0
 8001740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001748:	d10b      	bne.n	8001762 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001752:	b29a      	uxth	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800175c:	b292      	uxth	r2, r2
 800175e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	460b      	mov	r3, r1
 8001774:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800177c:	2b01      	cmp	r3, #1
 800177e:	d101      	bne.n	8001784 <HAL_PCD_SetAddress+0x1a>
 8001780:	2302      	movs	r3, #2
 8001782:	e013      	b.n	80017ac <HAL_PCD_SetAddress+0x42>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	78fa      	ldrb	r2, [r7, #3]
 8001790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	78fa      	ldrb	r2, [r7, #3]
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f004 ff52 	bl	8006646 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	4608      	mov	r0, r1
 80017be:	4611      	mov	r1, r2
 80017c0:	461a      	mov	r2, r3
 80017c2:	4603      	mov	r3, r0
 80017c4:	70fb      	strb	r3, [r7, #3]
 80017c6:	460b      	mov	r3, r1
 80017c8:	803b      	strh	r3, [r7, #0]
 80017ca:	4613      	mov	r3, r2
 80017cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	da0e      	bge.n	80017f8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2201      	movs	r2, #1
 80017f4:	705a      	strb	r2, [r3, #1]
 80017f6:	e00e      	b.n	8001816 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	f003 0207 	and.w	r2, r3, #7
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	b2da      	uxtb	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001822:	883a      	ldrh	r2, [r7, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	78ba      	ldrb	r2, [r7, #2]
 800182c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	785b      	ldrb	r3, [r3, #1]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d004      	beq.n	8001840 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b29a      	uxth	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001840:	78bb      	ldrb	r3, [r7, #2]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d102      	bne.n	800184c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001852:	2b01      	cmp	r3, #1
 8001854:	d101      	bne.n	800185a <HAL_PCD_EP_Open+0xa6>
 8001856:	2302      	movs	r3, #2
 8001858:	e00e      	b.n	8001878 <HAL_PCD_EP_Open+0xc4>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68f9      	ldr	r1, [r7, #12]
 8001868:	4618      	mov	r0, r3
 800186a:	f002 fa61 	bl	8003d30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001876:	7afb      	ldrb	r3, [r7, #11]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800188c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001890:	2b00      	cmp	r3, #0
 8001892:	da0e      	bge.n	80018b2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	1c5a      	adds	r2, r3, #1
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	4413      	add	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2201      	movs	r2, #1
 80018ae:	705a      	strb	r2, [r3, #1]
 80018b0:	e00e      	b.n	80018d0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	f003 0207 	and.w	r2, r3, #7
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	4413      	add	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80018d0:	78fb      	ldrb	r3, [r7, #3]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d101      	bne.n	80018ea <HAL_PCD_EP_Close+0x6a>
 80018e6:	2302      	movs	r3, #2
 80018e8:	e00e      	b.n	8001908 <HAL_PCD_EP_Close+0x88>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68f9      	ldr	r1, [r7, #12]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f002 fd83 	bl	8004404 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	460b      	mov	r3, r1
 800191e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001920:	7afb      	ldrb	r3, [r7, #11]
 8001922:	f003 0207 	and.w	r2, r3, #7
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4413      	add	r3, r2
 8001936:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	2200      	movs	r2, #0
 8001948:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2200      	movs	r2, #0
 800194e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001950:	7afb      	ldrb	r3, [r7, #11]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	b2da      	uxtb	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800195c:	7afb      	ldrb	r3, [r7, #11]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	2b00      	cmp	r3, #0
 8001964:	d106      	bne.n	8001974 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6979      	ldr	r1, [r7, #20]
 800196c:	4618      	mov	r0, r3
 800196e:	f002 ff35 	bl	80047dc <USB_EPStartXfer>
 8001972:	e005      	b.n	8001980 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6979      	ldr	r1, [r7, #20]
 800197a:	4618      	mov	r0, r3
 800197c:	f002 ff2e 	bl	80047dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	460b      	mov	r3, r1
 8001994:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	f003 0207 	and.w	r2, r3, #7
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	440b      	add	r3, r1
 80019a8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80019ac:	681b      	ldr	r3, [r3, #0]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	460b      	mov	r3, r1
 80019c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019c8:	7afb      	ldrb	r3, [r7, #11]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2201      	movs	r2, #1
 8001a02:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a04:	7afb      	ldrb	r3, [r7, #11]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a10:	7afb      	ldrb	r3, [r7, #11]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d106      	bne.n	8001a28 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6979      	ldr	r1, [r7, #20]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f002 fedb 	bl	80047dc <USB_EPStartXfer>
 8001a26:	e005      	b.n	8001a34 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6979      	ldr	r1, [r7, #20]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f002 fed4 	bl	80047dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	460b      	mov	r3, r1
 8001a48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	f003 0207 	and.w	r2, r3, #7
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d901      	bls.n	8001a5c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e03e      	b.n	8001ada <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	da0e      	bge.n	8001a82 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	705a      	strb	r2, [r3, #1]
 8001a80:	e00c      	b.n	8001a9c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a82:	78fa      	ldrb	r2, [r7, #3]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	4413      	add	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aa2:	78fb      	ldrb	r3, [r7, #3]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_PCD_EP_SetStall+0x7e>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e00e      	b.n	8001ada <HAL_PCD_EP_SetStall+0x9c>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68f9      	ldr	r1, [r7, #12]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f004 fcbe 	bl	800644c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b084      	sub	sp, #16
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	460b      	mov	r3, r1
 8001aec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	f003 020f 	and.w	r2, r3, #15
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d901      	bls.n	8001b00 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e040      	b.n	8001b82 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	da0e      	bge.n	8001b26 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	1c5a      	adds	r2, r3, #1
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2201      	movs	r2, #1
 8001b22:	705a      	strb	r2, [r3, #1]
 8001b24:	e00e      	b.n	8001b44 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	f003 0207 	and.w	r2, r3, #7
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b4a:	78fb      	ldrb	r3, [r7, #3]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_PCD_EP_ClrStall+0x82>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e00e      	b.n	8001b82 <HAL_PCD_EP_ClrStall+0xa0>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68f9      	ldr	r1, [r7, #12]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f004 fcba 	bl	80064ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b08e      	sub	sp, #56	; 0x38
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b92:	e2ec      	b.n	800216e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b9c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001baa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 8161 	bne.w	8001e76 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001bb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d152      	bne.n	8001c64 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bce:	81fb      	strh	r3, [r7, #14]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	89fb      	ldrh	r3, [r7, #14]
 8001bd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3328      	adds	r3, #40	; 0x28
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	695a      	ldr	r2, [r3, #20]
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	441a      	add	r2, r3
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001c22:	2100      	movs	r1, #0
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f006 fd14 	bl	8008652 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 829b 	beq.w	800216e <PCD_EP_ISR_Handler+0x5e4>
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f040 8296 	bne.w	800216e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	b292      	uxth	r2, r2
 8001c56:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c62:	e284      	b.n	800216e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d034      	beq.n	8001ce8 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4413      	add	r3, r2
 8001c92:	3306      	adds	r3, #6
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	f004 fd33 	bl	8006728 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cce:	4013      	ands	r3, r2
 8001cd0:	823b      	strh	r3, [r7, #16]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	8a3a      	ldrh	r2, [r7, #16]
 8001cd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cdc:	b292      	uxth	r2, r2
 8001cde:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f006 fc89 	bl	80085f8 <HAL_PCD_SetupStageCallback>
 8001ce6:	e242      	b.n	800216e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ce8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f280 823e 	bge.w	800216e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cfe:	4013      	ands	r3, r2
 8001d00:	83bb      	strh	r3, [r7, #28]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	8bba      	ldrh	r2, [r7, #28]
 8001d08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d0c:	b292      	uxth	r2, r2
 8001d0e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4413      	add	r3, r2
 8001d24:	3306      	adds	r3, #6
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d019      	beq.n	8001d78 <PCD_EP_ISR_Handler+0x1ee>
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d015      	beq.n	8001d78 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	6959      	ldr	r1, [r3, #20]
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	f004 fce3 	bl	8006728 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	695a      	ldr	r2, [r3, #20]
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	441a      	add	r2, r3
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d70:	2100      	movs	r1, #0
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f006 fc52 	bl	800861c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f040 81f2 	bne.w	800216e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	61bb      	str	r3, [r7, #24]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	4413      	add	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d112      	bne.n	8001dd8 <PCD_EP_ISR_Handler+0x24e>
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	801a      	strh	r2, [r3, #0]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	801a      	strh	r2, [r3, #0]
 8001dd6:	e02f      	b.n	8001e38 <PCD_EP_ISR_Handler+0x2ae>
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	2b3e      	cmp	r3, #62	; 0x3e
 8001dde:	d813      	bhi.n	8001e08 <PCD_EP_ISR_Handler+0x27e>
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	085b      	lsrs	r3, r3, #1
 8001de6:	633b      	str	r3, [r7, #48]	; 0x30
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d002      	beq.n	8001dfa <PCD_EP_ISR_Handler+0x270>
 8001df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df6:	3301      	adds	r3, #1
 8001df8:	633b      	str	r3, [r7, #48]	; 0x30
 8001dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	029b      	lsls	r3, r3, #10
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	801a      	strh	r2, [r3, #0]
 8001e06:	e017      	b.n	8001e38 <PCD_EP_ISR_Handler+0x2ae>
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	095b      	lsrs	r3, r3, #5
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d102      	bne.n	8001e22 <PCD_EP_ISR_Handler+0x298>
 8001e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	633b      	str	r3, [r7, #48]	; 0x30
 8001e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	029b      	lsls	r3, r3, #10
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e48:	827b      	strh	r3, [r7, #18]
 8001e4a:	8a7b      	ldrh	r3, [r7, #18]
 8001e4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e50:	827b      	strh	r3, [r7, #18]
 8001e52:	8a7b      	ldrh	r3, [r7, #18]
 8001e54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e58:	827b      	strh	r3, [r7, #18]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	8a7b      	ldrh	r3, [r7, #18]
 8001e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	8013      	strh	r3, [r2, #0]
 8001e74:	e17b      	b.n	800216e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e88:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f280 80ea 	bge.w	8002066 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	853b      	strh	r3, [r7, #40]	; 0x28
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ebc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ec0:	b292      	uxth	r2, r2
 8001ec2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ec4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	7b1b      	ldrb	r3, [r3, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d122      	bne.n	8001f28 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3306      	adds	r3, #6
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f0a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001f0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 8087 	beq.w	8002022 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6818      	ldr	r0, [r3, #0]
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	6959      	ldr	r1, [r3, #20]
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	88da      	ldrh	r2, [r3, #6]
 8001f20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f22:	f004 fc01 	bl	8006728 <USB_ReadPMA>
 8001f26:	e07c      	b.n	8002022 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	78db      	ldrb	r3, [r3, #3]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d108      	bne.n	8001f42 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001f30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f32:	461a      	mov	r2, r3
 8001f34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f927 	bl	800218a <HAL_PCD_EP_DB_Receive>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001f40:	e06f      	b.n	8002022 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f5c:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	441a      	add	r2, r3
 8001f6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d021      	beq.n	8001fe0 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4413      	add	r3, r2
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fc4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001fc6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d02a      	beq.n	8002022 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	6959      	ldr	r1, [r3, #20]
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	891a      	ldrh	r2, [r3, #8]
 8001fd8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fda:	f004 fba5 	bl	8006728 <USB_ReadPMA>
 8001fde:	e020      	b.n	8002022 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3306      	adds	r3, #6
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002008:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800200a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	6959      	ldr	r1, [r3, #20]
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	895a      	ldrh	r2, [r3, #10]
 800201c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800201e:	f004 fb83 	bl	8006728 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	69da      	ldr	r2, [r3, #28]
 8002026:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002028:	441a      	add	r2, r3
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002034:	441a      	add	r2, r3
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d004      	beq.n	800204c <PCD_EP_ISR_Handler+0x4c2>
 8002042:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	429a      	cmp	r2, r3
 800204a:	d206      	bcs.n	800205a <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4619      	mov	r1, r3
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f006 fae2 	bl	800861c <HAL_PCD_DataOutStageCallback>
 8002058:	e005      	b.n	8002066 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002060:	4618      	mov	r0, r3
 8002062:	f002 fbbb 	bl	80047dc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002066:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206c:	2b00      	cmp	r3, #0
 800206e:	d07e      	beq.n	800216e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002070:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	b29b      	uxth	r3, r3
 8002096:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800209a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800209e:	843b      	strh	r3, [r7, #32]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	441a      	add	r2, r3
 80020ae:	8c3b      	ldrh	r3, [r7, #32]
 80020b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	78db      	ldrb	r3, [r3, #3]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d00c      	beq.n	80020de <PCD_EP_ISR_Handler+0x554>
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	78db      	ldrb	r3, [r3, #3]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d146      	bne.n	8002162 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80020d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d141      	bne.n	8002162 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	3302      	adds	r3, #2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002106:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	699a      	ldr	r2, [r3, #24]
 800210c:	8bfb      	ldrh	r3, [r7, #30]
 800210e:	429a      	cmp	r2, r3
 8002110:	d906      	bls.n	8002120 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	699a      	ldr	r2, [r3, #24]
 8002116:	8bfb      	ldrh	r3, [r7, #30]
 8002118:	1ad2      	subs	r2, r2, r3
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	619a      	str	r2, [r3, #24]
 800211e:	e002      	b.n	8002126 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	2200      	movs	r2, #0
 8002124:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d106      	bne.n	800213c <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	4619      	mov	r1, r3
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f006 fa8c 	bl	8008652 <HAL_PCD_DataInStageCallback>
 800213a:	e018      	b.n	800216e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	695a      	ldr	r2, [r3, #20]
 8002140:	8bfb      	ldrh	r3, [r7, #30]
 8002142:	441a      	add	r2, r3
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	69da      	ldr	r2, [r3, #28]
 800214c:	8bfb      	ldrh	r3, [r7, #30]
 800214e:	441a      	add	r2, r3
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800215a:	4618      	mov	r0, r3
 800215c:	f002 fb3e 	bl	80047dc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002160:	e005      	b.n	800216e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002162:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002164:	461a      	mov	r2, r3
 8002166:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f91b 	bl	80023a4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002176:	b29b      	uxth	r3, r3
 8002178:	b21b      	sxth	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	f6ff ad0a 	blt.w	8001b94 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3738      	adds	r7, #56	; 0x38
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b088      	sub	sp, #32
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	4613      	mov	r3, r2
 8002196:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002198:	88fb      	ldrh	r3, [r7, #6]
 800219a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d07e      	beq.n	80022a0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	3302      	adds	r3, #2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	4413      	add	r3, r2
 80021c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	699a      	ldr	r2, [r3, #24]
 80021d0:	8b7b      	ldrh	r3, [r7, #26]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d306      	bcc.n	80021e4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	699a      	ldr	r2, [r3, #24]
 80021da:	8b7b      	ldrh	r3, [r7, #26]
 80021dc:	1ad2      	subs	r2, r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	619a      	str	r2, [r3, #24]
 80021e2:	e002      	b.n	80021ea <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2200      	movs	r2, #0
 80021e8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d123      	bne.n	800223a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	b29b      	uxth	r3, r3
 8002204:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800220c:	833b      	strh	r3, [r7, #24]
 800220e:	8b3b      	ldrh	r3, [r7, #24]
 8002210:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002214:	833b      	strh	r3, [r7, #24]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	441a      	add	r2, r3
 8002224:	8b3b      	ldrh	r3, [r7, #24]
 8002226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800222a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800222e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002236:	b29b      	uxth	r3, r3
 8002238:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800223a:	88fb      	ldrh	r3, [r7, #6]
 800223c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002240:	2b00      	cmp	r3, #0
 8002242:	d01f      	beq.n	8002284 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	b29b      	uxth	r3, r3
 8002256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800225a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800225e:	82fb      	strh	r3, [r7, #22]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	441a      	add	r2, r3
 800226e:	8afb      	ldrh	r3, [r7, #22]
 8002270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800227c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002280:	b29b      	uxth	r3, r3
 8002282:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002284:	8b7b      	ldrh	r3, [r7, #26]
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 8087 	beq.w	800239a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	6959      	ldr	r1, [r3, #20]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	891a      	ldrh	r2, [r3, #8]
 8002298:	8b7b      	ldrh	r3, [r7, #26]
 800229a:	f004 fa45 	bl	8006728 <USB_ReadPMA>
 800229e:	e07c      	b.n	800239a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	461a      	mov	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	3306      	adds	r3, #6
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022c8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	699a      	ldr	r2, [r3, #24]
 80022ce:	8b7b      	ldrh	r3, [r7, #26]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d306      	bcc.n	80022e2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	699a      	ldr	r2, [r3, #24]
 80022d8:	8b7b      	ldrh	r3, [r7, #26]
 80022da:	1ad2      	subs	r2, r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	619a      	str	r2, [r3, #24]
 80022e0:	e002      	b.n	80022e8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2200      	movs	r2, #0
 80022e6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d123      	bne.n	8002338 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	b29b      	uxth	r3, r3
 8002302:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800230a:	83fb      	strh	r3, [r7, #30]
 800230c:	8bfb      	ldrh	r3, [r7, #30]
 800230e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002312:	83fb      	strh	r3, [r7, #30]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	441a      	add	r2, r3
 8002322:	8bfb      	ldrh	r3, [r7, #30]
 8002324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800232c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002334:	b29b      	uxth	r3, r3
 8002336:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002338:	88fb      	ldrh	r3, [r7, #6]
 800233a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233e:	2b00      	cmp	r3, #0
 8002340:	d11f      	bne.n	8002382 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	b29b      	uxth	r3, r3
 8002354:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235c:	83bb      	strh	r3, [r7, #28]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	441a      	add	r2, r3
 800236c:	8bbb      	ldrh	r3, [r7, #28]
 800236e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002372:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800237a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800237e:	b29b      	uxth	r3, r3
 8002380:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002382:	8b7b      	ldrh	r3, [r7, #26]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	6959      	ldr	r1, [r3, #20]
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	895a      	ldrh	r2, [r3, #10]
 8002394:	8b7b      	ldrh	r3, [r7, #26]
 8002396:	f004 f9c7 	bl	8006728 <USB_ReadPMA>
    }
  }

  return count;
 800239a:	8b7b      	ldrh	r3, [r7, #26]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3720      	adds	r7, #32
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b0a2      	sub	sp, #136	; 0x88
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	4613      	mov	r3, r2
 80023b0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 81c7 	beq.w	800274c <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4413      	add	r3, r2
 80023d2:	3302      	adds	r3, #2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d907      	bls.n	8002406 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	699a      	ldr	r2, [r3, #24]
 80023fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023fe:	1ad2      	subs	r2, r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	619a      	str	r2, [r3, #24]
 8002404:	e002      	b.n	800240c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2200      	movs	r2, #0
 800240a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	2b00      	cmp	r3, #0
 8002412:	f040 80b9 	bne.w	8002588 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	785b      	ldrb	r3, [r3, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d126      	bne.n	800246c <HAL_PCD_EP_DB_Transmit+0xc8>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800242c:	b29b      	uxth	r3, r3
 800242e:	461a      	mov	r2, r3
 8002430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002432:	4413      	add	r3, r2
 8002434:	62bb      	str	r3, [r7, #40]	; 0x28
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	011a      	lsls	r2, r3, #4
 800243c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243e:	4413      	add	r3, r2
 8002440:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002450:	b29a      	uxth	r2, r3
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	801a      	strh	r2, [r3, #0]
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	b29b      	uxth	r3, r3
 800245c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002464:	b29a      	uxth	r2, r3
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	801a      	strh	r2, [r3, #0]
 800246a:	e01a      	b.n	80024a2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	785b      	ldrb	r3, [r3, #1]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d116      	bne.n	80024a2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	633b      	str	r3, [r7, #48]	; 0x30
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002482:	b29b      	uxth	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002488:	4413      	add	r3, r2
 800248a:	633b      	str	r3, [r7, #48]	; 0x30
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	011a      	lsls	r2, r3, #4
 8002492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002494:	4413      	add	r3, r2
 8002496:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800249a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249e:	2200      	movs	r2, #0
 80024a0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	623b      	str	r3, [r7, #32]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	785b      	ldrb	r3, [r3, #1]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d126      	bne.n	80024fe <HAL_PCD_EP_DB_Transmit+0x15a>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	61bb      	str	r3, [r7, #24]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024be:	b29b      	uxth	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4413      	add	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	011a      	lsls	r2, r3, #4
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	4413      	add	r3, r2
 80024d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	801a      	strh	r2, [r3, #0]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	801a      	strh	r2, [r3, #0]
 80024fc:	e017      	b.n	800252e <HAL_PCD_EP_DB_Transmit+0x18a>
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	785b      	ldrb	r3, [r3, #1]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d113      	bne.n	800252e <HAL_PCD_EP_DB_Transmit+0x18a>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800250e:	b29b      	uxth	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	4413      	add	r3, r2
 8002516:	623b      	str	r3, [r7, #32]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	011a      	lsls	r2, r3, #4
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	4413      	add	r3, r2
 8002522:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002526:	61fb      	str	r3, [r7, #28]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2200      	movs	r2, #0
 800252c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	4619      	mov	r1, r3
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f006 f88c 	bl	8008652 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 82d4 	beq.w	8002aee <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	b29b      	uxth	r3, r3
 8002558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800255c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002560:	827b      	strh	r3, [r7, #18]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	441a      	add	r2, r3
 8002570:	8a7b      	ldrh	r3, [r7, #18]
 8002572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800257a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800257e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002582:	b29b      	uxth	r3, r3
 8002584:	8013      	strh	r3, [r2, #0]
 8002586:	e2b2      	b.n	8002aee <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002588:	88fb      	ldrh	r3, [r7, #6]
 800258a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d021      	beq.n	80025d6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	441a      	add	r2, r3
 80025be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80025c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025dc:	2b01      	cmp	r3, #1
 80025de:	f040 8286 	bne.w	8002aee <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	695a      	ldr	r2, [r3, #20]
 80025e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025ea:	441a      	add	r2, r3
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	69da      	ldr	r2, [r3, #28]
 80025f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025f8:	441a      	add	r2, r3
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	6a1a      	ldr	r2, [r3, #32]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	429a      	cmp	r2, r3
 8002608:	d309      	bcc.n	800261e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	6a1a      	ldr	r2, [r3, #32]
 8002614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002616:	1ad2      	subs	r2, r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	621a      	str	r2, [r3, #32]
 800261c:	e015      	b.n	800264a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d107      	bne.n	8002636 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002626:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800262a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002634:	e009      	b.n	800264a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2200      	movs	r2, #0
 8002648:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	785b      	ldrb	r3, [r3, #1]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d155      	bne.n	80026fe <HAL_PCD_EP_DB_Transmit+0x35a>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	63bb      	str	r3, [r7, #56]	; 0x38
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002660:	b29b      	uxth	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002666:	4413      	add	r3, r2
 8002668:	63bb      	str	r3, [r7, #56]	; 0x38
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	011a      	lsls	r2, r3, #4
 8002670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002672:	4413      	add	r3, r2
 8002674:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002678:	637b      	str	r3, [r7, #52]	; 0x34
 800267a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800267c:	2b00      	cmp	r3, #0
 800267e:	d112      	bne.n	80026a6 <HAL_PCD_EP_DB_Transmit+0x302>
 8002680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	b29b      	uxth	r3, r3
 8002686:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800268a:	b29a      	uxth	r2, r3
 800268c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268e:	801a      	strh	r2, [r3, #0]
 8002690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	b29b      	uxth	r3, r3
 8002696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800269a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800269e:	b29a      	uxth	r2, r3
 80026a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a2:	801a      	strh	r2, [r3, #0]
 80026a4:	e047      	b.n	8002736 <HAL_PCD_EP_DB_Transmit+0x392>
 80026a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026a8:	2b3e      	cmp	r3, #62	; 0x3e
 80026aa:	d811      	bhi.n	80026d0 <HAL_PCD_EP_DB_Transmit+0x32c>
 80026ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ae:	085b      	lsrs	r3, r3, #1
 80026b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80026b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <HAL_PCD_EP_DB_Transmit+0x31e>
 80026bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026be:	3301      	adds	r3, #1
 80026c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80026c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	029b      	lsls	r3, r3, #10
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026cc:	801a      	strh	r2, [r3, #0]
 80026ce:	e032      	b.n	8002736 <HAL_PCD_EP_DB_Transmit+0x392>
 80026d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80026d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d102      	bne.n	80026e6 <HAL_PCD_EP_DB_Transmit+0x342>
 80026e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026e2:	3b01      	subs	r3, #1
 80026e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80026e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	029b      	lsls	r3, r3, #10
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fa:	801a      	strh	r2, [r3, #0]
 80026fc:	e01b      	b.n	8002736 <HAL_PCD_EP_DB_Transmit+0x392>
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	785b      	ldrb	r3, [r3, #1]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d117      	bne.n	8002736 <HAL_PCD_EP_DB_Transmit+0x392>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	643b      	str	r3, [r7, #64]	; 0x40
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002714:	b29b      	uxth	r3, r3
 8002716:	461a      	mov	r2, r3
 8002718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800271a:	4413      	add	r3, r2
 800271c:	643b      	str	r3, [r7, #64]	; 0x40
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	011a      	lsls	r2, r3, #4
 8002724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002726:	4413      	add	r3, r2
 8002728:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800272c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800272e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002730:	b29a      	uxth	r2, r3
 8002732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002734:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	6959      	ldr	r1, [r3, #20]
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	891a      	ldrh	r2, [r3, #8]
 8002742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002744:	b29b      	uxth	r3, r3
 8002746:	f003 ffaa 	bl	800669e <USB_WritePMA>
 800274a:	e1d0      	b.n	8002aee <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002754:	b29b      	uxth	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4413      	add	r3, r2
 8002760:	3306      	adds	r3, #6
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	4413      	add	r3, r2
 800276a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002774:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	699a      	ldr	r2, [r3, #24]
 800277c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002780:	429a      	cmp	r2, r3
 8002782:	d307      	bcc.n	8002794 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	699a      	ldr	r2, [r3, #24]
 8002788:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800278c:	1ad2      	subs	r2, r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	619a      	str	r2, [r3, #24]
 8002792:	e002      	b.n	800279a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2200      	movs	r2, #0
 8002798:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f040 80c4 	bne.w	800292c <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	785b      	ldrb	r3, [r3, #1]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d126      	bne.n	80027fa <HAL_PCD_EP_DB_Transmit+0x456>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	461a      	mov	r2, r3
 80027be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c0:	4413      	add	r3, r2
 80027c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	011a      	lsls	r2, r3, #4
 80027ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027cc:	4413      	add	r3, r2
 80027ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80027d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027de:	b29a      	uxth	r2, r3
 80027e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027e2:	801a      	strh	r2, [r3, #0]
 80027e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027f6:	801a      	strh	r2, [r3, #0]
 80027f8:	e01a      	b.n	8002830 <HAL_PCD_EP_DB_Transmit+0x48c>
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	785b      	ldrb	r3, [r3, #1]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d116      	bne.n	8002830 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	677b      	str	r3, [r7, #116]	; 0x74
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002810:	b29b      	uxth	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002816:	4413      	add	r3, r2
 8002818:	677b      	str	r3, [r7, #116]	; 0x74
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	011a      	lsls	r2, r3, #4
 8002820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002822:	4413      	add	r3, r2
 8002824:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002828:	673b      	str	r3, [r7, #112]	; 0x70
 800282a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800282c:	2200      	movs	r2, #0
 800282e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	67bb      	str	r3, [r7, #120]	; 0x78
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	785b      	ldrb	r3, [r3, #1]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d12f      	bne.n	800289e <HAL_PCD_EP_DB_Transmit+0x4fa>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800284e:	b29b      	uxth	r3, r3
 8002850:	461a      	mov	r2, r3
 8002852:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002856:	4413      	add	r3, r2
 8002858:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	011a      	lsls	r2, r3, #4
 8002862:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002866:	4413      	add	r3, r2
 8002868:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800286c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002870:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800287c:	b29a      	uxth	r2, r3
 800287e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002882:	801a      	strh	r2, [r3, #0]
 8002884:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002894:	b29a      	uxth	r2, r3
 8002896:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800289a:	801a      	strh	r2, [r3, #0]
 800289c:	e017      	b.n	80028ce <HAL_PCD_EP_DB_Transmit+0x52a>
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	785b      	ldrb	r3, [r3, #1]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d113      	bne.n	80028ce <HAL_PCD_EP_DB_Transmit+0x52a>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028b4:	4413      	add	r3, r2
 80028b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	011a      	lsls	r2, r3, #4
 80028be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028c0:	4413      	add	r3, r2
 80028c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028ca:	2200      	movs	r2, #0
 80028cc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	4619      	mov	r1, r3
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f005 febc 	bl	8008652 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f040 8104 	bne.w	8002aee <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002900:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	441a      	add	r2, r3
 8002912:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800291a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800291e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002926:	b29b      	uxth	r3, r3
 8002928:	8013      	strh	r3, [r2, #0]
 800292a:	e0e0      	b.n	8002aee <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800292c:	88fb      	ldrh	r3, [r7, #6]
 800292e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d121      	bne.n	800297a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	461a      	mov	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800294c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002950:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	461a      	mov	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	441a      	add	r2, r3
 8002962:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800296a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800296e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002976:	b29b      	uxth	r3, r3
 8002978:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002980:	2b01      	cmp	r3, #1
 8002982:	f040 80b4 	bne.w	8002aee <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800298e:	441a      	add	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	69da      	ldr	r2, [r3, #28]
 8002998:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800299c:	441a      	add	r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	6a1a      	ldr	r2, [r3, #32]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d309      	bcc.n	80029c2 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	6a1a      	ldr	r2, [r3, #32]
 80029b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ba:	1ad2      	subs	r2, r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	621a      	str	r2, [r3, #32]
 80029c0:	e015      	b.n	80029ee <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d107      	bne.n	80029da <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80029ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029ce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029d8:	e009      	b.n	80029ee <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2200      	movs	r2, #0
 80029e4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	667b      	str	r3, [r7, #100]	; 0x64
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	785b      	ldrb	r3, [r3, #1]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d155      	bne.n	8002aa8 <HAL_PCD_EP_DB_Transmit+0x704>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a10:	4413      	add	r3, r2
 8002a12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	011a      	lsls	r2, r3, #4
 8002a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a22:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d112      	bne.n	8002a50 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a38:	801a      	strh	r2, [r3, #0]
 8002a3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a4c:	801a      	strh	r2, [r3, #0]
 8002a4e:	e044      	b.n	8002ada <HAL_PCD_EP_DB_Transmit+0x736>
 8002a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a52:	2b3e      	cmp	r3, #62	; 0x3e
 8002a54:	d811      	bhi.n	8002a7a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a58:	085b      	lsrs	r3, r3, #1
 8002a5a:	657b      	str	r3, [r7, #84]	; 0x54
 8002a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a68:	3301      	adds	r3, #1
 8002a6a:	657b      	str	r3, [r7, #84]	; 0x54
 8002a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	029b      	lsls	r3, r3, #10
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a76:	801a      	strh	r2, [r3, #0]
 8002a78:	e02f      	b.n	8002ada <HAL_PCD_EP_DB_Transmit+0x736>
 8002a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a7c:	095b      	lsrs	r3, r3, #5
 8002a7e:	657b      	str	r3, [r7, #84]	; 0x54
 8002a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d102      	bne.n	8002a90 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	657b      	str	r3, [r7, #84]	; 0x54
 8002a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	029b      	lsls	r3, r3, #10
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aa4:	801a      	strh	r2, [r3, #0]
 8002aa6:	e018      	b.n	8002ada <HAL_PCD_EP_DB_Transmit+0x736>
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	785b      	ldrb	r3, [r3, #1]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d114      	bne.n	8002ada <HAL_PCD_EP_DB_Transmit+0x736>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002abe:	4413      	add	r3, r2
 8002ac0:	667b      	str	r3, [r7, #100]	; 0x64
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	011a      	lsls	r2, r3, #4
 8002ac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aca:	4413      	add	r3, r2
 8002acc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ad0:	663b      	str	r3, [r7, #96]	; 0x60
 8002ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ad8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	6959      	ldr	r1, [r3, #20]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	895a      	ldrh	r2, [r3, #10]
 8002ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	f003 fdd8 	bl	800669e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b08:	823b      	strh	r3, [r7, #16]
 8002b0a:	8a3b      	ldrh	r3, [r7, #16]
 8002b0c:	f083 0310 	eor.w	r3, r3, #16
 8002b10:	823b      	strh	r3, [r7, #16]
 8002b12:	8a3b      	ldrh	r3, [r7, #16]
 8002b14:	f083 0320 	eor.w	r3, r3, #32
 8002b18:	823b      	strh	r3, [r7, #16]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	441a      	add	r2, r3
 8002b28:	8a3b      	ldrh	r3, [r7, #16]
 8002b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3788      	adds	r7, #136	; 0x88
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	607b      	str	r3, [r7, #4]
 8002b52:	460b      	mov	r3, r1
 8002b54:	817b      	strh	r3, [r7, #10]
 8002b56:	4613      	mov	r3, r2
 8002b58:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b5a:	897b      	ldrh	r3, [r7, #10]
 8002b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00b      	beq.n	8002b7e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b66:	897b      	ldrh	r3, [r7, #10]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4413      	add	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	e009      	b.n	8002b92 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b7e:	897a      	ldrh	r2, [r7, #10]
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4413      	add	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b92:	893b      	ldrh	r3, [r7, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d107      	bne.n	8002ba8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	80da      	strh	r2, [r3, #6]
 8002ba6:	e00b      	b.n	8002bc0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	2201      	movs	r2, #1
 8002bac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	0c1b      	lsrs	r3, r3, #16
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr

08002bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e31d      	b.n	800321a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bde:	4b94      	ldr	r3, [pc, #592]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002be8:	4b91      	ldr	r3, [pc, #580]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d07b      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d006      	beq.n	8002c12 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	2b0c      	cmp	r3, #12
 8002c08:	d10f      	bne.n	8002c2a <HAL_RCC_OscConfig+0x5e>
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c10:	d10b      	bne.n	8002c2a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c12:	4b87      	ldr	r3, [pc, #540]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d06a      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x128>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d166      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e2f7      	b.n	800321a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d106      	bne.n	8002c40 <HAL_RCC_OscConfig+0x74>
 8002c32:	4b7f      	ldr	r3, [pc, #508]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a7e      	ldr	r2, [pc, #504]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	e02d      	b.n	8002c9c <HAL_RCC_OscConfig+0xd0>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10c      	bne.n	8002c62 <HAL_RCC_OscConfig+0x96>
 8002c48:	4b79      	ldr	r3, [pc, #484]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a78      	ldr	r2, [pc, #480]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	4b76      	ldr	r3, [pc, #472]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a75      	ldr	r2, [pc, #468]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	e01c      	b.n	8002c9c <HAL_RCC_OscConfig+0xd0>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b05      	cmp	r3, #5
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCC_OscConfig+0xb8>
 8002c6a:	4b71      	ldr	r3, [pc, #452]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a70      	ldr	r2, [pc, #448]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	4b6e      	ldr	r3, [pc, #440]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a6d      	ldr	r2, [pc, #436]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e00b      	b.n	8002c9c <HAL_RCC_OscConfig+0xd0>
 8002c84:	4b6a      	ldr	r3, [pc, #424]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a69      	ldr	r2, [pc, #420]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	4b67      	ldr	r3, [pc, #412]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a66      	ldr	r2, [pc, #408]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d013      	beq.n	8002ccc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7fd ff38 	bl	8000b18 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cac:	f7fd ff34 	bl	8000b18 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	; 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e2ad      	b.n	800321a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cbe:	4b5c      	ldr	r3, [pc, #368]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0xe0>
 8002cca:	e014      	b.n	8002cf6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7fd ff24 	bl	8000b18 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd4:	f7fd ff20 	bl	8000b18 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b64      	cmp	r3, #100	; 0x64
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e299      	b.n	800321a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ce6:	4b52      	ldr	r3, [pc, #328]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x108>
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d05a      	beq.n	8002db8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d005      	beq.n	8002d14 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	2b0c      	cmp	r3, #12
 8002d0c:	d119      	bne.n	8002d42 <HAL_RCC_OscConfig+0x176>
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d116      	bne.n	8002d42 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d14:	4b46      	ldr	r3, [pc, #280]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_RCC_OscConfig+0x160>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e276      	b.n	800321a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2c:	4b40      	ldr	r3, [pc, #256]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	021b      	lsls	r3, r3, #8
 8002d3a:	493d      	ldr	r1, [pc, #244]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d40:	e03a      	b.n	8002db8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d020      	beq.n	8002d8c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d4a:	4b3a      	ldr	r3, [pc, #232]	; (8002e34 <HAL_RCC_OscConfig+0x268>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7fd fee2 	bl	8000b18 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d58:	f7fd fede 	bl	8000b18 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e257      	b.n	800321a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d6a:	4b31      	ldr	r3, [pc, #196]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d76:	4b2e      	ldr	r3, [pc, #184]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	492a      	ldr	r1, [pc, #168]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	604b      	str	r3, [r1, #4]
 8002d8a:	e015      	b.n	8002db8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d8c:	4b29      	ldr	r3, [pc, #164]	; (8002e34 <HAL_RCC_OscConfig+0x268>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d92:	f7fd fec1 	bl	8000b18 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d9a:	f7fd febd 	bl	8000b18 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e236      	b.n	800321a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002dac:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f0      	bne.n	8002d9a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80b8 	beq.w	8002f36 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d170      	bne.n	8002eae <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dcc:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_RCC_OscConfig+0x218>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e21a      	b.n	800321a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1a      	ldr	r2, [r3, #32]
 8002de8:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d921      	bls.n	8002e38 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 fc67 	bl	80036cc <RCC_SetFlashLatencyFromMSIRange>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e208      	b.n	800321a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e08:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	4906      	ldr	r1, [pc, #24]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	061b      	lsls	r3, r3, #24
 8002e28:	4901      	ldr	r1, [pc, #4]	; (8002e30 <HAL_RCC_OscConfig+0x264>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	604b      	str	r3, [r1, #4]
 8002e2e:	e020      	b.n	8002e72 <HAL_RCC_OscConfig+0x2a6>
 8002e30:	40023800 	.word	0x40023800
 8002e34:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e38:	4b99      	ldr	r3, [pc, #612]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	4996      	ldr	r1, [pc, #600]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e4a:	4b95      	ldr	r3, [pc, #596]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	061b      	lsls	r3, r3, #24
 8002e58:	4991      	ldr	r1, [pc, #580]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fc32 	bl	80036cc <RCC_SetFlashLatencyFromMSIRange>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e1d3      	b.n	800321a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	0b5b      	lsrs	r3, r3, #13
 8002e78:	3301      	adds	r3, #1
 8002e7a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002e82:	4a87      	ldr	r2, [pc, #540]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8002e84:	6892      	ldr	r2, [r2, #8]
 8002e86:	0912      	lsrs	r2, r2, #4
 8002e88:	f002 020f 	and.w	r2, r2, #15
 8002e8c:	4985      	ldr	r1, [pc, #532]	; (80030a4 <HAL_RCC_OscConfig+0x4d8>)
 8002e8e:	5c8a      	ldrb	r2, [r1, r2]
 8002e90:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e92:	4a85      	ldr	r2, [pc, #532]	; (80030a8 <HAL_RCC_OscConfig+0x4dc>)
 8002e94:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e96:	4b85      	ldr	r3, [pc, #532]	; (80030ac <HAL_RCC_OscConfig+0x4e0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd fdf0 	bl	8000a80 <HAL_InitTick>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d045      	beq.n	8002f36 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	e1b5      	b.n	800321a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d029      	beq.n	8002f0a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002eb6:	4b7e      	ldr	r3, [pc, #504]	; (80030b0 <HAL_RCC_OscConfig+0x4e4>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebc:	f7fd fe2c 	bl	8000b18 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ec4:	f7fd fe28 	bl	8000b18 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e1a1      	b.n	800321a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ed6:	4b72      	ldr	r3, [pc, #456]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ee2:	4b6f      	ldr	r3, [pc, #444]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	496c      	ldr	r1, [pc, #432]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ef4:	4b6a      	ldr	r3, [pc, #424]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	061b      	lsls	r3, r3, #24
 8002f02:	4967      	ldr	r1, [pc, #412]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]
 8002f08:	e015      	b.n	8002f36 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f0a:	4b69      	ldr	r3, [pc, #420]	; (80030b0 <HAL_RCC_OscConfig+0x4e4>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7fd fe02 	bl	8000b18 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f18:	f7fd fdfe 	bl	8000b18 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e177      	b.n	800321a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f2a:	4b5d      	ldr	r3, [pc, #372]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d030      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d016      	beq.n	8002f78 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f4a:	4b5a      	ldr	r3, [pc, #360]	; (80030b4 <HAL_RCC_OscConfig+0x4e8>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f50:	f7fd fde2 	bl	8000b18 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f58:	f7fd fdde 	bl	8000b18 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e157      	b.n	800321a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f6a:	4b4d      	ldr	r3, [pc, #308]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8002f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0x38c>
 8002f76:	e015      	b.n	8002fa4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f78:	4b4e      	ldr	r3, [pc, #312]	; (80030b4 <HAL_RCC_OscConfig+0x4e8>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7e:	f7fd fdcb 	bl	8000b18 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f86:	f7fd fdc7 	bl	8000b18 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e140      	b.n	800321a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f98:	4b41      	ldr	r3, [pc, #260]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8002f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f0      	bne.n	8002f86 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80b5 	beq.w	800311c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fb6:	4b3a      	ldr	r3, [pc, #232]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10d      	bne.n	8002fde <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc2:	4b37      	ldr	r3, [pc, #220]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	4a36      	ldr	r2, [pc, #216]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8002fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fcc:	6253      	str	r3, [r2, #36]	; 0x24
 8002fce:	4b34      	ldr	r3, [pc, #208]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fde:	4b36      	ldr	r3, [pc, #216]	; (80030b8 <HAL_RCC_OscConfig+0x4ec>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d118      	bne.n	800301c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fea:	4b33      	ldr	r3, [pc, #204]	; (80030b8 <HAL_RCC_OscConfig+0x4ec>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a32      	ldr	r2, [pc, #200]	; (80030b8 <HAL_RCC_OscConfig+0x4ec>)
 8002ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff6:	f7fd fd8f 	bl	8000b18 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffe:	f7fd fd8b 	bl	8000b18 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b64      	cmp	r3, #100	; 0x64
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e104      	b.n	800321a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003010:	4b29      	ldr	r3, [pc, #164]	; (80030b8 <HAL_RCC_OscConfig+0x4ec>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d106      	bne.n	8003032 <HAL_RCC_OscConfig+0x466>
 8003024:	4b1e      	ldr	r3, [pc, #120]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8003026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003028:	4a1d      	ldr	r2, [pc, #116]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 800302a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302e:	6353      	str	r3, [r2, #52]	; 0x34
 8003030:	e02d      	b.n	800308e <HAL_RCC_OscConfig+0x4c2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10c      	bne.n	8003054 <HAL_RCC_OscConfig+0x488>
 800303a:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 800303c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303e:	4a18      	ldr	r2, [pc, #96]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8003040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003044:	6353      	str	r3, [r2, #52]	; 0x34
 8003046:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8003048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304a:	4a15      	ldr	r2, [pc, #84]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 800304c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003050:	6353      	str	r3, [r2, #52]	; 0x34
 8003052:	e01c      	b.n	800308e <HAL_RCC_OscConfig+0x4c2>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b05      	cmp	r3, #5
 800305a:	d10c      	bne.n	8003076 <HAL_RCC_OscConfig+0x4aa>
 800305c:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 800305e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003060:	4a0f      	ldr	r2, [pc, #60]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8003062:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003066:	6353      	str	r3, [r2, #52]	; 0x34
 8003068:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 800306a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306c:	4a0c      	ldr	r2, [pc, #48]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 800306e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003072:	6353      	str	r3, [r2, #52]	; 0x34
 8003074:	e00b      	b.n	800308e <HAL_RCC_OscConfig+0x4c2>
 8003076:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8003078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307a:	4a09      	ldr	r2, [pc, #36]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 800307c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003080:	6353      	str	r3, [r2, #52]	; 0x34
 8003082:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8003084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003086:	4a06      	ldr	r2, [pc, #24]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8003088:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800308c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d024      	beq.n	80030e0 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003096:	f7fd fd3f 	bl	8000b18 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800309c:	e019      	b.n	80030d2 <HAL_RCC_OscConfig+0x506>
 800309e:	bf00      	nop
 80030a0:	40023800 	.word	0x40023800
 80030a4:	080094d8 	.word	0x080094d8
 80030a8:	20000000 	.word	0x20000000
 80030ac:	20000004 	.word	0x20000004
 80030b0:	42470020 	.word	0x42470020
 80030b4:	42470680 	.word	0x42470680
 80030b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030bc:	f7fd fd2c 	bl	8000b18 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e0a3      	b.n	800321a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030d2:	4b54      	ldr	r3, [pc, #336]	; (8003224 <HAL_RCC_OscConfig+0x658>)
 80030d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0ee      	beq.n	80030bc <HAL_RCC_OscConfig+0x4f0>
 80030de:	e014      	b.n	800310a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e0:	f7fd fd1a 	bl	8000b18 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030e6:	e00a      	b.n	80030fe <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e8:	f7fd fd16 	bl	8000b18 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e08d      	b.n	800321a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030fe:	4b49      	ldr	r3, [pc, #292]	; (8003224 <HAL_RCC_OscConfig+0x658>)
 8003100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003102:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1ee      	bne.n	80030e8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800310a:	7ffb      	ldrb	r3, [r7, #31]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d105      	bne.n	800311c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003110:	4b44      	ldr	r3, [pc, #272]	; (8003224 <HAL_RCC_OscConfig+0x658>)
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	4a43      	ldr	r2, [pc, #268]	; (8003224 <HAL_RCC_OscConfig+0x658>)
 8003116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800311a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	2b00      	cmp	r3, #0
 8003122:	d079      	beq.n	8003218 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	2b0c      	cmp	r3, #12
 8003128:	d056      	beq.n	80031d8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	2b02      	cmp	r3, #2
 8003130:	d13b      	bne.n	80031aa <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003132:	4b3d      	ldr	r3, [pc, #244]	; (8003228 <HAL_RCC_OscConfig+0x65c>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7fd fcee 	bl	8000b18 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003140:	f7fd fcea 	bl	8000b18 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e063      	b.n	800321a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003152:	4b34      	ldr	r3, [pc, #208]	; (8003224 <HAL_RCC_OscConfig+0x658>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800315e:	4b31      	ldr	r3, [pc, #196]	; (8003224 <HAL_RCC_OscConfig+0x658>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	4319      	orrs	r1, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	430b      	orrs	r3, r1
 8003176:	492b      	ldr	r1, [pc, #172]	; (8003224 <HAL_RCC_OscConfig+0x658>)
 8003178:	4313      	orrs	r3, r2
 800317a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800317c:	4b2a      	ldr	r3, [pc, #168]	; (8003228 <HAL_RCC_OscConfig+0x65c>)
 800317e:	2201      	movs	r2, #1
 8003180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003182:	f7fd fcc9 	bl	8000b18 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800318a:	f7fd fcc5 	bl	8000b18 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e03e      	b.n	800321a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800319c:	4b21      	ldr	r3, [pc, #132]	; (8003224 <HAL_RCC_OscConfig+0x658>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x5be>
 80031a8:	e036      	b.n	8003218 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031aa:	4b1f      	ldr	r3, [pc, #124]	; (8003228 <HAL_RCC_OscConfig+0x65c>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fd fcb2 	bl	8000b18 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b8:	f7fd fcae 	bl	8000b18 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e027      	b.n	800321a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031ca:	4b16      	ldr	r3, [pc, #88]	; (8003224 <HAL_RCC_OscConfig+0x658>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x5ec>
 80031d6:	e01f      	b.n	8003218 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e01a      	b.n	800321a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031e4:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <HAL_RCC_OscConfig+0x658>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d10d      	bne.n	8003214 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003202:	429a      	cmp	r2, r3
 8003204:	d106      	bne.n	8003214 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3720      	adds	r7, #32
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800
 8003228:	42470060 	.word	0x42470060

0800322c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e11a      	b.n	8003476 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003240:	4b8f      	ldr	r3, [pc, #572]	; (8003480 <HAL_RCC_ClockConfig+0x254>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d919      	bls.n	8003282 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d105      	bne.n	8003260 <HAL_RCC_ClockConfig+0x34>
 8003254:	4b8a      	ldr	r3, [pc, #552]	; (8003480 <HAL_RCC_ClockConfig+0x254>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a89      	ldr	r2, [pc, #548]	; (8003480 <HAL_RCC_ClockConfig+0x254>)
 800325a:	f043 0304 	orr.w	r3, r3, #4
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	4b87      	ldr	r3, [pc, #540]	; (8003480 <HAL_RCC_ClockConfig+0x254>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f023 0201 	bic.w	r2, r3, #1
 8003268:	4985      	ldr	r1, [pc, #532]	; (8003480 <HAL_RCC_ClockConfig+0x254>)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	4313      	orrs	r3, r2
 800326e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003270:	4b83      	ldr	r3, [pc, #524]	; (8003480 <HAL_RCC_ClockConfig+0x254>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d001      	beq.n	8003282 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e0f9      	b.n	8003476 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800328e:	4b7d      	ldr	r3, [pc, #500]	; (8003484 <HAL_RCC_ClockConfig+0x258>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	497a      	ldr	r1, [pc, #488]	; (8003484 <HAL_RCC_ClockConfig+0x258>)
 800329c:	4313      	orrs	r3, r2
 800329e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 808e 	beq.w	80033ca <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d107      	bne.n	80032c6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032b6:	4b73      	ldr	r3, [pc, #460]	; (8003484 <HAL_RCC_ClockConfig+0x258>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d121      	bne.n	8003306 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e0d7      	b.n	8003476 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	d107      	bne.n	80032de <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032ce:	4b6d      	ldr	r3, [pc, #436]	; (8003484 <HAL_RCC_ClockConfig+0x258>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d115      	bne.n	8003306 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e0cb      	b.n	8003476 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d107      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032e6:	4b67      	ldr	r3, [pc, #412]	; (8003484 <HAL_RCC_ClockConfig+0x258>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d109      	bne.n	8003306 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e0bf      	b.n	8003476 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032f6:	4b63      	ldr	r3, [pc, #396]	; (8003484 <HAL_RCC_ClockConfig+0x258>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e0b7      	b.n	8003476 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003306:	4b5f      	ldr	r3, [pc, #380]	; (8003484 <HAL_RCC_ClockConfig+0x258>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f023 0203 	bic.w	r2, r3, #3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	495c      	ldr	r1, [pc, #368]	; (8003484 <HAL_RCC_ClockConfig+0x258>)
 8003314:	4313      	orrs	r3, r2
 8003316:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003318:	f7fd fbfe 	bl	8000b18 <HAL_GetTick>
 800331c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d112      	bne.n	800334c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003326:	e00a      	b.n	800333e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003328:	f7fd fbf6 	bl	8000b18 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f241 3288 	movw	r2, #5000	; 0x1388
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e09b      	b.n	8003476 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800333e:	4b51      	ldr	r3, [pc, #324]	; (8003484 <HAL_RCC_ClockConfig+0x258>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	2b08      	cmp	r3, #8
 8003348:	d1ee      	bne.n	8003328 <HAL_RCC_ClockConfig+0xfc>
 800334a:	e03e      	b.n	80033ca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b03      	cmp	r3, #3
 8003352:	d112      	bne.n	800337a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003354:	e00a      	b.n	800336c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003356:	f7fd fbdf 	bl	8000b18 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	f241 3288 	movw	r2, #5000	; 0x1388
 8003364:	4293      	cmp	r3, r2
 8003366:	d901      	bls.n	800336c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e084      	b.n	8003476 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800336c:	4b45      	ldr	r3, [pc, #276]	; (8003484 <HAL_RCC_ClockConfig+0x258>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 030c 	and.w	r3, r3, #12
 8003374:	2b0c      	cmp	r3, #12
 8003376:	d1ee      	bne.n	8003356 <HAL_RCC_ClockConfig+0x12a>
 8003378:	e027      	b.n	80033ca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d11d      	bne.n	80033be <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003382:	e00a      	b.n	800339a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003384:	f7fd fbc8 	bl	8000b18 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003392:	4293      	cmp	r3, r2
 8003394:	d901      	bls.n	800339a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e06d      	b.n	8003476 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800339a:	4b3a      	ldr	r3, [pc, #232]	; (8003484 <HAL_RCC_ClockConfig+0x258>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d1ee      	bne.n	8003384 <HAL_RCC_ClockConfig+0x158>
 80033a6:	e010      	b.n	80033ca <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a8:	f7fd fbb6 	bl	8000b18 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e05b      	b.n	8003476 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80033be:	4b31      	ldr	r3, [pc, #196]	; (8003484 <HAL_RCC_ClockConfig+0x258>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1ee      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033ca:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <HAL_RCC_ClockConfig+0x254>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d219      	bcs.n	800340c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d105      	bne.n	80033ea <HAL_RCC_ClockConfig+0x1be>
 80033de:	4b28      	ldr	r3, [pc, #160]	; (8003480 <HAL_RCC_ClockConfig+0x254>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a27      	ldr	r2, [pc, #156]	; (8003480 <HAL_RCC_ClockConfig+0x254>)
 80033e4:	f043 0304 	orr.w	r3, r3, #4
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	4b25      	ldr	r3, [pc, #148]	; (8003480 <HAL_RCC_ClockConfig+0x254>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f023 0201 	bic.w	r2, r3, #1
 80033f2:	4923      	ldr	r1, [pc, #140]	; (8003480 <HAL_RCC_ClockConfig+0x254>)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fa:	4b21      	ldr	r3, [pc, #132]	; (8003480 <HAL_RCC_ClockConfig+0x254>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e034      	b.n	8003476 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003418:	4b1a      	ldr	r3, [pc, #104]	; (8003484 <HAL_RCC_ClockConfig+0x258>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4917      	ldr	r1, [pc, #92]	; (8003484 <HAL_RCC_ClockConfig+0x258>)
 8003426:	4313      	orrs	r3, r2
 8003428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b00      	cmp	r3, #0
 8003434:	d009      	beq.n	800344a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003436:	4b13      	ldr	r3, [pc, #76]	; (8003484 <HAL_RCC_ClockConfig+0x258>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	490f      	ldr	r1, [pc, #60]	; (8003484 <HAL_RCC_ClockConfig+0x258>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800344a:	f000 f823 	bl	8003494 <HAL_RCC_GetSysClockFreq>
 800344e:	4602      	mov	r2, r0
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <HAL_RCC_ClockConfig+0x258>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	490b      	ldr	r1, [pc, #44]	; (8003488 <HAL_RCC_ClockConfig+0x25c>)
 800345c:	5ccb      	ldrb	r3, [r1, r3]
 800345e:	fa22 f303 	lsr.w	r3, r2, r3
 8003462:	4a0a      	ldr	r2, [pc, #40]	; (800348c <HAL_RCC_ClockConfig+0x260>)
 8003464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003466:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <HAL_RCC_ClockConfig+0x264>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f7fd fb08 	bl	8000a80 <HAL_InitTick>
 8003470:	4603      	mov	r3, r0
 8003472:	72fb      	strb	r3, [r7, #11]

  return status;
 8003474:	7afb      	ldrb	r3, [r7, #11]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40023c00 	.word	0x40023c00
 8003484:	40023800 	.word	0x40023800
 8003488:	080094d8 	.word	0x080094d8
 800348c:	20000000 	.word	0x20000000
 8003490:	20000004 	.word	0x20000004

08003494 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003498:	b092      	sub	sp, #72	; 0x48
 800349a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800349c:	4b79      	ldr	r3, [pc, #484]	; (8003684 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a4:	f003 030c 	and.w	r3, r3, #12
 80034a8:	2b0c      	cmp	r3, #12
 80034aa:	d00d      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0x34>
 80034ac:	2b0c      	cmp	r3, #12
 80034ae:	f200 80d5 	bhi.w	800365c <HAL_RCC_GetSysClockFreq+0x1c8>
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d002      	beq.n	80034bc <HAL_RCC_GetSysClockFreq+0x28>
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d003      	beq.n	80034c2 <HAL_RCC_GetSysClockFreq+0x2e>
 80034ba:	e0cf      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034bc:	4b72      	ldr	r3, [pc, #456]	; (8003688 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80034be:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80034c0:	e0da      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034c2:	4b71      	ldr	r3, [pc, #452]	; (8003688 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80034c4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80034c6:	e0d7      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80034c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ca:	0c9b      	lsrs	r3, r3, #18
 80034cc:	f003 020f 	and.w	r2, r3, #15
 80034d0:	4b6e      	ldr	r3, [pc, #440]	; (800368c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80034d2:	5c9b      	ldrb	r3, [r3, r2]
 80034d4:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80034d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d8:	0d9b      	lsrs	r3, r3, #22
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	3301      	adds	r3, #1
 80034e0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034e2:	4b68      	ldr	r3, [pc, #416]	; (8003684 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d05d      	beq.n	80035aa <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80034ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f0:	2200      	movs	r2, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	4611      	mov	r1, r2
 80034f6:	4604      	mov	r4, r0
 80034f8:	460d      	mov	r5, r1
 80034fa:	4622      	mov	r2, r4
 80034fc:	462b      	mov	r3, r5
 80034fe:	f04f 0000 	mov.w	r0, #0
 8003502:	f04f 0100 	mov.w	r1, #0
 8003506:	0159      	lsls	r1, r3, #5
 8003508:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800350c:	0150      	lsls	r0, r2, #5
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4621      	mov	r1, r4
 8003514:	1a51      	subs	r1, r2, r1
 8003516:	6139      	str	r1, [r7, #16]
 8003518:	4629      	mov	r1, r5
 800351a:	eb63 0301 	sbc.w	r3, r3, r1
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800352c:	4659      	mov	r1, fp
 800352e:	018b      	lsls	r3, r1, #6
 8003530:	4651      	mov	r1, sl
 8003532:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003536:	4651      	mov	r1, sl
 8003538:	018a      	lsls	r2, r1, #6
 800353a:	46d4      	mov	ip, sl
 800353c:	ebb2 080c 	subs.w	r8, r2, ip
 8003540:	4659      	mov	r1, fp
 8003542:	eb63 0901 	sbc.w	r9, r3, r1
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003552:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003556:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800355a:	4690      	mov	r8, r2
 800355c:	4699      	mov	r9, r3
 800355e:	4623      	mov	r3, r4
 8003560:	eb18 0303 	adds.w	r3, r8, r3
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	462b      	mov	r3, r5
 8003568:	eb49 0303 	adc.w	r3, r9, r3
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	f04f 0300 	mov.w	r3, #0
 8003576:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800357a:	4629      	mov	r1, r5
 800357c:	028b      	lsls	r3, r1, #10
 800357e:	4620      	mov	r0, r4
 8003580:	4629      	mov	r1, r5
 8003582:	4604      	mov	r4, r0
 8003584:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003588:	4601      	mov	r1, r0
 800358a:	028a      	lsls	r2, r1, #10
 800358c:	4610      	mov	r0, r2
 800358e:	4619      	mov	r1, r3
 8003590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003592:	2200      	movs	r2, #0
 8003594:	62bb      	str	r3, [r7, #40]	; 0x28
 8003596:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003598:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800359c:	f7fc fdf6 	bl	800018c <__aeabi_uldivmod>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4613      	mov	r3, r2
 80035a6:	647b      	str	r3, [r7, #68]	; 0x44
 80035a8:	e055      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80035aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ac:	2200      	movs	r2, #0
 80035ae:	623b      	str	r3, [r7, #32]
 80035b0:	627a      	str	r2, [r7, #36]	; 0x24
 80035b2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035b6:	4642      	mov	r2, r8
 80035b8:	464b      	mov	r3, r9
 80035ba:	f04f 0000 	mov.w	r0, #0
 80035be:	f04f 0100 	mov.w	r1, #0
 80035c2:	0159      	lsls	r1, r3, #5
 80035c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035c8:	0150      	lsls	r0, r2, #5
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	46c4      	mov	ip, r8
 80035d0:	ebb2 0a0c 	subs.w	sl, r2, ip
 80035d4:	4640      	mov	r0, r8
 80035d6:	4649      	mov	r1, r9
 80035d8:	468c      	mov	ip, r1
 80035da:	eb63 0b0c 	sbc.w	fp, r3, ip
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035ea:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035ee:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035f2:	ebb2 040a 	subs.w	r4, r2, sl
 80035f6:	eb63 050b 	sbc.w	r5, r3, fp
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	00eb      	lsls	r3, r5, #3
 8003604:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003608:	00e2      	lsls	r2, r4, #3
 800360a:	4614      	mov	r4, r2
 800360c:	461d      	mov	r5, r3
 800360e:	4603      	mov	r3, r0
 8003610:	18e3      	adds	r3, r4, r3
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	460b      	mov	r3, r1
 8003616:	eb45 0303 	adc.w	r3, r5, r3
 800361a:	607b      	str	r3, [r7, #4]
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003628:	4629      	mov	r1, r5
 800362a:	028b      	lsls	r3, r1, #10
 800362c:	4620      	mov	r0, r4
 800362e:	4629      	mov	r1, r5
 8003630:	4604      	mov	r4, r0
 8003632:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003636:	4601      	mov	r1, r0
 8003638:	028a      	lsls	r2, r1, #10
 800363a:	4610      	mov	r0, r2
 800363c:	4619      	mov	r1, r3
 800363e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003640:	2200      	movs	r2, #0
 8003642:	61bb      	str	r3, [r7, #24]
 8003644:	61fa      	str	r2, [r7, #28]
 8003646:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800364a:	f7fc fd9f 	bl	800018c <__aeabi_uldivmod>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	4613      	mov	r3, r2
 8003654:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8003656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003658:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800365a:	e00d      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800365c:	4b09      	ldr	r3, [pc, #36]	; (8003684 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	0b5b      	lsrs	r3, r3, #13
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366a:	3301      	adds	r3, #1
 800366c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003676:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800367a:	4618      	mov	r0, r3
 800367c:	3748      	adds	r7, #72	; 0x48
 800367e:	46bd      	mov	sp, r7
 8003680:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003684:	40023800 	.word	0x40023800
 8003688:	00f42400 	.word	0x00f42400
 800368c:	080094cc 	.word	0x080094cc

08003690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003694:	4b02      	ldr	r3, [pc, #8]	; (80036a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003696:	681b      	ldr	r3, [r3, #0]
}
 8003698:	4618      	mov	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr
 80036a0:	20000000 	.word	0x20000000

080036a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036a8:	f7ff fff2 	bl	8003690 <HAL_RCC_GetHCLKFreq>
 80036ac:	4602      	mov	r2, r0
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	0a1b      	lsrs	r3, r3, #8
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	4903      	ldr	r1, [pc, #12]	; (80036c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ba:	5ccb      	ldrb	r3, [r1, r3]
 80036bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40023800 	.word	0x40023800
 80036c8:	080094e8 	.word	0x080094e8

080036cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036d4:	2300      	movs	r3, #0
 80036d6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80036d8:	4b29      	ldr	r3, [pc, #164]	; (8003780 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d12c      	bne.n	800373e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036e4:	4b26      	ldr	r3, [pc, #152]	; (8003780 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80036f0:	4b24      	ldr	r3, [pc, #144]	; (8003784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	e016      	b.n	800372a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fc:	4b20      	ldr	r3, [pc, #128]	; (8003780 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	4a1f      	ldr	r2, [pc, #124]	; (8003780 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003706:	6253      	str	r3, [r2, #36]	; 0x24
 8003708:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003714:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800371c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800371e:	4b18      	ldr	r3, [pc, #96]	; (8003780 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	4a17      	ldr	r2, [pc, #92]	; (8003780 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003728:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003730:	d105      	bne.n	800373e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003738:	d101      	bne.n	800373e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800373a:	2301      	movs	r3, #1
 800373c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d105      	bne.n	8003750 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003744:	4b10      	ldr	r3, [pc, #64]	; (8003788 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a0f      	ldr	r2, [pc, #60]	; (8003788 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800374a:	f043 0304 	orr.w	r3, r3, #4
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	4b0d      	ldr	r3, [pc, #52]	; (8003788 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f023 0201 	bic.w	r2, r3, #1
 8003758:	490b      	ldr	r1, [pc, #44]	; (8003788 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	4313      	orrs	r3, r2
 800375e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003760:	4b09      	ldr	r3, [pc, #36]	; (8003788 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	429a      	cmp	r2, r3
 800376c:	d001      	beq.n	8003772 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40023800 	.word	0x40023800
 8003784:	40007000 	.word	0x40007000
 8003788:	40023c00 	.word	0x40023c00

0800378c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e06e      	b.n	800387c <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d108      	bne.n	80037b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ae:	d009      	beq.n	80037c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	61da      	str	r2, [r3, #28]
 80037b6:	e005      	b.n	80037c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d106      	bne.n	80037e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7fd f85e 	bl	80008a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003848:	ea42 0103 	orr.w	r1, r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	0c1a      	lsrs	r2, r3, #16
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f002 0204 	and.w	r2, r2, #4
 800386a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b088      	sub	sp, #32
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	4613      	mov	r3, r2
 8003892:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <HAL_SPI_Transmit+0x22>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e126      	b.n	8003af4 <HAL_SPI_Transmit+0x270>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038ae:	f7fd f933 	bl	8000b18 <HAL_GetTick>
 80038b2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d002      	beq.n	80038ca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038c4:	2302      	movs	r3, #2
 80038c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038c8:	e10b      	b.n	8003ae2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <HAL_SPI_Transmit+0x52>
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d102      	bne.n	80038dc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038da:	e102      	b.n	8003ae2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2203      	movs	r2, #3
 80038e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	88fa      	ldrh	r2, [r7, #6]
 80038f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	88fa      	ldrh	r2, [r7, #6]
 80038fa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003922:	d10f      	bne.n	8003944 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003932:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003942:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394e:	2b40      	cmp	r3, #64	; 0x40
 8003950:	d007      	beq.n	8003962 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003960:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800396a:	d14b      	bne.n	8003a04 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_SPI_Transmit+0xf6>
 8003974:	8afb      	ldrh	r3, [r7, #22]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d13e      	bne.n	80039f8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	881a      	ldrh	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	1c9a      	adds	r2, r3, #2
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800399e:	e02b      	b.n	80039f8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d112      	bne.n	80039d4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	881a      	ldrh	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	1c9a      	adds	r2, r3, #2
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80039d2:	e011      	b.n	80039f8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039d4:	f7fd f8a0 	bl	8000b18 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d803      	bhi.n	80039ec <HAL_SPI_Transmit+0x168>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ea:	d102      	bne.n	80039f2 <HAL_SPI_Transmit+0x16e>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d102      	bne.n	80039f8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039f6:	e074      	b.n	8003ae2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1ce      	bne.n	80039a0 <HAL_SPI_Transmit+0x11c>
 8003a02:	e04c      	b.n	8003a9e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_SPI_Transmit+0x18e>
 8003a0c:	8afb      	ldrh	r3, [r7, #22]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d140      	bne.n	8003a94 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	330c      	adds	r3, #12
 8003a1c:	7812      	ldrb	r2, [r2, #0]
 8003a1e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a38:	e02c      	b.n	8003a94 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d113      	bne.n	8003a70 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	330c      	adds	r3, #12
 8003a52:	7812      	ldrb	r2, [r2, #0]
 8003a54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a6e:	e011      	b.n	8003a94 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a70:	f7fd f852 	bl	8000b18 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d803      	bhi.n	8003a88 <HAL_SPI_Transmit+0x204>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a86:	d102      	bne.n	8003a8e <HAL_SPI_Transmit+0x20a>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d102      	bne.n	8003a94 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a92:	e026      	b.n	8003ae2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1cd      	bne.n	8003a3a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	6839      	ldr	r1, [r7, #0]
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 f8b2 	bl	8003c0c <SPI_EndRxTxTransaction>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10a      	bne.n	8003ad2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003abc:	2300      	movs	r3, #0
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	77fb      	strb	r3, [r7, #31]
 8003ade:	e000      	b.n	8003ae2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003ae0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003af2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3720      	adds	r7, #32
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b0c:	f7fd f804 	bl	8000b18 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	4413      	add	r3, r2
 8003b1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b1c:	f7fc fffc 	bl	8000b18 <HAL_GetTick>
 8003b20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b22:	4b39      	ldr	r3, [pc, #228]	; (8003c08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	015b      	lsls	r3, r3, #5
 8003b28:	0d1b      	lsrs	r3, r3, #20
 8003b2a:	69fa      	ldr	r2, [r7, #28]
 8003b2c:	fb02 f303 	mul.w	r3, r2, r3
 8003b30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b32:	e054      	b.n	8003bde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3a:	d050      	beq.n	8003bde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b3c:	f7fc ffec 	bl	8000b18 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	69fa      	ldr	r2, [r7, #28]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d902      	bls.n	8003b52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d13d      	bne.n	8003bce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b6a:	d111      	bne.n	8003b90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b74:	d004      	beq.n	8003b80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b7e:	d107      	bne.n	8003b90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b98:	d10f      	bne.n	8003bba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e017      	b.n	8003bfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4013      	ands	r3, r2
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	bf0c      	ite	eq
 8003bee:	2301      	moveq	r3, #1
 8003bf0:	2300      	movne	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	79fb      	ldrb	r3, [r7, #7]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d19b      	bne.n	8003b34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3720      	adds	r7, #32
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20000000 	.word	0x20000000

08003c0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c18:	4b1b      	ldr	r3, [pc, #108]	; (8003c88 <SPI_EndRxTxTransaction+0x7c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1b      	ldr	r2, [pc, #108]	; (8003c8c <SPI_EndRxTxTransaction+0x80>)
 8003c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c22:	0d5b      	lsrs	r3, r3, #21
 8003c24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c28:	fb02 f303 	mul.w	r3, r2, r3
 8003c2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c36:	d112      	bne.n	8003c5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2180      	movs	r1, #128	; 0x80
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f7ff ff5a 	bl	8003afc <SPI_WaitFlagStateUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d016      	beq.n	8003c7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c52:	f043 0220 	orr.w	r2, r3, #32
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e00f      	b.n	8003c7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c74:	2b80      	cmp	r3, #128	; 0x80
 8003c76:	d0f2      	beq.n	8003c5e <SPI_EndRxTxTransaction+0x52>
 8003c78:	e000      	b.n	8003c7c <SPI_EndRxTxTransaction+0x70>
        break;
 8003c7a:	bf00      	nop
  }

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000000 	.word	0x20000000
 8003c8c:	165e9f81 	.word	0x165e9f81

08003c90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ca0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ca4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003cc4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003cc8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	4013      	ands	r3, r2
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bc80      	pop	{r7}
 8003cee:	4770      	bx	lr

08003cf0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	f107 0014 	add.w	r0, r7, #20
 8003cfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	b004      	add	sp, #16
 8003d2e:	4770      	bx	lr

08003d30 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b09b      	sub	sp, #108	; 0x6c
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d56:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	78db      	ldrb	r3, [r3, #3]
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d81f      	bhi.n	8003da2 <USB_ActivateEndpoint+0x72>
 8003d62:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <USB_ActivateEndpoint+0x38>)
 8003d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d68:	08003d79 	.word	0x08003d79
 8003d6c:	08003d95 	.word	0x08003d95
 8003d70:	08003dab 	.word	0x08003dab
 8003d74:	08003d87 	.word	0x08003d87
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003d78:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d80:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d84:	e012      	b.n	8003dac <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003d86:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d8a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003d8e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d92:	e00b      	b.n	8003dac <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003d94:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d9c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003da0:	e004      	b.n	8003dac <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003da8:	e000      	b.n	8003dac <USB_ActivateEndpoint+0x7c>
      break;
 8003daa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	441a      	add	r2, r3
 8003db6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	441a      	add	r2, r3
 8003dfc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	7b1b      	ldrb	r3, [r3, #12]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f040 8149 	bne.w	80040b0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	785b      	ldrb	r3, [r3, #1]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 8084 	beq.w	8003f30 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	461a      	mov	r2, r3
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	4413      	add	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	011a      	lsls	r2, r3, #4
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	88db      	ldrh	r3, [r3, #6]
 8003e50:	085b      	lsrs	r3, r3, #1
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	81fb      	strh	r3, [r7, #14]
 8003e6a:	89fb      	ldrh	r3, [r7, #14]
 8003e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d01b      	beq.n	8003eac <USB_ActivateEndpoint+0x17c>
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8a:	81bb      	strh	r3, [r7, #12]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	441a      	add	r2, r3
 8003e96:	89bb      	ldrh	r3, [r7, #12]
 8003e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ea4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	78db      	ldrb	r3, [r3, #3]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d020      	beq.n	8003ef6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eca:	813b      	strh	r3, [r7, #8]
 8003ecc:	893b      	ldrh	r3, [r7, #8]
 8003ece:	f083 0320 	eor.w	r3, r3, #32
 8003ed2:	813b      	strh	r3, [r7, #8]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	441a      	add	r2, r3
 8003ede:	893b      	ldrh	r3, [r7, #8]
 8003ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	8013      	strh	r3, [r2, #0]
 8003ef4:	e27f      	b.n	80043f6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f0c:	817b      	strh	r3, [r7, #10]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	441a      	add	r2, r3
 8003f18:	897b      	ldrh	r3, [r7, #10]
 8003f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	8013      	strh	r3, [r2, #0]
 8003f2e:	e262      	b.n	80043f6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f40:	4413      	add	r3, r2
 8003f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	011a      	lsls	r2, r3, #4
 8003f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	88db      	ldrh	r3, [r3, #6]
 8003f58:	085b      	lsrs	r3, r3, #1
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f62:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	461a      	mov	r2, r3
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	4413      	add	r3, r2
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	011a      	lsls	r2, r3, #4
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	4413      	add	r3, r2
 8003f82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f86:	623b      	str	r3, [r7, #32]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d112      	bne.n	8003fb6 <USB_ActivateEndpoint+0x286>
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	801a      	strh	r2, [r3, #0]
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	801a      	strh	r2, [r3, #0]
 8003fb4:	e02f      	b.n	8004016 <USB_ActivateEndpoint+0x2e6>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b3e      	cmp	r3, #62	; 0x3e
 8003fbc:	d813      	bhi.n	8003fe6 <USB_ActivateEndpoint+0x2b6>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	085b      	lsrs	r3, r3, #1
 8003fc4:	663b      	str	r3, [r7, #96]	; 0x60
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <USB_ActivateEndpoint+0x2a8>
 8003fd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	663b      	str	r3, [r7, #96]	; 0x60
 8003fd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	029b      	lsls	r3, r3, #10
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	801a      	strh	r2, [r3, #0]
 8003fe4:	e017      	b.n	8004016 <USB_ActivateEndpoint+0x2e6>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	663b      	str	r3, [r7, #96]	; 0x60
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f003 031f 	and.w	r3, r3, #31
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d102      	bne.n	8004000 <USB_ActivateEndpoint+0x2d0>
 8003ffa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	663b      	str	r3, [r7, #96]	; 0x60
 8004000:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004002:	b29b      	uxth	r3, r3
 8004004:	029b      	lsls	r3, r3, #10
 8004006:	b29b      	uxth	r3, r3
 8004008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800400c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004010:	b29a      	uxth	r2, r3
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	83fb      	strh	r3, [r7, #30]
 8004024:	8bfb      	ldrh	r3, [r7, #30]
 8004026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d01b      	beq.n	8004066 <USB_ActivateEndpoint+0x336>
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	b29b      	uxth	r3, r3
 800403c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004044:	83bb      	strh	r3, [r7, #28]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	441a      	add	r2, r3
 8004050:	8bbb      	ldrh	r3, [r7, #28]
 8004052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800405a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800405e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004062:	b29b      	uxth	r3, r3
 8004064:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	b29b      	uxth	r3, r3
 8004074:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407c:	837b      	strh	r3, [r7, #26]
 800407e:	8b7b      	ldrh	r3, [r7, #26]
 8004080:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004084:	837b      	strh	r3, [r7, #26]
 8004086:	8b7b      	ldrh	r3, [r7, #26]
 8004088:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800408c:	837b      	strh	r3, [r7, #26]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	441a      	add	r2, r3
 8004098:	8b7b      	ldrh	r3, [r7, #26]
 800409a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800409e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	8013      	strh	r3, [r2, #0]
 80040ae:	e1a2      	b.n	80043f6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	441a      	add	r2, r3
 80040d4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80040d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040e0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80040e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	461a      	mov	r2, r3
 80040fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040fc:	4413      	add	r3, r2
 80040fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	011a      	lsls	r2, r3, #4
 8004106:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004108:	4413      	add	r3, r2
 800410a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800410e:	657b      	str	r3, [r7, #84]	; 0x54
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	891b      	ldrh	r3, [r3, #8]
 8004114:	085b      	lsrs	r3, r3, #1
 8004116:	b29b      	uxth	r3, r3
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800411e:	801a      	strh	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	653b      	str	r3, [r7, #80]	; 0x50
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800412a:	b29b      	uxth	r3, r3
 800412c:	461a      	mov	r2, r3
 800412e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004130:	4413      	add	r3, r2
 8004132:	653b      	str	r3, [r7, #80]	; 0x50
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	011a      	lsls	r2, r3, #4
 800413a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800413c:	4413      	add	r3, r2
 800413e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	895b      	ldrh	r3, [r3, #10]
 8004148:	085b      	lsrs	r3, r3, #1
 800414a:	b29b      	uxth	r3, r3
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004152:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	785b      	ldrb	r3, [r3, #1]
 8004158:	2b00      	cmp	r3, #0
 800415a:	f040 8091 	bne.w	8004280 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800416c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800416e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d01b      	beq.n	80041ae <USB_ActivateEndpoint+0x47e>
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	b29b      	uxth	r3, r3
 8004184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	441a      	add	r2, r3
 8004198:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800419a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800419e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	873b      	strh	r3, [r7, #56]	; 0x38
 80041bc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80041be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d01b      	beq.n	80041fe <USB_ActivateEndpoint+0x4ce>
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041dc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	441a      	add	r2, r3
 80041e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	b29b      	uxth	r3, r3
 800420c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004214:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004216:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004218:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800421c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800421e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004220:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004224:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	441a      	add	r2, r3
 8004230:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800423a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800423e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004242:	b29b      	uxth	r3, r3
 8004244:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	b29b      	uxth	r3, r3
 8004254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800425c:	867b      	strh	r3, [r7, #50]	; 0x32
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	441a      	add	r2, r3
 8004268:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800426a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800426e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800427a:	b29b      	uxth	r3, r3
 800427c:	8013      	strh	r3, [r2, #0]
 800427e:	e0ba      	b.n	80043f6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004290:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01d      	beq.n	80042d8 <USB_ActivateEndpoint+0x5a8>
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	441a      	add	r2, r3
 80042c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80042c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80042e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80042ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01d      	beq.n	8004330 <USB_ActivateEndpoint+0x600>
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	b29b      	uxth	r3, r3
 8004302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	441a      	add	r2, r3
 8004318:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800431c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004328:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800432c:	b29b      	uxth	r3, r3
 800432e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	78db      	ldrb	r3, [r3, #3]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d024      	beq.n	8004382 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	b29b      	uxth	r3, r3
 8004346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800434e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004352:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004356:	f083 0320 	eor.w	r3, r3, #32
 800435a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	441a      	add	r2, r3
 8004368:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800436c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800437c:	b29b      	uxth	r3, r3
 800437e:	8013      	strh	r3, [r2, #0]
 8004380:	e01d      	b.n	80043be <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	b29b      	uxth	r3, r3
 8004390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004398:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	441a      	add	r2, r3
 80043a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80043aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	441a      	add	r2, r3
 80043e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80043e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80043f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	376c      	adds	r7, #108	; 0x6c
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr

08004404 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004404:	b480      	push	{r7}
 8004406:	b08d      	sub	sp, #52	; 0x34
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	7b1b      	ldrb	r3, [r3, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	f040 808e 	bne.w	8004534 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	785b      	ldrb	r3, [r3, #1]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d044      	beq.n	80044aa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	81bb      	strh	r3, [r7, #12]
 800442e:	89bb      	ldrh	r3, [r7, #12]
 8004430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004434:	2b00      	cmp	r3, #0
 8004436:	d01b      	beq.n	8004470 <USB_DeactivateEndpoint+0x6c>
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	881b      	ldrh	r3, [r3, #0]
 8004444:	b29b      	uxth	r3, r3
 8004446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800444a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444e:	817b      	strh	r3, [r7, #10]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	441a      	add	r2, r3
 800445a:	897b      	ldrh	r3, [r7, #10]
 800445c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004460:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004464:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004468:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800446c:	b29b      	uxth	r3, r3
 800446e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b29b      	uxth	r3, r3
 800447e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004486:	813b      	strh	r3, [r7, #8]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	441a      	add	r2, r3
 8004492:	893b      	ldrh	r3, [r7, #8]
 8004494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800449c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	8013      	strh	r3, [r2, #0]
 80044a8:	e192      	b.n	80047d0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	827b      	strh	r3, [r7, #18]
 80044b8:	8a7b      	ldrh	r3, [r7, #18]
 80044ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d01b      	beq.n	80044fa <USB_DeactivateEndpoint+0xf6>
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d8:	823b      	strh	r3, [r7, #16]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	441a      	add	r2, r3
 80044e4:	8a3b      	ldrh	r3, [r7, #16]
 80044e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	b29b      	uxth	r3, r3
 8004508:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800450c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004510:	81fb      	strh	r3, [r7, #14]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	441a      	add	r2, r3
 800451c:	89fb      	ldrh	r3, [r7, #14]
 800451e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800452a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800452e:	b29b      	uxth	r3, r3
 8004530:	8013      	strh	r3, [r2, #0]
 8004532:	e14d      	b.n	80047d0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	785b      	ldrb	r3, [r3, #1]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f040 80a5 	bne.w	8004688 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	843b      	strh	r3, [r7, #32]
 800454c:	8c3b      	ldrh	r3, [r7, #32]
 800454e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d01b      	beq.n	800458e <USB_DeactivateEndpoint+0x18a>
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	b29b      	uxth	r3, r3
 8004564:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456c:	83fb      	strh	r3, [r7, #30]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	441a      	add	r2, r3
 8004578:	8bfb      	ldrh	r3, [r7, #30]
 800457a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800457e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004582:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458a:	b29b      	uxth	r3, r3
 800458c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	83bb      	strh	r3, [r7, #28]
 800459c:	8bbb      	ldrh	r3, [r7, #28]
 800459e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d01b      	beq.n	80045de <USB_DeactivateEndpoint+0x1da>
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045bc:	837b      	strh	r3, [r7, #26]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	441a      	add	r2, r3
 80045c8:	8b7b      	ldrh	r3, [r7, #26]
 80045ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045da:	b29b      	uxth	r3, r3
 80045dc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f4:	833b      	strh	r3, [r7, #24]
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	441a      	add	r2, r3
 8004600:	8b3b      	ldrh	r3, [r7, #24]
 8004602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800460a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800460e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004612:	b29b      	uxth	r3, r3
 8004614:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	b29b      	uxth	r3, r3
 8004624:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800462c:	82fb      	strh	r3, [r7, #22]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	441a      	add	r2, r3
 8004638:	8afb      	ldrh	r3, [r7, #22]
 800463a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800463e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800464a:	b29b      	uxth	r3, r3
 800464c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	b29b      	uxth	r3, r3
 800465c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004664:	82bb      	strh	r3, [r7, #20]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	441a      	add	r2, r3
 8004670:	8abb      	ldrh	r3, [r7, #20]
 8004672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800467a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800467e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004682:	b29b      	uxth	r3, r3
 8004684:	8013      	strh	r3, [r2, #0]
 8004686:	e0a3      	b.n	80047d0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004696:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01b      	beq.n	80046d8 <USB_DeactivateEndpoint+0x2d4>
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	441a      	add	r2, r3
 80046c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80046c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80046e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80046e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01b      	beq.n	8004728 <USB_DeactivateEndpoint+0x324>
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004706:	853b      	strh	r3, [r7, #40]	; 0x28
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	441a      	add	r2, r3
 8004712:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800471c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004720:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004724:	b29b      	uxth	r3, r3
 8004726:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	b29b      	uxth	r3, r3
 8004736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800473a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	441a      	add	r2, r3
 800474a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800474c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004754:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800475c:	b29b      	uxth	r3, r3
 800475e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	b29b      	uxth	r3, r3
 800476e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004776:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	441a      	add	r2, r3
 8004782:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800478c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004794:	b29b      	uxth	r3, r3
 8004796:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	441a      	add	r2, r3
 80047ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3734      	adds	r7, #52	; 0x34
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bc80      	pop	{r7}
 80047da:	4770      	bx	lr

080047dc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b0cc      	sub	sp, #304	; 0x130
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047ea:	6018      	str	r0, [r3, #0]
 80047ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047f4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	785b      	ldrb	r3, [r3, #1]
 8004802:	2b01      	cmp	r3, #1
 8004804:	f041 817d 	bne.w	8005b02 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800480c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699a      	ldr	r2, [r3, #24]
 8004814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	429a      	cmp	r2, r3
 8004822:	d908      	bls.n	8004836 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004828:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004834:	e007      	b.n	8004846 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800483a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800484a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	7b1b      	ldrb	r3, [r3, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d152      	bne.n	80048fc <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800485a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6959      	ldr	r1, [r3, #20]
 8004862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	88da      	ldrh	r2, [r3, #6]
 800486e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004872:	b29b      	uxth	r3, r3
 8004874:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004878:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800487c:	6800      	ldr	r0, [r0, #0]
 800487e:	f001 ff0e 	bl	800669e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004886:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800488a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800488e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004892:	6812      	ldr	r2, [r2, #0]
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800489a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	4619      	mov	r1, r3
 80048a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ac:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80048b4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80048b8:	6812      	ldr	r2, [r2, #0]
 80048ba:	440a      	add	r2, r1
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	011a      	lsls	r2, r3, #4
 80048cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048d0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4413      	add	r3, r2
 80048d8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80048dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	801a      	strh	r2, [r3, #0]
 80048f8:	f001 b8b5 	b.w	8005a66 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80048fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004900:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	78db      	ldrb	r3, [r3, #3]
 8004908:	2b02      	cmp	r3, #2
 800490a:	f040 84c6 	bne.w	800529a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800490e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6a1a      	ldr	r2, [r3, #32]
 800491a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800491e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	429a      	cmp	r2, r3
 8004928:	f240 8443 	bls.w	80051b2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800492c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004930:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800493a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	b29b      	uxth	r3, r3
 800494a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800494e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004952:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800495a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004964:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	441a      	add	r2, r3
 8004970:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800497c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004984:	b29b      	uxth	r3, r3
 8004986:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800498c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6a1a      	ldr	r2, [r3, #32]
 8004994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004998:	1ad2      	subs	r2, r2, r3
 800499a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800499e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80049a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 823e 	beq.w	8004e4a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80049ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049d2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80049da:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80049de:	6812      	ldr	r2, [r2, #0]
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	785b      	ldrb	r3, [r3, #1]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f040 809a 	bne.w	8004b28 <USB_EPStartXfer+0x34c>
 80049f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a00:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004a04:	6812      	ldr	r2, [r2, #0]
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	4619      	mov	r1, r3
 8004a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a22:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a26:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004a2a:	6812      	ldr	r2, [r2, #0]
 8004a2c:	440a      	add	r2, r1
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	011a      	lsls	r2, r3, #4
 8004a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a52:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d122      	bne.n	8004aa6 <USB_EPStartXfer+0x2ca>
 8004a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a64:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	801a      	strh	r2, [r3, #0]
 8004a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a9c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	801a      	strh	r2, [r3, #0]
 8004aa4:	e079      	b.n	8004b9a <USB_EPStartXfer+0x3be>
 8004aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aaa:	2b3e      	cmp	r3, #62	; 0x3e
 8004aac:	d81b      	bhi.n	8004ae6 <USB_EPStartXfer+0x30a>
 8004aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ab2:	085b      	lsrs	r3, r3, #1
 8004ab4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d004      	beq.n	8004ace <USB_EPStartXfer+0x2f2>
 8004ac4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ac8:	3301      	adds	r3, #1
 8004aca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ace:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	029b      	lsls	r3, r3, #10
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004adc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	801a      	strh	r2, [r3, #0]
 8004ae4:	e059      	b.n	8004b9a <USB_EPStartXfer+0x3be>
 8004ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004af4:	f003 031f 	and.w	r3, r3, #31
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d104      	bne.n	8004b06 <USB_EPStartXfer+0x32a>
 8004afc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b00:	3b01      	subs	r3, #1
 8004b02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004b06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	029b      	lsls	r3, r3, #10
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	801a      	strh	r2, [r3, #0]
 8004b26:	e038      	b.n	8004b9a <USB_EPStartXfer+0x3be>
 8004b28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	785b      	ldrb	r3, [r3, #1]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d130      	bne.n	8004b9a <USB_EPStartXfer+0x3be>
 8004b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	4619      	mov	r1, r3
 8004b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b4e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b52:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b56:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004b5a:	6812      	ldr	r2, [r2, #0]
 8004b5c:	440a      	add	r2, r1
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	011a      	lsls	r2, r3, #4
 8004b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b72:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	895b      	ldrh	r3, [r3, #10]
 8004ba6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6959      	ldr	r1, [r3, #20]
 8004bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004bc0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004bc4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004bc8:	6800      	ldr	r0, [r0, #0]
 8004bca:	f001 fd68 	bl	800669e <USB_WritePMA>
            ep->xfer_buff += len;
 8004bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695a      	ldr	r2, [r3, #20]
 8004bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bde:	441a      	add	r2, r3
 8004be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004be4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6a1a      	ldr	r2, [r3, #32]
 8004bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d90f      	bls.n	8004c28 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6a1a      	ldr	r2, [r3, #32]
 8004c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c18:	1ad2      	subs	r2, r2, r3
 8004c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	621a      	str	r2, [r3, #32]
 8004c26:	e00e      	b.n	8004c46 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2200      	movs	r2, #0
 8004c44:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	785b      	ldrb	r3, [r3, #1]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f040 809a 	bne.w	8004d8c <USB_EPStartXfer+0x5b0>
 8004c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c5c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c60:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c64:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004c68:	6812      	ldr	r2, [r2, #0]
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c82:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c8a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004c8e:	6812      	ldr	r2, [r2, #0]
 8004c90:	440a      	add	r2, r1
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	011a      	lsls	r2, r3, #4
 8004ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4413      	add	r3, r2
 8004cae:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cb6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d122      	bne.n	8004d0a <USB_EPStartXfer+0x52e>
 8004cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cc8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cdc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	801a      	strh	r2, [r3, #0]
 8004ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d00:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	801a      	strh	r2, [r3, #0]
 8004d08:	e083      	b.n	8004e12 <USB_EPStartXfer+0x636>
 8004d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d0e:	2b3e      	cmp	r3, #62	; 0x3e
 8004d10:	d81b      	bhi.n	8004d4a <USB_EPStartXfer+0x56e>
 8004d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d16:	085b      	lsrs	r3, r3, #1
 8004d18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d004      	beq.n	8004d32 <USB_EPStartXfer+0x556>
 8004d28:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d32:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	029b      	lsls	r3, r3, #10
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d40:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	801a      	strh	r2, [r3, #0]
 8004d48:	e063      	b.n	8004e12 <USB_EPStartXfer+0x636>
 8004d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d58:	f003 031f 	and.w	r3, r3, #31
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d104      	bne.n	8004d6a <USB_EPStartXfer+0x58e>
 8004d60:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d64:	3b01      	subs	r3, #1
 8004d66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d6a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	029b      	lsls	r3, r3, #10
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d82:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	801a      	strh	r2, [r3, #0]
 8004d8a:	e042      	b.n	8004e12 <USB_EPStartXfer+0x636>
 8004d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	785b      	ldrb	r3, [r3, #1]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d13a      	bne.n	8004e12 <USB_EPStartXfer+0x636>
 8004d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004da4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004da8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004dac:	6812      	ldr	r2, [r2, #0]
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004dca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004dce:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004dd2:	6812      	ldr	r2, [r2, #0]
 8004dd4:	440a      	add	r2, r1
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ddc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	011a      	lsls	r2, r3, #4
 8004de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dea:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4413      	add	r3, r2
 8004df2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dfa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e0a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	891b      	ldrh	r3, [r3, #8]
 8004e1e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6959      	ldr	r1, [r3, #20]
 8004e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004e38:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004e3c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004e40:	6800      	ldr	r0, [r0, #0]
 8004e42:	f001 fc2c 	bl	800669e <USB_WritePMA>
 8004e46:	f000 be0e 	b.w	8005a66 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	785b      	ldrb	r3, [r3, #1]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d16d      	bne.n	8004f36 <USB_EPStartXfer+0x75a>
 8004e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	461a      	mov	r2, r3
 8004e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e7a:	4413      	add	r3, r2
 8004e7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	011a      	lsls	r2, r3, #4
 8004e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e8e:	4413      	add	r3, r2
 8004e90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e94:	647b      	str	r3, [r7, #68]	; 0x44
 8004e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d112      	bne.n	8004ec4 <USB_EPStartXfer+0x6e8>
 8004e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eac:	801a      	strh	r2, [r3, #0]
 8004eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec0:	801a      	strh	r2, [r3, #0]
 8004ec2:	e063      	b.n	8004f8c <USB_EPStartXfer+0x7b0>
 8004ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec8:	2b3e      	cmp	r3, #62	; 0x3e
 8004eca:	d817      	bhi.n	8004efc <USB_EPStartXfer+0x720>
 8004ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ed0:	085b      	lsrs	r3, r3, #1
 8004ed2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d004      	beq.n	8004eec <USB_EPStartXfer+0x710>
 8004ee2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004eec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	029b      	lsls	r3, r3, #10
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ef8:	801a      	strh	r2, [r3, #0]
 8004efa:	e047      	b.n	8004f8c <USB_EPStartXfer+0x7b0>
 8004efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f00:	095b      	lsrs	r3, r3, #5
 8004f02:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f0a:	f003 031f 	and.w	r3, r3, #31
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d104      	bne.n	8004f1c <USB_EPStartXfer+0x740>
 8004f12:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f16:	3b01      	subs	r3, #1
 8004f18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	029b      	lsls	r3, r3, #10
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f32:	801a      	strh	r2, [r3, #0]
 8004f34:	e02a      	b.n	8004f8c <USB_EPStartXfer+0x7b0>
 8004f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	785b      	ldrb	r3, [r3, #1]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d122      	bne.n	8004f8c <USB_EPStartXfer+0x7b0>
 8004f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	653b      	str	r3, [r7, #80]	; 0x50
 8004f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	461a      	mov	r2, r3
 8004f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f66:	4413      	add	r3, r2
 8004f68:	653b      	str	r3, [r7, #80]	; 0x50
 8004f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	011a      	lsls	r2, r3, #4
 8004f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f8a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	891b      	ldrh	r3, [r3, #8]
 8004f98:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6959      	ldr	r1, [r3, #20]
 8004fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004fb2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004fb6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004fba:	6800      	ldr	r0, [r0, #0]
 8004fbc:	f001 fb6f 	bl	800669e <USB_WritePMA>
            ep->xfer_buff += len;
 8004fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695a      	ldr	r2, [r3, #20]
 8004fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fd0:	441a      	add	r2, r3
 8004fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6a1a      	ldr	r2, [r3, #32]
 8004fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d90f      	bls.n	800501a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8004ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ffe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6a1a      	ldr	r2, [r3, #32]
 8005006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800500a:	1ad2      	subs	r2, r2, r3
 800500c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	621a      	str	r2, [r3, #32]
 8005018:	e00e      	b.n	8005038 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800501a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800501e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800502a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2200      	movs	r2, #0
 8005036:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800503c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	643b      	str	r3, [r7, #64]	; 0x40
 8005044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005048:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	785b      	ldrb	r3, [r3, #1]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d16d      	bne.n	8005130 <USB_EPStartXfer+0x954>
 8005054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005058:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005064:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800506e:	b29b      	uxth	r3, r3
 8005070:	461a      	mov	r2, r3
 8005072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005074:	4413      	add	r3, r2
 8005076:	63bb      	str	r3, [r7, #56]	; 0x38
 8005078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800507c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	011a      	lsls	r2, r3, #4
 8005086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005088:	4413      	add	r3, r2
 800508a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800508e:	637b      	str	r3, [r7, #52]	; 0x34
 8005090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005094:	2b00      	cmp	r3, #0
 8005096:	d112      	bne.n	80050be <USB_EPStartXfer+0x8e2>
 8005098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	b29b      	uxth	r3, r3
 800509e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a6:	801a      	strh	r2, [r3, #0]
 80050a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ba:	801a      	strh	r2, [r3, #0]
 80050bc:	e05d      	b.n	800517a <USB_EPStartXfer+0x99e>
 80050be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050c2:	2b3e      	cmp	r3, #62	; 0x3e
 80050c4:	d817      	bhi.n	80050f6 <USB_EPStartXfer+0x91a>
 80050c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ca:	085b      	lsrs	r3, r3, #1
 80050cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d004      	beq.n	80050e6 <USB_EPStartXfer+0x90a>
 80050dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050e0:	3301      	adds	r3, #1
 80050e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	029b      	lsls	r3, r3, #10
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f2:	801a      	strh	r2, [r3, #0]
 80050f4:	e041      	b.n	800517a <USB_EPStartXfer+0x99e>
 80050f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005104:	f003 031f 	and.w	r3, r3, #31
 8005108:	2b00      	cmp	r3, #0
 800510a:	d104      	bne.n	8005116 <USB_EPStartXfer+0x93a>
 800510c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005110:	3b01      	subs	r3, #1
 8005112:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005116:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800511a:	b29b      	uxth	r3, r3
 800511c:	029b      	lsls	r3, r3, #10
 800511e:	b29b      	uxth	r3, r3
 8005120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005128:	b29a      	uxth	r2, r3
 800512a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512c:	801a      	strh	r2, [r3, #0]
 800512e:	e024      	b.n	800517a <USB_EPStartXfer+0x99e>
 8005130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005134:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	785b      	ldrb	r3, [r3, #1]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d11c      	bne.n	800517a <USB_EPStartXfer+0x99e>
 8005140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005144:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800514e:	b29b      	uxth	r3, r3
 8005150:	461a      	mov	r2, r3
 8005152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005154:	4413      	add	r3, r2
 8005156:	643b      	str	r3, [r7, #64]	; 0x40
 8005158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800515c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	011a      	lsls	r2, r3, #4
 8005166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005168:	4413      	add	r3, r2
 800516a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800516e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005170:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005174:	b29a      	uxth	r2, r3
 8005176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005178:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800517a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	895b      	ldrh	r3, [r3, #10]
 8005186:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800518a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800518e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6959      	ldr	r1, [r3, #20]
 8005196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800519a:	b29b      	uxth	r3, r3
 800519c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80051a0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80051a4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80051a8:	6800      	ldr	r0, [r0, #0]
 80051aa:	f001 fa78 	bl	800669e <USB_WritePMA>
 80051ae:	f000 bc5a 	b.w	8005a66 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80051b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80051c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80051e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80051ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	441a      	add	r2, r3
 8005206:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800520a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800520e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800521a:	b29b      	uxth	r3, r3
 800521c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800521e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005222:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	65fb      	str	r3, [r7, #92]	; 0x5c
 800522a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800522e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005238:	b29b      	uxth	r3, r3
 800523a:	461a      	mov	r2, r3
 800523c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800523e:	4413      	add	r3, r2
 8005240:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005246:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	011a      	lsls	r2, r3, #4
 8005250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005252:	4413      	add	r3, r2
 8005254:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005258:	65bb      	str	r3, [r7, #88]	; 0x58
 800525a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800525e:	b29a      	uxth	r2, r3
 8005260:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005262:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005268:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	891b      	ldrh	r3, [r3, #8]
 8005270:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005278:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6959      	ldr	r1, [r3, #20]
 8005280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005284:	b29b      	uxth	r3, r3
 8005286:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800528a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800528e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005292:	6800      	ldr	r0, [r0, #0]
 8005294:	f001 fa03 	bl	800669e <USB_WritePMA>
 8005298:	e3e5      	b.n	8005a66 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800529a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800529e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80052c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	441a      	add	r2, r3
 80052de:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80052e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80052ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80052f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6a1a      	ldr	r2, [r3, #32]
 8005302:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005306:	1ad2      	subs	r2, r2, r3
 8005308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800530c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005318:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005322:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	b29b      	uxth	r3, r3
 8005332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 81bc 	beq.w	80056b4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800533c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005340:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800534a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800534e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	785b      	ldrb	r3, [r3, #1]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d16d      	bne.n	8005436 <USB_EPStartXfer+0xc5a>
 800535a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	67bb      	str	r3, [r7, #120]	; 0x78
 8005366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005374:	b29b      	uxth	r3, r3
 8005376:	461a      	mov	r2, r3
 8005378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800537a:	4413      	add	r3, r2
 800537c:	67bb      	str	r3, [r7, #120]	; 0x78
 800537e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005382:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	011a      	lsls	r2, r3, #4
 800538c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800538e:	4413      	add	r3, r2
 8005390:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005394:	677b      	str	r3, [r7, #116]	; 0x74
 8005396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800539a:	2b00      	cmp	r3, #0
 800539c:	d112      	bne.n	80053c4 <USB_EPStartXfer+0xbe8>
 800539e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053ac:	801a      	strh	r2, [r3, #0]
 80053ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053bc:	b29a      	uxth	r2, r3
 80053be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053c0:	801a      	strh	r2, [r3, #0]
 80053c2:	e060      	b.n	8005486 <USB_EPStartXfer+0xcaa>
 80053c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053c8:	2b3e      	cmp	r3, #62	; 0x3e
 80053ca:	d817      	bhi.n	80053fc <USB_EPStartXfer+0xc20>
 80053cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053d0:	085b      	lsrs	r3, r3, #1
 80053d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80053d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d004      	beq.n	80053ec <USB_EPStartXfer+0xc10>
 80053e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80053e6:	3301      	adds	r3, #1
 80053e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80053ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	029b      	lsls	r3, r3, #10
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053f8:	801a      	strh	r2, [r3, #0]
 80053fa:	e044      	b.n	8005486 <USB_EPStartXfer+0xcaa>
 80053fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005400:	095b      	lsrs	r3, r3, #5
 8005402:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800540a:	f003 031f 	and.w	r3, r3, #31
 800540e:	2b00      	cmp	r3, #0
 8005410:	d104      	bne.n	800541c <USB_EPStartXfer+0xc40>
 8005412:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005416:	3b01      	subs	r3, #1
 8005418:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800541c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005420:	b29b      	uxth	r3, r3
 8005422:	029b      	lsls	r3, r3, #10
 8005424:	b29b      	uxth	r3, r3
 8005426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800542a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800542e:	b29a      	uxth	r2, r3
 8005430:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005432:	801a      	strh	r2, [r3, #0]
 8005434:	e027      	b.n	8005486 <USB_EPStartXfer+0xcaa>
 8005436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	785b      	ldrb	r3, [r3, #1]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d11f      	bne.n	8005486 <USB_EPStartXfer+0xcaa>
 8005446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800544a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005454:	b29b      	uxth	r3, r3
 8005456:	461a      	mov	r2, r3
 8005458:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800545c:	4413      	add	r3, r2
 800545e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005466:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	011a      	lsls	r2, r3, #4
 8005470:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005474:	4413      	add	r3, r2
 8005476:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800547a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800547c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005480:	b29a      	uxth	r2, r3
 8005482:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005484:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800548a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	895b      	ldrh	r3, [r3, #10]
 8005492:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800549a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6959      	ldr	r1, [r3, #20]
 80054a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80054ac:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80054b0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80054b4:	6800      	ldr	r0, [r0, #0]
 80054b6:	f001 f8f2 	bl	800669e <USB_WritePMA>
          ep->xfer_buff += len;
 80054ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695a      	ldr	r2, [r3, #20]
 80054c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ca:	441a      	add	r2, r3
 80054cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80054d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6a1a      	ldr	r2, [r3, #32]
 80054e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d90f      	bls.n	8005514 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80054f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6a1a      	ldr	r2, [r3, #32]
 8005500:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005504:	1ad2      	subs	r2, r2, r3
 8005506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800550a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	621a      	str	r2, [r3, #32]
 8005512:	e00e      	b.n	8005532 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005518:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005528:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2200      	movs	r2, #0
 8005530:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 8295 	beq.w	8005a66 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800553c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005540:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	785b      	ldrb	r3, [r3, #1]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d16d      	bne.n	8005628 <USB_EPStartXfer+0xe4c>
 800554c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005550:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	66bb      	str	r3, [r7, #104]	; 0x68
 8005558:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800555c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005566:	b29b      	uxth	r3, r3
 8005568:	461a      	mov	r2, r3
 800556a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800556c:	4413      	add	r3, r2
 800556e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005574:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	011a      	lsls	r2, r3, #4
 800557e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005580:	4413      	add	r3, r2
 8005582:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005586:	667b      	str	r3, [r7, #100]	; 0x64
 8005588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800558c:	2b00      	cmp	r3, #0
 800558e:	d112      	bne.n	80055b6 <USB_EPStartXfer+0xdda>
 8005590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	b29b      	uxth	r3, r3
 8005596:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800559a:	b29a      	uxth	r2, r3
 800559c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800559e:	801a      	strh	r2, [r3, #0]
 80055a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055b2:	801a      	strh	r2, [r3, #0]
 80055b4:	e063      	b.n	800567e <USB_EPStartXfer+0xea2>
 80055b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ba:	2b3e      	cmp	r3, #62	; 0x3e
 80055bc:	d817      	bhi.n	80055ee <USB_EPStartXfer+0xe12>
 80055be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055c2:	085b      	lsrs	r3, r3, #1
 80055c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80055c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d004      	beq.n	80055de <USB_EPStartXfer+0xe02>
 80055d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055d8:	3301      	adds	r3, #1
 80055da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80055de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	029b      	lsls	r3, r3, #10
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055ea:	801a      	strh	r2, [r3, #0]
 80055ec:	e047      	b.n	800567e <USB_EPStartXfer+0xea2>
 80055ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f2:	095b      	lsrs	r3, r3, #5
 80055f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80055f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055fc:	f003 031f 	and.w	r3, r3, #31
 8005600:	2b00      	cmp	r3, #0
 8005602:	d104      	bne.n	800560e <USB_EPStartXfer+0xe32>
 8005604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005608:	3b01      	subs	r3, #1
 800560a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800560e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005612:	b29b      	uxth	r3, r3
 8005614:	029b      	lsls	r3, r3, #10
 8005616:	b29b      	uxth	r3, r3
 8005618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800561c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005620:	b29a      	uxth	r2, r3
 8005622:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005624:	801a      	strh	r2, [r3, #0]
 8005626:	e02a      	b.n	800567e <USB_EPStartXfer+0xea2>
 8005628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800562c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	785b      	ldrb	r3, [r3, #1]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d122      	bne.n	800567e <USB_EPStartXfer+0xea2>
 8005638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800563c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	673b      	str	r3, [r7, #112]	; 0x70
 8005644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005648:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005652:	b29b      	uxth	r3, r3
 8005654:	461a      	mov	r2, r3
 8005656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005658:	4413      	add	r3, r2
 800565a:	673b      	str	r3, [r7, #112]	; 0x70
 800565c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005660:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	011a      	lsls	r2, r3, #4
 800566a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800566c:	4413      	add	r3, r2
 800566e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005672:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005678:	b29a      	uxth	r2, r3
 800567a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800567c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800567e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	891b      	ldrh	r3, [r3, #8]
 800568a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800568e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6959      	ldr	r1, [r3, #20]
 800569a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800569e:	b29b      	uxth	r3, r3
 80056a0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80056a4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80056a8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80056ac:	6800      	ldr	r0, [r0, #0]
 80056ae:	f000 fff6 	bl	800669e <USB_WritePMA>
 80056b2:	e1d8      	b.n	8005a66 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	785b      	ldrb	r3, [r3, #1]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d178      	bne.n	80057b6 <USB_EPStartXfer+0xfda>
 80056c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	461a      	mov	r2, r3
 80056e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056e8:	4413      	add	r3, r2
 80056ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	011a      	lsls	r2, r3, #4
 80056fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005700:	4413      	add	r3, r2
 8005702:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005706:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800570a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800570e:	2b00      	cmp	r3, #0
 8005710:	d116      	bne.n	8005740 <USB_EPStartXfer+0xf64>
 8005712:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	b29b      	uxth	r3, r3
 800571a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800571e:	b29a      	uxth	r2, r3
 8005720:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005724:	801a      	strh	r2, [r3, #0]
 8005726:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005736:	b29a      	uxth	r2, r3
 8005738:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800573c:	801a      	strh	r2, [r3, #0]
 800573e:	e06b      	b.n	8005818 <USB_EPStartXfer+0x103c>
 8005740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005744:	2b3e      	cmp	r3, #62	; 0x3e
 8005746:	d818      	bhi.n	800577a <USB_EPStartXfer+0xf9e>
 8005748:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800574c:	085b      	lsrs	r3, r3, #1
 800574e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d004      	beq.n	8005768 <USB_EPStartXfer+0xf8c>
 800575e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005762:	3301      	adds	r3, #1
 8005764:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005768:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800576c:	b29b      	uxth	r3, r3
 800576e:	029b      	lsls	r3, r3, #10
 8005770:	b29a      	uxth	r2, r3
 8005772:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005776:	801a      	strh	r2, [r3, #0]
 8005778:	e04e      	b.n	8005818 <USB_EPStartXfer+0x103c>
 800577a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005784:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005788:	f003 031f 	and.w	r3, r3, #31
 800578c:	2b00      	cmp	r3, #0
 800578e:	d104      	bne.n	800579a <USB_EPStartXfer+0xfbe>
 8005790:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005794:	3b01      	subs	r3, #1
 8005796:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800579a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800579e:	b29b      	uxth	r3, r3
 80057a0:	029b      	lsls	r3, r3, #10
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057b2:	801a      	strh	r2, [r3, #0]
 80057b4:	e030      	b.n	8005818 <USB_EPStartXfer+0x103c>
 80057b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	785b      	ldrb	r3, [r3, #1]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d128      	bne.n	8005818 <USB_EPStartXfer+0x103c>
 80057c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80057d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	461a      	mov	r2, r3
 80057e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80057ea:	4413      	add	r3, r2
 80057ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80057f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	011a      	lsls	r2, r3, #4
 80057fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005802:	4413      	add	r3, r2
 8005804:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005808:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800580c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005810:	b29a      	uxth	r2, r3
 8005812:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005816:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800581c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	891b      	ldrh	r3, [r3, #8]
 8005824:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6959      	ldr	r1, [r3, #20]
 8005834:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005838:	b29b      	uxth	r3, r3
 800583a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800583e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005842:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005846:	6800      	ldr	r0, [r0, #0]
 8005848:	f000 ff29 	bl	800669e <USB_WritePMA>
          ep->xfer_buff += len;
 800584c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005850:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	695a      	ldr	r2, [r3, #20]
 8005858:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800585c:	441a      	add	r2, r3
 800585e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005862:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800586a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6a1a      	ldr	r2, [r3, #32]
 8005876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	429a      	cmp	r2, r3
 8005884:	d90f      	bls.n	80058a6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6a1a      	ldr	r2, [r3, #32]
 8005892:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005896:	1ad2      	subs	r2, r2, r3
 8005898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	621a      	str	r2, [r3, #32]
 80058a4:	e00e      	b.n	80058c4 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80058a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80058b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2200      	movs	r2, #0
 80058c2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80058c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 80cc 	beq.w	8005a66 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	785b      	ldrb	r3, [r3, #1]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d178      	bne.n	80059de <USB_EPStartXfer+0x1202>
 80058ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005908:	b29b      	uxth	r3, r3
 800590a:	461a      	mov	r2, r3
 800590c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005910:	4413      	add	r3, r2
 8005912:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800591a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	011a      	lsls	r2, r3, #4
 8005924:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005928:	4413      	add	r3, r2
 800592a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800592e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005936:	2b00      	cmp	r3, #0
 8005938:	d116      	bne.n	8005968 <USB_EPStartXfer+0x118c>
 800593a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	b29b      	uxth	r3, r3
 8005942:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005946:	b29a      	uxth	r2, r3
 8005948:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800594c:	801a      	strh	r2, [r3, #0]
 800594e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	b29b      	uxth	r3, r3
 8005956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800595a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800595e:	b29a      	uxth	r2, r3
 8005960:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005964:	801a      	strh	r2, [r3, #0]
 8005966:	e064      	b.n	8005a32 <USB_EPStartXfer+0x1256>
 8005968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800596c:	2b3e      	cmp	r3, #62	; 0x3e
 800596e:	d818      	bhi.n	80059a2 <USB_EPStartXfer+0x11c6>
 8005970:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005974:	085b      	lsrs	r3, r3, #1
 8005976:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800597a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d004      	beq.n	8005990 <USB_EPStartXfer+0x11b4>
 8005986:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800598a:	3301      	adds	r3, #1
 800598c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005994:	b29b      	uxth	r3, r3
 8005996:	029b      	lsls	r3, r3, #10
 8005998:	b29a      	uxth	r2, r3
 800599a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800599e:	801a      	strh	r2, [r3, #0]
 80059a0:	e047      	b.n	8005a32 <USB_EPStartXfer+0x1256>
 80059a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80059ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b0:	f003 031f 	and.w	r3, r3, #31
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d104      	bne.n	80059c2 <USB_EPStartXfer+0x11e6>
 80059b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059bc:	3b01      	subs	r3, #1
 80059be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80059c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	029b      	lsls	r3, r3, #10
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059da:	801a      	strh	r2, [r3, #0]
 80059dc:	e029      	b.n	8005a32 <USB_EPStartXfer+0x1256>
 80059de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	785b      	ldrb	r3, [r3, #1]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d121      	bne.n	8005a32 <USB_EPStartXfer+0x1256>
 80059ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a04:	4413      	add	r3, r2
 8005a06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	011a      	lsls	r2, r3, #4
 8005a18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	895b      	ldrh	r3, [r3, #10]
 8005a3e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6959      	ldr	r1, [r3, #20]
 8005a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a58:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a5c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a60:	6800      	ldr	r0, [r0, #0]
 8005a62:	f000 fe1c 	bl	800669e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a88:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a94:	8013      	strh	r3, [r2, #0]
 8005a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a9a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005a9e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005aa2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005aa6:	8812      	ldrh	r2, [r2, #0]
 8005aa8:	f082 0210 	eor.w	r2, r2, #16
 8005aac:	801a      	strh	r2, [r3, #0]
 8005aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005ab6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005aba:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005abe:	8812      	ldrh	r2, [r2, #0]
 8005ac0:	f082 0220 	eor.w	r2, r2, #32
 8005ac4:	801a      	strh	r2, [r3, #0]
 8005ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	441a      	add	r2, r3
 8005ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	8013      	strh	r3, [r2, #0]
 8005afe:	f000 bc9f 	b.w	8006440 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	7b1b      	ldrb	r3, [r3, #12]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f040 80ae 	bne.w	8005c70 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	699a      	ldr	r2, [r3, #24]
 8005b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d917      	bls.n	8005b60 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	699a      	ldr	r2, [r3, #24]
 8005b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b50:	1ad2      	subs	r2, r2, r3
 8005b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	619a      	str	r2, [r3, #24]
 8005b5e:	e00e      	b.n	8005b7e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	011a      	lsls	r2, r3, #4
 8005bb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005bba:	4413      	add	r3, r2
 8005bbc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d116      	bne.n	8005bfa <USB_EPStartXfer+0x141e>
 8005bcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bde:	801a      	strh	r2, [r3, #0]
 8005be0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bf6:	801a      	strh	r2, [r3, #0]
 8005bf8:	e3e8      	b.n	80063cc <USB_EPStartXfer+0x1bf0>
 8005bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bfe:	2b3e      	cmp	r3, #62	; 0x3e
 8005c00:	d818      	bhi.n	8005c34 <USB_EPStartXfer+0x1458>
 8005c02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c06:	085b      	lsrs	r3, r3, #1
 8005c08:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d004      	beq.n	8005c22 <USB_EPStartXfer+0x1446>
 8005c18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	029b      	lsls	r3, r3, #10
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c30:	801a      	strh	r2, [r3, #0]
 8005c32:	e3cb      	b.n	80063cc <USB_EPStartXfer+0x1bf0>
 8005c34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c38:	095b      	lsrs	r3, r3, #5
 8005c3a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c42:	f003 031f 	and.w	r3, r3, #31
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d104      	bne.n	8005c54 <USB_EPStartXfer+0x1478>
 8005c4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	029b      	lsls	r3, r3, #10
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c6c:	801a      	strh	r2, [r3, #0]
 8005c6e:	e3ad      	b.n	80063cc <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	78db      	ldrb	r3, [r3, #3]
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	f040 8200 	bne.w	8006082 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	785b      	ldrb	r3, [r3, #1]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f040 8091 	bne.w	8005db6 <USB_EPStartXfer+0x15da>
 8005c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cb8:	4413      	add	r3, r2
 8005cba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	011a      	lsls	r2, r3, #4
 8005ccc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d116      	bne.n	8005d18 <USB_EPStartXfer+0x153c>
 8005cea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cfc:	801a      	strh	r2, [r3, #0]
 8005cfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d14:	801a      	strh	r2, [r3, #0]
 8005d16:	e083      	b.n	8005e20 <USB_EPStartXfer+0x1644>
 8005d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	2b3e      	cmp	r3, #62	; 0x3e
 8005d26:	d820      	bhi.n	8005d6a <USB_EPStartXfer+0x158e>
 8005d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	085b      	lsrs	r3, r3, #1
 8005d36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d004      	beq.n	8005d58 <USB_EPStartXfer+0x157c>
 8005d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d52:	3301      	adds	r3, #1
 8005d54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	029b      	lsls	r3, r3, #10
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d66:	801a      	strh	r2, [r3, #0]
 8005d68:	e05a      	b.n	8005e20 <USB_EPStartXfer+0x1644>
 8005d6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	f003 031f 	and.w	r3, r3, #31
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d104      	bne.n	8005d9a <USB_EPStartXfer+0x15be>
 8005d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d94:	3b01      	subs	r3, #1
 8005d96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	029b      	lsls	r3, r3, #10
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005db2:	801a      	strh	r2, [r3, #0]
 8005db4:	e034      	b.n	8005e20 <USB_EPStartXfer+0x1644>
 8005db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	785b      	ldrb	r3, [r3, #1]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d12c      	bne.n	8005e20 <USB_EPStartXfer+0x1644>
 8005dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	461a      	mov	r2, r3
 8005de6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dea:	4413      	add	r3, r2
 8005dec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	011a      	lsls	r2, r3, #4
 8005dfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e02:	4413      	add	r3, r2
 8005e04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e1e:	801a      	strh	r2, [r3, #0]
 8005e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	785b      	ldrb	r3, [r3, #1]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f040 8091 	bne.w	8005f62 <USB_EPStartXfer+0x1786>
 8005e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e64:	4413      	add	r3, r2
 8005e66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	011a      	lsls	r2, r3, #4
 8005e78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d116      	bne.n	8005ec4 <USB_EPStartXfer+0x16e8>
 8005e96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ea8:	801a      	strh	r2, [r3, #0]
 8005eaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ec0:	801a      	strh	r2, [r3, #0]
 8005ec2:	e07c      	b.n	8005fbe <USB_EPStartXfer+0x17e2>
 8005ec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ed2:	d820      	bhi.n	8005f16 <USB_EPStartXfer+0x173a>
 8005ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	085b      	lsrs	r3, r3, #1
 8005ee2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d004      	beq.n	8005f04 <USB_EPStartXfer+0x1728>
 8005efa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005efe:	3301      	adds	r3, #1
 8005f00:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f04:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	029b      	lsls	r3, r3, #10
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f12:	801a      	strh	r2, [r3, #0]
 8005f14:	e053      	b.n	8005fbe <USB_EPStartXfer+0x17e2>
 8005f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	095b      	lsrs	r3, r3, #5
 8005f24:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	f003 031f 	and.w	r3, r3, #31
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d104      	bne.n	8005f46 <USB_EPStartXfer+0x176a>
 8005f3c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f40:	3b01      	subs	r3, #1
 8005f42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	029b      	lsls	r3, r3, #10
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f5e:	801a      	strh	r2, [r3, #0]
 8005f60:	e02d      	b.n	8005fbe <USB_EPStartXfer+0x17e2>
 8005f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	785b      	ldrb	r3, [r3, #1]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d125      	bne.n	8005fbe <USB_EPStartXfer+0x17e2>
 8005f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	461a      	mov	r2, r3
 8005f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f88:	4413      	add	r3, r2
 8005f8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	011a      	lsls	r2, r3, #4
 8005f9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fa6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fbc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 81fe 	beq.w	80063cc <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ff0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d005      	beq.n	8006008 <USB_EPStartXfer+0x182c>
 8005ffc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10d      	bne.n	8006024 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006008:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800600c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006010:	2b00      	cmp	r3, #0
 8006012:	f040 81db 	bne.w	80063cc <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006016:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800601a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601e:	2b00      	cmp	r3, #0
 8006020:	f040 81d4 	bne.w	80063cc <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006028:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	b29b      	uxth	r3, r3
 8006042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800604e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006052:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800605c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	441a      	add	r2, r3
 8006068:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800606c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006078:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800607c:	b29b      	uxth	r3, r3
 800607e:	8013      	strh	r3, [r2, #0]
 8006080:	e1a4      	b.n	80063cc <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	78db      	ldrb	r3, [r3, #3]
 800608e:	2b01      	cmp	r3, #1
 8006090:	f040 819a 	bne.w	80063c8 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006098:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	699a      	ldr	r2, [r3, #24]
 80060a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d917      	bls.n	80060e0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80060b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80060c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	699a      	ldr	r2, [r3, #24]
 80060cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060d0:	1ad2      	subs	r2, r2, r3
 80060d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	619a      	str	r2, [r3, #24]
 80060de:	e00e      	b.n	80060fe <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80060e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80060f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2200      	movs	r2, #0
 80060fc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80060fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006102:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	785b      	ldrb	r3, [r3, #1]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d178      	bne.n	8006200 <USB_EPStartXfer+0x1a24>
 800610e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006112:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800611c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006120:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800612a:	b29b      	uxth	r3, r3
 800612c:	461a      	mov	r2, r3
 800612e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006132:	4413      	add	r3, r2
 8006134:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800613c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	011a      	lsls	r2, r3, #4
 8006146:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800614a:	4413      	add	r3, r2
 800614c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006150:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006158:	2b00      	cmp	r3, #0
 800615a:	d116      	bne.n	800618a <USB_EPStartXfer+0x19ae>
 800615c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	b29b      	uxth	r3, r3
 8006164:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006168:	b29a      	uxth	r2, r3
 800616a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800616e:	801a      	strh	r2, [r3, #0]
 8006170:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	b29b      	uxth	r3, r3
 8006178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800617c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006180:	b29a      	uxth	r2, r3
 8006182:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006186:	801a      	strh	r2, [r3, #0]
 8006188:	e06b      	b.n	8006262 <USB_EPStartXfer+0x1a86>
 800618a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800618e:	2b3e      	cmp	r3, #62	; 0x3e
 8006190:	d818      	bhi.n	80061c4 <USB_EPStartXfer+0x19e8>
 8006192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006196:	085b      	lsrs	r3, r3, #1
 8006198:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800619c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d004      	beq.n	80061b2 <USB_EPStartXfer+0x19d6>
 80061a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061ac:	3301      	adds	r3, #1
 80061ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	029b      	lsls	r3, r3, #10
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061c0:	801a      	strh	r2, [r3, #0]
 80061c2:	e04e      	b.n	8006262 <USB_EPStartXfer+0x1a86>
 80061c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c8:	095b      	lsrs	r3, r3, #5
 80061ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d2:	f003 031f 	and.w	r3, r3, #31
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d104      	bne.n	80061e4 <USB_EPStartXfer+0x1a08>
 80061da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061de:	3b01      	subs	r3, #1
 80061e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	029b      	lsls	r3, r3, #10
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061fc:	801a      	strh	r2, [r3, #0]
 80061fe:	e030      	b.n	8006262 <USB_EPStartXfer+0x1a86>
 8006200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006204:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	785b      	ldrb	r3, [r3, #1]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d128      	bne.n	8006262 <USB_EPStartXfer+0x1a86>
 8006210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006214:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800621e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006222:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800622c:	b29b      	uxth	r3, r3
 800622e:	461a      	mov	r2, r3
 8006230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006234:	4413      	add	r3, r2
 8006236:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800623a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800623e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	011a      	lsls	r2, r3, #4
 8006248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624c:	4413      	add	r3, r2
 800624e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006252:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800625a:	b29a      	uxth	r2, r3
 800625c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006260:	801a      	strh	r2, [r3, #0]
 8006262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006266:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006274:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	785b      	ldrb	r3, [r3, #1]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d178      	bne.n	8006372 <USB_EPStartXfer+0x1b96>
 8006280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006284:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800628e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006292:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800629c:	b29b      	uxth	r3, r3
 800629e:	461a      	mov	r2, r3
 80062a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062a4:	4413      	add	r3, r2
 80062a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80062aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	011a      	lsls	r2, r3, #4
 80062b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062bc:	4413      	add	r3, r2
 80062be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d116      	bne.n	80062fc <USB_EPStartXfer+0x1b20>
 80062ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062da:	b29a      	uxth	r2, r3
 80062dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062e0:	801a      	strh	r2, [r3, #0]
 80062e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062f8:	801a      	strh	r2, [r3, #0]
 80062fa:	e067      	b.n	80063cc <USB_EPStartXfer+0x1bf0>
 80062fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006300:	2b3e      	cmp	r3, #62	; 0x3e
 8006302:	d818      	bhi.n	8006336 <USB_EPStartXfer+0x1b5a>
 8006304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006308:	085b      	lsrs	r3, r3, #1
 800630a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800630e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d004      	beq.n	8006324 <USB_EPStartXfer+0x1b48>
 800631a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800631e:	3301      	adds	r3, #1
 8006320:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006324:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006328:	b29b      	uxth	r3, r3
 800632a:	029b      	lsls	r3, r3, #10
 800632c:	b29a      	uxth	r2, r3
 800632e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006332:	801a      	strh	r2, [r3, #0]
 8006334:	e04a      	b.n	80063cc <USB_EPStartXfer+0x1bf0>
 8006336:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800633a:	095b      	lsrs	r3, r3, #5
 800633c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006344:	f003 031f 	and.w	r3, r3, #31
 8006348:	2b00      	cmp	r3, #0
 800634a:	d104      	bne.n	8006356 <USB_EPStartXfer+0x1b7a>
 800634c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006350:	3b01      	subs	r3, #1
 8006352:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006356:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800635a:	b29b      	uxth	r3, r3
 800635c:	029b      	lsls	r3, r3, #10
 800635e:	b29b      	uxth	r3, r3
 8006360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006368:	b29a      	uxth	r2, r3
 800636a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800636e:	801a      	strh	r2, [r3, #0]
 8006370:	e02c      	b.n	80063cc <USB_EPStartXfer+0x1bf0>
 8006372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006376:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	785b      	ldrb	r3, [r3, #1]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d124      	bne.n	80063cc <USB_EPStartXfer+0x1bf0>
 8006382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006386:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006390:	b29b      	uxth	r3, r3
 8006392:	461a      	mov	r2, r3
 8006394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006398:	4413      	add	r3, r2
 800639a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800639e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	011a      	lsls	r2, r3, #4
 80063ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063b0:	4413      	add	r3, r2
 80063b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063be:	b29a      	uxth	r2, r3
 80063c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c4:	801a      	strh	r2, [r3, #0]
 80063c6:	e001      	b.n	80063cc <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e03a      	b.n	8006442 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80063f6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80063fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063fe:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006402:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006406:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800640a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800640e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006412:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800641c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	441a      	add	r2, r3
 8006428:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800642c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006430:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800643c:	b29b      	uxth	r3, r3
 800643e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	785b      	ldrb	r3, [r3, #1]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d020      	beq.n	80064a0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	881b      	ldrh	r3, [r3, #0]
 800646a:	b29b      	uxth	r3, r3
 800646c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006474:	81bb      	strh	r3, [r7, #12]
 8006476:	89bb      	ldrh	r3, [r7, #12]
 8006478:	f083 0310 	eor.w	r3, r3, #16
 800647c:	81bb      	strh	r3, [r7, #12]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	441a      	add	r2, r3
 8006488:	89bb      	ldrh	r3, [r7, #12]
 800648a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800648e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800649a:	b29b      	uxth	r3, r3
 800649c:	8013      	strh	r3, [r2, #0]
 800649e:	e01f      	b.n	80064e0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b6:	81fb      	strh	r3, [r7, #14]
 80064b8:	89fb      	ldrh	r3, [r7, #14]
 80064ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064be:	81fb      	strh	r3, [r7, #14]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	441a      	add	r2, r3
 80064ca:	89fb      	ldrh	r3, [r7, #14]
 80064cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064dc:	b29b      	uxth	r3, r3
 80064de:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bc80      	pop	{r7}
 80064ea:	4770      	bx	lr

080064ec <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	7b1b      	ldrb	r3, [r3, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f040 809d 	bne.w	800663a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	785b      	ldrb	r3, [r3, #1]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d04c      	beq.n	80065a2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	823b      	strh	r3, [r7, #16]
 8006516:	8a3b      	ldrh	r3, [r7, #16]
 8006518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651c:	2b00      	cmp	r3, #0
 800651e:	d01b      	beq.n	8006558 <USB_EPClearStall+0x6c>
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	b29b      	uxth	r3, r3
 800652e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006536:	81fb      	strh	r3, [r7, #14]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	441a      	add	r2, r3
 8006542:	89fb      	ldrh	r3, [r7, #14]
 8006544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800654c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006550:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006554:	b29b      	uxth	r3, r3
 8006556:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	78db      	ldrb	r3, [r3, #3]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d06c      	beq.n	800663a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	b29b      	uxth	r3, r3
 800656e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006576:	81bb      	strh	r3, [r7, #12]
 8006578:	89bb      	ldrh	r3, [r7, #12]
 800657a:	f083 0320 	eor.w	r3, r3, #32
 800657e:	81bb      	strh	r3, [r7, #12]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	441a      	add	r2, r3
 800658a:	89bb      	ldrh	r3, [r7, #12]
 800658c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800659c:	b29b      	uxth	r3, r3
 800659e:	8013      	strh	r3, [r2, #0]
 80065a0:	e04b      	b.n	800663a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	82fb      	strh	r3, [r7, #22]
 80065b0:	8afb      	ldrh	r3, [r7, #22]
 80065b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d01b      	beq.n	80065f2 <USB_EPClearStall+0x106>
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d0:	82bb      	strh	r3, [r7, #20]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	441a      	add	r2, r3
 80065dc:	8abb      	ldrh	r3, [r7, #20]
 80065de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	b29b      	uxth	r3, r3
 8006600:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006608:	827b      	strh	r3, [r7, #18]
 800660a:	8a7b      	ldrh	r3, [r7, #18]
 800660c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006610:	827b      	strh	r3, [r7, #18]
 8006612:	8a7b      	ldrh	r3, [r7, #18]
 8006614:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006618:	827b      	strh	r3, [r7, #18]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	441a      	add	r2, r3
 8006624:	8a7b      	ldrh	r3, [r7, #18]
 8006626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800662a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800662e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006636:	b29b      	uxth	r3, r3
 8006638:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	371c      	adds	r7, #28
 8006640:	46bd      	mov	sp, r7
 8006642:	bc80      	pop	{r7}
 8006644:	4770      	bx	lr

08006646 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	460b      	mov	r3, r1
 8006650:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006652:	78fb      	ldrb	r3, [r7, #3]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d103      	bne.n	8006660 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2280      	movs	r2, #128	; 0x80
 800665c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	bc80      	pop	{r7}
 800666a:	4770      	bx	lr

0800666c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	bc80      	pop	{r7}
 800667e:	4770      	bx	lr

08006680 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800668e:	b29b      	uxth	r3, r3
 8006690:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006692:	68fb      	ldr	r3, [r7, #12]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	bc80      	pop	{r7}
 800669c:	4770      	bx	lr

0800669e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800669e:	b480      	push	{r7}
 80066a0:	b08d      	sub	sp, #52	; 0x34
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	60f8      	str	r0, [r7, #12]
 80066a6:	60b9      	str	r1, [r7, #8]
 80066a8:	4611      	mov	r1, r2
 80066aa:	461a      	mov	r2, r3
 80066ac:	460b      	mov	r3, r1
 80066ae:	80fb      	strh	r3, [r7, #6]
 80066b0:	4613      	mov	r3, r2
 80066b2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80066b4:	88bb      	ldrh	r3, [r7, #4]
 80066b6:	3301      	adds	r3, #1
 80066b8:	085b      	lsrs	r3, r3, #1
 80066ba:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80066c4:	88fb      	ldrh	r3, [r7, #6]
 80066c6:	005a      	lsls	r2, r3, #1
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066d0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066d6:	e01e      	b.n	8006716 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	3301      	adds	r3, #1
 80066e2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	021b      	lsls	r3, r3, #8
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	461a      	mov	r2, r3
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80066fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006700:	3302      	adds	r3, #2
 8006702:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006706:	3302      	adds	r3, #2
 8006708:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	3301      	adds	r3, #1
 800670e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006712:	3b01      	subs	r3, #1
 8006714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1dd      	bne.n	80066d8 <USB_WritePMA+0x3a>
  }
}
 800671c:	bf00      	nop
 800671e:	bf00      	nop
 8006720:	3734      	adds	r7, #52	; 0x34
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr

08006728 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006728:	b480      	push	{r7}
 800672a:	b08b      	sub	sp, #44	; 0x2c
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	4611      	mov	r1, r2
 8006734:	461a      	mov	r2, r3
 8006736:	460b      	mov	r3, r1
 8006738:	80fb      	strh	r3, [r7, #6]
 800673a:	4613      	mov	r3, r2
 800673c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800673e:	88bb      	ldrh	r3, [r7, #4]
 8006740:	085b      	lsrs	r3, r3, #1
 8006742:	b29b      	uxth	r3, r3
 8006744:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800674e:	88fb      	ldrh	r3, [r7, #6]
 8006750:	005a      	lsls	r2, r3, #1
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800675a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
 8006760:	e01b      	b.n	800679a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	b29b      	uxth	r3, r3
 8006768:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	3302      	adds	r3, #2
 800676e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	b2da      	uxtb	r2, r3
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	3301      	adds	r3, #1
 800677c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	0a1b      	lsrs	r3, r3, #8
 8006782:	b2da      	uxtb	r2, r3
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	3301      	adds	r3, #1
 800678c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800678e:	6a3b      	ldr	r3, [r7, #32]
 8006790:	3302      	adds	r3, #2
 8006792:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	3b01      	subs	r3, #1
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1e0      	bne.n	8006762 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80067a0:	88bb      	ldrh	r3, [r7, #4]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d007      	beq.n	80067bc <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	701a      	strb	r2, [r3, #0]
  }
}
 80067bc:	bf00      	nop
 80067be:	372c      	adds	r7, #44	; 0x2c
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bc80      	pop	{r7}
 80067c4:	4770      	bx	lr

080067c6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b084      	sub	sp, #16
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	460b      	mov	r3, r1
 80067d0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	7c1b      	ldrb	r3, [r3, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d115      	bne.n	800680a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80067de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067e2:	2202      	movs	r2, #2
 80067e4:	2181      	movs	r1, #129	; 0x81
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f002 f817 	bl	800881a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80067f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067f6:	2202      	movs	r2, #2
 80067f8:	2101      	movs	r1, #1
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f002 f80d 	bl	800881a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8006808:	e012      	b.n	8006830 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800680a:	2340      	movs	r3, #64	; 0x40
 800680c:	2202      	movs	r2, #2
 800680e:	2181      	movs	r1, #129	; 0x81
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f002 f802 	bl	800881a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800681c:	2340      	movs	r3, #64	; 0x40
 800681e:	2202      	movs	r2, #2
 8006820:	2101      	movs	r1, #1
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f001 fff9 	bl	800881a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006830:	2308      	movs	r3, #8
 8006832:	2203      	movs	r2, #3
 8006834:	2182      	movs	r1, #130	; 0x82
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f001 ffef 	bl	800881a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006842:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006846:	f002 f90f 	bl	8008a68 <USBD_static_malloc>
 800684a:	4602      	mov	r2, r0
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006858:	2b00      	cmp	r3, #0
 800685a:	d102      	bne.n	8006862 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800685c:	2301      	movs	r3, #1
 800685e:	73fb      	strb	r3, [r7, #15]
 8006860:	e026      	b.n	80068b0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006868:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2200      	movs	r2, #0
 8006878:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2200      	movs	r2, #0
 8006880:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	7c1b      	ldrb	r3, [r3, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d109      	bne.n	80068a0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006896:	2101      	movs	r1, #1
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f002 f8af 	bl	80089fc <USBD_LL_PrepareReceive>
 800689e:	e007      	b.n	80068b0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068a6:	2340      	movs	r3, #64	; 0x40
 80068a8:	2101      	movs	r1, #1
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f002 f8a6 	bl	80089fc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80068b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b084      	sub	sp, #16
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	460b      	mov	r3, r1
 80068c4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80068ca:	2181      	movs	r1, #129	; 0x81
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 ffca 	bl	8008866 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80068d8:	2101      	movs	r1, #1
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f001 ffc3 	bl	8008866 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80068e8:	2182      	movs	r1, #130	; 0x82
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 ffbb 	bl	8008866 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00e      	beq.n	800691e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006910:	4618      	mov	r0, r3
 8006912:	f002 f8b5 	bl	8008a80 <USBD_static_free>
    pdev->pClassData = NULL;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800691e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006938:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800693a:	2300      	movs	r3, #0
 800693c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006942:	2300      	movs	r3, #0
 8006944:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800694e:	2b00      	cmp	r3, #0
 8006950:	d039      	beq.n	80069c6 <USBD_CDC_Setup+0x9e>
 8006952:	2b20      	cmp	r3, #32
 8006954:	d17f      	bne.n	8006a56 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	88db      	ldrh	r3, [r3, #6]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d029      	beq.n	80069b2 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	b25b      	sxtb	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	da11      	bge.n	800698c <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006974:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	88d2      	ldrh	r2, [r2, #6]
 800697a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800697c:	6939      	ldr	r1, [r7, #16]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	88db      	ldrh	r3, [r3, #6]
 8006982:	461a      	mov	r2, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 f994 	bl	8007cb2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800698a:	e06b      	b.n	8006a64 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	785a      	ldrb	r2, [r3, #1]
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	88db      	ldrh	r3, [r3, #6]
 800699a:	b2da      	uxtb	r2, r3
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80069a2:	6939      	ldr	r1, [r7, #16]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	88db      	ldrh	r3, [r3, #6]
 80069a8:	461a      	mov	r2, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f001 f9af 	bl	8007d0e <USBD_CtlPrepareRx>
    break;
 80069b0:	e058      	b.n	8006a64 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	7850      	ldrb	r0, [r2, #1]
 80069be:	2200      	movs	r2, #0
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	4798      	blx	r3
    break;
 80069c4:	e04e      	b.n	8006a64 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	785b      	ldrb	r3, [r3, #1]
 80069ca:	2b0b      	cmp	r3, #11
 80069cc:	d02e      	beq.n	8006a2c <USBD_CDC_Setup+0x104>
 80069ce:	2b0b      	cmp	r3, #11
 80069d0:	dc38      	bgt.n	8006a44 <USBD_CDC_Setup+0x11c>
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d002      	beq.n	80069dc <USBD_CDC_Setup+0xb4>
 80069d6:	2b0a      	cmp	r3, #10
 80069d8:	d014      	beq.n	8006a04 <USBD_CDC_Setup+0xdc>
 80069da:	e033      	b.n	8006a44 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	d107      	bne.n	80069f6 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80069e6:	f107 030c 	add.w	r3, r7, #12
 80069ea:	2202      	movs	r2, #2
 80069ec:	4619      	mov	r1, r3
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f001 f95f 	bl	8007cb2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80069f4:	e02e      	b.n	8006a54 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f001 f8f0 	bl	8007bde <USBD_CtlError>
			  ret = USBD_FAIL;
 80069fe:	2302      	movs	r3, #2
 8006a00:	75fb      	strb	r3, [r7, #23]
      break;
 8006a02:	e027      	b.n	8006a54 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	d107      	bne.n	8006a1e <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006a0e:	f107 030f 	add.w	r3, r7, #15
 8006a12:	2201      	movs	r2, #1
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f001 f94b 	bl	8007cb2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006a1c:	e01a      	b.n	8006a54 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f001 f8dc 	bl	8007bde <USBD_CtlError>
			  ret = USBD_FAIL;
 8006a26:	2302      	movs	r3, #2
 8006a28:	75fb      	strb	r3, [r7, #23]
      break;
 8006a2a:	e013      	b.n	8006a54 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d00d      	beq.n	8006a52 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f001 f8d0 	bl	8007bde <USBD_CtlError>
			  ret = USBD_FAIL;
 8006a3e:	2302      	movs	r3, #2
 8006a40:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006a42:	e006      	b.n	8006a52 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 f8c9 	bl	8007bde <USBD_CtlError>
      ret = USBD_FAIL;
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a50:	e000      	b.n	8006a54 <USBD_CDC_Setup+0x12c>
      break;
 8006a52:	bf00      	nop
    }
    break;
 8006a54:	e006      	b.n	8006a64 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f001 f8c0 	bl	8007bde <USBD_CtlError>
    ret = USBD_FAIL;
 8006a5e:	2302      	movs	r3, #2
 8006a60:	75fb      	strb	r3, [r7, #23]
    break;
 8006a62:	bf00      	nop
  }

  return ret;
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b084      	sub	sp, #16
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
 8006a76:	460b      	mov	r3, r1
 8006a78:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a80:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006a88:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d03a      	beq.n	8006b0a <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006a94:	78fa      	ldrb	r2, [r7, #3]
 8006a96:	6879      	ldr	r1, [r7, #4]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	440b      	add	r3, r1
 8006aa2:	331c      	adds	r3, #28
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d029      	beq.n	8006afe <USBD_CDC_DataIn+0x90>
 8006aaa:	78fa      	ldrb	r2, [r7, #3]
 8006aac:	6879      	ldr	r1, [r7, #4]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	440b      	add	r3, r1
 8006ab8:	331c      	adds	r3, #28
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	78f9      	ldrb	r1, [r7, #3]
 8006abe:	68b8      	ldr	r0, [r7, #8]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	440b      	add	r3, r1
 8006ac6:	00db      	lsls	r3, r3, #3
 8006ac8:	4403      	add	r3, r0
 8006aca:	3338      	adds	r3, #56	; 0x38
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ad2:	fb01 f303 	mul.w	r3, r1, r3
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d110      	bne.n	8006afe <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006adc:	78fa      	ldrb	r2, [r7, #3]
 8006ade:	6879      	ldr	r1, [r7, #4]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	440b      	add	r3, r1
 8006aea:	331c      	adds	r3, #28
 8006aec:	2200      	movs	r2, #0
 8006aee:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006af0:	78f9      	ldrb	r1, [r7, #3]
 8006af2:	2300      	movs	r3, #0
 8006af4:	2200      	movs	r2, #0
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f001 ff5d 	bl	80089b6 <USBD_LL_Transmit>
 8006afc:	e003      	b.n	8006b06 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006b06:	2300      	movs	r3, #0
 8006b08:	e000      	b.n	8006b0c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006b0a:	2302      	movs	r3, #2
  }
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006b28:	78fb      	ldrb	r3, [r7, #3]
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f001 ff88 	bl	8008a42 <USBD_LL_GetRxDataSize>
 8006b32:	4602      	mov	r2, r0
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00d      	beq.n	8006b60 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b58:	4611      	mov	r1, r2
 8006b5a:	4798      	blx	r3

    return USBD_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	e000      	b.n	8006b62 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006b60:	2302      	movs	r3, #2
  }
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b78:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d015      	beq.n	8006bb0 <USBD_CDC_EP0_RxReady+0x46>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b8a:	2bff      	cmp	r3, #255	; 0xff
 8006b8c:	d010      	beq.n	8006bb0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006b9c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ba4:	b292      	uxth	r2, r2
 8006ba6:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	22ff      	movs	r2, #255	; 0xff
 8006bac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
	...

08006bbc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2243      	movs	r2, #67	; 0x43
 8006bc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006bca:	4b03      	ldr	r3, [pc, #12]	; (8006bd8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bc80      	pop	{r7}
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	20000094 	.word	0x20000094

08006bdc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2243      	movs	r2, #67	; 0x43
 8006be8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006bea:	4b03      	ldr	r3, [pc, #12]	; (8006bf8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bc80      	pop	{r7}
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	20000050 	.word	0x20000050

08006bfc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2243      	movs	r2, #67	; 0x43
 8006c08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006c0a:	4b03      	ldr	r3, [pc, #12]	; (8006c18 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bc80      	pop	{r7}
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	200000d8 	.word	0x200000d8

08006c1c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	220a      	movs	r2, #10
 8006c28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006c2a:	4b03      	ldr	r3, [pc, #12]	; (8006c38 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bc80      	pop	{r7}
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	2000000c 	.word	0x2000000c

08006c3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006c46:	2302      	movs	r3, #2
 8006c48:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d005      	beq.n	8006c5c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bc80      	pop	{r7}
 8006c66:	4770      	bx	lr

08006c68 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	4613      	mov	r3, r2
 8006c74:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c7c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006c86:	88fa      	ldrh	r2, [r7, #6]
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	371c      	adds	r7, #28
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bc80      	pop	{r7}
 8006c98:	4770      	bx	lr

08006c9a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b085      	sub	sp, #20
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006caa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bc80      	pop	{r7}
 8006cbe:	4770      	bx	lr

08006cc0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006cce:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d01c      	beq.n	8006d14 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d115      	bne.n	8006d10 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	2181      	movs	r1, #129	; 0x81
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f001 fe55 	bl	80089b6 <USBD_LL_Transmit>

      return USBD_OK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	e002      	b.n	8006d16 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e000      	b.n	8006d16 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006d14:	2302      	movs	r3, #2
  }
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d2c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d017      	beq.n	8006d68 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	7c1b      	ldrb	r3, [r3, #16]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d109      	bne.n	8006d54 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f001 fe55 	bl	80089fc <USBD_LL_PrepareReceive>
 8006d52:	e007      	b.n	8006d64 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d5a:	2340      	movs	r3, #64	; 0x40
 8006d5c:	2101      	movs	r1, #1
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f001 fe4c 	bl	80089fc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	e000      	b.n	8006d6a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006d68:	2302      	movs	r3, #2
  }
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b084      	sub	sp, #16
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	60f8      	str	r0, [r7, #12]
 8006d7a:	60b9      	str	r1, [r7, #8]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006d86:	2302      	movs	r3, #2
 8006d88:	e01a      	b.n	8006dc0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d003      	beq.n	8006d9c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	79fa      	ldrb	r2, [r7, #7]
 8006db6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f001 fcb9 	bl	8008730 <USBD_LL_Init>

  return USBD_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d006      	beq.n	8006dea <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	73fb      	strb	r3, [r7, #15]
 8006de8:	e001      	b.n	8006dee <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006dea:	2302      	movs	r3, #2
 8006dec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bc80      	pop	{r7}
 8006df8:	4770      	bx	lr

08006dfa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b082      	sub	sp, #8
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f001 fcee 	bl	80087e4 <USBD_LL_Start>

  return USBD_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b083      	sub	sp, #12
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bc80      	pop	{r7}
 8006e24:	4770      	bx	lr

08006e26 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	460b      	mov	r3, r1
 8006e30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006e32:	2302      	movs	r3, #2
 8006e34:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00c      	beq.n	8006e5a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	78fa      	ldrb	r2, [r7, #3]
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	4798      	blx	r3
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006e56:	2300      	movs	r3, #0
 8006e58:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	78fa      	ldrb	r2, [r7, #3]
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	4798      	blx	r3
  return USBD_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b082      	sub	sp, #8
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f000 fe62 	bl	8007b66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006ebe:	f003 031f 	and.w	r3, r3, #31
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d016      	beq.n	8006ef4 <USBD_LL_SetupStage+0x6a>
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d81c      	bhi.n	8006f04 <USBD_LL_SetupStage+0x7a>
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d002      	beq.n	8006ed4 <USBD_LL_SetupStage+0x4a>
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d008      	beq.n	8006ee4 <USBD_LL_SetupStage+0x5a>
 8006ed2:	e017      	b.n	8006f04 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006eda:	4619      	mov	r1, r3
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f9c5 	bl	800726c <USBD_StdDevReq>
    break;
 8006ee2:	e01a      	b.n	8006f1a <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fa27 	bl	8007340 <USBD_StdItfReq>
    break;
 8006ef2:	e012      	b.n	8006f1a <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fa67 	bl	80073d0 <USBD_StdEPReq>
    break;
 8006f02:	e00a      	b.n	8006f1a <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006f0a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	4619      	mov	r1, r3
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f001 fcc6 	bl	80088a4 <USBD_LL_StallEP>
    break;
 8006f18:	bf00      	nop
  }

  return USBD_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3708      	adds	r7, #8
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	607a      	str	r2, [r7, #4]
 8006f30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006f32:	7afb      	ldrb	r3, [r7, #11]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d14b      	bne.n	8006fd0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006f3e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d134      	bne.n	8006fb4 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	68da      	ldr	r2, [r3, #12]
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d919      	bls.n	8006f8a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	1ad2      	subs	r2, r2, r3
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	68da      	ldr	r2, [r3, #12]
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d203      	bcs.n	8006f78 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	e002      	b.n	8006f7e <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	461a      	mov	r2, r3
 8006f80:	6879      	ldr	r1, [r7, #4]
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f000 fee1 	bl	8007d4a <USBD_CtlContinueRx>
 8006f88:	e038      	b.n	8006ffc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00a      	beq.n	8006fac <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d105      	bne.n	8006fac <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f000 fede 	bl	8007d6e <USBD_CtlSendStatus>
 8006fb2:	e023      	b.n	8006ffc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006fba:	2b05      	cmp	r3, #5
 8006fbc:	d11e      	bne.n	8006ffc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f001 fc6b 	bl	80088a4 <USBD_LL_StallEP>
 8006fce:	e015      	b.n	8006ffc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00d      	beq.n	8006ff8 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d108      	bne.n	8006ff8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	7afa      	ldrb	r2, [r7, #11]
 8006ff0:	4611      	mov	r1, r2
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	4798      	blx	r3
 8006ff6:	e001      	b.n	8006ffc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	e000      	b.n	8006ffe <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b086      	sub	sp, #24
 800700a:	af00      	add	r7, sp, #0
 800700c:	60f8      	str	r0, [r7, #12]
 800700e:	460b      	mov	r3, r1
 8007010:	607a      	str	r2, [r7, #4]
 8007012:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007014:	7afb      	ldrb	r3, [r7, #11]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d17f      	bne.n	800711a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	3314      	adds	r3, #20
 800701e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007026:	2b02      	cmp	r3, #2
 8007028:	d15c      	bne.n	80070e4 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	68da      	ldr	r2, [r3, #12]
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	429a      	cmp	r2, r3
 8007034:	d915      	bls.n	8007062 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	68da      	ldr	r2, [r3, #12]
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	1ad2      	subs	r2, r2, r3
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	b29b      	uxth	r3, r3
 800704a:	461a      	mov	r2, r3
 800704c:	6879      	ldr	r1, [r7, #4]
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f000 fe4b 	bl	8007cea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007054:	2300      	movs	r3, #0
 8007056:	2200      	movs	r2, #0
 8007058:	2100      	movs	r1, #0
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f001 fcce 	bl	80089fc <USBD_LL_PrepareReceive>
 8007060:	e04e      	b.n	8007100 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	6912      	ldr	r2, [r2, #16]
 800706a:	fbb3 f1f2 	udiv	r1, r3, r2
 800706e:	fb01 f202 	mul.w	r2, r1, r2
 8007072:	1a9b      	subs	r3, r3, r2
 8007074:	2b00      	cmp	r3, #0
 8007076:	d11c      	bne.n	80070b2 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007080:	429a      	cmp	r2, r3
 8007082:	d316      	bcc.n	80070b2 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	689a      	ldr	r2, [r3, #8]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800708e:	429a      	cmp	r2, r3
 8007090:	d20f      	bcs.n	80070b2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007092:	2200      	movs	r2, #0
 8007094:	2100      	movs	r1, #0
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 fe27 	bl	8007cea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80070a4:	2300      	movs	r3, #0
 80070a6:	2200      	movs	r2, #0
 80070a8:	2100      	movs	r1, #0
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f001 fca6 	bl	80089fc <USBD_LL_PrepareReceive>
 80070b0:	e026      	b.n	8007100 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00a      	beq.n	80070d4 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80070c4:	2b03      	cmp	r3, #3
 80070c6:	d105      	bne.n	80070d4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80070d4:	2180      	movs	r1, #128	; 0x80
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f001 fbe4 	bl	80088a4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f000 fe59 	bl	8007d94 <USBD_CtlReceiveStatus>
 80070e2:	e00d      	b.n	8007100 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80070ea:	2b04      	cmp	r3, #4
 80070ec:	d004      	beq.n	80070f8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d103      	bne.n	8007100 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80070f8:	2180      	movs	r1, #128	; 0x80
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f001 fbd2 	bl	80088a4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8007106:	2b01      	cmp	r3, #1
 8007108:	d11d      	bne.n	8007146 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f7ff fe81 	bl	8006e12 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8007118:	e015      	b.n	8007146 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00d      	beq.n	8007142 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800712c:	2b03      	cmp	r3, #3
 800712e:	d108      	bne.n	8007142 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	7afa      	ldrb	r2, [r7, #11]
 800713a:	4611      	mov	r1, r2
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	4798      	blx	r3
 8007140:	e001      	b.n	8007146 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007142:	2302      	movs	r3, #2
 8007144:	e000      	b.n	8007148 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3718      	adds	r7, #24
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007158:	2340      	movs	r3, #64	; 0x40
 800715a:	2200      	movs	r2, #0
 800715c:	2100      	movs	r1, #0
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f001 fb5b 	bl	800881a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2240      	movs	r2, #64	; 0x40
 8007170:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007174:	2340      	movs	r3, #64	; 0x40
 8007176:	2200      	movs	r2, #0
 8007178:	2180      	movs	r1, #128	; 0x80
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f001 fb4d 	bl	800881a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2240      	movs	r2, #64	; 0x40
 800718a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d009      	beq.n	80071c8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	6852      	ldr	r2, [r2, #4]
 80071c0:	b2d2      	uxtb	r2, r2
 80071c2:	4611      	mov	r1, r2
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	4798      	blx	r3
  }

  return USBD_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	460b      	mov	r3, r1
 80071dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	78fa      	ldrb	r2, [r7, #3]
 80071e2:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bc80      	pop	{r7}
 80071ee:	4770      	bx	lr

080071f0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2204      	movs	r2, #4
 8007208:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	370c      	adds	r7, #12
 8007212:	46bd      	mov	sp, r7
 8007214:	bc80      	pop	{r7}
 8007216:	4770      	bx	lr

08007218 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	bc80      	pop	{r7}
 8007236:	4770      	bx	lr

08007238 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007246:	2b03      	cmp	r3, #3
 8007248:	d10b      	bne.n	8007262 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d005      	beq.n	8007262 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007276:	2300      	movs	r3, #0
 8007278:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007282:	2b40      	cmp	r3, #64	; 0x40
 8007284:	d005      	beq.n	8007292 <USBD_StdDevReq+0x26>
 8007286:	2b40      	cmp	r3, #64	; 0x40
 8007288:	d84f      	bhi.n	800732a <USBD_StdDevReq+0xbe>
 800728a:	2b00      	cmp	r3, #0
 800728c:	d009      	beq.n	80072a2 <USBD_StdDevReq+0x36>
 800728e:	2b20      	cmp	r3, #32
 8007290:	d14b      	bne.n	800732a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	6839      	ldr	r1, [r7, #0]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	4798      	blx	r3
    break;
 80072a0:	e048      	b.n	8007334 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	785b      	ldrb	r3, [r3, #1]
 80072a6:	2b09      	cmp	r3, #9
 80072a8:	d839      	bhi.n	800731e <USBD_StdDevReq+0xb2>
 80072aa:	a201      	add	r2, pc, #4	; (adr r2, 80072b0 <USBD_StdDevReq+0x44>)
 80072ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b0:	08007301 	.word	0x08007301
 80072b4:	08007315 	.word	0x08007315
 80072b8:	0800731f 	.word	0x0800731f
 80072bc:	0800730b 	.word	0x0800730b
 80072c0:	0800731f 	.word	0x0800731f
 80072c4:	080072e3 	.word	0x080072e3
 80072c8:	080072d9 	.word	0x080072d9
 80072cc:	0800731f 	.word	0x0800731f
 80072d0:	080072f7 	.word	0x080072f7
 80072d4:	080072ed 	.word	0x080072ed
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f9da 	bl	8007694 <USBD_GetDescriptor>
      break;
 80072e0:	e022      	b.n	8007328 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 facf 	bl	8007888 <USBD_SetAddress>
      break;
 80072ea:	e01d      	b.n	8007328 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fb0e 	bl	8007910 <USBD_SetConfig>
      break;
 80072f4:	e018      	b.n	8007328 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80072f6:	6839      	ldr	r1, [r7, #0]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fb97 	bl	8007a2c <USBD_GetConfig>
      break;
 80072fe:	e013      	b.n	8007328 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007300:	6839      	ldr	r1, [r7, #0]
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 fbc7 	bl	8007a96 <USBD_GetStatus>
      break;
 8007308:	e00e      	b.n	8007328 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fbf5 	bl	8007afc <USBD_SetFeature>
      break;
 8007312:	e009      	b.n	8007328 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fc04 	bl	8007b24 <USBD_ClrFeature>
      break;
 800731c:	e004      	b.n	8007328 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fc5c 	bl	8007bde <USBD_CtlError>
      break;
 8007326:	bf00      	nop
    }
    break;
 8007328:	e004      	b.n	8007334 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fc56 	bl	8007bde <USBD_CtlError>
    break;
 8007332:	bf00      	nop
  }

  return ret;
 8007334:	7bfb      	ldrb	r3, [r7, #15]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop

08007340 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007356:	2b40      	cmp	r3, #64	; 0x40
 8007358:	d005      	beq.n	8007366 <USBD_StdItfReq+0x26>
 800735a:	2b40      	cmp	r3, #64	; 0x40
 800735c:	d82e      	bhi.n	80073bc <USBD_StdItfReq+0x7c>
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <USBD_StdItfReq+0x26>
 8007362:	2b20      	cmp	r3, #32
 8007364:	d12a      	bne.n	80073bc <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800736c:	3b01      	subs	r3, #1
 800736e:	2b02      	cmp	r3, #2
 8007370:	d81d      	bhi.n	80073ae <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	889b      	ldrh	r3, [r3, #4]
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b01      	cmp	r3, #1
 800737a:	d813      	bhi.n	80073a4 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	6839      	ldr	r1, [r7, #0]
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	4798      	blx	r3
 800738a:	4603      	mov	r3, r0
 800738c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	88db      	ldrh	r3, [r3, #6]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d110      	bne.n	80073b8 <USBD_StdItfReq+0x78>
 8007396:	7bfb      	ldrb	r3, [r7, #15]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10d      	bne.n	80073b8 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fce6 	bl	8007d6e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80073a2:	e009      	b.n	80073b8 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fc19 	bl	8007bde <USBD_CtlError>
      break;
 80073ac:	e004      	b.n	80073b8 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80073ae:	6839      	ldr	r1, [r7, #0]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fc14 	bl	8007bde <USBD_CtlError>
      break;
 80073b6:	e000      	b.n	80073ba <USBD_StdItfReq+0x7a>
      break;
 80073b8:	bf00      	nop
    }
    break;
 80073ba:	e004      	b.n	80073c6 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fc0d 	bl	8007bde <USBD_CtlError>
    break;
 80073c4:	bf00      	nop
  }

  return USBD_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	889b      	ldrh	r3, [r3, #4]
 80073e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073ec:	2b40      	cmp	r3, #64	; 0x40
 80073ee:	d007      	beq.n	8007400 <USBD_StdEPReq+0x30>
 80073f0:	2b40      	cmp	r3, #64	; 0x40
 80073f2:	f200 8144 	bhi.w	800767e <USBD_StdEPReq+0x2ae>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00a      	beq.n	8007410 <USBD_StdEPReq+0x40>
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	f040 813f 	bne.w	800767e <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	6839      	ldr	r1, [r7, #0]
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	4798      	blx	r3
    break;
 800740e:	e13b      	b.n	8007688 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007418:	2b20      	cmp	r3, #32
 800741a:	d10a      	bne.n	8007432 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	4798      	blx	r3
 800742a:	4603      	mov	r3, r0
 800742c:	73fb      	strb	r3, [r7, #15]

      return ret;
 800742e:	7bfb      	ldrb	r3, [r7, #15]
 8007430:	e12b      	b.n	800768a <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	785b      	ldrb	r3, [r3, #1]
 8007436:	2b03      	cmp	r3, #3
 8007438:	d007      	beq.n	800744a <USBD_StdEPReq+0x7a>
 800743a:	2b03      	cmp	r3, #3
 800743c:	f300 8119 	bgt.w	8007672 <USBD_StdEPReq+0x2a2>
 8007440:	2b00      	cmp	r3, #0
 8007442:	d072      	beq.n	800752a <USBD_StdEPReq+0x15a>
 8007444:	2b01      	cmp	r3, #1
 8007446:	d03a      	beq.n	80074be <USBD_StdEPReq+0xee>
 8007448:	e113      	b.n	8007672 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007450:	2b02      	cmp	r3, #2
 8007452:	d002      	beq.n	800745a <USBD_StdEPReq+0x8a>
 8007454:	2b03      	cmp	r3, #3
 8007456:	d015      	beq.n	8007484 <USBD_StdEPReq+0xb4>
 8007458:	e02b      	b.n	80074b2 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800745a:	7bbb      	ldrb	r3, [r7, #14]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00c      	beq.n	800747a <USBD_StdEPReq+0xaa>
 8007460:	7bbb      	ldrb	r3, [r7, #14]
 8007462:	2b80      	cmp	r3, #128	; 0x80
 8007464:	d009      	beq.n	800747a <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007466:	7bbb      	ldrb	r3, [r7, #14]
 8007468:	4619      	mov	r1, r3
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f001 fa1a 	bl	80088a4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007470:	2180      	movs	r1, #128	; 0x80
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f001 fa16 	bl	80088a4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007478:	e020      	b.n	80074bc <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fbae 	bl	8007bde <USBD_CtlError>
        break;
 8007482:	e01b      	b.n	80074bc <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	885b      	ldrh	r3, [r3, #2]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10e      	bne.n	80074aa <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800748c:	7bbb      	ldrb	r3, [r7, #14]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00b      	beq.n	80074aa <USBD_StdEPReq+0xda>
 8007492:	7bbb      	ldrb	r3, [r7, #14]
 8007494:	2b80      	cmp	r3, #128	; 0x80
 8007496:	d008      	beq.n	80074aa <USBD_StdEPReq+0xda>
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	88db      	ldrh	r3, [r3, #6]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d104      	bne.n	80074aa <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80074a0:	7bbb      	ldrb	r3, [r7, #14]
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f001 f9fd 	bl	80088a4 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fc5f 	bl	8007d6e <USBD_CtlSendStatus>

        break;
 80074b0:	e004      	b.n	80074bc <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fb92 	bl	8007bde <USBD_CtlError>
        break;
 80074ba:	bf00      	nop
      }
      break;
 80074bc:	e0de      	b.n	800767c <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d002      	beq.n	80074ce <USBD_StdEPReq+0xfe>
 80074c8:	2b03      	cmp	r3, #3
 80074ca:	d015      	beq.n	80074f8 <USBD_StdEPReq+0x128>
 80074cc:	e026      	b.n	800751c <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074ce:	7bbb      	ldrb	r3, [r7, #14]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00c      	beq.n	80074ee <USBD_StdEPReq+0x11e>
 80074d4:	7bbb      	ldrb	r3, [r7, #14]
 80074d6:	2b80      	cmp	r3, #128	; 0x80
 80074d8:	d009      	beq.n	80074ee <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80074da:	7bbb      	ldrb	r3, [r7, #14]
 80074dc:	4619      	mov	r1, r3
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f001 f9e0 	bl	80088a4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80074e4:	2180      	movs	r1, #128	; 0x80
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f001 f9dc 	bl	80088a4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80074ec:	e01c      	b.n	8007528 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fb74 	bl	8007bde <USBD_CtlError>
        break;
 80074f6:	e017      	b.n	8007528 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	885b      	ldrh	r3, [r3, #2]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d112      	bne.n	8007526 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007500:	7bbb      	ldrb	r3, [r7, #14]
 8007502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007506:	2b00      	cmp	r3, #0
 8007508:	d004      	beq.n	8007514 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800750a:	7bbb      	ldrb	r3, [r7, #14]
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 f9e7 	bl	80088e2 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fc2a 	bl	8007d6e <USBD_CtlSendStatus>
        }
        break;
 800751a:	e004      	b.n	8007526 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fb5d 	bl	8007bde <USBD_CtlError>
        break;
 8007524:	e000      	b.n	8007528 <USBD_StdEPReq+0x158>
        break;
 8007526:	bf00      	nop
      }
      break;
 8007528:	e0a8      	b.n	800767c <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007530:	2b02      	cmp	r3, #2
 8007532:	d002      	beq.n	800753a <USBD_StdEPReq+0x16a>
 8007534:	2b03      	cmp	r3, #3
 8007536:	d031      	beq.n	800759c <USBD_StdEPReq+0x1cc>
 8007538:	e095      	b.n	8007666 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800753a:	7bbb      	ldrb	r3, [r7, #14]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d007      	beq.n	8007550 <USBD_StdEPReq+0x180>
 8007540:	7bbb      	ldrb	r3, [r7, #14]
 8007542:	2b80      	cmp	r3, #128	; 0x80
 8007544:	d004      	beq.n	8007550 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fb48 	bl	8007bde <USBD_CtlError>
          break;
 800754e:	e08f      	b.n	8007670 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007550:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007554:	2b00      	cmp	r3, #0
 8007556:	da0b      	bge.n	8007570 <USBD_StdEPReq+0x1a0>
 8007558:	7bbb      	ldrb	r3, [r7, #14]
 800755a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800755e:	4613      	mov	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4413      	add	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	3310      	adds	r3, #16
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	4413      	add	r3, r2
 800756c:	3304      	adds	r3, #4
 800756e:	e00a      	b.n	8007586 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007570:	7bbb      	ldrb	r3, [r7, #14]
 8007572:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007576:	4613      	mov	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4413      	add	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	4413      	add	r3, r2
 8007586:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2200      	movs	r2, #0
 800758c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2202      	movs	r2, #2
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fb8c 	bl	8007cb2 <USBD_CtlSendData>
          break;
 800759a:	e069      	b.n	8007670 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800759c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	da11      	bge.n	80075c8 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80075a4:	7bbb      	ldrb	r3, [r7, #14]
 80075a6:	f003 020f 	and.w	r2, r3, #15
 80075aa:	6879      	ldr	r1, [r7, #4]
 80075ac:	4613      	mov	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4413      	add	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	440b      	add	r3, r1
 80075b6:	3318      	adds	r3, #24
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d117      	bne.n	80075ee <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80075be:	6839      	ldr	r1, [r7, #0]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fb0c 	bl	8007bde <USBD_CtlError>
            break;
 80075c6:	e053      	b.n	8007670 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80075c8:	7bbb      	ldrb	r3, [r7, #14]
 80075ca:	f003 020f 	and.w	r2, r3, #15
 80075ce:	6879      	ldr	r1, [r7, #4]
 80075d0:	4613      	mov	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	440b      	add	r3, r1
 80075da:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d104      	bne.n	80075ee <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 faf9 	bl	8007bde <USBD_CtlError>
            break;
 80075ec:	e040      	b.n	8007670 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80075ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	da0b      	bge.n	800760e <USBD_StdEPReq+0x23e>
 80075f6:	7bbb      	ldrb	r3, [r7, #14]
 80075f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075fc:	4613      	mov	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	3310      	adds	r3, #16
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	4413      	add	r3, r2
 800760a:	3304      	adds	r3, #4
 800760c:	e00a      	b.n	8007624 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800760e:	7bbb      	ldrb	r3, [r7, #14]
 8007610:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007614:	4613      	mov	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	4413      	add	r3, r2
 8007624:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007626:	7bbb      	ldrb	r3, [r7, #14]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d002      	beq.n	8007632 <USBD_StdEPReq+0x262>
 800762c:	7bbb      	ldrb	r3, [r7, #14]
 800762e:	2b80      	cmp	r3, #128	; 0x80
 8007630:	d103      	bne.n	800763a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	2200      	movs	r2, #0
 8007636:	601a      	str	r2, [r3, #0]
 8007638:	e00e      	b.n	8007658 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800763a:	7bbb      	ldrb	r3, [r7, #14]
 800763c:	4619      	mov	r1, r3
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f001 f96e 	bl	8008920 <USBD_LL_IsStallEP>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	2201      	movs	r2, #1
 800764e:	601a      	str	r2, [r3, #0]
 8007650:	e002      	b.n	8007658 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	2200      	movs	r2, #0
 8007656:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2202      	movs	r2, #2
 800765c:	4619      	mov	r1, r3
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fb27 	bl	8007cb2 <USBD_CtlSendData>
          break;
 8007664:	e004      	b.n	8007670 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fab8 	bl	8007bde <USBD_CtlError>
        break;
 800766e:	bf00      	nop
      }
      break;
 8007670:	e004      	b.n	800767c <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007672:	6839      	ldr	r1, [r7, #0]
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fab2 	bl	8007bde <USBD_CtlError>
      break;
 800767a:	bf00      	nop
    }
    break;
 800767c:	e004      	b.n	8007688 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 faac 	bl	8007bde <USBD_CtlError>
    break;
 8007686:	bf00      	nop
  }

  return ret;
 8007688:	7bfb      	ldrb	r3, [r7, #15]
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
	...

08007694 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	885b      	ldrh	r3, [r3, #2]
 80076a2:	0a1b      	lsrs	r3, r3, #8
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	3b01      	subs	r3, #1
 80076a8:	2b06      	cmp	r3, #6
 80076aa:	f200 80c9 	bhi.w	8007840 <USBD_GetDescriptor+0x1ac>
 80076ae:	a201      	add	r2, pc, #4	; (adr r2, 80076b4 <USBD_GetDescriptor+0x20>)
 80076b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b4:	080076d1 	.word	0x080076d1
 80076b8:	080076e9 	.word	0x080076e9
 80076bc:	08007729 	.word	0x08007729
 80076c0:	08007841 	.word	0x08007841
 80076c4:	08007841 	.word	0x08007841
 80076c8:	080077ed 	.word	0x080077ed
 80076cc:	08007813 	.word	0x08007813
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	7c12      	ldrb	r2, [r2, #16]
 80076dc:	f107 010a 	add.w	r1, r7, #10
 80076e0:	4610      	mov	r0, r2
 80076e2:	4798      	blx	r3
 80076e4:	60f8      	str	r0, [r7, #12]
    break;
 80076e6:	e0b0      	b.n	800784a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	7c1b      	ldrb	r3, [r3, #16]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10d      	bne.n	800770c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80076f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f8:	f107 020a 	add.w	r2, r7, #10
 80076fc:	4610      	mov	r0, r2
 80076fe:	4798      	blx	r3
 8007700:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3301      	adds	r3, #1
 8007706:	2202      	movs	r2, #2
 8007708:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800770a:	e09e      	b.n	800784a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007714:	f107 020a 	add.w	r2, r7, #10
 8007718:	4610      	mov	r0, r2
 800771a:	4798      	blx	r3
 800771c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	3301      	adds	r3, #1
 8007722:	2202      	movs	r2, #2
 8007724:	701a      	strb	r2, [r3, #0]
    break;
 8007726:	e090      	b.n	800784a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	885b      	ldrh	r3, [r3, #2]
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b05      	cmp	r3, #5
 8007730:	d856      	bhi.n	80077e0 <USBD_GetDescriptor+0x14c>
 8007732:	a201      	add	r2, pc, #4	; (adr r2, 8007738 <USBD_GetDescriptor+0xa4>)
 8007734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007738:	08007751 	.word	0x08007751
 800773c:	08007769 	.word	0x08007769
 8007740:	08007781 	.word	0x08007781
 8007744:	08007799 	.word	0x08007799
 8007748:	080077b1 	.word	0x080077b1
 800774c:	080077c9 	.word	0x080077c9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	7c12      	ldrb	r2, [r2, #16]
 800775c:	f107 010a 	add.w	r1, r7, #10
 8007760:	4610      	mov	r0, r2
 8007762:	4798      	blx	r3
 8007764:	60f8      	str	r0, [r7, #12]
      break;
 8007766:	e040      	b.n	80077ea <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	7c12      	ldrb	r2, [r2, #16]
 8007774:	f107 010a 	add.w	r1, r7, #10
 8007778:	4610      	mov	r0, r2
 800777a:	4798      	blx	r3
 800777c:	60f8      	str	r0, [r7, #12]
      break;
 800777e:	e034      	b.n	80077ea <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	7c12      	ldrb	r2, [r2, #16]
 800778c:	f107 010a 	add.w	r1, r7, #10
 8007790:	4610      	mov	r0, r2
 8007792:	4798      	blx	r3
 8007794:	60f8      	str	r0, [r7, #12]
      break;
 8007796:	e028      	b.n	80077ea <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	7c12      	ldrb	r2, [r2, #16]
 80077a4:	f107 010a 	add.w	r1, r7, #10
 80077a8:	4610      	mov	r0, r2
 80077aa:	4798      	blx	r3
 80077ac:	60f8      	str	r0, [r7, #12]
      break;
 80077ae:	e01c      	b.n	80077ea <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80077b6:	695b      	ldr	r3, [r3, #20]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	7c12      	ldrb	r2, [r2, #16]
 80077bc:	f107 010a 	add.w	r1, r7, #10
 80077c0:	4610      	mov	r0, r2
 80077c2:	4798      	blx	r3
 80077c4:	60f8      	str	r0, [r7, #12]
      break;
 80077c6:	e010      	b.n	80077ea <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	7c12      	ldrb	r2, [r2, #16]
 80077d4:	f107 010a 	add.w	r1, r7, #10
 80077d8:	4610      	mov	r0, r2
 80077da:	4798      	blx	r3
 80077dc:	60f8      	str	r0, [r7, #12]
      break;
 80077de:	e004      	b.n	80077ea <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f9fb 	bl	8007bde <USBD_CtlError>
      return;
 80077e8:	e04b      	b.n	8007882 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80077ea:	e02e      	b.n	800784a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	7c1b      	ldrb	r3, [r3, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d109      	bne.n	8007808 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80077fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fc:	f107 020a 	add.w	r2, r7, #10
 8007800:	4610      	mov	r0, r2
 8007802:	4798      	blx	r3
 8007804:	60f8      	str	r0, [r7, #12]
      break;
 8007806:	e020      	b.n	800784a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f9e7 	bl	8007bde <USBD_CtlError>
      return;
 8007810:	e037      	b.n	8007882 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	7c1b      	ldrb	r3, [r3, #16]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10d      	bne.n	8007836 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007822:	f107 020a 	add.w	r2, r7, #10
 8007826:	4610      	mov	r0, r2
 8007828:	4798      	blx	r3
 800782a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	3301      	adds	r3, #1
 8007830:	2207      	movs	r2, #7
 8007832:	701a      	strb	r2, [r3, #0]
      break;
 8007834:	e009      	b.n	800784a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f9d0 	bl	8007bde <USBD_CtlError>
      return;
 800783e:	e020      	b.n	8007882 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f9cb 	bl	8007bde <USBD_CtlError>
    return;
 8007848:	e01b      	b.n	8007882 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800784a:	897b      	ldrh	r3, [r7, #10]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d011      	beq.n	8007874 <USBD_GetDescriptor+0x1e0>
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	88db      	ldrh	r3, [r3, #6]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00d      	beq.n	8007874 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	88da      	ldrh	r2, [r3, #6]
 800785c:	897b      	ldrh	r3, [r7, #10]
 800785e:	4293      	cmp	r3, r2
 8007860:	bf28      	it	cs
 8007862:	4613      	movcs	r3, r2
 8007864:	b29b      	uxth	r3, r3
 8007866:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007868:	897b      	ldrh	r3, [r7, #10]
 800786a:	461a      	mov	r2, r3
 800786c:	68f9      	ldr	r1, [r7, #12]
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fa1f 	bl	8007cb2 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	88db      	ldrh	r3, [r3, #6]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d102      	bne.n	8007882 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fa76 	bl	8007d6e <USBD_CtlSendStatus>
  }
}
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	889b      	ldrh	r3, [r3, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d130      	bne.n	80078fc <USBD_SetAddress+0x74>
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	88db      	ldrh	r3, [r3, #6]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d12c      	bne.n	80078fc <USBD_SetAddress+0x74>
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	885b      	ldrh	r3, [r3, #2]
 80078a6:	2b7f      	cmp	r3, #127	; 0x7f
 80078a8:	d828      	bhi.n	80078fc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	885b      	ldrh	r3, [r3, #2]
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80078bc:	2b03      	cmp	r3, #3
 80078be:	d104      	bne.n	80078ca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f98b 	bl	8007bde <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078c8:	e01d      	b.n	8007906 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	7bfa      	ldrb	r2, [r7, #15]
 80078ce:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078d2:	7bfb      	ldrb	r3, [r7, #15]
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f001 f84e 	bl	8008978 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fa46 	bl	8007d6e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078e2:	7bfb      	ldrb	r3, [r7, #15]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d004      	beq.n	80078f2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2202      	movs	r2, #2
 80078ec:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f0:	e009      	b.n	8007906 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078fa:	e004      	b.n	8007906 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f96d 	bl	8007bde <USBD_CtlError>
  }
}
 8007904:	bf00      	nop
 8007906:	bf00      	nop
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
	...

08007910 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	885b      	ldrh	r3, [r3, #2]
 800791e:	b2da      	uxtb	r2, r3
 8007920:	4b41      	ldr	r3, [pc, #260]	; (8007a28 <USBD_SetConfig+0x118>)
 8007922:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007924:	4b40      	ldr	r3, [pc, #256]	; (8007a28 <USBD_SetConfig+0x118>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d904      	bls.n	8007936 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f955 	bl	8007bde <USBD_CtlError>
 8007934:	e075      	b.n	8007a22 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800793c:	2b02      	cmp	r3, #2
 800793e:	d002      	beq.n	8007946 <USBD_SetConfig+0x36>
 8007940:	2b03      	cmp	r3, #3
 8007942:	d023      	beq.n	800798c <USBD_SetConfig+0x7c>
 8007944:	e062      	b.n	8007a0c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007946:	4b38      	ldr	r3, [pc, #224]	; (8007a28 <USBD_SetConfig+0x118>)
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d01a      	beq.n	8007984 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800794e:	4b36      	ldr	r3, [pc, #216]	; (8007a28 <USBD_SetConfig+0x118>)
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	461a      	mov	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2203      	movs	r2, #3
 800795c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007960:	4b31      	ldr	r3, [pc, #196]	; (8007a28 <USBD_SetConfig+0x118>)
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	4619      	mov	r1, r3
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f7ff fa5d 	bl	8006e26 <USBD_SetClassConfig>
 800796c:	4603      	mov	r3, r0
 800796e:	2b02      	cmp	r3, #2
 8007970:	d104      	bne.n	800797c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f932 	bl	8007bde <USBD_CtlError>
          return;
 800797a:	e052      	b.n	8007a22 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f9f6 	bl	8007d6e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007982:	e04e      	b.n	8007a22 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f9f2 	bl	8007d6e <USBD_CtlSendStatus>
      break;
 800798a:	e04a      	b.n	8007a22 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800798c:	4b26      	ldr	r3, [pc, #152]	; (8007a28 <USBD_SetConfig+0x118>)
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d112      	bne.n	80079ba <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2202      	movs	r2, #2
 8007998:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800799c:	4b22      	ldr	r3, [pc, #136]	; (8007a28 <USBD_SetConfig+0x118>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	461a      	mov	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80079a6:	4b20      	ldr	r3, [pc, #128]	; (8007a28 <USBD_SetConfig+0x118>)
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	4619      	mov	r1, r3
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7ff fa59 	bl	8006e64 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f9db 	bl	8007d6e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80079b8:	e033      	b.n	8007a22 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80079ba:	4b1b      	ldr	r3, [pc, #108]	; (8007a28 <USBD_SetConfig+0x118>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	461a      	mov	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d01d      	beq.n	8007a04 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	4619      	mov	r1, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7ff fa47 	bl	8006e64 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80079d6:	4b14      	ldr	r3, [pc, #80]	; (8007a28 <USBD_SetConfig+0x118>)
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	461a      	mov	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80079e0:	4b11      	ldr	r3, [pc, #68]	; (8007a28 <USBD_SetConfig+0x118>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7ff fa1d 	bl	8006e26 <USBD_SetClassConfig>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d104      	bne.n	80079fc <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80079f2:	6839      	ldr	r1, [r7, #0]
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f8f2 	bl	8007bde <USBD_CtlError>
          return;
 80079fa:	e012      	b.n	8007a22 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f9b6 	bl	8007d6e <USBD_CtlSendStatus>
      break;
 8007a02:	e00e      	b.n	8007a22 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f9b2 	bl	8007d6e <USBD_CtlSendStatus>
      break;
 8007a0a:	e00a      	b.n	8007a22 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f8e5 	bl	8007bde <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007a14:	4b04      	ldr	r3, [pc, #16]	; (8007a28 <USBD_SetConfig+0x118>)
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f7ff fa22 	bl	8006e64 <USBD_ClrClassConfig>
      break;
 8007a20:	bf00      	nop
    }
  }
}
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	200002b0 	.word	0x200002b0

08007a2c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	88db      	ldrh	r3, [r3, #6]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d004      	beq.n	8007a48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f8cc 	bl	8007bde <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007a46:	e022      	b.n	8007a8e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	dc02      	bgt.n	8007a58 <USBD_GetConfig+0x2c>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	dc03      	bgt.n	8007a5e <USBD_GetConfig+0x32>
 8007a56:	e015      	b.n	8007a84 <USBD_GetConfig+0x58>
 8007a58:	2b03      	cmp	r3, #3
 8007a5a:	d00b      	beq.n	8007a74 <USBD_GetConfig+0x48>
 8007a5c:	e012      	b.n	8007a84 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	3308      	adds	r3, #8
 8007a68:	2201      	movs	r2, #1
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f920 	bl	8007cb2 <USBD_CtlSendData>
      break;
 8007a72:	e00c      	b.n	8007a8e <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	3304      	adds	r3, #4
 8007a78:	2201      	movs	r2, #1
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f918 	bl	8007cb2 <USBD_CtlSendData>
      break;
 8007a82:	e004      	b.n	8007a8e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f8a9 	bl	8007bde <USBD_CtlError>
      break;
 8007a8c:	bf00      	nop
}
 8007a8e:	bf00      	nop
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b082      	sub	sp, #8
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d81e      	bhi.n	8007aea <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	88db      	ldrh	r3, [r3, #6]
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d004      	beq.n	8007abe <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f891 	bl	8007bde <USBD_CtlError>
      break;
 8007abc:	e01a      	b.n	8007af4 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d005      	beq.n	8007ada <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	f043 0202 	orr.w	r2, r3, #2
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	330c      	adds	r3, #12
 8007ade:	2202      	movs	r2, #2
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f8e5 	bl	8007cb2 <USBD_CtlSendData>
    break;
 8007ae8:	e004      	b.n	8007af4 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f876 	bl	8007bde <USBD_CtlError>
    break;
 8007af2:	bf00      	nop
  }
}
 8007af4:	bf00      	nop
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	885b      	ldrh	r3, [r3, #2]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d106      	bne.n	8007b1c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f929 	bl	8007d6e <USBD_CtlSendStatus>
  }

}
 8007b1c:	bf00      	nop
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b34:	3b01      	subs	r3, #1
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d80b      	bhi.n	8007b52 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	885b      	ldrh	r3, [r3, #2]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d10c      	bne.n	8007b5c <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f90f 	bl	8007d6e <USBD_CtlSendStatus>
    }
    break;
 8007b50:	e004      	b.n	8007b5c <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f842 	bl	8007bde <USBD_CtlError>
    break;
 8007b5a:	e000      	b.n	8007b5e <USBD_ClrFeature+0x3a>
    break;
 8007b5c:	bf00      	nop
  }
}
 8007b5e:	bf00      	nop
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b083      	sub	sp, #12
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	781a      	ldrb	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	785a      	ldrb	r2, [r3, #1]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	3302      	adds	r3, #2
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	3303      	adds	r3, #3
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	021b      	lsls	r3, r3, #8
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	4413      	add	r3, r2
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	3304      	adds	r3, #4
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	3305      	adds	r3, #5
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	021b      	lsls	r3, r3, #8
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	4413      	add	r3, r2
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	3306      	adds	r3, #6
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	3307      	adds	r3, #7
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	021b      	lsls	r3, r3, #8
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	4413      	add	r3, r2
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	80da      	strh	r2, [r3, #6]

}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bc80      	pop	{r7}
 8007bdc:	4770      	bx	lr

08007bde <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b082      	sub	sp, #8
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
 8007be6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007be8:	2180      	movs	r1, #128	; 0x80
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fe5a 	bl	80088a4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fe56 	bl	80088a4 <USBD_LL_StallEP>
}
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d032      	beq.n	8007c7c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f000 f834 	bl	8007c84 <USBD_GetLen>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	3301      	adds	r3, #1
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	005b      	lsls	r3, r3, #1
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007c2a:	7dfb      	ldrb	r3, [r7, #23]
 8007c2c:	1c5a      	adds	r2, r3, #1
 8007c2e:	75fa      	strb	r2, [r7, #23]
 8007c30:	461a      	mov	r2, r3
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	4413      	add	r3, r2
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	7812      	ldrb	r2, [r2, #0]
 8007c3a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c3c:	7dfb      	ldrb	r3, [r7, #23]
 8007c3e:	1c5a      	adds	r2, r3, #1
 8007c40:	75fa      	strb	r2, [r7, #23]
 8007c42:	461a      	mov	r2, r3
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	4413      	add	r3, r2
 8007c48:	2203      	movs	r2, #3
 8007c4a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007c4c:	e012      	b.n	8007c74 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	1c5a      	adds	r2, r3, #1
 8007c52:	60fa      	str	r2, [r7, #12]
 8007c54:	7dfa      	ldrb	r2, [r7, #23]
 8007c56:	1c51      	adds	r1, r2, #1
 8007c58:	75f9      	strb	r1, [r7, #23]
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	440a      	add	r2, r1
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007c64:	7dfb      	ldrb	r3, [r7, #23]
 8007c66:	1c5a      	adds	r2, r3, #1
 8007c68:	75fa      	strb	r2, [r7, #23]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	4413      	add	r3, r2
 8007c70:	2200      	movs	r2, #0
 8007c72:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1e8      	bne.n	8007c4e <USBD_GetString+0x4e>
    }
  }
}
 8007c7c:	bf00      	nop
 8007c7e:	3718      	adds	r7, #24
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007c90:	e005      	b.n	8007c9e <USBD_GetLen+0x1a>
    {
        len++;
 8007c92:	7bfb      	ldrb	r3, [r7, #15]
 8007c94:	3301      	adds	r3, #1
 8007c96:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1f5      	bne.n	8007c92 <USBD_GetLen+0xe>
    }

    return len;
 8007ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3714      	adds	r7, #20
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bc80      	pop	{r7}
 8007cb0:	4770      	bx	lr

08007cb2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b084      	sub	sp, #16
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	60f8      	str	r0, [r7, #12]
 8007cba:	60b9      	str	r1, [r7, #8]
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007cc8:	88fa      	ldrh	r2, [r7, #6]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007cce:	88fa      	ldrh	r2, [r7, #6]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007cd4:	88fb      	ldrh	r3, [r7, #6]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	2100      	movs	r1, #0
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f000 fe6b 	bl	80089b6 <USBD_LL_Transmit>

  return USBD_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b084      	sub	sp, #16
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	60f8      	str	r0, [r7, #12]
 8007cf2:	60b9      	str	r1, [r7, #8]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007cf8:	88fb      	ldrh	r3, [r7, #6]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f000 fe59 	bl	80089b6 <USBD_LL_Transmit>

  return USBD_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b084      	sub	sp, #16
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	60f8      	str	r0, [r7, #12]
 8007d16:	60b9      	str	r1, [r7, #8]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2203      	movs	r2, #3
 8007d20:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007d24:	88fa      	ldrh	r2, [r7, #6]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007d2c:	88fa      	ldrh	r2, [r7, #6]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007d34:	88fb      	ldrh	r3, [r7, #6]
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	2100      	movs	r1, #0
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f000 fe5e 	bl	80089fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b084      	sub	sp, #16
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	60f8      	str	r0, [r7, #12]
 8007d52:	60b9      	str	r1, [r7, #8]
 8007d54:	4613      	mov	r3, r2
 8007d56:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d58:	88fb      	ldrh	r3, [r7, #6]
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f000 fe4c 	bl	80089fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b082      	sub	sp, #8
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2204      	movs	r2, #4
 8007d7a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d7e:	2300      	movs	r3, #0
 8007d80:	2200      	movs	r2, #0
 8007d82:	2100      	movs	r1, #0
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fe16 	bl	80089b6 <USBD_LL_Transmit>

  return USBD_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2205      	movs	r2, #5
 8007da0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007da4:	2300      	movs	r3, #0
 8007da6:	2200      	movs	r2, #0
 8007da8:	2100      	movs	r1, #0
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fe26 	bl	80089fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
	...

08007dbc <WaitWhileBusy>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_TIMEOUT for timeout
 */
static LoRa_Status WaitWhileBusy(uint16_t timeout)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	80fb      	strh	r3, [r7, #6]

	uint32_t startTime;

	startTime = HAL_GetTick();
 8007dc6:	f7f8 fea7 	bl	8000b18 <HAL_GetTick>
 8007dca:	60f8      	str	r0, [r7, #12]

	while(HAL_GPIO_ReadPin(LoRa_BUSY_GPIO_Port, LoRa_BUSY_Pin) == GPIO_PIN_SET)
 8007dcc:	e009      	b.n	8007de2 <WaitWhileBusy+0x26>
	{
		if((HAL_GetTick() - startTime) > timeout)
 8007dce:	f7f8 fea3 	bl	8000b18 <HAL_GetTick>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	1ad2      	subs	r2, r2, r3
 8007dd8:	88fb      	ldrh	r3, [r7, #6]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d901      	bls.n	8007de2 <WaitWhileBusy+0x26>
		{
			return(LoRa_TIMEOUT);
 8007dde:	2302      	movs	r3, #2
 8007de0:	e008      	b.n	8007df4 <WaitWhileBusy+0x38>
	while(HAL_GPIO_ReadPin(LoRa_BUSY_GPIO_Port, LoRa_BUSY_Pin) == GPIO_PIN_SET)
 8007de2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007de6:	4805      	ldr	r0, [pc, #20]	; (8007dfc <WaitWhileBusy+0x40>)
 8007de8:	f7f9 f950 	bl	800108c <HAL_GPIO_ReadPin>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d0ed      	beq.n	8007dce <WaitWhileBusy+0x12>
		}
	}

	return(LoRa_OK);
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	40020000 	.word	0x40020000

08007e00 <WaitWhileTransmit>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_TIMEOUT for timeout
 */
static LoRa_Status WaitWhileTransmit(uint16_t timeout)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	4603      	mov	r3, r0
 8007e08:	80fb      	strh	r3, [r7, #6]

	uint32_t startTime;

	startTime = HAL_GetTick();
 8007e0a:	f7f8 fe85 	bl	8000b18 <HAL_GetTick>
 8007e0e:	60f8      	str	r0, [r7, #12]

	/* wait for DIO2 to go high */
	while(HAL_GPIO_ReadPin(LoRa_DIO2_GPIO_Port, LoRa_DIO2_Pin) == GPIO_PIN_RESET)
 8007e10:	e009      	b.n	8007e26 <WaitWhileTransmit+0x26>
	{
		if((HAL_GetTick() - startTime) > timeout)
 8007e12:	f7f8 fe81 	bl	8000b18 <HAL_GetTick>
 8007e16:	4602      	mov	r2, r0
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	1ad2      	subs	r2, r2, r3
 8007e1c:	88fb      	ldrh	r3, [r7, #6]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d901      	bls.n	8007e26 <WaitWhileTransmit+0x26>
		{
			return(LoRa_TIMEOUT);
 8007e22:	2302      	movs	r3, #2
 8007e24:	e019      	b.n	8007e5a <WaitWhileTransmit+0x5a>
	while(HAL_GPIO_ReadPin(LoRa_DIO2_GPIO_Port, LoRa_DIO2_Pin) == GPIO_PIN_RESET)
 8007e26:	2104      	movs	r1, #4
 8007e28:	480e      	ldr	r0, [pc, #56]	; (8007e64 <WaitWhileTransmit+0x64>)
 8007e2a:	f7f9 f92f 	bl	800108c <HAL_GPIO_ReadPin>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d0ee      	beq.n	8007e12 <WaitWhileTransmit+0x12>
		}
	}

	/* Now wait for DIO2 to go low indicating finished transmitting */
	while(HAL_GPIO_ReadPin(LoRa_DIO2_GPIO_Port, LoRa_DIO2_Pin) == GPIO_PIN_SET)
 8007e34:	e009      	b.n	8007e4a <WaitWhileTransmit+0x4a>
	{
		if((HAL_GetTick() - startTime) > timeout)
 8007e36:	f7f8 fe6f 	bl	8000b18 <HAL_GetTick>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	1ad2      	subs	r2, r2, r3
 8007e40:	88fb      	ldrh	r3, [r7, #6]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d901      	bls.n	8007e4a <WaitWhileTransmit+0x4a>
		{
			return(LoRa_TIMEOUT);
 8007e46:	2302      	movs	r3, #2
 8007e48:	e007      	b.n	8007e5a <WaitWhileTransmit+0x5a>
	while(HAL_GPIO_ReadPin(LoRa_DIO2_GPIO_Port, LoRa_DIO2_Pin) == GPIO_PIN_SET)
 8007e4a:	2104      	movs	r1, #4
 8007e4c:	4805      	ldr	r0, [pc, #20]	; (8007e64 <WaitWhileTransmit+0x64>)
 8007e4e:	f7f9 f91d 	bl	800108c <HAL_GPIO_ReadPin>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d0ee      	beq.n	8007e36 <WaitWhileTransmit+0x36>
		}
	}

	return(LoRa_OK);
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	40020000 	.word	0x40020000

08007e68 <SPI_Send>:
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 *
 */
static LoRa_Status SPI_Send(uint8_t* buffer, uint16_t numBytes, bool moreToCome)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	460b      	mov	r3, r1
 8007e72:	807b      	strh	r3, [r7, #2]
 8007e74:	4613      	mov	r3, r2
 8007e76:	707b      	strb	r3, [r7, #1]

	/* make sure chip isn't busy */
	if(WaitWhileBusy(10) != LoRa_OK)
 8007e78:	200a      	movs	r0, #10
 8007e7a:	f7ff ff9f 	bl	8007dbc <WaitWhileBusy>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d001      	beq.n	8007e88 <SPI_Send+0x20>
	{
		return(LoRa_ERROR);
 8007e84:	2301      	movs	r3, #1
 8007e86:	e01c      	b.n	8007ec2 <SPI_Send+0x5a>
	}

	/* Set NSS low */
	HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_RESET);
 8007e88:	2200      	movs	r2, #0
 8007e8a:	2110      	movs	r1, #16
 8007e8c:	480f      	ldr	r0, [pc, #60]	; (8007ecc <SPI_Send+0x64>)
 8007e8e:	f7f9 f914 	bl	80010ba <HAL_GPIO_WritePin>

	if(HAL_SPI_Transmit(hspi, buffer, numBytes, 100) != HAL_OK)
 8007e92:	4b0f      	ldr	r3, [pc, #60]	; (8007ed0 <SPI_Send+0x68>)
 8007e94:	6818      	ldr	r0, [r3, #0]
 8007e96:	887a      	ldrh	r2, [r7, #2]
 8007e98:	2364      	movs	r3, #100	; 0x64
 8007e9a:	6879      	ldr	r1, [r7, #4]
 8007e9c:	f7fb fcf2 	bl	8003884 <HAL_SPI_Transmit>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <SPI_Send+0x42>
	{
		return(LoRa_ERROR);
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e00b      	b.n	8007ec2 <SPI_Send+0x5a>
	}

	if(moreToCome != true)
 8007eaa:	787b      	ldrb	r3, [r7, #1]
 8007eac:	f083 0301 	eor.w	r3, r3, #1
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d004      	beq.n	8007ec0 <SPI_Send+0x58>
	{
		/* Set NSS high */
		HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_SET);
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	2110      	movs	r1, #16
 8007eba:	4804      	ldr	r0, [pc, #16]	; (8007ecc <SPI_Send+0x64>)
 8007ebc:	f7f9 f8fd 	bl	80010ba <HAL_GPIO_WritePin>
	}

	return(LoRa_OK);
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	40020000 	.word	0x40020000
 8007ed0:	200002b4 	.word	0x200002b4

08007ed4 <LoRa_Init>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 */
LoRa_Status LoRa_Init(SPI_HandleTypeDef *hspiPtr)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
	uint8_t xmitBuffer[10];

  /* store the hspi pointer for future use */
  hspi = hspiPtr;
 8007edc:	4a65      	ldr	r2, [pc, #404]	; (8008074 <LoRa_Init+0x1a0>)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6013      	str	r3, [r2, #0]

  /* Set NSS high */
  HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_SET);
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	2110      	movs	r1, #16
 8007ee6:	4864      	ldr	r0, [pc, #400]	; (8008078 <LoRa_Init+0x1a4>)
 8007ee8:	f7f9 f8e7 	bl	80010ba <HAL_GPIO_WritePin>

  /* Reset SX1262 chip */
  HAL_GPIO_WritePin(LoRa_NRST_GPIO_Port, LoRa_NRST_Pin, GPIO_PIN_RESET); 	/* Pull NRST low */
 8007eec:	2200      	movs	r2, #0
 8007eee:	2101      	movs	r1, #1
 8007ef0:	4861      	ldr	r0, [pc, #388]	; (8008078 <LoRa_Init+0x1a4>)
 8007ef2:	f7f9 f8e2 	bl	80010ba <HAL_GPIO_WritePin>
  HAL_Delay(1); 															/* delay 1mS */
 8007ef6:	2001      	movs	r0, #1
 8007ef8:	f7f8 fe18 	bl	8000b2c <HAL_Delay>
  HAL_GPIO_WritePin(LoRa_NRST_GPIO_Port, LoRa_NRST_Pin, GPIO_PIN_SET);		/* Set NRST high */
 8007efc:	2201      	movs	r2, #1
 8007efe:	2101      	movs	r1, #1
 8007f00:	485d      	ldr	r0, [pc, #372]	; (8008078 <LoRa_Init+0x1a4>)
 8007f02:	f7f9 f8da 	bl	80010ba <HAL_GPIO_WritePin>

  /* Set the chip to Standby mode and using the internal oscillator */
  xmitBuffer[0] = LORA_SET_STANDBY_OPCODE;
 8007f06:	2380      	movs	r3, #128	; 0x80
 8007f08:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = LORA_STDBY_RC;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	737b      	strb	r3, [r7, #13]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 8007f0e:	f107 030c 	add.w	r3, r7, #12
 8007f12:	2200      	movs	r2, #0
 8007f14:	2102      	movs	r1, #2
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7ff ffa6 	bl	8007e68 <SPI_Send>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d001      	beq.n	8007f26 <LoRa_Init+0x52>
  {
	  return(LoRa_ERROR);
 8007f22:	2301      	movs	r3, #1
 8007f24:	e0a2      	b.n	800806c <LoRa_Init+0x198>
  }

  /* Set the packet type to LoRa */
  xmitBuffer[0] = LORA_SET_PACKET_TYPE_OPCODE;
 8007f26:	238a      	movs	r3, #138	; 0x8a
 8007f28:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = LORA_PACKET_TYPE_LORA;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	737b      	strb	r3, [r7, #13]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 8007f2e:	f107 030c 	add.w	r3, r7, #12
 8007f32:	2200      	movs	r2, #0
 8007f34:	2102      	movs	r1, #2
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7ff ff96 	bl	8007e68 <SPI_Send>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <LoRa_Init+0x72>
  {
	  return(LoRa_ERROR);
 8007f42:	2301      	movs	r3, #1
 8007f44:	e092      	b.n	800806c <LoRa_Init+0x198>
  }

  /* Set the frequency to 915 MHz  */
  /* See datasheet for calculation */
  xmitBuffer[0] = LORA_SET_RF_FREQUENCY_OPCODE;
 8007f46:	2386      	movs	r3, #134	; 0x86
 8007f48:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 0x39;
 8007f4a:	2339      	movs	r3, #57	; 0x39
 8007f4c:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = 0x30;
 8007f4e:	2330      	movs	r3, #48	; 0x30
 8007f50:	73bb      	strb	r3, [r7, #14]
  xmitBuffer[3] = 0x00;
 8007f52:	2300      	movs	r3, #0
 8007f54:	73fb      	strb	r3, [r7, #15]
  xmitBuffer[4] = 0x00;
 8007f56:	2300      	movs	r3, #0
 8007f58:	743b      	strb	r3, [r7, #16]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 8007f5a:	f107 030c 	add.w	r3, r7, #12
 8007f5e:	2200      	movs	r2, #0
 8007f60:	2105      	movs	r1, #5
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7ff ff80 	bl	8007e68 <SPI_Send>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <LoRa_Init+0x9e>
  {
	  return(LoRa_ERROR);
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e07c      	b.n	800806c <LoRa_Init+0x198>
  }

  /* Set the power amplifier configuration */
  /* See datasheet page 74                 */
  xmitBuffer[0] = LORA_SET_PA_CONFIG_OPCODE;
 8007f72:	2395      	movs	r3, #149	; 0x95
 8007f74:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 0x04; /* paDutyCycle */
 8007f76:	2304      	movs	r3, #4
 8007f78:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = 0x07; /* hpMax */
 8007f7a:	2307      	movs	r3, #7
 8007f7c:	73bb      	strb	r3, [r7, #14]
  xmitBuffer[3] = 0x00; /* devSel */
 8007f7e:	2300      	movs	r3, #0
 8007f80:	73fb      	strb	r3, [r7, #15]
  xmitBuffer[4] = 0x01; /* paLut */
 8007f82:	2301      	movs	r3, #1
 8007f84:	743b      	strb	r3, [r7, #16]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 8007f86:	f107 030c 	add.w	r3, r7, #12
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	2105      	movs	r1, #5
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7ff ff6a 	bl	8007e68 <SPI_Send>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d001      	beq.n	8007f9e <LoRa_Init+0xca>
  {
	  return(LoRa_ERROR);
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e066      	b.n	800806c <LoRa_Init+0x198>
  }

  /* Set the TX parameters */
  xmitBuffer[0] = LORA_SET_TX_PARAMS_OPCODE;
 8007f9e:	238e      	movs	r3, #142	; 0x8e
 8007fa0:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 22; /* power +22 dBm   */
 8007fa2:	2316      	movs	r3, #22
 8007fa4:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = LORA_STANDARD_RAMPTIME;
 8007fa6:	2304      	movs	r3, #4
 8007fa8:	73bb      	strb	r3, [r7, #14]
  if(SPI_Send(xmitBuffer, 3, false) != LoRa_OK)
 8007faa:	f107 030c 	add.w	r3, r7, #12
 8007fae:	2200      	movs	r2, #0
 8007fb0:	2103      	movs	r1, #3
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7ff ff58 	bl	8007e68 <SPI_Send>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d001      	beq.n	8007fc2 <LoRa_Init+0xee>
  {
	  return(LoRa_ERROR);
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e054      	b.n	800806c <LoRa_Init+0x198>
  }

  /* Set DIO2 as the control for the RF switch */
  xmitBuffer[0] = LORA_SET_DIO2_AS_RF_SWITCH_CTRL_OPCODE;
 8007fc2:	239d      	movs	r3, #157	; 0x9d
 8007fc4:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 1; /* enable */
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	737b      	strb	r3, [r7, #13]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 8007fca:	f107 030c 	add.w	r3, r7, #12
 8007fce:	2200      	movs	r2, #0
 8007fd0:	2102      	movs	r1, #2
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7ff ff48 	bl	8007e68 <SPI_Send>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d001      	beq.n	8007fe2 <LoRa_Init+0x10e>
  {
	  return(LoRa_ERROR);
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e044      	b.n	800806c <LoRa_Init+0x198>
  }

  /* Set regulator mode to use the DC-DC converter */
  xmitBuffer[0] = LORA_SET_REGULATOR_MODE_OPCODE;
 8007fe2:	2396      	movs	r3, #150	; 0x96
 8007fe4:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 1; /* Use DC-DC converter */
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	737b      	strb	r3, [r7, #13]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 8007fea:	f107 030c 	add.w	r3, r7, #12
 8007fee:	2200      	movs	r2, #0
 8007ff0:	2102      	movs	r1, #2
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7ff ff38 	bl	8007e68 <SPI_Send>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <LoRa_Init+0x12e>
  {
	  return(LoRa_ERROR);
 8007ffe:	2301      	movs	r3, #1
 8008000:	e034      	b.n	800806c <LoRa_Init+0x198>
  }

  /* Set LoRa modulation parameters */
  xmitBuffer[0] = LORA_SET_MODULATION_PARAMS_OPCODE;
 8008002:	238b      	movs	r3, #139	; 0x8b
 8008004:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 7; 		/* Spreading factor */
 8008006:	2307      	movs	r3, #7
 8008008:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = 0x04; 	/* BW = 125 KHz */
 800800a:	2304      	movs	r3, #4
 800800c:	73bb      	strb	r3, [r7, #14]
  xmitBuffer[3] = 0x01;		/* Coding Rate = 4/5 */
 800800e:	2301      	movs	r3, #1
 8008010:	73fb      	strb	r3, [r7, #15]
  xmitBuffer[4] = 0;		/* Low data rate optimization off */
 8008012:	2300      	movs	r3, #0
 8008014:	743b      	strb	r3, [r7, #16]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 8008016:	f107 030c 	add.w	r3, r7, #12
 800801a:	2200      	movs	r2, #0
 800801c:	2105      	movs	r1, #5
 800801e:	4618      	mov	r0, r3
 8008020:	f7ff ff22 	bl	8007e68 <SPI_Send>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <LoRa_Init+0x15a>
  {
	  return(LoRa_ERROR);
 800802a:	2301      	movs	r3, #1
 800802c:	e01e      	b.n	800806c <LoRa_Init+0x198>
  }

  /* Set DIO IRQ parameters */
  xmitBuffer[0] = LORA_SET_DIO_IRQ_PARAMS_OPCODE;
 800802e:	2308      	movs	r3, #8
 8008030:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 0x02;	/* Enable timeout interrupt */
 8008032:	2302      	movs	r3, #2
 8008034:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = 0x02;	/* Enable RX done interrupt */
 8008036:	2302      	movs	r3, #2
 8008038:	73bb      	strb	r3, [r7, #14]
  xmitBuffer[3] = 0x02;	/* Map timeout to DIO1 */
 800803a:	2302      	movs	r3, #2
 800803c:	73fb      	strb	r3, [r7, #15]
  xmitBuffer[4] = 0x02; /* Map RX done to DIO1 */
 800803e:	2302      	movs	r3, #2
 8008040:	743b      	strb	r3, [r7, #16]
  xmitBuffer[5] = 0;
 8008042:	2300      	movs	r3, #0
 8008044:	747b      	strb	r3, [r7, #17]
  xmitBuffer[6] = 0;	/* No interrupts to DIO2 */
 8008046:	2300      	movs	r3, #0
 8008048:	74bb      	strb	r3, [r7, #18]
  xmitBuffer[7]	= 0;
 800804a:	2300      	movs	r3, #0
 800804c:	74fb      	strb	r3, [r7, #19]
  xmitBuffer[8]	= 0;	/* No interrupts to DIO3 */
 800804e:	2300      	movs	r3, #0
 8008050:	753b      	strb	r3, [r7, #20]
  if(SPI_Send(xmitBuffer, 9, false) != LoRa_OK)
 8008052:	f107 030c 	add.w	r3, r7, #12
 8008056:	2200      	movs	r2, #0
 8008058:	2109      	movs	r1, #9
 800805a:	4618      	mov	r0, r3
 800805c:	f7ff ff04 	bl	8007e68 <SPI_Send>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <LoRa_Init+0x196>
  {
	  return(LoRa_ERROR);
 8008066:	2301      	movs	r3, #1
 8008068:	e000      	b.n	800806c <LoRa_Init+0x198>
  }

  return(LoRa_OK);
 800806a:	2300      	movs	r3, #0

}
 800806c:	4618      	mov	r0, r3
 800806e:	3718      	adds	r7, #24
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	200002b4 	.word	0x200002b4
 8008078:	40020000 	.word	0x40020000

0800807c <LoRaTransmit>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 */
LoRa_Status LoRaTransmit(uint8_t *msg, uint8_t numBytes)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b0a4      	sub	sp, #144	; 0x90
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	460b      	mov	r3, r1
 8008086:	70fb      	strb	r3, [r7, #3]
	uint8_t xmitBuffer[128];
	uint8_t i;

	if(numBytes > 127) return(LoRa_ERROR);
 8008088:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800808c:	2b00      	cmp	r3, #0
 800808e:	da01      	bge.n	8008094 <LoRaTransmit+0x18>
 8008090:	2301      	movs	r3, #1
 8008092:	e077      	b.n	8008184 <LoRaTransmit+0x108>

	/* Set base address of transmit and receive buffer */
	xmitBuffer[0] = LORA_SET_BUFFER_BASE_ADDRESS_OPCODE;
 8008094:	238f      	movs	r3, #143	; 0x8f
 8008096:	733b      	strb	r3, [r7, #12]
	xmitBuffer[1] = 0; /* Transmit buffer start address */
 8008098:	2300      	movs	r3, #0
 800809a:	737b      	strb	r3, [r7, #13]
	xmitBuffer[2] = 0; /* Receive buffer start address */
 800809c:	2300      	movs	r3, #0
 800809e:	73bb      	strb	r3, [r7, #14]
	if(SPI_Send(xmitBuffer, 3, false) != LoRa_OK)
 80080a0:	f107 030c 	add.w	r3, r7, #12
 80080a4:	2200      	movs	r2, #0
 80080a6:	2103      	movs	r1, #3
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7ff fedd 	bl	8007e68 <SPI_Send>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d001      	beq.n	80080b8 <LoRaTransmit+0x3c>
	{
		return(LoRa_ERROR);
 80080b4:	2301      	movs	r3, #1
 80080b6:	e065      	b.n	8008184 <LoRaTransmit+0x108>
	}

	/* Write the message to the transmit buffer on the SX1262 chip*/
	xmitBuffer[0] = LORA_WRITE_BUFFER_OPCODE;
 80080b8:	230e      	movs	r3, #14
 80080ba:	733b      	strb	r3, [r7, #12]
	xmitBuffer[1] = 0; 		/* Offset of transmit buffer */
 80080bc:	2300      	movs	r3, #0
 80080be:	737b      	strb	r3, [r7, #13]
	for(i=2; i <= (numBytes+1); i++)
 80080c0:	2302      	movs	r3, #2
 80080c2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80080c6:	e010      	b.n	80080ea <LoRaTransmit+0x6e>
	{
		xmitBuffer[i] = *msg++;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	1c5a      	adds	r2, r3, #1
 80080cc:	607a      	str	r2, [r7, #4]
 80080ce:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80080d2:	7819      	ldrb	r1, [r3, #0]
 80080d4:	f102 0390 	add.w	r3, r2, #144	; 0x90
 80080d8:	443b      	add	r3, r7
 80080da:	460a      	mov	r2, r1
 80080dc:	f803 2c84 	strb.w	r2, [r3, #-132]
	for(i=2; i <= (numBytes+1); i++)
 80080e0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80080e4:	3301      	adds	r3, #1
 80080e6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80080ea:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80080ee:	78fb      	ldrb	r3, [r7, #3]
 80080f0:	3301      	adds	r3, #1
 80080f2:	429a      	cmp	r2, r3
 80080f4:	dde8      	ble.n	80080c8 <LoRaTransmit+0x4c>
	}
	if(SPI_Send(xmitBuffer, numBytes+2, false) != LoRa_OK)
 80080f6:	78fb      	ldrb	r3, [r7, #3]
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	3302      	adds	r3, #2
 80080fc:	b299      	uxth	r1, r3
 80080fe:	f107 030c 	add.w	r3, r7, #12
 8008102:	2200      	movs	r2, #0
 8008104:	4618      	mov	r0, r3
 8008106:	f7ff feaf 	bl	8007e68 <SPI_Send>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <LoRaTransmit+0x98>
	{
		return(LoRa_ERROR);
 8008110:	2301      	movs	r3, #1
 8008112:	e037      	b.n	8008184 <LoRaTransmit+0x108>
	}

	/* Set LoRa packet parameters */
	xmitBuffer[0] = LORA_SET_PACKET_PARAMS_OPCODE;
 8008114:	238c      	movs	r3, #140	; 0x8c
 8008116:	733b      	strb	r3, [r7, #12]
	xmitBuffer[1] = 0;
 8008118:	2300      	movs	r3, #0
 800811a:	737b      	strb	r3, [r7, #13]
	xmitBuffer[2] = 0x08;		/* Preamble length (2 bytes) */
 800811c:	2308      	movs	r3, #8
 800811e:	73bb      	strb	r3, [r7, #14]
	xmitBuffer[3] = 0;			/* Variable length packet */
 8008120:	2300      	movs	r3, #0
 8008122:	73fb      	strb	r3, [r7, #15]
	xmitBuffer[4] = numBytes; 	/* Size of message */
 8008124:	78fb      	ldrb	r3, [r7, #3]
 8008126:	743b      	strb	r3, [r7, #16]
	xmitBuffer[5] = 0;			/* CRC off */
 8008128:	2300      	movs	r3, #0
 800812a:	747b      	strb	r3, [r7, #17]
	xmitBuffer[6] = 0;			/* Standard IQ setup */
 800812c:	2300      	movs	r3, #0
 800812e:	74bb      	strb	r3, [r7, #18]
	if(SPI_Send(xmitBuffer, 7, false) != LoRa_OK)
 8008130:	f107 030c 	add.w	r3, r7, #12
 8008134:	2200      	movs	r2, #0
 8008136:	2107      	movs	r1, #7
 8008138:	4618      	mov	r0, r3
 800813a:	f7ff fe95 	bl	8007e68 <SPI_Send>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d001      	beq.n	8008148 <LoRaTransmit+0xcc>
	{
		return(LoRa_ERROR);
 8008144:	2301      	movs	r3, #1
 8008146:	e01d      	b.n	8008184 <LoRaTransmit+0x108>
	}

	/* Put the chip in transmit mode to send the message */
	xmitBuffer[0] = LORA_SET_TX_OPCODE;
 8008148:	2383      	movs	r3, #131	; 0x83
 800814a:	733b      	strb	r3, [r7, #12]
	xmitBuffer[1] = 0;
 800814c:	2300      	movs	r3, #0
 800814e:	737b      	strb	r3, [r7, #13]
	xmitBuffer[2] = 0;
 8008150:	2300      	movs	r3, #0
 8008152:	73bb      	strb	r3, [r7, #14]
	xmitBuffer[3] = 0; 	/* timeout value (3 bytes) set to zero for no timeout */
 8008154:	2300      	movs	r3, #0
 8008156:	73fb      	strb	r3, [r7, #15]
	if(SPI_Send(xmitBuffer, 4, false) != LoRa_OK)
 8008158:	f107 030c 	add.w	r3, r7, #12
 800815c:	2200      	movs	r2, #0
 800815e:	2104      	movs	r1, #4
 8008160:	4618      	mov	r0, r3
 8008162:	f7ff fe81 	bl	8007e68 <SPI_Send>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <LoRaTransmit+0xf4>
	{
		return(LoRa_ERROR);
 800816c:	2301      	movs	r3, #1
 800816e:	e009      	b.n	8008184 <LoRaTransmit+0x108>
	}

	if(WaitWhileTransmit(500) != LoRa_OK)
 8008170:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008174:	f7ff fe44 	bl	8007e00 <WaitWhileTransmit>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <LoRaTransmit+0x106>
	{
		return(LoRa_ERROR);
 800817e:	2301      	movs	r3, #1
 8008180:	e000      	b.n	8008184 <LoRaTransmit+0x108>
	}

	return(LoRa_OK);
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3790      	adds	r7, #144	; 0x90
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008190:	2200      	movs	r2, #0
 8008192:	4912      	ldr	r1, [pc, #72]	; (80081dc <MX_USB_DEVICE_Init+0x50>)
 8008194:	4812      	ldr	r0, [pc, #72]	; (80081e0 <MX_USB_DEVICE_Init+0x54>)
 8008196:	f7fe fdec 	bl	8006d72 <USBD_Init>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d001      	beq.n	80081a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80081a0:	f7f8 fb06 	bl	80007b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80081a4:	490f      	ldr	r1, [pc, #60]	; (80081e4 <MX_USB_DEVICE_Init+0x58>)
 80081a6:	480e      	ldr	r0, [pc, #56]	; (80081e0 <MX_USB_DEVICE_Init+0x54>)
 80081a8:	f7fe fe0e 	bl	8006dc8 <USBD_RegisterClass>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d001      	beq.n	80081b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80081b2:	f7f8 fafd 	bl	80007b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80081b6:	490c      	ldr	r1, [pc, #48]	; (80081e8 <MX_USB_DEVICE_Init+0x5c>)
 80081b8:	4809      	ldr	r0, [pc, #36]	; (80081e0 <MX_USB_DEVICE_Init+0x54>)
 80081ba:	f7fe fd3f 	bl	8006c3c <USBD_CDC_RegisterInterface>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80081c4:	f7f8 faf4 	bl	80007b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80081c8:	4805      	ldr	r0, [pc, #20]	; (80081e0 <MX_USB_DEVICE_Init+0x54>)
 80081ca:	f7fe fe16 	bl	8006dfa <USBD_Start>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80081d4:	f7f8 faec 	bl	80007b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80081d8:	bf00      	nop
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	2000012c 	.word	0x2000012c
 80081e0:	200002b8 	.word	0x200002b8
 80081e4:	20000018 	.word	0x20000018
 80081e8:	2000011c 	.word	0x2000011c

080081ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80081f0:	2200      	movs	r2, #0
 80081f2:	4905      	ldr	r1, [pc, #20]	; (8008208 <CDC_Init_FS+0x1c>)
 80081f4:	4805      	ldr	r0, [pc, #20]	; (800820c <CDC_Init_FS+0x20>)
 80081f6:	f7fe fd37 	bl	8006c68 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80081fa:	4905      	ldr	r1, [pc, #20]	; (8008210 <CDC_Init_FS+0x24>)
 80081fc:	4803      	ldr	r0, [pc, #12]	; (800820c <CDC_Init_FS+0x20>)
 80081fe:	f7fe fd4c 	bl	8006c9a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008202:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008204:	4618      	mov	r0, r3
 8008206:	bd80      	pop	{r7, pc}
 8008208:	20000954 	.word	0x20000954
 800820c:	200002b8 	.word	0x200002b8
 8008210:	20000554 	.word	0x20000554

08008214 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008214:	b480      	push	{r7}
 8008216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008218:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800821a:	4618      	mov	r0, r3
 800821c:	46bd      	mov	sp, r7
 800821e:	bc80      	pop	{r7}
 8008220:	4770      	bx	lr
	...

08008224 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	4603      	mov	r3, r0
 800822c:	6039      	str	r1, [r7, #0]
 800822e:	71fb      	strb	r3, [r7, #7]
 8008230:	4613      	mov	r3, r2
 8008232:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008234:	79fb      	ldrb	r3, [r7, #7]
 8008236:	2b23      	cmp	r3, #35	; 0x23
 8008238:	d84a      	bhi.n	80082d0 <CDC_Control_FS+0xac>
 800823a:	a201      	add	r2, pc, #4	; (adr r2, 8008240 <CDC_Control_FS+0x1c>)
 800823c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008240:	080082d1 	.word	0x080082d1
 8008244:	080082d1 	.word	0x080082d1
 8008248:	080082d1 	.word	0x080082d1
 800824c:	080082d1 	.word	0x080082d1
 8008250:	080082d1 	.word	0x080082d1
 8008254:	080082d1 	.word	0x080082d1
 8008258:	080082d1 	.word	0x080082d1
 800825c:	080082d1 	.word	0x080082d1
 8008260:	080082d1 	.word	0x080082d1
 8008264:	080082d1 	.word	0x080082d1
 8008268:	080082d1 	.word	0x080082d1
 800826c:	080082d1 	.word	0x080082d1
 8008270:	080082d1 	.word	0x080082d1
 8008274:	080082d1 	.word	0x080082d1
 8008278:	080082d1 	.word	0x080082d1
 800827c:	080082d1 	.word	0x080082d1
 8008280:	080082d1 	.word	0x080082d1
 8008284:	080082d1 	.word	0x080082d1
 8008288:	080082d1 	.word	0x080082d1
 800828c:	080082d1 	.word	0x080082d1
 8008290:	080082d1 	.word	0x080082d1
 8008294:	080082d1 	.word	0x080082d1
 8008298:	080082d1 	.word	0x080082d1
 800829c:	080082d1 	.word	0x080082d1
 80082a0:	080082d1 	.word	0x080082d1
 80082a4:	080082d1 	.word	0x080082d1
 80082a8:	080082d1 	.word	0x080082d1
 80082ac:	080082d1 	.word	0x080082d1
 80082b0:	080082d1 	.word	0x080082d1
 80082b4:	080082d1 	.word	0x080082d1
 80082b8:	080082d1 	.word	0x080082d1
 80082bc:	080082d1 	.word	0x080082d1
 80082c0:	080082d1 	.word	0x080082d1
 80082c4:	080082d1 	.word	0x080082d1
 80082c8:	080082d1 	.word	0x080082d1
 80082cc:	080082d1 	.word	0x080082d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80082d0:	bf00      	nop
  }

  return (USBD_OK);
 80082d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	bc80      	pop	{r7}
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop

080082e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80082ea:	6879      	ldr	r1, [r7, #4]
 80082ec:	4805      	ldr	r0, [pc, #20]	; (8008304 <CDC_Receive_FS+0x24>)
 80082ee:	f7fe fcd4 	bl	8006c9a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80082f2:	4804      	ldr	r0, [pc, #16]	; (8008304 <CDC_Receive_FS+0x24>)
 80082f4:	f7fe fd13 	bl	8006d1e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80082f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	200002b8 	.word	0x200002b8

08008308 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008314:	2300      	movs	r3, #0
 8008316:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008318:	4b0d      	ldr	r3, [pc, #52]	; (8008350 <CDC_Transmit_FS+0x48>)
 800831a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800831e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800832a:	2301      	movs	r3, #1
 800832c:	e00b      	b.n	8008346 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800832e:	887b      	ldrh	r3, [r7, #2]
 8008330:	461a      	mov	r2, r3
 8008332:	6879      	ldr	r1, [r7, #4]
 8008334:	4806      	ldr	r0, [pc, #24]	; (8008350 <CDC_Transmit_FS+0x48>)
 8008336:	f7fe fc97 	bl	8006c68 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800833a:	4805      	ldr	r0, [pc, #20]	; (8008350 <CDC_Transmit_FS+0x48>)
 800833c:	f7fe fcc0 	bl	8006cc0 <USBD_CDC_TransmitPacket>
 8008340:	4603      	mov	r3, r0
 8008342:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008344:	7bfb      	ldrb	r3, [r7, #15]
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	200002b8 	.word	0x200002b8

08008354 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	4603      	mov	r3, r0
 800835c:	6039      	str	r1, [r7, #0]
 800835e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	2212      	movs	r2, #18
 8008364:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008366:	4b03      	ldr	r3, [pc, #12]	; (8008374 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008368:	4618      	mov	r0, r3
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	bc80      	pop	{r7}
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	20000148 	.word	0x20000148

08008378 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	4603      	mov	r3, r0
 8008380:	6039      	str	r1, [r7, #0]
 8008382:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	2204      	movs	r2, #4
 8008388:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800838a:	4b03      	ldr	r3, [pc, #12]	; (8008398 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800838c:	4618      	mov	r0, r3
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	bc80      	pop	{r7}
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	2000015c 	.word	0x2000015c

0800839c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	4603      	mov	r3, r0
 80083a4:	6039      	str	r1, [r7, #0]
 80083a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083a8:	79fb      	ldrb	r3, [r7, #7]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d105      	bne.n	80083ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083ae:	683a      	ldr	r2, [r7, #0]
 80083b0:	4907      	ldr	r1, [pc, #28]	; (80083d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80083b2:	4808      	ldr	r0, [pc, #32]	; (80083d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80083b4:	f7ff fc24 	bl	8007c00 <USBD_GetString>
 80083b8:	e004      	b.n	80083c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083ba:	683a      	ldr	r2, [r7, #0]
 80083bc:	4904      	ldr	r1, [pc, #16]	; (80083d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80083be:	4805      	ldr	r0, [pc, #20]	; (80083d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80083c0:	f7ff fc1e 	bl	8007c00 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083c4:	4b02      	ldr	r3, [pc, #8]	; (80083d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	20000d54 	.word	0x20000d54
 80083d4:	08009484 	.word	0x08009484

080083d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	4603      	mov	r3, r0
 80083e0:	6039      	str	r1, [r7, #0]
 80083e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80083e4:	683a      	ldr	r2, [r7, #0]
 80083e6:	4904      	ldr	r1, [pc, #16]	; (80083f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80083e8:	4804      	ldr	r0, [pc, #16]	; (80083fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80083ea:	f7ff fc09 	bl	8007c00 <USBD_GetString>
  return USBD_StrDesc;
 80083ee:	4b02      	ldr	r3, [pc, #8]	; (80083f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	20000d54 	.word	0x20000d54
 80083fc:	0800949c 	.word	0x0800949c

08008400 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	4603      	mov	r3, r0
 8008408:	6039      	str	r1, [r7, #0]
 800840a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	221a      	movs	r2, #26
 8008410:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008412:	f000 f843 	bl	800849c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008416:	4b02      	ldr	r3, [pc, #8]	; (8008420 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008418:	4618      	mov	r0, r3
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	20000160 	.word	0x20000160

08008424 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	4603      	mov	r3, r0
 800842c:	6039      	str	r1, [r7, #0]
 800842e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008430:	79fb      	ldrb	r3, [r7, #7]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d105      	bne.n	8008442 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008436:	683a      	ldr	r2, [r7, #0]
 8008438:	4907      	ldr	r1, [pc, #28]	; (8008458 <USBD_FS_ConfigStrDescriptor+0x34>)
 800843a:	4808      	ldr	r0, [pc, #32]	; (800845c <USBD_FS_ConfigStrDescriptor+0x38>)
 800843c:	f7ff fbe0 	bl	8007c00 <USBD_GetString>
 8008440:	e004      	b.n	800844c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	4904      	ldr	r1, [pc, #16]	; (8008458 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008446:	4805      	ldr	r0, [pc, #20]	; (800845c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008448:	f7ff fbda 	bl	8007c00 <USBD_GetString>
  }
  return USBD_StrDesc;
 800844c:	4b02      	ldr	r3, [pc, #8]	; (8008458 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800844e:	4618      	mov	r0, r3
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	20000d54 	.word	0x20000d54
 800845c:	080094b0 	.word	0x080094b0

08008460 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	4603      	mov	r3, r0
 8008468:	6039      	str	r1, [r7, #0]
 800846a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800846c:	79fb      	ldrb	r3, [r7, #7]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d105      	bne.n	800847e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	4907      	ldr	r1, [pc, #28]	; (8008494 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008476:	4808      	ldr	r0, [pc, #32]	; (8008498 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008478:	f7ff fbc2 	bl	8007c00 <USBD_GetString>
 800847c:	e004      	b.n	8008488 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	4904      	ldr	r1, [pc, #16]	; (8008494 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008482:	4805      	ldr	r0, [pc, #20]	; (8008498 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008484:	f7ff fbbc 	bl	8007c00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008488:	4b02      	ldr	r3, [pc, #8]	; (8008494 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800848a:	4618      	mov	r0, r3
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	20000d54 	.word	0x20000d54
 8008498:	080094bc 	.word	0x080094bc

0800849c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80084a2:	4b0f      	ldr	r3, [pc, #60]	; (80084e0 <Get_SerialNum+0x44>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80084a8:	4b0e      	ldr	r3, [pc, #56]	; (80084e4 <Get_SerialNum+0x48>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80084ae:	4b0e      	ldr	r3, [pc, #56]	; (80084e8 <Get_SerialNum+0x4c>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4413      	add	r3, r2
 80084ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d009      	beq.n	80084d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80084c2:	2208      	movs	r2, #8
 80084c4:	4909      	ldr	r1, [pc, #36]	; (80084ec <Get_SerialNum+0x50>)
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f000 f814 	bl	80084f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80084cc:	2204      	movs	r2, #4
 80084ce:	4908      	ldr	r1, [pc, #32]	; (80084f0 <Get_SerialNum+0x54>)
 80084d0:	68b8      	ldr	r0, [r7, #8]
 80084d2:	f000 f80f 	bl	80084f4 <IntToUnicode>
  }
}
 80084d6:	bf00      	nop
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	1ff80050 	.word	0x1ff80050
 80084e4:	1ff80054 	.word	0x1ff80054
 80084e8:	1ff80058 	.word	0x1ff80058
 80084ec:	20000162 	.word	0x20000162
 80084f0:	20000172 	.word	0x20000172

080084f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b087      	sub	sp, #28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	4613      	mov	r3, r2
 8008500:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008502:	2300      	movs	r3, #0
 8008504:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008506:	2300      	movs	r3, #0
 8008508:	75fb      	strb	r3, [r7, #23]
 800850a:	e027      	b.n	800855c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	0f1b      	lsrs	r3, r3, #28
 8008510:	2b09      	cmp	r3, #9
 8008512:	d80b      	bhi.n	800852c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	0f1b      	lsrs	r3, r3, #28
 8008518:	b2da      	uxtb	r2, r3
 800851a:	7dfb      	ldrb	r3, [r7, #23]
 800851c:	005b      	lsls	r3, r3, #1
 800851e:	4619      	mov	r1, r3
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	440b      	add	r3, r1
 8008524:	3230      	adds	r2, #48	; 0x30
 8008526:	b2d2      	uxtb	r2, r2
 8008528:	701a      	strb	r2, [r3, #0]
 800852a:	e00a      	b.n	8008542 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	0f1b      	lsrs	r3, r3, #28
 8008530:	b2da      	uxtb	r2, r3
 8008532:	7dfb      	ldrb	r3, [r7, #23]
 8008534:	005b      	lsls	r3, r3, #1
 8008536:	4619      	mov	r1, r3
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	440b      	add	r3, r1
 800853c:	3237      	adds	r2, #55	; 0x37
 800853e:	b2d2      	uxtb	r2, r2
 8008540:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	011b      	lsls	r3, r3, #4
 8008546:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008548:	7dfb      	ldrb	r3, [r7, #23]
 800854a:	005b      	lsls	r3, r3, #1
 800854c:	3301      	adds	r3, #1
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	4413      	add	r3, r2
 8008552:	2200      	movs	r2, #0
 8008554:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008556:	7dfb      	ldrb	r3, [r7, #23]
 8008558:	3301      	adds	r3, #1
 800855a:	75fb      	strb	r3, [r7, #23]
 800855c:	7dfa      	ldrb	r2, [r7, #23]
 800855e:	79fb      	ldrb	r3, [r7, #7]
 8008560:	429a      	cmp	r2, r3
 8008562:	d3d3      	bcc.n	800850c <IntToUnicode+0x18>
  }
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop
 8008568:	371c      	adds	r7, #28
 800856a:	46bd      	mov	sp, r7
 800856c:	bc80      	pop	{r7}
 800856e:	4770      	bx	lr

08008570 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	460b      	mov	r3, r1
 800857a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800857c:	78fb      	ldrb	r3, [r7, #3]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d106      	bne.n	8008590 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8008582:	4b09      	ldr	r3, [pc, #36]	; (80085a8 <HAL_PCDEx_SetConnectionState+0x38>)
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	4a08      	ldr	r2, [pc, #32]	; (80085a8 <HAL_PCDEx_SetConnectionState+0x38>)
 8008588:	f043 0301 	orr.w	r3, r3, #1
 800858c:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 800858e:	e005      	b.n	800859c <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8008590:	4b05      	ldr	r3, [pc, #20]	; (80085a8 <HAL_PCDEx_SetConnectionState+0x38>)
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	4a04      	ldr	r2, [pc, #16]	; (80085a8 <HAL_PCDEx_SetConnectionState+0x38>)
 8008596:	f023 0301 	bic.w	r3, r3, #1
 800859a:	6053      	str	r3, [r2, #4]
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bc80      	pop	{r7}
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	40010000 	.word	0x40010000

080085ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a0d      	ldr	r2, [pc, #52]	; (80085f0 <HAL_PCD_MspInit+0x44>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d113      	bne.n	80085e6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80085be:	4b0d      	ldr	r3, [pc, #52]	; (80085f4 <HAL_PCD_MspInit+0x48>)
 80085c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c2:	4a0c      	ldr	r2, [pc, #48]	; (80085f4 <HAL_PCD_MspInit+0x48>)
 80085c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80085c8:	6253      	str	r3, [r2, #36]	; 0x24
 80085ca:	4b0a      	ldr	r3, [pc, #40]	; (80085f4 <HAL_PCD_MspInit+0x48>)
 80085cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80085d6:	2200      	movs	r2, #0
 80085d8:	2100      	movs	r1, #0
 80085da:	2014      	movs	r0, #20
 80085dc:	f7f8 fb9f 	bl	8000d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80085e0:	2014      	movs	r0, #20
 80085e2:	f7f8 fbb8 	bl	8000d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80085e6:	bf00      	nop
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	40005c00 	.word	0x40005c00
 80085f4:	40023800 	.word	0x40023800

080085f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800860c:	4619      	mov	r1, r3
 800860e:	4610      	mov	r0, r2
 8008610:	f7fe fc3b 	bl	8006e8a <USBD_LL_SetupStage>
}
 8008614:	bf00      	nop
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	460b      	mov	r3, r1
 8008626:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800862e:	78fa      	ldrb	r2, [r7, #3]
 8008630:	6879      	ldr	r1, [r7, #4]
 8008632:	4613      	mov	r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4413      	add	r3, r2
 8008638:	00db      	lsls	r3, r3, #3
 800863a:	440b      	add	r3, r1
 800863c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	78fb      	ldrb	r3, [r7, #3]
 8008644:	4619      	mov	r1, r3
 8008646:	f7fe fc6d 	bl	8006f24 <USBD_LL_DataOutStage>
}
 800864a:	bf00      	nop
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b082      	sub	sp, #8
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	460b      	mov	r3, r1
 800865c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008664:	78fa      	ldrb	r2, [r7, #3]
 8008666:	6879      	ldr	r1, [r7, #4]
 8008668:	4613      	mov	r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4413      	add	r3, r2
 800866e:	00db      	lsls	r3, r3, #3
 8008670:	440b      	add	r3, r1
 8008672:	333c      	adds	r3, #60	; 0x3c
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	78fb      	ldrb	r3, [r7, #3]
 8008678:	4619      	mov	r1, r3
 800867a:	f7fe fcc4 	bl	8007006 <USBD_LL_DataInStage>
}
 800867e:	bf00      	nop
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b082      	sub	sp, #8
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008694:	4618      	mov	r0, r3
 8008696:	f7fe fdcf 	bl	8007238 <USBD_LL_SOF>
}
 800869a:	bf00      	nop
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b084      	sub	sp, #16
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80086aa:	2301      	movs	r3, #1
 80086ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d001      	beq.n	80086ba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80086b6:	f7f8 f87b 	bl	80007b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086c0:	7bfa      	ldrb	r2, [r7, #15]
 80086c2:	4611      	mov	r1, r2
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7fe fd84 	bl	80071d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fe fd3d 	bl	8007150 <USBD_LL_Reset>
}
 80086d6:	bf00      	nop
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
	...

080086e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7fe fd7e 	bl	80071f0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d005      	beq.n	8008708 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086fc:	4b04      	ldr	r3, [pc, #16]	; (8008710 <HAL_PCD_SuspendCallback+0x30>)
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	4a03      	ldr	r2, [pc, #12]	; (8008710 <HAL_PCD_SuspendCallback+0x30>)
 8008702:	f043 0306 	orr.w	r3, r3, #6
 8008706:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008708:	bf00      	nop
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	e000ed00 	.word	0xe000ed00

08008714 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe fd78 	bl	8007218 <USBD_LL_Resume>
}
 8008728:	bf00      	nop
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008738:	4a28      	ldr	r2, [pc, #160]	; (80087dc <USBD_LL_Init+0xac>)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a26      	ldr	r2, [pc, #152]	; (80087dc <USBD_LL_Init+0xac>)
 8008744:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8008748:	4b24      	ldr	r3, [pc, #144]	; (80087dc <USBD_LL_Init+0xac>)
 800874a:	4a25      	ldr	r2, [pc, #148]	; (80087e0 <USBD_LL_Init+0xb0>)
 800874c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800874e:	4b23      	ldr	r3, [pc, #140]	; (80087dc <USBD_LL_Init+0xac>)
 8008750:	2208      	movs	r2, #8
 8008752:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008754:	4b21      	ldr	r3, [pc, #132]	; (80087dc <USBD_LL_Init+0xac>)
 8008756:	2202      	movs	r2, #2
 8008758:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800875a:	4b20      	ldr	r3, [pc, #128]	; (80087dc <USBD_LL_Init+0xac>)
 800875c:	2202      	movs	r2, #2
 800875e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008760:	4b1e      	ldr	r3, [pc, #120]	; (80087dc <USBD_LL_Init+0xac>)
 8008762:	2200      	movs	r2, #0
 8008764:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008766:	4b1d      	ldr	r3, [pc, #116]	; (80087dc <USBD_LL_Init+0xac>)
 8008768:	2200      	movs	r2, #0
 800876a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800876c:	481b      	ldr	r0, [pc, #108]	; (80087dc <USBD_LL_Init+0xac>)
 800876e:	f7f8 fe01 	bl	8001374 <HAL_PCD_Init>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d001      	beq.n	800877c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008778:	f7f8 f81a 	bl	80007b0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008782:	2318      	movs	r3, #24
 8008784:	2200      	movs	r2, #0
 8008786:	2100      	movs	r1, #0
 8008788:	f7fa f9de 	bl	8002b48 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008792:	2358      	movs	r3, #88	; 0x58
 8008794:	2200      	movs	r2, #0
 8008796:	2180      	movs	r1, #128	; 0x80
 8008798:	f7fa f9d6 	bl	8002b48 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80087a2:	23c0      	movs	r3, #192	; 0xc0
 80087a4:	2200      	movs	r2, #0
 80087a6:	2181      	movs	r1, #129	; 0x81
 80087a8:	f7fa f9ce 	bl	8002b48 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80087b2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80087b6:	2200      	movs	r2, #0
 80087b8:	2101      	movs	r1, #1
 80087ba:	f7fa f9c5 	bl	8002b48 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80087c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087c8:	2200      	movs	r2, #0
 80087ca:	2182      	movs	r1, #130	; 0x82
 80087cc:	f7fa f9bc 	bl	8002b48 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	20000f54 	.word	0x20000f54
 80087e0:	40005c00 	.word	0x40005c00

080087e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7f8 fe98 	bl	8001530 <HAL_PCD_Start>
 8008800:	4603      	mov	r3, r0
 8008802:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	4618      	mov	r0, r3
 8008808:	f000 f944 	bl	8008a94 <USBD_Get_USB_Status>
 800880c:	4603      	mov	r3, r0
 800880e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008810:	7bbb      	ldrb	r3, [r7, #14]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b084      	sub	sp, #16
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	4608      	mov	r0, r1
 8008824:	4611      	mov	r1, r2
 8008826:	461a      	mov	r2, r3
 8008828:	4603      	mov	r3, r0
 800882a:	70fb      	strb	r3, [r7, #3]
 800882c:	460b      	mov	r3, r1
 800882e:	70bb      	strb	r3, [r7, #2]
 8008830:	4613      	mov	r3, r2
 8008832:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008834:	2300      	movs	r3, #0
 8008836:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008842:	78bb      	ldrb	r3, [r7, #2]
 8008844:	883a      	ldrh	r2, [r7, #0]
 8008846:	78f9      	ldrb	r1, [r7, #3]
 8008848:	f7f8 ffb4 	bl	80017b4 <HAL_PCD_EP_Open>
 800884c:	4603      	mov	r3, r0
 800884e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008850:	7bfb      	ldrb	r3, [r7, #15]
 8008852:	4618      	mov	r0, r3
 8008854:	f000 f91e 	bl	8008a94 <USBD_Get_USB_Status>
 8008858:	4603      	mov	r3, r0
 800885a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800885c:	7bbb      	ldrb	r3, [r7, #14]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b084      	sub	sp, #16
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
 800886e:	460b      	mov	r3, r1
 8008870:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008880:	78fa      	ldrb	r2, [r7, #3]
 8008882:	4611      	mov	r1, r2
 8008884:	4618      	mov	r0, r3
 8008886:	f7f8 fffb 	bl	8001880 <HAL_PCD_EP_Close>
 800888a:	4603      	mov	r3, r0
 800888c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	4618      	mov	r0, r3
 8008892:	f000 f8ff 	bl	8008a94 <USBD_Get_USB_Status>
 8008896:	4603      	mov	r3, r0
 8008898:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800889a:	7bbb      	ldrb	r3, [r7, #14]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80088be:	78fa      	ldrb	r2, [r7, #3]
 80088c0:	4611      	mov	r1, r2
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7f9 f8bb 	bl	8001a3e <HAL_PCD_EP_SetStall>
 80088c8:	4603      	mov	r3, r0
 80088ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 f8e0 	bl	8008a94 <USBD_Get_USB_Status>
 80088d4:	4603      	mov	r3, r0
 80088d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	460b      	mov	r3, r1
 80088ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088f2:	2300      	movs	r3, #0
 80088f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80088fc:	78fa      	ldrb	r2, [r7, #3]
 80088fe:	4611      	mov	r1, r2
 8008900:	4618      	mov	r0, r3
 8008902:	f7f9 f8ee 	bl	8001ae2 <HAL_PCD_EP_ClrStall>
 8008906:	4603      	mov	r3, r0
 8008908:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800890a:	7bfb      	ldrb	r3, [r7, #15]
 800890c:	4618      	mov	r0, r3
 800890e:	f000 f8c1 	bl	8008a94 <USBD_Get_USB_Status>
 8008912:	4603      	mov	r3, r0
 8008914:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008916:	7bbb      	ldrb	r3, [r7, #14]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008932:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008934:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008938:	2b00      	cmp	r3, #0
 800893a:	da0c      	bge.n	8008956 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800893c:	78fb      	ldrb	r3, [r7, #3]
 800893e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008942:	68f9      	ldr	r1, [r7, #12]
 8008944:	1c5a      	adds	r2, r3, #1
 8008946:	4613      	mov	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4413      	add	r3, r2
 800894c:	00db      	lsls	r3, r3, #3
 800894e:	440b      	add	r3, r1
 8008950:	3302      	adds	r3, #2
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	e00b      	b.n	800896e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008956:	78fb      	ldrb	r3, [r7, #3]
 8008958:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800895c:	68f9      	ldr	r1, [r7, #12]
 800895e:	4613      	mov	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	00db      	lsls	r3, r3, #3
 8008966:	440b      	add	r3, r1
 8008968:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800896c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800896e:	4618      	mov	r0, r3
 8008970:	3714      	adds	r7, #20
 8008972:	46bd      	mov	sp, r7
 8008974:	bc80      	pop	{r7}
 8008976:	4770      	bx	lr

08008978 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	460b      	mov	r3, r1
 8008982:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008988:	2300      	movs	r3, #0
 800898a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008992:	78fa      	ldrb	r2, [r7, #3]
 8008994:	4611      	mov	r1, r2
 8008996:	4618      	mov	r0, r3
 8008998:	f7f8 fee7 	bl	800176a <HAL_PCD_SetAddress>
 800899c:	4603      	mov	r3, r0
 800899e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 f876 	bl	8008a94 <USBD_Get_USB_Status>
 80089a8:	4603      	mov	r3, r0
 80089aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b086      	sub	sp, #24
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	60f8      	str	r0, [r7, #12]
 80089be:	607a      	str	r2, [r7, #4]
 80089c0:	461a      	mov	r2, r3
 80089c2:	460b      	mov	r3, r1
 80089c4:	72fb      	strb	r3, [r7, #11]
 80089c6:	4613      	mov	r3, r2
 80089c8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80089d8:	893b      	ldrh	r3, [r7, #8]
 80089da:	7af9      	ldrb	r1, [r7, #11]
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	f7f8 ffeb 	bl	80019b8 <HAL_PCD_EP_Transmit>
 80089e2:	4603      	mov	r3, r0
 80089e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089e6:	7dfb      	ldrb	r3, [r7, #23]
 80089e8:	4618      	mov	r0, r3
 80089ea:	f000 f853 	bl	8008a94 <USBD_Get_USB_Status>
 80089ee:	4603      	mov	r3, r0
 80089f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3718      	adds	r7, #24
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	607a      	str	r2, [r7, #4]
 8008a06:	461a      	mov	r2, r3
 8008a08:	460b      	mov	r3, r1
 8008a0a:	72fb      	strb	r3, [r7, #11]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008a1e:	893b      	ldrh	r3, [r7, #8]
 8008a20:	7af9      	ldrb	r1, [r7, #11]
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	f7f8 ff74 	bl	8001910 <HAL_PCD_EP_Receive>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a2c:	7dfb      	ldrb	r3, [r7, #23]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f000 f830 	bl	8008a94 <USBD_Get_USB_Status>
 8008a34:	4603      	mov	r3, r0
 8008a36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a38:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b082      	sub	sp, #8
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008a54:	78fa      	ldrb	r2, [r7, #3]
 8008a56:	4611      	mov	r1, r2
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7f8 ff96 	bl	800198a <HAL_PCD_EP_GetRxCount>
 8008a5e:	4603      	mov	r3, r0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008a70:	4b02      	ldr	r3, [pc, #8]	; (8008a7c <USBD_static_malloc+0x14>)
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	370c      	adds	r7, #12
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bc80      	pop	{r7}
 8008a7a:	4770      	bx	lr
 8008a7c:	20001240 	.word	0x20001240

08008a80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]

}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bc80      	pop	{r7}
 8008a90:	4770      	bx	lr
	...

08008a94 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008aa2:	79fb      	ldrb	r3, [r7, #7]
 8008aa4:	2b03      	cmp	r3, #3
 8008aa6:	d817      	bhi.n	8008ad8 <USBD_Get_USB_Status+0x44>
 8008aa8:	a201      	add	r2, pc, #4	; (adr r2, 8008ab0 <USBD_Get_USB_Status+0x1c>)
 8008aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aae:	bf00      	nop
 8008ab0:	08008ac1 	.word	0x08008ac1
 8008ab4:	08008ac7 	.word	0x08008ac7
 8008ab8:	08008acd 	.word	0x08008acd
 8008abc:	08008ad3 	.word	0x08008ad3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ac4:	e00b      	b.n	8008ade <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ac6:	2302      	movs	r3, #2
 8008ac8:	73fb      	strb	r3, [r7, #15]
    break;
 8008aca:	e008      	b.n	8008ade <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008acc:	2301      	movs	r3, #1
 8008ace:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad0:	e005      	b.n	8008ade <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad6:	e002      	b.n	8008ade <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ad8:	2302      	movs	r3, #2
 8008ada:	73fb      	strb	r3, [r7, #15]
    break;
 8008adc:	bf00      	nop
  }
  return usb_status;
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bc80      	pop	{r7}
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop

08008aec <__errno>:
 8008aec:	4b01      	ldr	r3, [pc, #4]	; (8008af4 <__errno+0x8>)
 8008aee:	6818      	ldr	r0, [r3, #0]
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	2000017c 	.word	0x2000017c

08008af8 <__libc_init_array>:
 8008af8:	b570      	push	{r4, r5, r6, lr}
 8008afa:	2600      	movs	r6, #0
 8008afc:	4d0c      	ldr	r5, [pc, #48]	; (8008b30 <__libc_init_array+0x38>)
 8008afe:	4c0d      	ldr	r4, [pc, #52]	; (8008b34 <__libc_init_array+0x3c>)
 8008b00:	1b64      	subs	r4, r4, r5
 8008b02:	10a4      	asrs	r4, r4, #2
 8008b04:	42a6      	cmp	r6, r4
 8008b06:	d109      	bne.n	8008b1c <__libc_init_array+0x24>
 8008b08:	f000 fc9c 	bl	8009444 <_init>
 8008b0c:	2600      	movs	r6, #0
 8008b0e:	4d0a      	ldr	r5, [pc, #40]	; (8008b38 <__libc_init_array+0x40>)
 8008b10:	4c0a      	ldr	r4, [pc, #40]	; (8008b3c <__libc_init_array+0x44>)
 8008b12:	1b64      	subs	r4, r4, r5
 8008b14:	10a4      	asrs	r4, r4, #2
 8008b16:	42a6      	cmp	r6, r4
 8008b18:	d105      	bne.n	8008b26 <__libc_init_array+0x2e>
 8008b1a:	bd70      	pop	{r4, r5, r6, pc}
 8008b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b20:	4798      	blx	r3
 8008b22:	3601      	adds	r6, #1
 8008b24:	e7ee      	b.n	8008b04 <__libc_init_array+0xc>
 8008b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b2a:	4798      	blx	r3
 8008b2c:	3601      	adds	r6, #1
 8008b2e:	e7f2      	b.n	8008b16 <__libc_init_array+0x1e>
 8008b30:	0800952c 	.word	0x0800952c
 8008b34:	0800952c 	.word	0x0800952c
 8008b38:	0800952c 	.word	0x0800952c
 8008b3c:	08009530 	.word	0x08009530

08008b40 <memset>:
 8008b40:	4603      	mov	r3, r0
 8008b42:	4402      	add	r2, r0
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d100      	bne.n	8008b4a <memset+0xa>
 8008b48:	4770      	bx	lr
 8008b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b4e:	e7f9      	b.n	8008b44 <memset+0x4>

08008b50 <siprintf>:
 8008b50:	b40e      	push	{r1, r2, r3}
 8008b52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b56:	b500      	push	{lr}
 8008b58:	b09c      	sub	sp, #112	; 0x70
 8008b5a:	ab1d      	add	r3, sp, #116	; 0x74
 8008b5c:	9002      	str	r0, [sp, #8]
 8008b5e:	9006      	str	r0, [sp, #24]
 8008b60:	9107      	str	r1, [sp, #28]
 8008b62:	9104      	str	r1, [sp, #16]
 8008b64:	4808      	ldr	r0, [pc, #32]	; (8008b88 <siprintf+0x38>)
 8008b66:	4909      	ldr	r1, [pc, #36]	; (8008b8c <siprintf+0x3c>)
 8008b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b6c:	9105      	str	r1, [sp, #20]
 8008b6e:	6800      	ldr	r0, [r0, #0]
 8008b70:	a902      	add	r1, sp, #8
 8008b72:	9301      	str	r3, [sp, #4]
 8008b74:	f000 f868 	bl	8008c48 <_svfiprintf_r>
 8008b78:	2200      	movs	r2, #0
 8008b7a:	9b02      	ldr	r3, [sp, #8]
 8008b7c:	701a      	strb	r2, [r3, #0]
 8008b7e:	b01c      	add	sp, #112	; 0x70
 8008b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b84:	b003      	add	sp, #12
 8008b86:	4770      	bx	lr
 8008b88:	2000017c 	.word	0x2000017c
 8008b8c:	ffff0208 	.word	0xffff0208

08008b90 <__ssputs_r>:
 8008b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b94:	688e      	ldr	r6, [r1, #8]
 8008b96:	4682      	mov	sl, r0
 8008b98:	429e      	cmp	r6, r3
 8008b9a:	460c      	mov	r4, r1
 8008b9c:	4690      	mov	r8, r2
 8008b9e:	461f      	mov	r7, r3
 8008ba0:	d838      	bhi.n	8008c14 <__ssputs_r+0x84>
 8008ba2:	898a      	ldrh	r2, [r1, #12]
 8008ba4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ba8:	d032      	beq.n	8008c10 <__ssputs_r+0x80>
 8008baa:	6825      	ldr	r5, [r4, #0]
 8008bac:	6909      	ldr	r1, [r1, #16]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	eba5 0901 	sub.w	r9, r5, r1
 8008bb4:	6965      	ldr	r5, [r4, #20]
 8008bb6:	444b      	add	r3, r9
 8008bb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bc0:	106d      	asrs	r5, r5, #1
 8008bc2:	429d      	cmp	r5, r3
 8008bc4:	bf38      	it	cc
 8008bc6:	461d      	movcc	r5, r3
 8008bc8:	0553      	lsls	r3, r2, #21
 8008bca:	d531      	bpl.n	8008c30 <__ssputs_r+0xa0>
 8008bcc:	4629      	mov	r1, r5
 8008bce:	f000 fb6f 	bl	80092b0 <_malloc_r>
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	b950      	cbnz	r0, 8008bec <__ssputs_r+0x5c>
 8008bd6:	230c      	movs	r3, #12
 8008bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bdc:	f8ca 3000 	str.w	r3, [sl]
 8008be0:	89a3      	ldrh	r3, [r4, #12]
 8008be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008be6:	81a3      	strh	r3, [r4, #12]
 8008be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bec:	464a      	mov	r2, r9
 8008bee:	6921      	ldr	r1, [r4, #16]
 8008bf0:	f000 face 	bl	8009190 <memcpy>
 8008bf4:	89a3      	ldrh	r3, [r4, #12]
 8008bf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bfe:	81a3      	strh	r3, [r4, #12]
 8008c00:	6126      	str	r6, [r4, #16]
 8008c02:	444e      	add	r6, r9
 8008c04:	6026      	str	r6, [r4, #0]
 8008c06:	463e      	mov	r6, r7
 8008c08:	6165      	str	r5, [r4, #20]
 8008c0a:	eba5 0509 	sub.w	r5, r5, r9
 8008c0e:	60a5      	str	r5, [r4, #8]
 8008c10:	42be      	cmp	r6, r7
 8008c12:	d900      	bls.n	8008c16 <__ssputs_r+0x86>
 8008c14:	463e      	mov	r6, r7
 8008c16:	4632      	mov	r2, r6
 8008c18:	4641      	mov	r1, r8
 8008c1a:	6820      	ldr	r0, [r4, #0]
 8008c1c:	f000 fac6 	bl	80091ac <memmove>
 8008c20:	68a3      	ldr	r3, [r4, #8]
 8008c22:	2000      	movs	r0, #0
 8008c24:	1b9b      	subs	r3, r3, r6
 8008c26:	60a3      	str	r3, [r4, #8]
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	4433      	add	r3, r6
 8008c2c:	6023      	str	r3, [r4, #0]
 8008c2e:	e7db      	b.n	8008be8 <__ssputs_r+0x58>
 8008c30:	462a      	mov	r2, r5
 8008c32:	f000 fbb1 	bl	8009398 <_realloc_r>
 8008c36:	4606      	mov	r6, r0
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	d1e1      	bne.n	8008c00 <__ssputs_r+0x70>
 8008c3c:	4650      	mov	r0, sl
 8008c3e:	6921      	ldr	r1, [r4, #16]
 8008c40:	f000 face 	bl	80091e0 <_free_r>
 8008c44:	e7c7      	b.n	8008bd6 <__ssputs_r+0x46>
	...

08008c48 <_svfiprintf_r>:
 8008c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4c:	4698      	mov	r8, r3
 8008c4e:	898b      	ldrh	r3, [r1, #12]
 8008c50:	4607      	mov	r7, r0
 8008c52:	061b      	lsls	r3, r3, #24
 8008c54:	460d      	mov	r5, r1
 8008c56:	4614      	mov	r4, r2
 8008c58:	b09d      	sub	sp, #116	; 0x74
 8008c5a:	d50e      	bpl.n	8008c7a <_svfiprintf_r+0x32>
 8008c5c:	690b      	ldr	r3, [r1, #16]
 8008c5e:	b963      	cbnz	r3, 8008c7a <_svfiprintf_r+0x32>
 8008c60:	2140      	movs	r1, #64	; 0x40
 8008c62:	f000 fb25 	bl	80092b0 <_malloc_r>
 8008c66:	6028      	str	r0, [r5, #0]
 8008c68:	6128      	str	r0, [r5, #16]
 8008c6a:	b920      	cbnz	r0, 8008c76 <_svfiprintf_r+0x2e>
 8008c6c:	230c      	movs	r3, #12
 8008c6e:	603b      	str	r3, [r7, #0]
 8008c70:	f04f 30ff 	mov.w	r0, #4294967295
 8008c74:	e0d1      	b.n	8008e1a <_svfiprintf_r+0x1d2>
 8008c76:	2340      	movs	r3, #64	; 0x40
 8008c78:	616b      	str	r3, [r5, #20]
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c7e:	2320      	movs	r3, #32
 8008c80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c84:	2330      	movs	r3, #48	; 0x30
 8008c86:	f04f 0901 	mov.w	r9, #1
 8008c8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c8e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008e34 <_svfiprintf_r+0x1ec>
 8008c92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c96:	4623      	mov	r3, r4
 8008c98:	469a      	mov	sl, r3
 8008c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c9e:	b10a      	cbz	r2, 8008ca4 <_svfiprintf_r+0x5c>
 8008ca0:	2a25      	cmp	r2, #37	; 0x25
 8008ca2:	d1f9      	bne.n	8008c98 <_svfiprintf_r+0x50>
 8008ca4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ca8:	d00b      	beq.n	8008cc2 <_svfiprintf_r+0x7a>
 8008caa:	465b      	mov	r3, fp
 8008cac:	4622      	mov	r2, r4
 8008cae:	4629      	mov	r1, r5
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	f7ff ff6d 	bl	8008b90 <__ssputs_r>
 8008cb6:	3001      	adds	r0, #1
 8008cb8:	f000 80aa 	beq.w	8008e10 <_svfiprintf_r+0x1c8>
 8008cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cbe:	445a      	add	r2, fp
 8008cc0:	9209      	str	r2, [sp, #36]	; 0x24
 8008cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f000 80a2 	beq.w	8008e10 <_svfiprintf_r+0x1c8>
 8008ccc:	2300      	movs	r3, #0
 8008cce:	f04f 32ff 	mov.w	r2, #4294967295
 8008cd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cd6:	f10a 0a01 	add.w	sl, sl, #1
 8008cda:	9304      	str	r3, [sp, #16]
 8008cdc:	9307      	str	r3, [sp, #28]
 8008cde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ce2:	931a      	str	r3, [sp, #104]	; 0x68
 8008ce4:	4654      	mov	r4, sl
 8008ce6:	2205      	movs	r2, #5
 8008ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cec:	4851      	ldr	r0, [pc, #324]	; (8008e34 <_svfiprintf_r+0x1ec>)
 8008cee:	f000 fa41 	bl	8009174 <memchr>
 8008cf2:	9a04      	ldr	r2, [sp, #16]
 8008cf4:	b9d8      	cbnz	r0, 8008d2e <_svfiprintf_r+0xe6>
 8008cf6:	06d0      	lsls	r0, r2, #27
 8008cf8:	bf44      	itt	mi
 8008cfa:	2320      	movmi	r3, #32
 8008cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d00:	0711      	lsls	r1, r2, #28
 8008d02:	bf44      	itt	mi
 8008d04:	232b      	movmi	r3, #43	; 0x2b
 8008d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d10:	d015      	beq.n	8008d3e <_svfiprintf_r+0xf6>
 8008d12:	4654      	mov	r4, sl
 8008d14:	2000      	movs	r0, #0
 8008d16:	f04f 0c0a 	mov.w	ip, #10
 8008d1a:	9a07      	ldr	r2, [sp, #28]
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d22:	3b30      	subs	r3, #48	; 0x30
 8008d24:	2b09      	cmp	r3, #9
 8008d26:	d94e      	bls.n	8008dc6 <_svfiprintf_r+0x17e>
 8008d28:	b1b0      	cbz	r0, 8008d58 <_svfiprintf_r+0x110>
 8008d2a:	9207      	str	r2, [sp, #28]
 8008d2c:	e014      	b.n	8008d58 <_svfiprintf_r+0x110>
 8008d2e:	eba0 0308 	sub.w	r3, r0, r8
 8008d32:	fa09 f303 	lsl.w	r3, r9, r3
 8008d36:	4313      	orrs	r3, r2
 8008d38:	46a2      	mov	sl, r4
 8008d3a:	9304      	str	r3, [sp, #16]
 8008d3c:	e7d2      	b.n	8008ce4 <_svfiprintf_r+0x9c>
 8008d3e:	9b03      	ldr	r3, [sp, #12]
 8008d40:	1d19      	adds	r1, r3, #4
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	9103      	str	r1, [sp, #12]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	bfbb      	ittet	lt
 8008d4a:	425b      	neglt	r3, r3
 8008d4c:	f042 0202 	orrlt.w	r2, r2, #2
 8008d50:	9307      	strge	r3, [sp, #28]
 8008d52:	9307      	strlt	r3, [sp, #28]
 8008d54:	bfb8      	it	lt
 8008d56:	9204      	strlt	r2, [sp, #16]
 8008d58:	7823      	ldrb	r3, [r4, #0]
 8008d5a:	2b2e      	cmp	r3, #46	; 0x2e
 8008d5c:	d10c      	bne.n	8008d78 <_svfiprintf_r+0x130>
 8008d5e:	7863      	ldrb	r3, [r4, #1]
 8008d60:	2b2a      	cmp	r3, #42	; 0x2a
 8008d62:	d135      	bne.n	8008dd0 <_svfiprintf_r+0x188>
 8008d64:	9b03      	ldr	r3, [sp, #12]
 8008d66:	3402      	adds	r4, #2
 8008d68:	1d1a      	adds	r2, r3, #4
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	9203      	str	r2, [sp, #12]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	bfb8      	it	lt
 8008d72:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d76:	9305      	str	r3, [sp, #20]
 8008d78:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008e38 <_svfiprintf_r+0x1f0>
 8008d7c:	2203      	movs	r2, #3
 8008d7e:	4650      	mov	r0, sl
 8008d80:	7821      	ldrb	r1, [r4, #0]
 8008d82:	f000 f9f7 	bl	8009174 <memchr>
 8008d86:	b140      	cbz	r0, 8008d9a <_svfiprintf_r+0x152>
 8008d88:	2340      	movs	r3, #64	; 0x40
 8008d8a:	eba0 000a 	sub.w	r0, r0, sl
 8008d8e:	fa03 f000 	lsl.w	r0, r3, r0
 8008d92:	9b04      	ldr	r3, [sp, #16]
 8008d94:	3401      	adds	r4, #1
 8008d96:	4303      	orrs	r3, r0
 8008d98:	9304      	str	r3, [sp, #16]
 8008d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d9e:	2206      	movs	r2, #6
 8008da0:	4826      	ldr	r0, [pc, #152]	; (8008e3c <_svfiprintf_r+0x1f4>)
 8008da2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008da6:	f000 f9e5 	bl	8009174 <memchr>
 8008daa:	2800      	cmp	r0, #0
 8008dac:	d038      	beq.n	8008e20 <_svfiprintf_r+0x1d8>
 8008dae:	4b24      	ldr	r3, [pc, #144]	; (8008e40 <_svfiprintf_r+0x1f8>)
 8008db0:	bb1b      	cbnz	r3, 8008dfa <_svfiprintf_r+0x1b2>
 8008db2:	9b03      	ldr	r3, [sp, #12]
 8008db4:	3307      	adds	r3, #7
 8008db6:	f023 0307 	bic.w	r3, r3, #7
 8008dba:	3308      	adds	r3, #8
 8008dbc:	9303      	str	r3, [sp, #12]
 8008dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc0:	4433      	add	r3, r6
 8008dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8008dc4:	e767      	b.n	8008c96 <_svfiprintf_r+0x4e>
 8008dc6:	460c      	mov	r4, r1
 8008dc8:	2001      	movs	r0, #1
 8008dca:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dce:	e7a5      	b.n	8008d1c <_svfiprintf_r+0xd4>
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	f04f 0c0a 	mov.w	ip, #10
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	3401      	adds	r4, #1
 8008dda:	9305      	str	r3, [sp, #20]
 8008ddc:	4620      	mov	r0, r4
 8008dde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008de2:	3a30      	subs	r2, #48	; 0x30
 8008de4:	2a09      	cmp	r2, #9
 8008de6:	d903      	bls.n	8008df0 <_svfiprintf_r+0x1a8>
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d0c5      	beq.n	8008d78 <_svfiprintf_r+0x130>
 8008dec:	9105      	str	r1, [sp, #20]
 8008dee:	e7c3      	b.n	8008d78 <_svfiprintf_r+0x130>
 8008df0:	4604      	mov	r4, r0
 8008df2:	2301      	movs	r3, #1
 8008df4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008df8:	e7f0      	b.n	8008ddc <_svfiprintf_r+0x194>
 8008dfa:	ab03      	add	r3, sp, #12
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	462a      	mov	r2, r5
 8008e00:	4638      	mov	r0, r7
 8008e02:	4b10      	ldr	r3, [pc, #64]	; (8008e44 <_svfiprintf_r+0x1fc>)
 8008e04:	a904      	add	r1, sp, #16
 8008e06:	f3af 8000 	nop.w
 8008e0a:	1c42      	adds	r2, r0, #1
 8008e0c:	4606      	mov	r6, r0
 8008e0e:	d1d6      	bne.n	8008dbe <_svfiprintf_r+0x176>
 8008e10:	89ab      	ldrh	r3, [r5, #12]
 8008e12:	065b      	lsls	r3, r3, #25
 8008e14:	f53f af2c 	bmi.w	8008c70 <_svfiprintf_r+0x28>
 8008e18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e1a:	b01d      	add	sp, #116	; 0x74
 8008e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e20:	ab03      	add	r3, sp, #12
 8008e22:	9300      	str	r3, [sp, #0]
 8008e24:	462a      	mov	r2, r5
 8008e26:	4638      	mov	r0, r7
 8008e28:	4b06      	ldr	r3, [pc, #24]	; (8008e44 <_svfiprintf_r+0x1fc>)
 8008e2a:	a904      	add	r1, sp, #16
 8008e2c:	f000 f87c 	bl	8008f28 <_printf_i>
 8008e30:	e7eb      	b.n	8008e0a <_svfiprintf_r+0x1c2>
 8008e32:	bf00      	nop
 8008e34:	080094f0 	.word	0x080094f0
 8008e38:	080094f6 	.word	0x080094f6
 8008e3c:	080094fa 	.word	0x080094fa
 8008e40:	00000000 	.word	0x00000000
 8008e44:	08008b91 	.word	0x08008b91

08008e48 <_printf_common>:
 8008e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e4c:	4616      	mov	r6, r2
 8008e4e:	4699      	mov	r9, r3
 8008e50:	688a      	ldr	r2, [r1, #8]
 8008e52:	690b      	ldr	r3, [r1, #16]
 8008e54:	4607      	mov	r7, r0
 8008e56:	4293      	cmp	r3, r2
 8008e58:	bfb8      	it	lt
 8008e5a:	4613      	movlt	r3, r2
 8008e5c:	6033      	str	r3, [r6, #0]
 8008e5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e62:	460c      	mov	r4, r1
 8008e64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e68:	b10a      	cbz	r2, 8008e6e <_printf_common+0x26>
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	6033      	str	r3, [r6, #0]
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	0699      	lsls	r1, r3, #26
 8008e72:	bf42      	ittt	mi
 8008e74:	6833      	ldrmi	r3, [r6, #0]
 8008e76:	3302      	addmi	r3, #2
 8008e78:	6033      	strmi	r3, [r6, #0]
 8008e7a:	6825      	ldr	r5, [r4, #0]
 8008e7c:	f015 0506 	ands.w	r5, r5, #6
 8008e80:	d106      	bne.n	8008e90 <_printf_common+0x48>
 8008e82:	f104 0a19 	add.w	sl, r4, #25
 8008e86:	68e3      	ldr	r3, [r4, #12]
 8008e88:	6832      	ldr	r2, [r6, #0]
 8008e8a:	1a9b      	subs	r3, r3, r2
 8008e8c:	42ab      	cmp	r3, r5
 8008e8e:	dc28      	bgt.n	8008ee2 <_printf_common+0x9a>
 8008e90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e94:	1e13      	subs	r3, r2, #0
 8008e96:	6822      	ldr	r2, [r4, #0]
 8008e98:	bf18      	it	ne
 8008e9a:	2301      	movne	r3, #1
 8008e9c:	0692      	lsls	r2, r2, #26
 8008e9e:	d42d      	bmi.n	8008efc <_printf_common+0xb4>
 8008ea0:	4649      	mov	r1, r9
 8008ea2:	4638      	mov	r0, r7
 8008ea4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ea8:	47c0      	blx	r8
 8008eaa:	3001      	adds	r0, #1
 8008eac:	d020      	beq.n	8008ef0 <_printf_common+0xa8>
 8008eae:	6823      	ldr	r3, [r4, #0]
 8008eb0:	68e5      	ldr	r5, [r4, #12]
 8008eb2:	f003 0306 	and.w	r3, r3, #6
 8008eb6:	2b04      	cmp	r3, #4
 8008eb8:	bf18      	it	ne
 8008eba:	2500      	movne	r5, #0
 8008ebc:	6832      	ldr	r2, [r6, #0]
 8008ebe:	f04f 0600 	mov.w	r6, #0
 8008ec2:	68a3      	ldr	r3, [r4, #8]
 8008ec4:	bf08      	it	eq
 8008ec6:	1aad      	subeq	r5, r5, r2
 8008ec8:	6922      	ldr	r2, [r4, #16]
 8008eca:	bf08      	it	eq
 8008ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	bfc4      	itt	gt
 8008ed4:	1a9b      	subgt	r3, r3, r2
 8008ed6:	18ed      	addgt	r5, r5, r3
 8008ed8:	341a      	adds	r4, #26
 8008eda:	42b5      	cmp	r5, r6
 8008edc:	d11a      	bne.n	8008f14 <_printf_common+0xcc>
 8008ede:	2000      	movs	r0, #0
 8008ee0:	e008      	b.n	8008ef4 <_printf_common+0xac>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	4652      	mov	r2, sl
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	4638      	mov	r0, r7
 8008eea:	47c0      	blx	r8
 8008eec:	3001      	adds	r0, #1
 8008eee:	d103      	bne.n	8008ef8 <_printf_common+0xb0>
 8008ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ef8:	3501      	adds	r5, #1
 8008efa:	e7c4      	b.n	8008e86 <_printf_common+0x3e>
 8008efc:	2030      	movs	r0, #48	; 0x30
 8008efe:	18e1      	adds	r1, r4, r3
 8008f00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f04:	1c5a      	adds	r2, r3, #1
 8008f06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f0a:	4422      	add	r2, r4
 8008f0c:	3302      	adds	r3, #2
 8008f0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f12:	e7c5      	b.n	8008ea0 <_printf_common+0x58>
 8008f14:	2301      	movs	r3, #1
 8008f16:	4622      	mov	r2, r4
 8008f18:	4649      	mov	r1, r9
 8008f1a:	4638      	mov	r0, r7
 8008f1c:	47c0      	blx	r8
 8008f1e:	3001      	adds	r0, #1
 8008f20:	d0e6      	beq.n	8008ef0 <_printf_common+0xa8>
 8008f22:	3601      	adds	r6, #1
 8008f24:	e7d9      	b.n	8008eda <_printf_common+0x92>
	...

08008f28 <_printf_i>:
 8008f28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f2c:	7e0f      	ldrb	r7, [r1, #24]
 8008f2e:	4691      	mov	r9, r2
 8008f30:	2f78      	cmp	r7, #120	; 0x78
 8008f32:	4680      	mov	r8, r0
 8008f34:	460c      	mov	r4, r1
 8008f36:	469a      	mov	sl, r3
 8008f38:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f3e:	d807      	bhi.n	8008f50 <_printf_i+0x28>
 8008f40:	2f62      	cmp	r7, #98	; 0x62
 8008f42:	d80a      	bhi.n	8008f5a <_printf_i+0x32>
 8008f44:	2f00      	cmp	r7, #0
 8008f46:	f000 80d9 	beq.w	80090fc <_printf_i+0x1d4>
 8008f4a:	2f58      	cmp	r7, #88	; 0x58
 8008f4c:	f000 80a4 	beq.w	8009098 <_printf_i+0x170>
 8008f50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f58:	e03a      	b.n	8008fd0 <_printf_i+0xa8>
 8008f5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f5e:	2b15      	cmp	r3, #21
 8008f60:	d8f6      	bhi.n	8008f50 <_printf_i+0x28>
 8008f62:	a101      	add	r1, pc, #4	; (adr r1, 8008f68 <_printf_i+0x40>)
 8008f64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f68:	08008fc1 	.word	0x08008fc1
 8008f6c:	08008fd5 	.word	0x08008fd5
 8008f70:	08008f51 	.word	0x08008f51
 8008f74:	08008f51 	.word	0x08008f51
 8008f78:	08008f51 	.word	0x08008f51
 8008f7c:	08008f51 	.word	0x08008f51
 8008f80:	08008fd5 	.word	0x08008fd5
 8008f84:	08008f51 	.word	0x08008f51
 8008f88:	08008f51 	.word	0x08008f51
 8008f8c:	08008f51 	.word	0x08008f51
 8008f90:	08008f51 	.word	0x08008f51
 8008f94:	080090e3 	.word	0x080090e3
 8008f98:	08009005 	.word	0x08009005
 8008f9c:	080090c5 	.word	0x080090c5
 8008fa0:	08008f51 	.word	0x08008f51
 8008fa4:	08008f51 	.word	0x08008f51
 8008fa8:	08009105 	.word	0x08009105
 8008fac:	08008f51 	.word	0x08008f51
 8008fb0:	08009005 	.word	0x08009005
 8008fb4:	08008f51 	.word	0x08008f51
 8008fb8:	08008f51 	.word	0x08008f51
 8008fbc:	080090cd 	.word	0x080090cd
 8008fc0:	682b      	ldr	r3, [r5, #0]
 8008fc2:	1d1a      	adds	r2, r3, #4
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	602a      	str	r2, [r5, #0]
 8008fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e0a4      	b.n	800911e <_printf_i+0x1f6>
 8008fd4:	6820      	ldr	r0, [r4, #0]
 8008fd6:	6829      	ldr	r1, [r5, #0]
 8008fd8:	0606      	lsls	r6, r0, #24
 8008fda:	f101 0304 	add.w	r3, r1, #4
 8008fde:	d50a      	bpl.n	8008ff6 <_printf_i+0xce>
 8008fe0:	680e      	ldr	r6, [r1, #0]
 8008fe2:	602b      	str	r3, [r5, #0]
 8008fe4:	2e00      	cmp	r6, #0
 8008fe6:	da03      	bge.n	8008ff0 <_printf_i+0xc8>
 8008fe8:	232d      	movs	r3, #45	; 0x2d
 8008fea:	4276      	negs	r6, r6
 8008fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ff0:	230a      	movs	r3, #10
 8008ff2:	485e      	ldr	r0, [pc, #376]	; (800916c <_printf_i+0x244>)
 8008ff4:	e019      	b.n	800902a <_printf_i+0x102>
 8008ff6:	680e      	ldr	r6, [r1, #0]
 8008ff8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ffc:	602b      	str	r3, [r5, #0]
 8008ffe:	bf18      	it	ne
 8009000:	b236      	sxthne	r6, r6
 8009002:	e7ef      	b.n	8008fe4 <_printf_i+0xbc>
 8009004:	682b      	ldr	r3, [r5, #0]
 8009006:	6820      	ldr	r0, [r4, #0]
 8009008:	1d19      	adds	r1, r3, #4
 800900a:	6029      	str	r1, [r5, #0]
 800900c:	0601      	lsls	r1, r0, #24
 800900e:	d501      	bpl.n	8009014 <_printf_i+0xec>
 8009010:	681e      	ldr	r6, [r3, #0]
 8009012:	e002      	b.n	800901a <_printf_i+0xf2>
 8009014:	0646      	lsls	r6, r0, #25
 8009016:	d5fb      	bpl.n	8009010 <_printf_i+0xe8>
 8009018:	881e      	ldrh	r6, [r3, #0]
 800901a:	2f6f      	cmp	r7, #111	; 0x6f
 800901c:	bf0c      	ite	eq
 800901e:	2308      	moveq	r3, #8
 8009020:	230a      	movne	r3, #10
 8009022:	4852      	ldr	r0, [pc, #328]	; (800916c <_printf_i+0x244>)
 8009024:	2100      	movs	r1, #0
 8009026:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800902a:	6865      	ldr	r5, [r4, #4]
 800902c:	2d00      	cmp	r5, #0
 800902e:	bfa8      	it	ge
 8009030:	6821      	ldrge	r1, [r4, #0]
 8009032:	60a5      	str	r5, [r4, #8]
 8009034:	bfa4      	itt	ge
 8009036:	f021 0104 	bicge.w	r1, r1, #4
 800903a:	6021      	strge	r1, [r4, #0]
 800903c:	b90e      	cbnz	r6, 8009042 <_printf_i+0x11a>
 800903e:	2d00      	cmp	r5, #0
 8009040:	d04d      	beq.n	80090de <_printf_i+0x1b6>
 8009042:	4615      	mov	r5, r2
 8009044:	fbb6 f1f3 	udiv	r1, r6, r3
 8009048:	fb03 6711 	mls	r7, r3, r1, r6
 800904c:	5dc7      	ldrb	r7, [r0, r7]
 800904e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009052:	4637      	mov	r7, r6
 8009054:	42bb      	cmp	r3, r7
 8009056:	460e      	mov	r6, r1
 8009058:	d9f4      	bls.n	8009044 <_printf_i+0x11c>
 800905a:	2b08      	cmp	r3, #8
 800905c:	d10b      	bne.n	8009076 <_printf_i+0x14e>
 800905e:	6823      	ldr	r3, [r4, #0]
 8009060:	07de      	lsls	r6, r3, #31
 8009062:	d508      	bpl.n	8009076 <_printf_i+0x14e>
 8009064:	6923      	ldr	r3, [r4, #16]
 8009066:	6861      	ldr	r1, [r4, #4]
 8009068:	4299      	cmp	r1, r3
 800906a:	bfde      	ittt	le
 800906c:	2330      	movle	r3, #48	; 0x30
 800906e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009072:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009076:	1b52      	subs	r2, r2, r5
 8009078:	6122      	str	r2, [r4, #16]
 800907a:	464b      	mov	r3, r9
 800907c:	4621      	mov	r1, r4
 800907e:	4640      	mov	r0, r8
 8009080:	f8cd a000 	str.w	sl, [sp]
 8009084:	aa03      	add	r2, sp, #12
 8009086:	f7ff fedf 	bl	8008e48 <_printf_common>
 800908a:	3001      	adds	r0, #1
 800908c:	d14c      	bne.n	8009128 <_printf_i+0x200>
 800908e:	f04f 30ff 	mov.w	r0, #4294967295
 8009092:	b004      	add	sp, #16
 8009094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009098:	4834      	ldr	r0, [pc, #208]	; (800916c <_printf_i+0x244>)
 800909a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800909e:	6829      	ldr	r1, [r5, #0]
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80090a6:	6029      	str	r1, [r5, #0]
 80090a8:	061d      	lsls	r5, r3, #24
 80090aa:	d514      	bpl.n	80090d6 <_printf_i+0x1ae>
 80090ac:	07df      	lsls	r7, r3, #31
 80090ae:	bf44      	itt	mi
 80090b0:	f043 0320 	orrmi.w	r3, r3, #32
 80090b4:	6023      	strmi	r3, [r4, #0]
 80090b6:	b91e      	cbnz	r6, 80090c0 <_printf_i+0x198>
 80090b8:	6823      	ldr	r3, [r4, #0]
 80090ba:	f023 0320 	bic.w	r3, r3, #32
 80090be:	6023      	str	r3, [r4, #0]
 80090c0:	2310      	movs	r3, #16
 80090c2:	e7af      	b.n	8009024 <_printf_i+0xfc>
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	f043 0320 	orr.w	r3, r3, #32
 80090ca:	6023      	str	r3, [r4, #0]
 80090cc:	2378      	movs	r3, #120	; 0x78
 80090ce:	4828      	ldr	r0, [pc, #160]	; (8009170 <_printf_i+0x248>)
 80090d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090d4:	e7e3      	b.n	800909e <_printf_i+0x176>
 80090d6:	0659      	lsls	r1, r3, #25
 80090d8:	bf48      	it	mi
 80090da:	b2b6      	uxthmi	r6, r6
 80090dc:	e7e6      	b.n	80090ac <_printf_i+0x184>
 80090de:	4615      	mov	r5, r2
 80090e0:	e7bb      	b.n	800905a <_printf_i+0x132>
 80090e2:	682b      	ldr	r3, [r5, #0]
 80090e4:	6826      	ldr	r6, [r4, #0]
 80090e6:	1d18      	adds	r0, r3, #4
 80090e8:	6961      	ldr	r1, [r4, #20]
 80090ea:	6028      	str	r0, [r5, #0]
 80090ec:	0635      	lsls	r5, r6, #24
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	d501      	bpl.n	80090f6 <_printf_i+0x1ce>
 80090f2:	6019      	str	r1, [r3, #0]
 80090f4:	e002      	b.n	80090fc <_printf_i+0x1d4>
 80090f6:	0670      	lsls	r0, r6, #25
 80090f8:	d5fb      	bpl.n	80090f2 <_printf_i+0x1ca>
 80090fa:	8019      	strh	r1, [r3, #0]
 80090fc:	2300      	movs	r3, #0
 80090fe:	4615      	mov	r5, r2
 8009100:	6123      	str	r3, [r4, #16]
 8009102:	e7ba      	b.n	800907a <_printf_i+0x152>
 8009104:	682b      	ldr	r3, [r5, #0]
 8009106:	2100      	movs	r1, #0
 8009108:	1d1a      	adds	r2, r3, #4
 800910a:	602a      	str	r2, [r5, #0]
 800910c:	681d      	ldr	r5, [r3, #0]
 800910e:	6862      	ldr	r2, [r4, #4]
 8009110:	4628      	mov	r0, r5
 8009112:	f000 f82f 	bl	8009174 <memchr>
 8009116:	b108      	cbz	r0, 800911c <_printf_i+0x1f4>
 8009118:	1b40      	subs	r0, r0, r5
 800911a:	6060      	str	r0, [r4, #4]
 800911c:	6863      	ldr	r3, [r4, #4]
 800911e:	6123      	str	r3, [r4, #16]
 8009120:	2300      	movs	r3, #0
 8009122:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009126:	e7a8      	b.n	800907a <_printf_i+0x152>
 8009128:	462a      	mov	r2, r5
 800912a:	4649      	mov	r1, r9
 800912c:	4640      	mov	r0, r8
 800912e:	6923      	ldr	r3, [r4, #16]
 8009130:	47d0      	blx	sl
 8009132:	3001      	adds	r0, #1
 8009134:	d0ab      	beq.n	800908e <_printf_i+0x166>
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	079b      	lsls	r3, r3, #30
 800913a:	d413      	bmi.n	8009164 <_printf_i+0x23c>
 800913c:	68e0      	ldr	r0, [r4, #12]
 800913e:	9b03      	ldr	r3, [sp, #12]
 8009140:	4298      	cmp	r0, r3
 8009142:	bfb8      	it	lt
 8009144:	4618      	movlt	r0, r3
 8009146:	e7a4      	b.n	8009092 <_printf_i+0x16a>
 8009148:	2301      	movs	r3, #1
 800914a:	4632      	mov	r2, r6
 800914c:	4649      	mov	r1, r9
 800914e:	4640      	mov	r0, r8
 8009150:	47d0      	blx	sl
 8009152:	3001      	adds	r0, #1
 8009154:	d09b      	beq.n	800908e <_printf_i+0x166>
 8009156:	3501      	adds	r5, #1
 8009158:	68e3      	ldr	r3, [r4, #12]
 800915a:	9903      	ldr	r1, [sp, #12]
 800915c:	1a5b      	subs	r3, r3, r1
 800915e:	42ab      	cmp	r3, r5
 8009160:	dcf2      	bgt.n	8009148 <_printf_i+0x220>
 8009162:	e7eb      	b.n	800913c <_printf_i+0x214>
 8009164:	2500      	movs	r5, #0
 8009166:	f104 0619 	add.w	r6, r4, #25
 800916a:	e7f5      	b.n	8009158 <_printf_i+0x230>
 800916c:	08009501 	.word	0x08009501
 8009170:	08009512 	.word	0x08009512

08009174 <memchr>:
 8009174:	4603      	mov	r3, r0
 8009176:	b510      	push	{r4, lr}
 8009178:	b2c9      	uxtb	r1, r1
 800917a:	4402      	add	r2, r0
 800917c:	4293      	cmp	r3, r2
 800917e:	4618      	mov	r0, r3
 8009180:	d101      	bne.n	8009186 <memchr+0x12>
 8009182:	2000      	movs	r0, #0
 8009184:	e003      	b.n	800918e <memchr+0x1a>
 8009186:	7804      	ldrb	r4, [r0, #0]
 8009188:	3301      	adds	r3, #1
 800918a:	428c      	cmp	r4, r1
 800918c:	d1f6      	bne.n	800917c <memchr+0x8>
 800918e:	bd10      	pop	{r4, pc}

08009190 <memcpy>:
 8009190:	440a      	add	r2, r1
 8009192:	4291      	cmp	r1, r2
 8009194:	f100 33ff 	add.w	r3, r0, #4294967295
 8009198:	d100      	bne.n	800919c <memcpy+0xc>
 800919a:	4770      	bx	lr
 800919c:	b510      	push	{r4, lr}
 800919e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091a2:	4291      	cmp	r1, r2
 80091a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091a8:	d1f9      	bne.n	800919e <memcpy+0xe>
 80091aa:	bd10      	pop	{r4, pc}

080091ac <memmove>:
 80091ac:	4288      	cmp	r0, r1
 80091ae:	b510      	push	{r4, lr}
 80091b0:	eb01 0402 	add.w	r4, r1, r2
 80091b4:	d902      	bls.n	80091bc <memmove+0x10>
 80091b6:	4284      	cmp	r4, r0
 80091b8:	4623      	mov	r3, r4
 80091ba:	d807      	bhi.n	80091cc <memmove+0x20>
 80091bc:	1e43      	subs	r3, r0, #1
 80091be:	42a1      	cmp	r1, r4
 80091c0:	d008      	beq.n	80091d4 <memmove+0x28>
 80091c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091ca:	e7f8      	b.n	80091be <memmove+0x12>
 80091cc:	4601      	mov	r1, r0
 80091ce:	4402      	add	r2, r0
 80091d0:	428a      	cmp	r2, r1
 80091d2:	d100      	bne.n	80091d6 <memmove+0x2a>
 80091d4:	bd10      	pop	{r4, pc}
 80091d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091de:	e7f7      	b.n	80091d0 <memmove+0x24>

080091e0 <_free_r>:
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	4605      	mov	r5, r0
 80091e4:	2900      	cmp	r1, #0
 80091e6:	d040      	beq.n	800926a <_free_r+0x8a>
 80091e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091ec:	1f0c      	subs	r4, r1, #4
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	bfb8      	it	lt
 80091f2:	18e4      	addlt	r4, r4, r3
 80091f4:	f000 f910 	bl	8009418 <__malloc_lock>
 80091f8:	4a1c      	ldr	r2, [pc, #112]	; (800926c <_free_r+0x8c>)
 80091fa:	6813      	ldr	r3, [r2, #0]
 80091fc:	b933      	cbnz	r3, 800920c <_free_r+0x2c>
 80091fe:	6063      	str	r3, [r4, #4]
 8009200:	6014      	str	r4, [r2, #0]
 8009202:	4628      	mov	r0, r5
 8009204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009208:	f000 b90c 	b.w	8009424 <__malloc_unlock>
 800920c:	42a3      	cmp	r3, r4
 800920e:	d908      	bls.n	8009222 <_free_r+0x42>
 8009210:	6820      	ldr	r0, [r4, #0]
 8009212:	1821      	adds	r1, r4, r0
 8009214:	428b      	cmp	r3, r1
 8009216:	bf01      	itttt	eq
 8009218:	6819      	ldreq	r1, [r3, #0]
 800921a:	685b      	ldreq	r3, [r3, #4]
 800921c:	1809      	addeq	r1, r1, r0
 800921e:	6021      	streq	r1, [r4, #0]
 8009220:	e7ed      	b.n	80091fe <_free_r+0x1e>
 8009222:	461a      	mov	r2, r3
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	b10b      	cbz	r3, 800922c <_free_r+0x4c>
 8009228:	42a3      	cmp	r3, r4
 800922a:	d9fa      	bls.n	8009222 <_free_r+0x42>
 800922c:	6811      	ldr	r1, [r2, #0]
 800922e:	1850      	adds	r0, r2, r1
 8009230:	42a0      	cmp	r0, r4
 8009232:	d10b      	bne.n	800924c <_free_r+0x6c>
 8009234:	6820      	ldr	r0, [r4, #0]
 8009236:	4401      	add	r1, r0
 8009238:	1850      	adds	r0, r2, r1
 800923a:	4283      	cmp	r3, r0
 800923c:	6011      	str	r1, [r2, #0]
 800923e:	d1e0      	bne.n	8009202 <_free_r+0x22>
 8009240:	6818      	ldr	r0, [r3, #0]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	4401      	add	r1, r0
 8009246:	6011      	str	r1, [r2, #0]
 8009248:	6053      	str	r3, [r2, #4]
 800924a:	e7da      	b.n	8009202 <_free_r+0x22>
 800924c:	d902      	bls.n	8009254 <_free_r+0x74>
 800924e:	230c      	movs	r3, #12
 8009250:	602b      	str	r3, [r5, #0]
 8009252:	e7d6      	b.n	8009202 <_free_r+0x22>
 8009254:	6820      	ldr	r0, [r4, #0]
 8009256:	1821      	adds	r1, r4, r0
 8009258:	428b      	cmp	r3, r1
 800925a:	bf01      	itttt	eq
 800925c:	6819      	ldreq	r1, [r3, #0]
 800925e:	685b      	ldreq	r3, [r3, #4]
 8009260:	1809      	addeq	r1, r1, r0
 8009262:	6021      	streq	r1, [r4, #0]
 8009264:	6063      	str	r3, [r4, #4]
 8009266:	6054      	str	r4, [r2, #4]
 8009268:	e7cb      	b.n	8009202 <_free_r+0x22>
 800926a:	bd38      	pop	{r3, r4, r5, pc}
 800926c:	20001460 	.word	0x20001460

08009270 <sbrk_aligned>:
 8009270:	b570      	push	{r4, r5, r6, lr}
 8009272:	4e0e      	ldr	r6, [pc, #56]	; (80092ac <sbrk_aligned+0x3c>)
 8009274:	460c      	mov	r4, r1
 8009276:	6831      	ldr	r1, [r6, #0]
 8009278:	4605      	mov	r5, r0
 800927a:	b911      	cbnz	r1, 8009282 <sbrk_aligned+0x12>
 800927c:	f000 f8bc 	bl	80093f8 <_sbrk_r>
 8009280:	6030      	str	r0, [r6, #0]
 8009282:	4621      	mov	r1, r4
 8009284:	4628      	mov	r0, r5
 8009286:	f000 f8b7 	bl	80093f8 <_sbrk_r>
 800928a:	1c43      	adds	r3, r0, #1
 800928c:	d00a      	beq.n	80092a4 <sbrk_aligned+0x34>
 800928e:	1cc4      	adds	r4, r0, #3
 8009290:	f024 0403 	bic.w	r4, r4, #3
 8009294:	42a0      	cmp	r0, r4
 8009296:	d007      	beq.n	80092a8 <sbrk_aligned+0x38>
 8009298:	1a21      	subs	r1, r4, r0
 800929a:	4628      	mov	r0, r5
 800929c:	f000 f8ac 	bl	80093f8 <_sbrk_r>
 80092a0:	3001      	adds	r0, #1
 80092a2:	d101      	bne.n	80092a8 <sbrk_aligned+0x38>
 80092a4:	f04f 34ff 	mov.w	r4, #4294967295
 80092a8:	4620      	mov	r0, r4
 80092aa:	bd70      	pop	{r4, r5, r6, pc}
 80092ac:	20001464 	.word	0x20001464

080092b0 <_malloc_r>:
 80092b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092b4:	1ccd      	adds	r5, r1, #3
 80092b6:	f025 0503 	bic.w	r5, r5, #3
 80092ba:	3508      	adds	r5, #8
 80092bc:	2d0c      	cmp	r5, #12
 80092be:	bf38      	it	cc
 80092c0:	250c      	movcc	r5, #12
 80092c2:	2d00      	cmp	r5, #0
 80092c4:	4607      	mov	r7, r0
 80092c6:	db01      	blt.n	80092cc <_malloc_r+0x1c>
 80092c8:	42a9      	cmp	r1, r5
 80092ca:	d905      	bls.n	80092d8 <_malloc_r+0x28>
 80092cc:	230c      	movs	r3, #12
 80092ce:	2600      	movs	r6, #0
 80092d0:	603b      	str	r3, [r7, #0]
 80092d2:	4630      	mov	r0, r6
 80092d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092d8:	4e2e      	ldr	r6, [pc, #184]	; (8009394 <_malloc_r+0xe4>)
 80092da:	f000 f89d 	bl	8009418 <__malloc_lock>
 80092de:	6833      	ldr	r3, [r6, #0]
 80092e0:	461c      	mov	r4, r3
 80092e2:	bb34      	cbnz	r4, 8009332 <_malloc_r+0x82>
 80092e4:	4629      	mov	r1, r5
 80092e6:	4638      	mov	r0, r7
 80092e8:	f7ff ffc2 	bl	8009270 <sbrk_aligned>
 80092ec:	1c43      	adds	r3, r0, #1
 80092ee:	4604      	mov	r4, r0
 80092f0:	d14d      	bne.n	800938e <_malloc_r+0xde>
 80092f2:	6834      	ldr	r4, [r6, #0]
 80092f4:	4626      	mov	r6, r4
 80092f6:	2e00      	cmp	r6, #0
 80092f8:	d140      	bne.n	800937c <_malloc_r+0xcc>
 80092fa:	6823      	ldr	r3, [r4, #0]
 80092fc:	4631      	mov	r1, r6
 80092fe:	4638      	mov	r0, r7
 8009300:	eb04 0803 	add.w	r8, r4, r3
 8009304:	f000 f878 	bl	80093f8 <_sbrk_r>
 8009308:	4580      	cmp	r8, r0
 800930a:	d13a      	bne.n	8009382 <_malloc_r+0xd2>
 800930c:	6821      	ldr	r1, [r4, #0]
 800930e:	3503      	adds	r5, #3
 8009310:	1a6d      	subs	r5, r5, r1
 8009312:	f025 0503 	bic.w	r5, r5, #3
 8009316:	3508      	adds	r5, #8
 8009318:	2d0c      	cmp	r5, #12
 800931a:	bf38      	it	cc
 800931c:	250c      	movcc	r5, #12
 800931e:	4638      	mov	r0, r7
 8009320:	4629      	mov	r1, r5
 8009322:	f7ff ffa5 	bl	8009270 <sbrk_aligned>
 8009326:	3001      	adds	r0, #1
 8009328:	d02b      	beq.n	8009382 <_malloc_r+0xd2>
 800932a:	6823      	ldr	r3, [r4, #0]
 800932c:	442b      	add	r3, r5
 800932e:	6023      	str	r3, [r4, #0]
 8009330:	e00e      	b.n	8009350 <_malloc_r+0xa0>
 8009332:	6822      	ldr	r2, [r4, #0]
 8009334:	1b52      	subs	r2, r2, r5
 8009336:	d41e      	bmi.n	8009376 <_malloc_r+0xc6>
 8009338:	2a0b      	cmp	r2, #11
 800933a:	d916      	bls.n	800936a <_malloc_r+0xba>
 800933c:	1961      	adds	r1, r4, r5
 800933e:	42a3      	cmp	r3, r4
 8009340:	6025      	str	r5, [r4, #0]
 8009342:	bf18      	it	ne
 8009344:	6059      	strne	r1, [r3, #4]
 8009346:	6863      	ldr	r3, [r4, #4]
 8009348:	bf08      	it	eq
 800934a:	6031      	streq	r1, [r6, #0]
 800934c:	5162      	str	r2, [r4, r5]
 800934e:	604b      	str	r3, [r1, #4]
 8009350:	4638      	mov	r0, r7
 8009352:	f104 060b 	add.w	r6, r4, #11
 8009356:	f000 f865 	bl	8009424 <__malloc_unlock>
 800935a:	f026 0607 	bic.w	r6, r6, #7
 800935e:	1d23      	adds	r3, r4, #4
 8009360:	1af2      	subs	r2, r6, r3
 8009362:	d0b6      	beq.n	80092d2 <_malloc_r+0x22>
 8009364:	1b9b      	subs	r3, r3, r6
 8009366:	50a3      	str	r3, [r4, r2]
 8009368:	e7b3      	b.n	80092d2 <_malloc_r+0x22>
 800936a:	6862      	ldr	r2, [r4, #4]
 800936c:	42a3      	cmp	r3, r4
 800936e:	bf0c      	ite	eq
 8009370:	6032      	streq	r2, [r6, #0]
 8009372:	605a      	strne	r2, [r3, #4]
 8009374:	e7ec      	b.n	8009350 <_malloc_r+0xa0>
 8009376:	4623      	mov	r3, r4
 8009378:	6864      	ldr	r4, [r4, #4]
 800937a:	e7b2      	b.n	80092e2 <_malloc_r+0x32>
 800937c:	4634      	mov	r4, r6
 800937e:	6876      	ldr	r6, [r6, #4]
 8009380:	e7b9      	b.n	80092f6 <_malloc_r+0x46>
 8009382:	230c      	movs	r3, #12
 8009384:	4638      	mov	r0, r7
 8009386:	603b      	str	r3, [r7, #0]
 8009388:	f000 f84c 	bl	8009424 <__malloc_unlock>
 800938c:	e7a1      	b.n	80092d2 <_malloc_r+0x22>
 800938e:	6025      	str	r5, [r4, #0]
 8009390:	e7de      	b.n	8009350 <_malloc_r+0xa0>
 8009392:	bf00      	nop
 8009394:	20001460 	.word	0x20001460

08009398 <_realloc_r>:
 8009398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800939c:	4680      	mov	r8, r0
 800939e:	4614      	mov	r4, r2
 80093a0:	460e      	mov	r6, r1
 80093a2:	b921      	cbnz	r1, 80093ae <_realloc_r+0x16>
 80093a4:	4611      	mov	r1, r2
 80093a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093aa:	f7ff bf81 	b.w	80092b0 <_malloc_r>
 80093ae:	b92a      	cbnz	r2, 80093bc <_realloc_r+0x24>
 80093b0:	f7ff ff16 	bl	80091e0 <_free_r>
 80093b4:	4625      	mov	r5, r4
 80093b6:	4628      	mov	r0, r5
 80093b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093bc:	f000 f838 	bl	8009430 <_malloc_usable_size_r>
 80093c0:	4284      	cmp	r4, r0
 80093c2:	4607      	mov	r7, r0
 80093c4:	d802      	bhi.n	80093cc <_realloc_r+0x34>
 80093c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80093ca:	d812      	bhi.n	80093f2 <_realloc_r+0x5a>
 80093cc:	4621      	mov	r1, r4
 80093ce:	4640      	mov	r0, r8
 80093d0:	f7ff ff6e 	bl	80092b0 <_malloc_r>
 80093d4:	4605      	mov	r5, r0
 80093d6:	2800      	cmp	r0, #0
 80093d8:	d0ed      	beq.n	80093b6 <_realloc_r+0x1e>
 80093da:	42bc      	cmp	r4, r7
 80093dc:	4622      	mov	r2, r4
 80093de:	4631      	mov	r1, r6
 80093e0:	bf28      	it	cs
 80093e2:	463a      	movcs	r2, r7
 80093e4:	f7ff fed4 	bl	8009190 <memcpy>
 80093e8:	4631      	mov	r1, r6
 80093ea:	4640      	mov	r0, r8
 80093ec:	f7ff fef8 	bl	80091e0 <_free_r>
 80093f0:	e7e1      	b.n	80093b6 <_realloc_r+0x1e>
 80093f2:	4635      	mov	r5, r6
 80093f4:	e7df      	b.n	80093b6 <_realloc_r+0x1e>
	...

080093f8 <_sbrk_r>:
 80093f8:	b538      	push	{r3, r4, r5, lr}
 80093fa:	2300      	movs	r3, #0
 80093fc:	4d05      	ldr	r5, [pc, #20]	; (8009414 <_sbrk_r+0x1c>)
 80093fe:	4604      	mov	r4, r0
 8009400:	4608      	mov	r0, r1
 8009402:	602b      	str	r3, [r5, #0]
 8009404:	f7f7 fac2 	bl	800098c <_sbrk>
 8009408:	1c43      	adds	r3, r0, #1
 800940a:	d102      	bne.n	8009412 <_sbrk_r+0x1a>
 800940c:	682b      	ldr	r3, [r5, #0]
 800940e:	b103      	cbz	r3, 8009412 <_sbrk_r+0x1a>
 8009410:	6023      	str	r3, [r4, #0]
 8009412:	bd38      	pop	{r3, r4, r5, pc}
 8009414:	20001468 	.word	0x20001468

08009418 <__malloc_lock>:
 8009418:	4801      	ldr	r0, [pc, #4]	; (8009420 <__malloc_lock+0x8>)
 800941a:	f000 b811 	b.w	8009440 <__retarget_lock_acquire_recursive>
 800941e:	bf00      	nop
 8009420:	2000146c 	.word	0x2000146c

08009424 <__malloc_unlock>:
 8009424:	4801      	ldr	r0, [pc, #4]	; (800942c <__malloc_unlock+0x8>)
 8009426:	f000 b80c 	b.w	8009442 <__retarget_lock_release_recursive>
 800942a:	bf00      	nop
 800942c:	2000146c 	.word	0x2000146c

08009430 <_malloc_usable_size_r>:
 8009430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009434:	1f18      	subs	r0, r3, #4
 8009436:	2b00      	cmp	r3, #0
 8009438:	bfbc      	itt	lt
 800943a:	580b      	ldrlt	r3, [r1, r0]
 800943c:	18c0      	addlt	r0, r0, r3
 800943e:	4770      	bx	lr

08009440 <__retarget_lock_acquire_recursive>:
 8009440:	4770      	bx	lr

08009442 <__retarget_lock_release_recursive>:
 8009442:	4770      	bx	lr

08009444 <_init>:
 8009444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009446:	bf00      	nop
 8009448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800944a:	bc08      	pop	{r3}
 800944c:	469e      	mov	lr, r3
 800944e:	4770      	bx	lr

08009450 <_fini>:
 8009450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009452:	bf00      	nop
 8009454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009456:	bc08      	pop	{r3}
 8009458:	469e      	mov	lr, r3
 800945a:	4770      	bx	lr
