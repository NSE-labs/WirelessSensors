
Wireless Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098e8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08009a24  08009a24  00019a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ad4  08009ad4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009ad4  08009ad4  00019ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009adc  08009adc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009adc  08009adc  00019adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ae0  08009ae0  00019ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001290  200001e0  08009cc4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001470  08009cc4  00021470  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c60  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030a6  00000000  00000000  00031e69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00034f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  00035e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a54  00000000  00000000  00036c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141f2  00000000  00000000  0004d654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c2da  00000000  00000000  00061846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ddb20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a4  00000000  00000000  000ddb70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001e0 	.word	0x200001e0
 8000158:	00000000 	.word	0x00000000
 800015c:	08009a0c 	.word	0x08009a0c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001e4 	.word	0x200001e4
 8000178:	08009a0c 	.word	0x08009a0c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b09a      	sub	sp, #104	; 0x68
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049a:	f000 facc 	bl	8000a36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049e:	f000 f84d 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a2:	f000 f8ff 	bl	80006a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004a6:	f000 f89b 	bl	80005e0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004aa:	f000 f8c7 	bl	800063c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004ae:	f008 f951 	bl	8008754 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t buffer[100];
  uint8_t LoRaStatus;
  LoRa_Init(&hspi1);	/* initialize the LoRa chip */
 80004b2:	481f      	ldr	r0, [pc, #124]	; (8000530 <main+0x9c>)
 80004b4:	f008 f836 	bl	8008524 <LoRa_Init>
  LoRaStatus = LoRaGetStatus();
 80004b8:	f008 f8d4 	bl	8008664 <LoRaGetStatus>
 80004bc:	4603      	mov	r3, r0
 80004be:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  sprintf((char *)buffer, "Status = %x\r\n", LoRaStatus);
 80004c2:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80004c6:	463b      	mov	r3, r7
 80004c8:	491a      	ldr	r1, [pc, #104]	; (8000534 <main+0xa0>)
 80004ca:	4618      	mov	r0, r3
 80004cc:	f008 fe24 	bl	8009118 <siprintf>
  CDC_Transmit_FS(buffer, strlen((char *)buffer)); /* Send the message on USB */
 80004d0:	463b      	mov	r3, r7
 80004d2:	4618      	mov	r0, r3
 80004d4:	f7ff fe52 	bl	800017c <strlen>
 80004d8:	4603      	mov	r3, r0
 80004da:	b29a      	uxth	r2, r3
 80004dc:	463b      	mov	r3, r7
 80004de:	4611      	mov	r1, r2
 80004e0:	4618      	mov	r0, r3
 80004e2:	f008 f9f5 	bl	80088d0 <CDC_Transmit_FS>
  /* Try a little transmitting */
  int8_t power;
  LoRaSetTxContinuousWave();
 80004e6:	f008 f908 	bl	80086fa <LoRaSetTxContinuousWave>
  for(power = -9; power <= 22; power++)
 80004ea:	23f7      	movs	r3, #247	; 0xf7
 80004ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80004f0:	e00e      	b.n	8000510 <main+0x7c>
  {
	  LoRaSetTxPower(power);
 80004f2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80004f6:	4618      	mov	r0, r3
 80004f8:	f008 f8d6 	bl	80086a8 <LoRaSetTxPower>
	  HAL_Delay(100);
 80004fc:	2064      	movs	r0, #100	; 0x64
 80004fe:	f000 fb09 	bl	8000b14 <HAL_Delay>
  for(power = -9; power <= 22; power++)
 8000502:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8000506:	b2db      	uxtb	r3, r3
 8000508:	3301      	adds	r3, #1
 800050a:	b2db      	uxtb	r3, r3
 800050c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000510:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8000514:	2b16      	cmp	r3, #22
 8000516:	ddec      	ble.n	80004f2 <main+0x5e>
  }
  LoRaSetStandbyMode();
 8000518:	f008 f904 	bl	8008724 <LoRaSetStandbyMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin); /* Toggle the LED */
 800051c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000520:	4805      	ldr	r0, [pc, #20]	; (8000538 <main+0xa4>)
 8000522:	f000 fdd6 	bl	80010d2 <HAL_GPIO_TogglePin>
	  HAL_Delay (500);   /* Delay 500 ms */
 8000526:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800052a:	f000 faf3 	bl	8000b14 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin); /* Toggle the LED */
 800052e:	e7f5      	b.n	800051c <main+0x88>
 8000530:	20000250 	.word	0x20000250
 8000534:	08009a24 	.word	0x08009a24
 8000538:	40020800 	.word	0x40020800

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b092      	sub	sp, #72	; 0x48
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	2234      	movs	r2, #52	; 0x34
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f008 fddc 	bl	8009108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	463b      	mov	r3, r7
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055e:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <SystemClock_Config+0xa0>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000566:	4a1d      	ldr	r2, [pc, #116]	; (80005dc <SystemClock_Config+0xa0>)
 8000568:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800056c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800056e:	2303      	movs	r3, #3
 8000570:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000572:	2301      	movs	r3, #1
 8000574:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000576:	2301      	movs	r3, #1
 8000578:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057a:	2310      	movs	r3, #16
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000588:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800058c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 800058e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000592:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	4618      	mov	r0, r3
 800059a:	f002 fb23 	bl	8002be4 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80005a4:	f000 f8f8 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ac:	2301      	movs	r3, #1
 80005ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80005b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005be:	463b      	mov	r3, r7
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 fe3e 	bl	8003244 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ce:	f000 f8e3 	bl	8000798 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3748      	adds	r7, #72	; 0x48
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40007000 	.word	0x40007000

080005e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_I2C1_Init+0x50>)
 80005e6:	4a13      	ldr	r2, [pc, #76]	; (8000634 <MX_I2C1_Init+0x54>)
 80005e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_I2C1_Init+0x50>)
 80005ec:	4a12      	ldr	r2, [pc, #72]	; (8000638 <MX_I2C1_Init+0x58>)
 80005ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_I2C1_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_I2C1_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_I2C1_Init+0x50>)
 80005fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000602:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <MX_I2C1_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_I2C1_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_I2C1_Init+0x50>)
 800061e:	f000 fd71 	bl	8001104 <HAL_I2C_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000628:	f000 f8b6 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200001fc 	.word	0x200001fc
 8000634:	40005400 	.word	0x40005400
 8000638:	000186a0 	.word	0x000186a0

0800063c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000640:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_SPI1_Init+0x60>)
 8000642:	4a17      	ldr	r2, [pc, #92]	; (80006a0 <MX_SPI1_Init+0x64>)
 8000644:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <MX_SPI1_Init+0x60>)
 8000648:	f44f 7282 	mov.w	r2, #260	; 0x104
 800064c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_SPI1_Init+0x60>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_SPI1_Init+0x60>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_SPI1_Init+0x60>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_SPI1_Init+0x60>)
 8000662:	2200      	movs	r2, #0
 8000664:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <MX_SPI1_Init+0x60>)
 8000668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800066c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_SPI1_Init+0x60>)
 8000670:	2200      	movs	r2, #0
 8000672:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_SPI1_Init+0x60>)
 8000676:	2200      	movs	r2, #0
 8000678:	621a      	str	r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_SPI1_Init+0x60>)
 800067c:	2200      	movs	r2, #0
 800067e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_SPI1_Init+0x60>)
 8000682:	220a      	movs	r2, #10
 8000684:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_SPI1_Init+0x60>)
 8000688:	f003 f88c 	bl	80037a4 <HAL_SPI_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 8000692:	f000 f881 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000250 	.word	0x20000250
 80006a0:	40013000 	.word	0x40013000

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	4b34      	ldr	r3, [pc, #208]	; (800078c <MX_GPIO_Init+0xe8>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	4a33      	ldr	r2, [pc, #204]	; (800078c <MX_GPIO_Init+0xe8>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	61d3      	str	r3, [r2, #28]
 80006c6:	4b31      	ldr	r3, [pc, #196]	; (800078c <MX_GPIO_Init+0xe8>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d2:	4b2e      	ldr	r3, [pc, #184]	; (800078c <MX_GPIO_Init+0xe8>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a2d      	ldr	r2, [pc, #180]	; (800078c <MX_GPIO_Init+0xe8>)
 80006d8:	f043 0320 	orr.w	r3, r3, #32
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b2b      	ldr	r3, [pc, #172]	; (800078c <MX_GPIO_Init+0xe8>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 0320 	and.w	r3, r3, #32
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b28      	ldr	r3, [pc, #160]	; (800078c <MX_GPIO_Init+0xe8>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	4a27      	ldr	r2, [pc, #156]	; (800078c <MX_GPIO_Init+0xe8>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	61d3      	str	r3, [r2, #28]
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <MX_GPIO_Init+0xe8>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <MX_GPIO_Init+0xe8>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a21      	ldr	r2, [pc, #132]	; (800078c <MX_GPIO_Init+0xe8>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	61d3      	str	r3, [r2, #28]
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_GPIO_Init+0xe8>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000720:	481b      	ldr	r0, [pc, #108]	; (8000790 <MX_GPIO_Init+0xec>)
 8000722:	f000 fcbe 	bl	80010a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LoRa_NRST_Pin|LoRa_NSS_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2111      	movs	r1, #17
 800072a:	481a      	ldr	r0, [pc, #104]	; (8000794 <MX_GPIO_Init+0xf0>)
 800072c:	f000 fcb9 	bl	80010a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	4619      	mov	r1, r3
 8000748:	4811      	ldr	r0, [pc, #68]	; (8000790 <MX_GPIO_Init+0xec>)
 800074a:	f000 fb13 	bl	8000d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_NRST_Pin LoRa_NSS_Pin */
  GPIO_InitStruct.Pin = LoRa_NRST_Pin|LoRa_NSS_Pin;
 800074e:	2311      	movs	r3, #17
 8000750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	480b      	ldr	r0, [pc, #44]	; (8000794 <MX_GPIO_Init+0xf0>)
 8000766:	f000 fb05 	bl	8000d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_DIO3_Pin LoRa_DIO2_Pin LoRa_DIO1_Pin LoRa_BUSY_Pin */
  GPIO_InitStruct.Pin = LoRa_DIO3_Pin|LoRa_DIO2_Pin|LoRa_DIO1_Pin|LoRa_BUSY_Pin;
 800076a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_GPIO_Init+0xf0>)
 8000780:	f000 faf8 	bl	8000d74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000784:	bf00      	nop
 8000786:	3728      	adds	r7, #40	; 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	40020800 	.word	0x40020800
 8000794:	40020000 	.word	0x40020000

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <Error_Handler+0x8>
	...

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <HAL_MspInit+0x58>)
 80007ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ae:	4a13      	ldr	r2, [pc, #76]	; (80007fc <HAL_MspInit+0x58>)
 80007b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b4:	6253      	str	r3, [r2, #36]	; 0x24
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <HAL_MspInit+0x58>)
 80007b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <HAL_MspInit+0x58>)
 80007c4:	6a1b      	ldr	r3, [r3, #32]
 80007c6:	4a0d      	ldr	r2, [pc, #52]	; (80007fc <HAL_MspInit+0x58>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6213      	str	r3, [r2, #32]
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <HAL_MspInit+0x58>)
 80007d0:	6a1b      	ldr	r3, [r3, #32]
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <HAL_MspInit+0x58>)
 80007dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007de:	4a07      	ldr	r2, [pc, #28]	; (80007fc <HAL_MspInit+0x58>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	6253      	str	r3, [r2, #36]	; 0x24
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <HAL_MspInit+0x58>)
 80007e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	40023800 	.word	0x40023800

08000800 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a17      	ldr	r2, [pc, #92]	; (800087c <HAL_I2C_MspInit+0x7c>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d127      	bne.n	8000872 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <HAL_I2C_MspInit+0x80>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	4a16      	ldr	r2, [pc, #88]	; (8000880 <HAL_I2C_MspInit+0x80>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	61d3      	str	r3, [r2, #28]
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <HAL_I2C_MspInit+0x80>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800083a:	23c0      	movs	r3, #192	; 0xc0
 800083c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800083e:	2312      	movs	r3, #18
 8000840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000846:	2303      	movs	r3, #3
 8000848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800084a:	2304      	movs	r3, #4
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	480b      	ldr	r0, [pc, #44]	; (8000884 <HAL_I2C_MspInit+0x84>)
 8000856:	f000 fa8d 	bl	8000d74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_I2C_MspInit+0x80>)
 800085c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_I2C_MspInit+0x80>)
 8000860:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000864:	6253      	str	r3, [r2, #36]	; 0x24
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_I2C_MspInit+0x80>)
 8000868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800086a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000872:	bf00      	nop
 8000874:	3728      	adds	r7, #40	; 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40005400 	.word	0x40005400
 8000880:	40023800 	.word	0x40023800
 8000884:	40020400 	.word	0x40020400

08000888 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a17      	ldr	r2, [pc, #92]	; (8000904 <HAL_SPI_MspInit+0x7c>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d127      	bne.n	80008fa <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <HAL_SPI_MspInit+0x80>)
 80008ac:	6a1b      	ldr	r3, [r3, #32]
 80008ae:	4a16      	ldr	r2, [pc, #88]	; (8000908 <HAL_SPI_MspInit+0x80>)
 80008b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008b4:	6213      	str	r3, [r2, #32]
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <HAL_SPI_MspInit+0x80>)
 80008b8:	6a1b      	ldr	r3, [r3, #32]
 80008ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <HAL_SPI_MspInit+0x80>)
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	4a10      	ldr	r2, [pc, #64]	; (8000908 <HAL_SPI_MspInit+0x80>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	61d3      	str	r3, [r2, #28]
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <HAL_SPI_MspInit+0x80>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008da:	23e0      	movs	r3, #224	; 0xe0
 80008dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e6:	2303      	movs	r3, #3
 80008e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ea:	2305      	movs	r3, #5
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <HAL_SPI_MspInit+0x84>)
 80008f6:	f000 fa3d 	bl	8000d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	; 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40013000 	.word	0x40013000
 8000908:	40023800 	.word	0x40023800
 800090c:	40020000 	.word	0x40020000

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <NMI_Handler+0x4>

08000916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <HardFault_Handler+0x4>

0800091c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <MemManage_Handler+0x4>

08000922 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <BusFault_Handler+0x4>

08000928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <UsageFault_Handler+0x4>

0800092e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr

0800093a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr

08000946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr

08000952 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000956:	f000 f8c1 	bl	8000adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <USB_LP_IRQHandler+0x10>)
 8000966:	f000 fe15 	bl	8001594 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000f54 	.word	0x20000f54

08000974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800097c:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <_sbrk+0x5c>)
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <_sbrk+0x60>)
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <_sbrk+0x64>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d102      	bne.n	8000996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <_sbrk+0x64>)
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <_sbrk+0x68>)
 8000994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d207      	bcs.n	80009b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a4:	f008 fb86 	bl	80090b4 <__errno>
 80009a8:	4603      	mov	r3, r0
 80009aa:	220c      	movs	r2, #12
 80009ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295
 80009b2:	e009      	b.n	80009c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <_sbrk+0x64>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <_sbrk+0x64>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <_sbrk+0x64>)
 80009c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009c6:	68fb      	ldr	r3, [r7, #12]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20002800 	.word	0x20002800
 80009d4:	00000400 	.word	0x00000400
 80009d8:	200002a8 	.word	0x200002a8
 80009dc:	20001470 	.word	0x20001470

080009e0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ec:	480c      	ldr	r0, [pc, #48]	; (8000a20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ee:	490d      	ldr	r1, [pc, #52]	; (8000a24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009f0:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a04:	4c0a      	ldr	r4, [pc, #40]	; (8000a30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a12:	f7ff ffe5 	bl	80009e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a16:	f008 fb53 	bl	80090c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a1a:	f7ff fd3b 	bl	8000494 <main>
  bx lr
 8000a1e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000a28:	08009ae4 	.word	0x08009ae4
  ldr r2, =_sbss
 8000a2c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000a30:	20001470 	.word	0x20001470

08000a34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_IRQHandler>

08000a36 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a40:	2003      	movs	r0, #3
 8000a42:	f000 f955 	bl	8000cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a46:	200f      	movs	r0, #15
 8000a48:	f000 f80e 	bl	8000a68 <HAL_InitTick>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d002      	beq.n	8000a58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	71fb      	strb	r3, [r7, #7]
 8000a56:	e001      	b.n	8000a5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a58:	f7ff fea4 	bl	80007a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <HAL_InitTick+0x68>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d022      	beq.n	8000ac2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <HAL_InitTick+0x6c>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <HAL_InitTick+0x68>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a88:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f962 	bl	8000d5a <HAL_SYSTICK_Config>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d10f      	bne.n	8000abc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b0f      	cmp	r3, #15
 8000aa0:	d809      	bhi.n	8000ab6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	6879      	ldr	r1, [r7, #4]
 8000aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8000aaa:	f000 f92c 	bl	8000d06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aae:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <HAL_InitTick+0x70>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6013      	str	r3, [r2, #0]
 8000ab4:	e007      	b.n	8000ac6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	73fb      	strb	r3, [r7, #15]
 8000aba:	e004      	b.n	8000ac6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	73fb      	strb	r3, [r7, #15]
 8000ac0:	e001      	b.n	8000ac6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	20000004 	.word	0x20000004

08000adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_IncTick+0x1c>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_IncTick+0x20>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a03      	ldr	r2, [pc, #12]	; (8000af8 <HAL_IncTick+0x1c>)
 8000aec:	6013      	str	r3, [r2, #0]
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	200002ac 	.word	0x200002ac
 8000afc:	20000008 	.word	0x20000008

08000b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b02      	ldr	r3, [pc, #8]	; (8000b10 <HAL_GetTick+0x10>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	200002ac 	.word	0x200002ac

08000b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b1c:	f7ff fff0 	bl	8000b00 <HAL_GetTick>
 8000b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b2c:	d004      	beq.n	8000b38 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_Delay+0x40>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	4413      	add	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b38:	bf00      	nop
 8000b3a:	f7ff ffe1 	bl	8000b00 <HAL_GetTick>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	1ad3      	subs	r3, r2, r3
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d8f7      	bhi.n	8000b3a <HAL_Delay+0x26>
  {
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000008 	.word	0x20000008

08000b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8a:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	60d3      	str	r3, [r2, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	f003 0307 	and.w	r3, r3, #7
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	db0b      	blt.n	8000be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 021f 	and.w	r2, r3, #31
 8000bd4:	4906      	ldr	r1, [pc, #24]	; (8000bf0 <__NVIC_EnableIRQ+0x34>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	2001      	movs	r0, #1
 8000bde:	fa00 f202 	lsl.w	r2, r0, r2
 8000be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db0a      	blt.n	8000c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	490c      	ldr	r1, [pc, #48]	; (8000c40 <__NVIC_SetPriority+0x4c>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	0112      	lsls	r2, r2, #4
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	440b      	add	r3, r1
 8000c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c1c:	e00a      	b.n	8000c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4908      	ldr	r1, [pc, #32]	; (8000c44 <__NVIC_SetPriority+0x50>)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	0112      	lsls	r2, r2, #4
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	440b      	add	r3, r1
 8000c32:	761a      	strb	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f1c3 0307 	rsb	r3, r3, #7
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	bf28      	it	cs
 8000c66:	2304      	movcs	r3, #4
 8000c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d902      	bls.n	8000c78 <NVIC_EncodePriority+0x30>
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3b03      	subs	r3, #3
 8000c76:	e000      	b.n	8000c7a <NVIC_EncodePriority+0x32>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43da      	mvns	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	43d9      	mvns	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	4313      	orrs	r3, r2
         );
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3724      	adds	r7, #36	; 0x24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cbc:	d301      	bcc.n	8000cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e00f      	b.n	8000ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <SysTick_Config+0x40>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cca:	210f      	movs	r1, #15
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f7ff ff90 	bl	8000bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <SysTick_Config+0x40>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cda:	4b04      	ldr	r3, [pc, #16]	; (8000cec <SysTick_Config+0x40>)
 8000cdc:	2207      	movs	r2, #7
 8000cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	e000e010 	.word	0xe000e010

08000cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff ff2d 	bl	8000b58 <__NVIC_SetPriorityGrouping>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
 8000d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d18:	f7ff ff42 	bl	8000ba0 <__NVIC_GetPriorityGrouping>
 8000d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	68b9      	ldr	r1, [r7, #8]
 8000d22:	6978      	ldr	r0, [r7, #20]
 8000d24:	f7ff ff90 	bl	8000c48 <NVIC_EncodePriority>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff5f 	bl	8000bf4 <__NVIC_SetPriority>
}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff35 	bl	8000bbc <__NVIC_EnableIRQ>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff ffa2 	bl	8000cac <SysTick_Config>
 8000d68:	4603      	mov	r3, r0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d8a:	e154      	b.n	8001036 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	2101      	movs	r1, #1
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	fa01 f303 	lsl.w	r3, r1, r3
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f000 8146 	beq.w	8001030 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0303 	and.w	r3, r3, #3
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d005      	beq.n	8000dbc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d130      	bne.n	8000e1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	68da      	ldr	r2, [r3, #12]
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000df2:	2201      	movs	r2, #1
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	091b      	lsrs	r3, r3, #4
 8000e08:	f003 0201 	and.w	r2, r3, #1
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0303 	and.w	r3, r3, #3
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d017      	beq.n	8000e5a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	2203      	movs	r2, #3
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d123      	bne.n	8000eae <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	08da      	lsrs	r2, r3, #3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3208      	adds	r2, #8
 8000e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e72:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	220f      	movs	r2, #15
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	691a      	ldr	r2, [r3, #16]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	08da      	lsrs	r2, r3, #3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3208      	adds	r2, #8
 8000ea8:	6939      	ldr	r1, [r7, #16]
 8000eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	2203      	movs	r2, #3
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 0203 	and.w	r2, r3, #3
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f000 80a0 	beq.w	8001030 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef0:	4b58      	ldr	r3, [pc, #352]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	4a57      	ldr	r2, [pc, #348]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6213      	str	r3, [r2, #32]
 8000efc:	4b55      	ldr	r3, [pc, #340]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8000efe:	6a1b      	ldr	r3, [r3, #32]
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f08:	4a53      	ldr	r2, [pc, #332]	; (8001058 <HAL_GPIO_Init+0x2e4>)
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	089b      	lsrs	r3, r3, #2
 8000f0e:	3302      	adds	r3, #2
 8000f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	220f      	movs	r2, #15
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a4b      	ldr	r2, [pc, #300]	; (800105c <HAL_GPIO_Init+0x2e8>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d019      	beq.n	8000f68 <HAL_GPIO_Init+0x1f4>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a4a      	ldr	r2, [pc, #296]	; (8001060 <HAL_GPIO_Init+0x2ec>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d013      	beq.n	8000f64 <HAL_GPIO_Init+0x1f0>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a49      	ldr	r2, [pc, #292]	; (8001064 <HAL_GPIO_Init+0x2f0>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d00d      	beq.n	8000f60 <HAL_GPIO_Init+0x1ec>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a48      	ldr	r2, [pc, #288]	; (8001068 <HAL_GPIO_Init+0x2f4>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d007      	beq.n	8000f5c <HAL_GPIO_Init+0x1e8>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a47      	ldr	r2, [pc, #284]	; (800106c <HAL_GPIO_Init+0x2f8>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d101      	bne.n	8000f58 <HAL_GPIO_Init+0x1e4>
 8000f54:	2304      	movs	r3, #4
 8000f56:	e008      	b.n	8000f6a <HAL_GPIO_Init+0x1f6>
 8000f58:	2305      	movs	r3, #5
 8000f5a:	e006      	b.n	8000f6a <HAL_GPIO_Init+0x1f6>
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e004      	b.n	8000f6a <HAL_GPIO_Init+0x1f6>
 8000f60:	2302      	movs	r3, #2
 8000f62:	e002      	b.n	8000f6a <HAL_GPIO_Init+0x1f6>
 8000f64:	2301      	movs	r3, #1
 8000f66:	e000      	b.n	8000f6a <HAL_GPIO_Init+0x1f6>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	f002 0203 	and.w	r2, r2, #3
 8000f70:	0092      	lsls	r2, r2, #2
 8000f72:	4093      	lsls	r3, r2
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f7a:	4937      	ldr	r1, [pc, #220]	; (8001058 <HAL_GPIO_Init+0x2e4>)
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	3302      	adds	r3, #2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f88:	4b39      	ldr	r3, [pc, #228]	; (8001070 <HAL_GPIO_Init+0x2fc>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fac:	4a30      	ldr	r2, [pc, #192]	; (8001070 <HAL_GPIO_Init+0x2fc>)
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fb2:	4b2f      	ldr	r3, [pc, #188]	; (8001070 <HAL_GPIO_Init+0x2fc>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fd6:	4a26      	ldr	r2, [pc, #152]	; (8001070 <HAL_GPIO_Init+0x2fc>)
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fdc:	4b24      	ldr	r3, [pc, #144]	; (8001070 <HAL_GPIO_Init+0x2fc>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001000:	4a1b      	ldr	r2, [pc, #108]	; (8001070 <HAL_GPIO_Init+0x2fc>)
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <HAL_GPIO_Init+0x2fc>)
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800102a:	4a11      	ldr	r2, [pc, #68]	; (8001070 <HAL_GPIO_Init+0x2fc>)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	3301      	adds	r3, #1
 8001034:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	fa22 f303 	lsr.w	r3, r2, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	f47f aea3 	bne.w	8000d8c <HAL_GPIO_Init+0x18>
  }
}
 8001046:	bf00      	nop
 8001048:	bf00      	nop
 800104a:	371c      	adds	r7, #28
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	40010000 	.word	0x40010000
 800105c:	40020000 	.word	0x40020000
 8001060:	40020400 	.word	0x40020400
 8001064:	40020800 	.word	0x40020800
 8001068:	40020c00 	.word	0x40020c00
 800106c:	40021000 	.word	0x40021000
 8001070:	40010400 	.word	0x40010400

08001074 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	691a      	ldr	r2, [r3, #16]
 8001084:	887b      	ldrh	r3, [r7, #2]
 8001086:	4013      	ands	r3, r2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d002      	beq.n	8001092 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800108c:	2301      	movs	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e001      	b.n	8001096 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001092:	2300      	movs	r3, #0
 8001094:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001096:	7bfb      	ldrb	r3, [r7, #15]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr

080010a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	460b      	mov	r3, r1
 80010ac:	807b      	strh	r3, [r7, #2]
 80010ae:	4613      	mov	r3, r2
 80010b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010b2:	787b      	ldrb	r3, [r7, #1]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010b8:	887a      	ldrh	r2, [r7, #2]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80010be:	e003      	b.n	80010c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80010c0:	887b      	ldrh	r3, [r7, #2]
 80010c2:	041a      	lsls	r2, r3, #16
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	619a      	str	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr

080010d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b085      	sub	sp, #20
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	460b      	mov	r3, r1
 80010dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010e4:	887a      	ldrh	r2, [r7, #2]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4013      	ands	r3, r2
 80010ea:	041a      	lsls	r2, r3, #16
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	43d9      	mvns	r1, r3
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	400b      	ands	r3, r1
 80010f4:	431a      	orrs	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	619a      	str	r2, [r3, #24]
}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e12b      	b.n	800136e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d106      	bne.n	8001130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff fb68 	bl	8000800 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2224      	movs	r2, #36	; 0x24
 8001134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0201 	bic.w	r2, r2, #1
 8001146:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001168:	f002 faa8 	bl	80036bc <HAL_RCC_GetPCLK1Freq>
 800116c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4a81      	ldr	r2, [pc, #516]	; (8001378 <HAL_I2C_Init+0x274>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d807      	bhi.n	8001188 <HAL_I2C_Init+0x84>
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4a80      	ldr	r2, [pc, #512]	; (800137c <HAL_I2C_Init+0x278>)
 800117c:	4293      	cmp	r3, r2
 800117e:	bf94      	ite	ls
 8001180:	2301      	movls	r3, #1
 8001182:	2300      	movhi	r3, #0
 8001184:	b2db      	uxtb	r3, r3
 8001186:	e006      	b.n	8001196 <HAL_I2C_Init+0x92>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4a7d      	ldr	r2, [pc, #500]	; (8001380 <HAL_I2C_Init+0x27c>)
 800118c:	4293      	cmp	r3, r2
 800118e:	bf94      	ite	ls
 8001190:	2301      	movls	r3, #1
 8001192:	2300      	movhi	r3, #0
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e0e7      	b.n	800136e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4a78      	ldr	r2, [pc, #480]	; (8001384 <HAL_I2C_Init+0x280>)
 80011a2:	fba2 2303 	umull	r2, r3, r2, r3
 80011a6:	0c9b      	lsrs	r3, r3, #18
 80011a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	430a      	orrs	r2, r1
 80011bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	4a6a      	ldr	r2, [pc, #424]	; (8001378 <HAL_I2C_Init+0x274>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d802      	bhi.n	80011d8 <HAL_I2C_Init+0xd4>
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	3301      	adds	r3, #1
 80011d6:	e009      	b.n	80011ec <HAL_I2C_Init+0xe8>
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011de:	fb02 f303 	mul.w	r3, r2, r3
 80011e2:	4a69      	ldr	r2, [pc, #420]	; (8001388 <HAL_I2C_Init+0x284>)
 80011e4:	fba2 2303 	umull	r2, r3, r2, r3
 80011e8:	099b      	lsrs	r3, r3, #6
 80011ea:	3301      	adds	r3, #1
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	6812      	ldr	r2, [r2, #0]
 80011f0:	430b      	orrs	r3, r1
 80011f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	495c      	ldr	r1, [pc, #368]	; (8001378 <HAL_I2C_Init+0x274>)
 8001208:	428b      	cmp	r3, r1
 800120a:	d819      	bhi.n	8001240 <HAL_I2C_Init+0x13c>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	1e59      	subs	r1, r3, #1
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	fbb1 f3f3 	udiv	r3, r1, r3
 800121a:	1c59      	adds	r1, r3, #1
 800121c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001220:	400b      	ands	r3, r1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00a      	beq.n	800123c <HAL_I2C_Init+0x138>
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	1e59      	subs	r1, r3, #1
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fbb1 f3f3 	udiv	r3, r1, r3
 8001234:	3301      	adds	r3, #1
 8001236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800123a:	e051      	b.n	80012e0 <HAL_I2C_Init+0x1dc>
 800123c:	2304      	movs	r3, #4
 800123e:	e04f      	b.n	80012e0 <HAL_I2C_Init+0x1dc>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d111      	bne.n	800126c <HAL_I2C_Init+0x168>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	1e58      	subs	r0, r3, #1
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6859      	ldr	r1, [r3, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	440b      	add	r3, r1
 8001256:	fbb0 f3f3 	udiv	r3, r0, r3
 800125a:	3301      	adds	r3, #1
 800125c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001260:	2b00      	cmp	r3, #0
 8001262:	bf0c      	ite	eq
 8001264:	2301      	moveq	r3, #1
 8001266:	2300      	movne	r3, #0
 8001268:	b2db      	uxtb	r3, r3
 800126a:	e012      	b.n	8001292 <HAL_I2C_Init+0x18e>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	1e58      	subs	r0, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6859      	ldr	r1, [r3, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	0099      	lsls	r1, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001282:	3301      	adds	r3, #1
 8001284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001288:	2b00      	cmp	r3, #0
 800128a:	bf0c      	ite	eq
 800128c:	2301      	moveq	r3, #1
 800128e:	2300      	movne	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_I2C_Init+0x196>
 8001296:	2301      	movs	r3, #1
 8001298:	e022      	b.n	80012e0 <HAL_I2C_Init+0x1dc>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10e      	bne.n	80012c0 <HAL_I2C_Init+0x1bc>
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	1e58      	subs	r0, r3, #1
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6859      	ldr	r1, [r3, #4]
 80012aa:	460b      	mov	r3, r1
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	440b      	add	r3, r1
 80012b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80012b4:	3301      	adds	r3, #1
 80012b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012be:	e00f      	b.n	80012e0 <HAL_I2C_Init+0x1dc>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	1e58      	subs	r0, r3, #1
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6859      	ldr	r1, [r3, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	0099      	lsls	r1, r3, #2
 80012d0:	440b      	add	r3, r1
 80012d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012d6:	3301      	adds	r3, #1
 80012d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	6809      	ldr	r1, [r1, #0]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69da      	ldr	r2, [r3, #28]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a1b      	ldr	r3, [r3, #32]
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	430a      	orrs	r2, r1
 8001302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800130e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	6911      	ldr	r1, [r2, #16]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68d2      	ldr	r2, [r2, #12]
 800131a:	4311      	orrs	r1, r2
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	6812      	ldr	r2, [r2, #0]
 8001320:	430b      	orrs	r3, r1
 8001322:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695a      	ldr	r2, [r3, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	431a      	orrs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 0201 	orr.w	r2, r2, #1
 800134e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2220      	movs	r2, #32
 800135a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	000186a0 	.word	0x000186a0
 800137c:	001e847f 	.word	0x001e847f
 8001380:	003d08ff 	.word	0x003d08ff
 8001384:	431bde83 	.word	0x431bde83
 8001388:	10624dd3 	.word	0x10624dd3

0800138c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800138c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138e:	b08b      	sub	sp, #44	; 0x2c
 8001390:	af06      	add	r7, sp, #24
 8001392:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e0d0      	b.n	8001540 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d106      	bne.n	80013b8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f007 fbde 	bl	8008b74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2203      	movs	r2, #3
 80013bc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f002 ff9f 	bl	8004308 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	73fb      	strb	r3, [r7, #15]
 80013ce:	e04c      	b.n	800146a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	1c5a      	adds	r2, r3, #1
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	440b      	add	r3, r1
 80013e0:	3301      	adds	r3, #1
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	440b      	add	r3, r1
 80013f6:	7bfa      	ldrb	r2, [r7, #15]
 80013f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013fa:	7bfa      	ldrb	r2, [r7, #15]
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	b298      	uxth	r0, r3
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	440b      	add	r3, r1
 800140c:	3336      	adds	r3, #54	; 0x36
 800140e:	4602      	mov	r2, r0
 8001410:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	440b      	add	r3, r1
 8001422:	3303      	adds	r3, #3
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	440b      	add	r3, r1
 8001436:	3338      	adds	r3, #56	; 0x38
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	440b      	add	r3, r1
 800144a:	333c      	adds	r3, #60	; 0x3c
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001450:	7bfa      	ldrb	r2, [r7, #15]
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	440b      	add	r3, r1
 800145e:	3340      	adds	r3, #64	; 0x40
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	3301      	adds	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	429a      	cmp	r2, r3
 8001472:	d3ad      	bcc.n	80013d0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001474:	2300      	movs	r3, #0
 8001476:	73fb      	strb	r3, [r7, #15]
 8001478:	e044      	b.n	8001504 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800147a:	7bfa      	ldrb	r2, [r7, #15]
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	440b      	add	r3, r1
 8001488:	f203 1369 	addw	r3, r3, #361	; 0x169
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001490:	7bfa      	ldrb	r2, [r7, #15]
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	440b      	add	r3, r1
 800149e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	440b      	add	r3, r1
 80014b4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	440b      	add	r3, r1
 80014ca:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	440b      	add	r3, r1
 80014e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	440b      	add	r3, r1
 80014f6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	3301      	adds	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	429a      	cmp	r2, r3
 800150c:	d3b5      	bcc.n	800147a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	687e      	ldr	r6, [r7, #4]
 8001516:	466d      	mov	r5, sp
 8001518:	f106 0410 	add.w	r4, r6, #16
 800151c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	602b      	str	r3, [r5, #0]
 8001524:	1d33      	adds	r3, r6, #4
 8001526:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001528:	6838      	ldr	r0, [r7, #0]
 800152a:	f002 ff07 	bl	800433c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001548 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001556:	2b01      	cmp	r3, #1
 8001558:	d101      	bne.n	800155e <HAL_PCD_Start+0x16>
 800155a:	2302      	movs	r3, #2
 800155c:	e016      	b.n	800158c <HAL_PCD_Start+0x44>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f002 feb6 	bl	80042dc <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001570:	2101      	movs	r1, #1
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f007 fae0 	bl	8008b38 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f005 fb9b 	bl	8006cb8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f005 fb93 	bl	8006ccc <USB_ReadInterrupts>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015b0:	d102      	bne.n	80015b8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 faf5 	bl	8001ba2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f005 fb85 	bl	8006ccc <USB_ReadInterrupts>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015cc:	d112      	bne.n	80015f4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015e0:	b292      	uxth	r2, r2
 80015e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f007 fb3f 	bl	8008c6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015ec:	2100      	movs	r1, #0
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f8c7 	bl	8001782 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f005 fb67 	bl	8006ccc <USB_ReadInterrupts>
 80015fe:	4603      	mov	r3, r0
 8001600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001604:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001608:	d10b      	bne.n	8001622 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001612:	b29a      	uxth	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800161c:	b292      	uxth	r2, r2
 800161e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f005 fb50 	bl	8006ccc <USB_ReadInterrupts>
 800162c:	4603      	mov	r3, r0
 800162e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001636:	d10b      	bne.n	8001650 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001640:	b29a      	uxth	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800164a:	b292      	uxth	r2, r2
 800164c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f005 fb39 	bl	8006ccc <USB_ReadInterrupts>
 800165a:	4603      	mov	r3, r0
 800165c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001664:	d126      	bne.n	80016b4 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800166e:	b29a      	uxth	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0204 	bic.w	r2, r2, #4
 8001678:	b292      	uxth	r2, r2
 800167a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001686:	b29a      	uxth	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0208 	bic.w	r2, r2, #8
 8001690:	b292      	uxth	r2, r2
 8001692:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f007 fb20 	bl	8008cdc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016ae:	b292      	uxth	r2, r2
 80016b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f005 fb07 	bl	8006ccc <USB_ReadInterrupts>
 80016be:	4603      	mov	r3, r0
 80016c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016c8:	d126      	bne.n	8001718 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f042 0208 	orr.w	r2, r2, #8
 80016dc:	b292      	uxth	r2, r2
 80016de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016f4:	b292      	uxth	r2, r2
 80016f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001702:	b29a      	uxth	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f042 0204 	orr.w	r2, r2, #4
 800170c:	b292      	uxth	r2, r2
 800170e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f007 fac8 	bl	8008ca8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f005 fad5 	bl	8006ccc <USB_ReadInterrupts>
 8001722:	4603      	mov	r3, r0
 8001724:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800172c:	d10e      	bne.n	800174c <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001736:	b29a      	uxth	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001740:	b292      	uxth	r2, r2
 8001742:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f007 fa81 	bl	8008c4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f005 fabb 	bl	8006ccc <USB_ReadInterrupts>
 8001756:	4603      	mov	r3, r0
 8001758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001760:	d10b      	bne.n	800177a <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800176a:	b29a      	uxth	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001774:	b292      	uxth	r2, r2
 8001776:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	460b      	mov	r3, r1
 800178c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001794:	2b01      	cmp	r3, #1
 8001796:	d101      	bne.n	800179c <HAL_PCD_SetAddress+0x1a>
 8001798:	2302      	movs	r3, #2
 800179a:	e013      	b.n	80017c4 <HAL_PCD_SetAddress+0x42>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	78fa      	ldrb	r2, [r7, #3]
 80017a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	78fa      	ldrb	r2, [r7, #3]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f005 fa6c 	bl	8006c92 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	4608      	mov	r0, r1
 80017d6:	4611      	mov	r1, r2
 80017d8:	461a      	mov	r2, r3
 80017da:	4603      	mov	r3, r0
 80017dc:	70fb      	strb	r3, [r7, #3]
 80017de:	460b      	mov	r3, r1
 80017e0:	803b      	strh	r3, [r7, #0]
 80017e2:	4613      	mov	r3, r2
 80017e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	da0e      	bge.n	8001810 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2201      	movs	r2, #1
 800180c:	705a      	strb	r2, [r3, #1]
 800180e:	e00e      	b.n	800182e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	f003 0207 	and.w	r2, r3, #7
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	b2da      	uxtb	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800183a:	883a      	ldrh	r2, [r7, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	78ba      	ldrb	r2, [r7, #2]
 8001844:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	785b      	ldrb	r3, [r3, #1]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d004      	beq.n	8001858 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	b29a      	uxth	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001858:	78bb      	ldrb	r3, [r7, #2]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d102      	bne.n	8001864 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2200      	movs	r2, #0
 8001862:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800186a:	2b01      	cmp	r3, #1
 800186c:	d101      	bne.n	8001872 <HAL_PCD_EP_Open+0xa6>
 800186e:	2302      	movs	r3, #2
 8001870:	e00e      	b.n	8001890 <HAL_PCD_EP_Open+0xc4>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68f9      	ldr	r1, [r7, #12]
 8001880:	4618      	mov	r0, r3
 8001882:	f002 fd7b 	bl	800437c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800188e:	7afb      	ldrb	r3, [r7, #11]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	da0e      	bge.n	80018ca <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	1c5a      	adds	r2, r3, #1
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	4413      	add	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2201      	movs	r2, #1
 80018c6:	705a      	strb	r2, [r3, #1]
 80018c8:	e00e      	b.n	80018e8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	f003 0207 	and.w	r2, r3, #7
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	4413      	add	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <HAL_PCD_EP_Close+0x6a>
 80018fe:	2302      	movs	r3, #2
 8001900:	e00e      	b.n	8001920 <HAL_PCD_EP_Close+0x88>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68f9      	ldr	r1, [r7, #12]
 8001910:	4618      	mov	r0, r3
 8001912:	f003 f89d 	bl	8004a50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	460b      	mov	r3, r1
 8001936:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001938:	7afb      	ldrb	r3, [r7, #11]
 800193a:	f003 0207 	and.w	r2, r3, #7
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	4413      	add	r3, r2
 800194e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	2200      	movs	r2, #0
 8001960:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2200      	movs	r2, #0
 8001966:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001968:	7afb      	ldrb	r3, [r7, #11]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	b2da      	uxtb	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001974:	7afb      	ldrb	r3, [r7, #11]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	2b00      	cmp	r3, #0
 800197c:	d106      	bne.n	800198c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6979      	ldr	r1, [r7, #20]
 8001984:	4618      	mov	r0, r3
 8001986:	f003 fa4f 	bl	8004e28 <USB_EPStartXfer>
 800198a:	e005      	b.n	8001998 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6979      	ldr	r1, [r7, #20]
 8001992:	4618      	mov	r0, r3
 8001994:	f003 fa48 	bl	8004e28 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	460b      	mov	r3, r1
 80019ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80019ae:	78fb      	ldrb	r3, [r7, #3]
 80019b0:	f003 0207 	and.w	r2, r3, #7
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	440b      	add	r3, r1
 80019c0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80019c4:	681b      	ldr	r3, [r3, #0]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	460b      	mov	r3, r1
 80019de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019e0:	7afb      	ldrb	r3, [r7, #11]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	4413      	add	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	2200      	movs	r2, #0
 8001a14:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a1c:	7afb      	ldrb	r3, [r7, #11]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a28:	7afb      	ldrb	r3, [r7, #11]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d106      	bne.n	8001a40 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6979      	ldr	r1, [r7, #20]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f003 f9f5 	bl	8004e28 <USB_EPStartXfer>
 8001a3e:	e005      	b.n	8001a4c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6979      	ldr	r1, [r7, #20]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 f9ee 	bl	8004e28 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b084      	sub	sp, #16
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a62:	78fb      	ldrb	r3, [r7, #3]
 8001a64:	f003 0207 	and.w	r2, r3, #7
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d901      	bls.n	8001a74 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e03e      	b.n	8001af2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	da0e      	bge.n	8001a9a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2201      	movs	r2, #1
 8001a96:	705a      	strb	r2, [r3, #1]
 8001a98:	e00c      	b.n	8001ab4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a9a:	78fa      	ldrb	r2, [r7, #3]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	4413      	add	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_PCD_EP_SetStall+0x7e>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e00e      	b.n	8001af2 <HAL_PCD_EP_SetStall+0x9c>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68f9      	ldr	r1, [r7, #12]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f004 ffd8 	bl	8006a98 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b084      	sub	sp, #16
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	460b      	mov	r3, r1
 8001b04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	f003 020f 	and.w	r2, r3, #15
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d901      	bls.n	8001b18 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e040      	b.n	8001b9a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	da0e      	bge.n	8001b3e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	4413      	add	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	705a      	strb	r2, [r3, #1]
 8001b3c:	e00e      	b.n	8001b5c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b3e:	78fb      	ldrb	r3, [r7, #3]
 8001b40:	f003 0207 	and.w	r2, r3, #7
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	4413      	add	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b62:	78fb      	ldrb	r3, [r7, #3]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_PCD_EP_ClrStall+0x82>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e00e      	b.n	8001b9a <HAL_PCD_EP_ClrStall+0xa0>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68f9      	ldr	r1, [r7, #12]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f004 ffd4 	bl	8006b38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b08e      	sub	sp, #56	; 0x38
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001baa:	e2ec      	b.n	8002186 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bb4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001bb6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001bc2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f040 8161 	bne.w	8001e8e <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001bcc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d152      	bne.n	8001c7c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001be6:	81fb      	strh	r3, [r7, #14]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	89fb      	ldrh	r3, [r7, #14]
 8001bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3328      	adds	r3, #40	; 0x28
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4413      	add	r3, r2
 8001c14:	3302      	adds	r3, #2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	695a      	ldr	r2, [r3, #20]
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	441a      	add	r2, r3
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f006 ffec 	bl	8008c1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 829b 	beq.w	8002186 <PCD_EP_ISR_Handler+0x5e4>
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f040 8296 	bne.w	8002186 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	b292      	uxth	r2, r2
 8001c6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c7a:	e284      	b.n	8002186 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c8c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d034      	beq.n	8001d00 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4413      	add	r3, r2
 8001caa:	3306      	adds	r3, #6
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	f005 f84d 	bl	8006d74 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	823b      	strh	r3, [r7, #16]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	8a3a      	ldrh	r2, [r7, #16]
 8001cf0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cf4:	b292      	uxth	r2, r2
 8001cf6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f006 ff61 	bl	8008bc0 <HAL_PCD_SetupStageCallback>
 8001cfe:	e242      	b.n	8002186 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d00:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f280 823e 	bge.w	8002186 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d16:	4013      	ands	r3, r2
 8001d18:	83bb      	strh	r3, [r7, #28]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	8bba      	ldrh	r2, [r7, #28]
 8001d20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d24:	b292      	uxth	r2, r2
 8001d26:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	461a      	mov	r2, r3
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3306      	adds	r3, #6
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	4413      	add	r3, r2
 8001d46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d019      	beq.n	8001d90 <PCD_EP_ISR_Handler+0x1ee>
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d015      	beq.n	8001d90 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	6959      	ldr	r1, [r3, #20]
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	f004 fffd 	bl	8006d74 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	695a      	ldr	r2, [r3, #20]
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	441a      	add	r2, r3
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d88:	2100      	movs	r1, #0
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f006 ff2a 	bl	8008be4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f040 81f2 	bne.w	8002186 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	61bb      	str	r3, [r7, #24]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	4413      	add	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d112      	bne.n	8001df0 <PCD_EP_ISR_Handler+0x24e>
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	801a      	strh	r2, [r3, #0]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	801a      	strh	r2, [r3, #0]
 8001dee:	e02f      	b.n	8001e50 <PCD_EP_ISR_Handler+0x2ae>
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	2b3e      	cmp	r3, #62	; 0x3e
 8001df6:	d813      	bhi.n	8001e20 <PCD_EP_ISR_Handler+0x27e>
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	085b      	lsrs	r3, r3, #1
 8001dfe:	633b      	str	r3, [r7, #48]	; 0x30
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <PCD_EP_ISR_Handler+0x270>
 8001e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0e:	3301      	adds	r3, #1
 8001e10:	633b      	str	r3, [r7, #48]	; 0x30
 8001e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	029b      	lsls	r3, r3, #10
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	801a      	strh	r2, [r3, #0]
 8001e1e:	e017      	b.n	8001e50 <PCD_EP_ISR_Handler+0x2ae>
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	095b      	lsrs	r3, r3, #5
 8001e26:	633b      	str	r3, [r7, #48]	; 0x30
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <PCD_EP_ISR_Handler+0x298>
 8001e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e36:	3b01      	subs	r3, #1
 8001e38:	633b      	str	r3, [r7, #48]	; 0x30
 8001e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	029b      	lsls	r3, r3, #10
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e60:	827b      	strh	r3, [r7, #18]
 8001e62:	8a7b      	ldrh	r3, [r7, #18]
 8001e64:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e68:	827b      	strh	r3, [r7, #18]
 8001e6a:	8a7b      	ldrh	r3, [r7, #18]
 8001e6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e70:	827b      	strh	r3, [r7, #18]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	8a7b      	ldrh	r3, [r7, #18]
 8001e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	8013      	strh	r3, [r2, #0]
 8001e8c:	e17b      	b.n	8002186 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ea0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f280 80ea 	bge.w	800207e <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	853b      	strh	r3, [r7, #40]	; 0x28
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ed4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ed8:	b292      	uxth	r2, r2
 8001eda:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001edc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	7b1b      	ldrb	r3, [r3, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d122      	bne.n	8001f40 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	461a      	mov	r2, r3
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3306      	adds	r3, #6
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f22:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001f24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 8087 	beq.w	800203a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	6959      	ldr	r1, [r3, #20]
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	88da      	ldrh	r2, [r3, #6]
 8001f38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f3a:	f004 ff1b 	bl	8006d74 <USB_ReadPMA>
 8001f3e:	e07c      	b.n	800203a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	78db      	ldrb	r3, [r3, #3]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d108      	bne.n	8001f5a <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001f48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f927 	bl	80021a2 <HAL_PCD_EP_DB_Receive>
 8001f54:	4603      	mov	r3, r0
 8001f56:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001f58:	e06f      	b.n	800203a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f74:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	441a      	add	r2, r3
 8001f84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d021      	beq.n	8001ff8 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3302      	adds	r3, #2
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fdc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001fde:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d02a      	beq.n	800203a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	6959      	ldr	r1, [r3, #20]
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	891a      	ldrh	r2, [r3, #8]
 8001ff0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ff2:	f004 febf 	bl	8006d74 <USB_ReadPMA>
 8001ff6:	e020      	b.n	800203a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002000:	b29b      	uxth	r3, r3
 8002002:	461a      	mov	r2, r3
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	3306      	adds	r3, #6
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	4413      	add	r3, r2
 8002016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002020:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002022:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	6959      	ldr	r1, [r3, #20]
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	895a      	ldrh	r2, [r3, #10]
 8002034:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002036:	f004 fe9d 	bl	8006d74 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	69da      	ldr	r2, [r3, #28]
 800203e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002040:	441a      	add	r2, r3
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	695a      	ldr	r2, [r3, #20]
 800204a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800204c:	441a      	add	r2, r3
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d004      	beq.n	8002064 <PCD_EP_ISR_Handler+0x4c2>
 800205a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	429a      	cmp	r2, r3
 8002062:	d206      	bcs.n	8002072 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	4619      	mov	r1, r3
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f006 fdba 	bl	8008be4 <HAL_PCD_DataOutStageCallback>
 8002070:	e005      	b.n	800207e <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002078:	4618      	mov	r0, r3
 800207a:	f002 fed5 	bl	8004e28 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800207e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002084:	2b00      	cmp	r3, #0
 8002086:	d07e      	beq.n	8002186 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002088:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80020b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020b6:	843b      	strh	r3, [r7, #32]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	461a      	mov	r2, r3
 80020be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	441a      	add	r2, r3
 80020c6:	8c3b      	ldrh	r3, [r7, #32]
 80020c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	78db      	ldrb	r3, [r3, #3]
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d00c      	beq.n	80020f6 <PCD_EP_ISR_Handler+0x554>
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	78db      	ldrb	r3, [r3, #3]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d146      	bne.n	800217a <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80020ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d141      	bne.n	800217a <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020fe:	b29b      	uxth	r3, r3
 8002100:	461a      	mov	r2, r3
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	3302      	adds	r3, #2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	4413      	add	r3, r2
 8002114:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800211e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	699a      	ldr	r2, [r3, #24]
 8002124:	8bfb      	ldrh	r3, [r7, #30]
 8002126:	429a      	cmp	r2, r3
 8002128:	d906      	bls.n	8002138 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	699a      	ldr	r2, [r3, #24]
 800212e:	8bfb      	ldrh	r3, [r7, #30]
 8002130:	1ad2      	subs	r2, r2, r3
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	619a      	str	r2, [r3, #24]
 8002136:	e002      	b.n	800213e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	2200      	movs	r2, #0
 800213c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d106      	bne.n	8002154 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	4619      	mov	r1, r3
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f006 fd64 	bl	8008c1a <HAL_PCD_DataInStageCallback>
 8002152:	e018      	b.n	8002186 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	695a      	ldr	r2, [r3, #20]
 8002158:	8bfb      	ldrh	r3, [r7, #30]
 800215a:	441a      	add	r2, r3
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	69da      	ldr	r2, [r3, #28]
 8002164:	8bfb      	ldrh	r3, [r7, #30]
 8002166:	441a      	add	r2, r3
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002172:	4618      	mov	r0, r3
 8002174:	f002 fe58 	bl	8004e28 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002178:	e005      	b.n	8002186 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800217a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800217c:	461a      	mov	r2, r3
 800217e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f91b 	bl	80023bc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800218e:	b29b      	uxth	r3, r3
 8002190:	b21b      	sxth	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	f6ff ad0a 	blt.w	8001bac <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3738      	adds	r7, #56	; 0x38
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b088      	sub	sp, #32
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	4613      	mov	r3, r2
 80021ae:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021b0:	88fb      	ldrh	r3, [r7, #6]
 80021b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d07e      	beq.n	80022b8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4413      	add	r3, r2
 80021ce:	3302      	adds	r3, #2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021e2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	699a      	ldr	r2, [r3, #24]
 80021e8:	8b7b      	ldrh	r3, [r7, #26]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d306      	bcc.n	80021fc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	8b7b      	ldrh	r3, [r7, #26]
 80021f4:	1ad2      	subs	r2, r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	619a      	str	r2, [r3, #24]
 80021fa:	e002      	b.n	8002202 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2200      	movs	r2, #0
 8002200:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d123      	bne.n	8002252 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002224:	833b      	strh	r3, [r7, #24]
 8002226:	8b3b      	ldrh	r3, [r7, #24]
 8002228:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800222c:	833b      	strh	r3, [r7, #24]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	441a      	add	r2, r3
 800223c:	8b3b      	ldrh	r3, [r7, #24]
 800223e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800224a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800224e:	b29b      	uxth	r3, r3
 8002250:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002252:	88fb      	ldrh	r3, [r7, #6]
 8002254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002258:	2b00      	cmp	r3, #0
 800225a:	d01f      	beq.n	800229c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	b29b      	uxth	r3, r3
 800226e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002276:	82fb      	strh	r3, [r7, #22]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	441a      	add	r2, r3
 8002286:	8afb      	ldrh	r3, [r7, #22]
 8002288:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800228c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002294:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002298:	b29b      	uxth	r3, r3
 800229a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800229c:	8b7b      	ldrh	r3, [r7, #26]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 8087 	beq.w	80023b2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6818      	ldr	r0, [r3, #0]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	6959      	ldr	r1, [r3, #20]
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	891a      	ldrh	r2, [r3, #8]
 80022b0:	8b7b      	ldrh	r3, [r7, #26]
 80022b2:	f004 fd5f 	bl	8006d74 <USB_ReadPMA>
 80022b6:	e07c      	b.n	80023b2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	461a      	mov	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4413      	add	r3, r2
 80022cc:	3306      	adds	r3, #6
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022e0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	699a      	ldr	r2, [r3, #24]
 80022e6:	8b7b      	ldrh	r3, [r7, #26]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d306      	bcc.n	80022fa <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	699a      	ldr	r2, [r3, #24]
 80022f0:	8b7b      	ldrh	r3, [r7, #26]
 80022f2:	1ad2      	subs	r2, r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	619a      	str	r2, [r3, #24]
 80022f8:	e002      	b.n	8002300 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2200      	movs	r2, #0
 80022fe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d123      	bne.n	8002350 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	b29b      	uxth	r3, r3
 800231a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800231e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002322:	83fb      	strh	r3, [r7, #30]
 8002324:	8bfb      	ldrh	r3, [r7, #30]
 8002326:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800232a:	83fb      	strh	r3, [r7, #30]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	441a      	add	r2, r3
 800233a:	8bfb      	ldrh	r3, [r7, #30]
 800233c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800234c:	b29b      	uxth	r3, r3
 800234e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002350:	88fb      	ldrh	r3, [r7, #6]
 8002352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002356:	2b00      	cmp	r3, #0
 8002358:	d11f      	bne.n	800239a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	b29b      	uxth	r3, r3
 800236c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002374:	83bb      	strh	r3, [r7, #28]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	441a      	add	r2, r3
 8002384:	8bbb      	ldrh	r3, [r7, #28]
 8002386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800238a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800238e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002392:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002396:	b29b      	uxth	r3, r3
 8002398:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800239a:	8b7b      	ldrh	r3, [r7, #26]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	6959      	ldr	r1, [r3, #20]
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	895a      	ldrh	r2, [r3, #10]
 80023ac:	8b7b      	ldrh	r3, [r7, #26]
 80023ae:	f004 fce1 	bl	8006d74 <USB_ReadPMA>
    }
  }

  return count;
 80023b2:	8b7b      	ldrh	r3, [r7, #26]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3720      	adds	r7, #32
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b0a2      	sub	sp, #136	; 0x88
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	4613      	mov	r3, r2
 80023c8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023ca:	88fb      	ldrh	r3, [r7, #6]
 80023cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 81c7 	beq.w	8002764 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023de:	b29b      	uxth	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4413      	add	r3, r2
 80023ea:	3302      	adds	r3, #2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	6812      	ldr	r2, [r2, #0]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	699a      	ldr	r2, [r3, #24]
 8002406:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800240a:	429a      	cmp	r2, r3
 800240c:	d907      	bls.n	800241e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002416:	1ad2      	subs	r2, r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	619a      	str	r2, [r3, #24]
 800241c:	e002      	b.n	8002424 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2200      	movs	r2, #0
 8002422:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	2b00      	cmp	r3, #0
 800242a:	f040 80b9 	bne.w	80025a0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	785b      	ldrb	r3, [r3, #1]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d126      	bne.n	8002484 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	62bb      	str	r3, [r7, #40]	; 0x28
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002444:	b29b      	uxth	r3, r3
 8002446:	461a      	mov	r2, r3
 8002448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244a:	4413      	add	r3, r2
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	011a      	lsls	r2, r3, #4
 8002454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002456:	4413      	add	r3, r2
 8002458:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	b29b      	uxth	r3, r3
 8002464:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002468:	b29a      	uxth	r2, r3
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	801a      	strh	r2, [r3, #0]
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	b29b      	uxth	r3, r3
 8002474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800247c:	b29a      	uxth	r2, r3
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	801a      	strh	r2, [r3, #0]
 8002482:	e01a      	b.n	80024ba <HAL_PCD_EP_DB_Transmit+0xfe>
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	785b      	ldrb	r3, [r3, #1]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d116      	bne.n	80024ba <HAL_PCD_EP_DB_Transmit+0xfe>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	633b      	str	r3, [r7, #48]	; 0x30
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800249a:	b29b      	uxth	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a0:	4413      	add	r3, r2
 80024a2:	633b      	str	r3, [r7, #48]	; 0x30
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	011a      	lsls	r2, r3, #4
 80024aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ac:	4413      	add	r3, r2
 80024ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b6:	2200      	movs	r2, #0
 80024b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	623b      	str	r3, [r7, #32]
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	785b      	ldrb	r3, [r3, #1]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d126      	bne.n	8002516 <HAL_PCD_EP_DB_Transmit+0x15a>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	61bb      	str	r3, [r7, #24]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	4413      	add	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	011a      	lsls	r2, r3, #4
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	4413      	add	r3, r2
 80024ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	801a      	strh	r2, [r3, #0]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	b29b      	uxth	r3, r3
 8002506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800250a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800250e:	b29a      	uxth	r2, r3
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	801a      	strh	r2, [r3, #0]
 8002514:	e017      	b.n	8002546 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	785b      	ldrb	r3, [r3, #1]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d113      	bne.n	8002546 <HAL_PCD_EP_DB_Transmit+0x18a>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002526:	b29b      	uxth	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	4413      	add	r3, r2
 800252e:	623b      	str	r3, [r7, #32]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	011a      	lsls	r2, r3, #4
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	4413      	add	r3, r2
 800253a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800253e:	61fb      	str	r3, [r7, #28]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	2200      	movs	r2, #0
 8002544:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	4619      	mov	r1, r3
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f006 fb64 	bl	8008c1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 82d4 	beq.w	8002b06 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	b29b      	uxth	r3, r3
 8002570:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002578:	827b      	strh	r3, [r7, #18]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	441a      	add	r2, r3
 8002588:	8a7b      	ldrh	r3, [r7, #18]
 800258a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800258e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002592:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800259a:	b29b      	uxth	r3, r3
 800259c:	8013      	strh	r3, [r2, #0]
 800259e:	e2b2      	b.n	8002b06 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d021      	beq.n	80025ee <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	461a      	mov	r2, r3
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	441a      	add	r2, r3
 80025d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80025da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	f040 8286 	bne.w	8002b06 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	695a      	ldr	r2, [r3, #20]
 80025fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002602:	441a      	add	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	69da      	ldr	r2, [r3, #28]
 800260c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002610:	441a      	add	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	6a1a      	ldr	r2, [r3, #32]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	429a      	cmp	r2, r3
 8002620:	d309      	bcc.n	8002636 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	6a1a      	ldr	r2, [r3, #32]
 800262c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800262e:	1ad2      	subs	r2, r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	621a      	str	r2, [r3, #32]
 8002634:	e015      	b.n	8002662 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d107      	bne.n	800264e <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800263e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002642:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800264c:	e009      	b.n	8002662 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2200      	movs	r2, #0
 8002660:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	785b      	ldrb	r3, [r3, #1]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d155      	bne.n	8002716 <HAL_PCD_EP_DB_Transmit+0x35a>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002678:	b29b      	uxth	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267e:	4413      	add	r3, r2
 8002680:	63bb      	str	r3, [r7, #56]	; 0x38
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	011a      	lsls	r2, r3, #4
 8002688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800268a:	4413      	add	r3, r2
 800268c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002690:	637b      	str	r3, [r7, #52]	; 0x34
 8002692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002694:	2b00      	cmp	r3, #0
 8002696:	d112      	bne.n	80026be <HAL_PCD_EP_DB_Transmit+0x302>
 8002698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	b29b      	uxth	r3, r3
 800269e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a6:	801a      	strh	r2, [r3, #0]
 80026a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ba:	801a      	strh	r2, [r3, #0]
 80026bc:	e047      	b.n	800274e <HAL_PCD_EP_DB_Transmit+0x392>
 80026be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026c0:	2b3e      	cmp	r3, #62	; 0x3e
 80026c2:	d811      	bhi.n	80026e8 <HAL_PCD_EP_DB_Transmit+0x32c>
 80026c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026c6:	085b      	lsrs	r3, r3, #1
 80026c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80026ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <HAL_PCD_EP_DB_Transmit+0x31e>
 80026d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026d6:	3301      	adds	r3, #1
 80026d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80026da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026dc:	b29b      	uxth	r3, r3
 80026de:	029b      	lsls	r3, r3, #10
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e4:	801a      	strh	r2, [r3, #0]
 80026e6:	e032      	b.n	800274e <HAL_PCD_EP_DB_Transmit+0x392>
 80026e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80026ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d102      	bne.n	80026fe <HAL_PCD_EP_DB_Transmit+0x342>
 80026f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026fa:	3b01      	subs	r3, #1
 80026fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80026fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002700:	b29b      	uxth	r3, r3
 8002702:	029b      	lsls	r3, r3, #10
 8002704:	b29b      	uxth	r3, r3
 8002706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800270a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800270e:	b29a      	uxth	r2, r3
 8002710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002712:	801a      	strh	r2, [r3, #0]
 8002714:	e01b      	b.n	800274e <HAL_PCD_EP_DB_Transmit+0x392>
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	785b      	ldrb	r3, [r3, #1]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d117      	bne.n	800274e <HAL_PCD_EP_DB_Transmit+0x392>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	643b      	str	r3, [r7, #64]	; 0x40
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800272c:	b29b      	uxth	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002732:	4413      	add	r3, r2
 8002734:	643b      	str	r3, [r7, #64]	; 0x40
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	011a      	lsls	r2, r3, #4
 800273c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800273e:	4413      	add	r3, r2
 8002740:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002748:	b29a      	uxth	r2, r3
 800274a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800274c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	6959      	ldr	r1, [r3, #20]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	891a      	ldrh	r2, [r3, #8]
 800275a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800275c:	b29b      	uxth	r3, r3
 800275e:	f004 fac4 	bl	8006cea <USB_WritePMA>
 8002762:	e1d0      	b.n	8002b06 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800276c:	b29b      	uxth	r3, r3
 800276e:	461a      	mov	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4413      	add	r3, r2
 8002778:	3306      	adds	r3, #6
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	4413      	add	r3, r2
 8002782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800278c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	699a      	ldr	r2, [r3, #24]
 8002794:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002798:	429a      	cmp	r2, r3
 800279a:	d307      	bcc.n	80027ac <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	699a      	ldr	r2, [r3, #24]
 80027a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027a4:	1ad2      	subs	r2, r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	619a      	str	r2, [r3, #24]
 80027aa:	e002      	b.n	80027b2 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2200      	movs	r2, #0
 80027b0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 80c4 	bne.w	8002944 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	785b      	ldrb	r3, [r3, #1]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d126      	bne.n	8002812 <HAL_PCD_EP_DB_Transmit+0x456>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d8:	4413      	add	r3, r2
 80027da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	011a      	lsls	r2, r3, #4
 80027e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e4:	4413      	add	r3, r2
 80027e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80027ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027fa:	801a      	strh	r2, [r3, #0]
 80027fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	b29b      	uxth	r3, r3
 8002802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800280a:	b29a      	uxth	r2, r3
 800280c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800280e:	801a      	strh	r2, [r3, #0]
 8002810:	e01a      	b.n	8002848 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	785b      	ldrb	r3, [r3, #1]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d116      	bne.n	8002848 <HAL_PCD_EP_DB_Transmit+0x48c>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	677b      	str	r3, [r7, #116]	; 0x74
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002828:	b29b      	uxth	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800282e:	4413      	add	r3, r2
 8002830:	677b      	str	r3, [r7, #116]	; 0x74
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	011a      	lsls	r2, r3, #4
 8002838:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800283a:	4413      	add	r3, r2
 800283c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002840:	673b      	str	r3, [r7, #112]	; 0x70
 8002842:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002844:	2200      	movs	r2, #0
 8002846:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	67bb      	str	r3, [r7, #120]	; 0x78
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	785b      	ldrb	r3, [r3, #1]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d12f      	bne.n	80028b6 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002866:	b29b      	uxth	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800286e:	4413      	add	r3, r2
 8002870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	011a      	lsls	r2, r3, #4
 800287a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800287e:	4413      	add	r3, r2
 8002880:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002884:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002888:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	b29b      	uxth	r3, r3
 8002890:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002894:	b29a      	uxth	r2, r3
 8002896:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800289a:	801a      	strh	r2, [r3, #0]
 800289c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028b2:	801a      	strh	r2, [r3, #0]
 80028b4:	e017      	b.n	80028e6 <HAL_PCD_EP_DB_Transmit+0x52a>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	785b      	ldrb	r3, [r3, #1]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d113      	bne.n	80028e6 <HAL_PCD_EP_DB_Transmit+0x52a>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028cc:	4413      	add	r3, r2
 80028ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	011a      	lsls	r2, r3, #4
 80028d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028d8:	4413      	add	r3, r2
 80028da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028e2:	2200      	movs	r2, #0
 80028e4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	4619      	mov	r1, r3
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f006 f994 	bl	8008c1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f040 8104 	bne.w	8002b06 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	b29b      	uxth	r3, r3
 8002910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002918:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	461a      	mov	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	441a      	add	r2, r3
 800292a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800292e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002936:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800293a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800293e:	b29b      	uxth	r3, r3
 8002940:	8013      	strh	r3, [r2, #0]
 8002942:	e0e0      	b.n	8002b06 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002944:	88fb      	ldrh	r3, [r7, #6]
 8002946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d121      	bne.n	8002992 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	b29b      	uxth	r3, r3
 8002960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002968:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	441a      	add	r2, r3
 800297a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800297e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002986:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800298a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800298e:	b29b      	uxth	r3, r3
 8002990:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002998:	2b01      	cmp	r3, #1
 800299a:	f040 80b4 	bne.w	8002b06 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029a6:	441a      	add	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	69da      	ldr	r2, [r3, #28]
 80029b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029b4:	441a      	add	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	6a1a      	ldr	r2, [r3, #32]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d309      	bcc.n	80029da <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	6a1a      	ldr	r2, [r3, #32]
 80029d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029d2:	1ad2      	subs	r2, r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	621a      	str	r2, [r3, #32]
 80029d8:	e015      	b.n	8002a06 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d107      	bne.n	80029f2 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80029e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029e6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029f0:	e009      	b.n	8002a06 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2200      	movs	r2, #0
 80029fc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	667b      	str	r3, [r7, #100]	; 0x64
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	785b      	ldrb	r3, [r3, #1]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d155      	bne.n	8002ac0 <HAL_PCD_EP_DB_Transmit+0x704>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	461a      	mov	r2, r3
 8002a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a28:	4413      	add	r3, r2
 8002a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	011a      	lsls	r2, r3, #4
 8002a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a34:	4413      	add	r3, r2
 8002a36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d112      	bne.n	8002a68 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002a42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a50:	801a      	strh	r2, [r3, #0]
 8002a52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a64:	801a      	strh	r2, [r3, #0]
 8002a66:	e044      	b.n	8002af2 <HAL_PCD_EP_DB_Transmit+0x736>
 8002a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a6a:	2b3e      	cmp	r3, #62	; 0x3e
 8002a6c:	d811      	bhi.n	8002a92 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a70:	085b      	lsrs	r3, r3, #1
 8002a72:	657b      	str	r3, [r7, #84]	; 0x54
 8002a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a80:	3301      	adds	r3, #1
 8002a82:	657b      	str	r3, [r7, #84]	; 0x54
 8002a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	029b      	lsls	r3, r3, #10
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a8e:	801a      	strh	r2, [r3, #0]
 8002a90:	e02f      	b.n	8002af2 <HAL_PCD_EP_DB_Transmit+0x736>
 8002a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a94:	095b      	lsrs	r3, r3, #5
 8002a96:	657b      	str	r3, [r7, #84]	; 0x54
 8002a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a9a:	f003 031f 	and.w	r3, r3, #31
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d102      	bne.n	8002aa8 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	657b      	str	r3, [r7, #84]	; 0x54
 8002aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	029b      	lsls	r3, r3, #10
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002abc:	801a      	strh	r2, [r3, #0]
 8002abe:	e018      	b.n	8002af2 <HAL_PCD_EP_DB_Transmit+0x736>
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	785b      	ldrb	r3, [r3, #1]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d114      	bne.n	8002af2 <HAL_PCD_EP_DB_Transmit+0x736>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ad6:	4413      	add	r3, r2
 8002ad8:	667b      	str	r3, [r7, #100]	; 0x64
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	011a      	lsls	r2, r3, #4
 8002ae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ae8:	663b      	str	r3, [r7, #96]	; 0x60
 8002aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002af0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6818      	ldr	r0, [r3, #0]
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	6959      	ldr	r1, [r3, #20]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	895a      	ldrh	r2, [r3, #10]
 8002afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	f004 f8f2 	bl	8006cea <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b20:	823b      	strh	r3, [r7, #16]
 8002b22:	8a3b      	ldrh	r3, [r7, #16]
 8002b24:	f083 0310 	eor.w	r3, r3, #16
 8002b28:	823b      	strh	r3, [r7, #16]
 8002b2a:	8a3b      	ldrh	r3, [r7, #16]
 8002b2c:	f083 0320 	eor.w	r3, r3, #32
 8002b30:	823b      	strh	r3, [r7, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	441a      	add	r2, r3
 8002b40:	8a3b      	ldrh	r3, [r7, #16]
 8002b42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3788      	adds	r7, #136	; 0x88
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	607b      	str	r3, [r7, #4]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	817b      	strh	r3, [r7, #10]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b72:	897b      	ldrh	r3, [r7, #10]
 8002b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00b      	beq.n	8002b96 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b7e:	897b      	ldrh	r3, [r7, #10]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4413      	add	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	e009      	b.n	8002baa <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b96:	897a      	ldrh	r2, [r7, #10]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002baa:	893b      	ldrh	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d107      	bne.n	8002bc0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	80da      	strh	r2, [r3, #6]
 8002bbe:	e00b      	b.n	8002bd8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	0c1b      	lsrs	r3, r3, #16
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	371c      	adds	r7, #28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e31d      	b.n	8003232 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bf6:	4b94      	ldr	r3, [pc, #592]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
 8002bfe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c00:	4b91      	ldr	r3, [pc, #580]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c08:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d07b      	beq.n	8002d0e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d006      	beq.n	8002c2a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	2b0c      	cmp	r3, #12
 8002c20:	d10f      	bne.n	8002c42 <HAL_RCC_OscConfig+0x5e>
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c28:	d10b      	bne.n	8002c42 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2a:	4b87      	ldr	r3, [pc, #540]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d06a      	beq.n	8002d0c <HAL_RCC_OscConfig+0x128>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d166      	bne.n	8002d0c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e2f7      	b.n	8003232 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d106      	bne.n	8002c58 <HAL_RCC_OscConfig+0x74>
 8002c4a:	4b7f      	ldr	r3, [pc, #508]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a7e      	ldr	r2, [pc, #504]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	e02d      	b.n	8002cb4 <HAL_RCC_OscConfig+0xd0>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10c      	bne.n	8002c7a <HAL_RCC_OscConfig+0x96>
 8002c60:	4b79      	ldr	r3, [pc, #484]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a78      	ldr	r2, [pc, #480]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b76      	ldr	r3, [pc, #472]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a75      	ldr	r2, [pc, #468]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	e01c      	b.n	8002cb4 <HAL_RCC_OscConfig+0xd0>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b05      	cmp	r3, #5
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCC_OscConfig+0xb8>
 8002c82:	4b71      	ldr	r3, [pc, #452]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a70      	ldr	r2, [pc, #448]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	4b6e      	ldr	r3, [pc, #440]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a6d      	ldr	r2, [pc, #436]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	e00b      	b.n	8002cb4 <HAL_RCC_OscConfig+0xd0>
 8002c9c:	4b6a      	ldr	r3, [pc, #424]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a69      	ldr	r2, [pc, #420]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	4b67      	ldr	r3, [pc, #412]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a66      	ldr	r2, [pc, #408]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d013      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbc:	f7fd ff20 	bl	8000b00 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc4:	f7fd ff1c 	bl	8000b00 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b64      	cmp	r3, #100	; 0x64
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e2ad      	b.n	8003232 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cd6:	4b5c      	ldr	r3, [pc, #368]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0xe0>
 8002ce2:	e014      	b.n	8002d0e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce4:	f7fd ff0c 	bl	8000b00 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cec:	f7fd ff08 	bl	8000b00 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	; 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e299      	b.n	8003232 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cfe:	4b52      	ldr	r3, [pc, #328]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x108>
 8002d0a:	e000      	b.n	8002d0e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d05a      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d005      	beq.n	8002d2c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	2b0c      	cmp	r3, #12
 8002d24:	d119      	bne.n	8002d5a <HAL_RCC_OscConfig+0x176>
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d116      	bne.n	8002d5a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2c:	4b46      	ldr	r3, [pc, #280]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_OscConfig+0x160>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e276      	b.n	8003232 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d44:	4b40      	ldr	r3, [pc, #256]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	493d      	ldr	r1, [pc, #244]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d58:	e03a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d020      	beq.n	8002da4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d62:	4b3a      	ldr	r3, [pc, #232]	; (8002e4c <HAL_RCC_OscConfig+0x268>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d68:	f7fd feca 	bl	8000b00 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d70:	f7fd fec6 	bl	8000b00 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e257      	b.n	8003232 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d82:	4b31      	ldr	r3, [pc, #196]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8e:	4b2e      	ldr	r3, [pc, #184]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	492a      	ldr	r1, [pc, #168]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
 8002da2:	e015      	b.n	8002dd0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002da4:	4b29      	ldr	r3, [pc, #164]	; (8002e4c <HAL_RCC_OscConfig+0x268>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002daa:	f7fd fea9 	bl	8000b00 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002db2:	f7fd fea5 	bl	8000b00 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e236      	b.n	8003232 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002dc4:	4b20      	ldr	r3, [pc, #128]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f0      	bne.n	8002db2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0310 	and.w	r3, r3, #16
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 80b8 	beq.w	8002f4e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d170      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002de4:	4b18      	ldr	r3, [pc, #96]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_RCC_OscConfig+0x218>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e21a      	b.n	8003232 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a1a      	ldr	r2, [r3, #32]
 8002e00:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d921      	bls.n	8002e50 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 fc67 	bl	80036e4 <RCC_SetFlashLatencyFromMSIRange>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e208      	b.n	8003232 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e20:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	4906      	ldr	r1, [pc, #24]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e32:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	061b      	lsls	r3, r3, #24
 8002e40:	4901      	ldr	r1, [pc, #4]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]
 8002e46:	e020      	b.n	8002e8a <HAL_RCC_OscConfig+0x2a6>
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e50:	4b99      	ldr	r3, [pc, #612]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	4996      	ldr	r1, [pc, #600]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e62:	4b95      	ldr	r3, [pc, #596]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	061b      	lsls	r3, r3, #24
 8002e70:	4991      	ldr	r1, [pc, #580]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 fc32 	bl	80036e4 <RCC_SetFlashLatencyFromMSIRange>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e1d3      	b.n	8003232 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	0b5b      	lsrs	r3, r3, #13
 8002e90:	3301      	adds	r3, #1
 8002e92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002e9a:	4a87      	ldr	r2, [pc, #540]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8002e9c:	6892      	ldr	r2, [r2, #8]
 8002e9e:	0912      	lsrs	r2, r2, #4
 8002ea0:	f002 020f 	and.w	r2, r2, #15
 8002ea4:	4985      	ldr	r1, [pc, #532]	; (80030bc <HAL_RCC_OscConfig+0x4d8>)
 8002ea6:	5c8a      	ldrb	r2, [r1, r2]
 8002ea8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002eaa:	4a85      	ldr	r2, [pc, #532]	; (80030c0 <HAL_RCC_OscConfig+0x4dc>)
 8002eac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002eae:	4b85      	ldr	r3, [pc, #532]	; (80030c4 <HAL_RCC_OscConfig+0x4e0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fd fdd8 	bl	8000a68 <HAL_InitTick>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d045      	beq.n	8002f4e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
 8002ec4:	e1b5      	b.n	8003232 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d029      	beq.n	8002f22 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ece:	4b7e      	ldr	r3, [pc, #504]	; (80030c8 <HAL_RCC_OscConfig+0x4e4>)
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7fd fe14 	bl	8000b00 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002edc:	f7fd fe10 	bl	8000b00 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e1a1      	b.n	8003232 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002eee:	4b72      	ldr	r3, [pc, #456]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002efa:	4b6f      	ldr	r3, [pc, #444]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	496c      	ldr	r1, [pc, #432]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f0c:	4b6a      	ldr	r3, [pc, #424]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	061b      	lsls	r3, r3, #24
 8002f1a:	4967      	ldr	r1, [pc, #412]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]
 8002f20:	e015      	b.n	8002f4e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f22:	4b69      	ldr	r3, [pc, #420]	; (80030c8 <HAL_RCC_OscConfig+0x4e4>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7fd fdea 	bl	8000b00 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f30:	f7fd fde6 	bl	8000b00 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e177      	b.n	8003232 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f42:	4b5d      	ldr	r3, [pc, #372]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d030      	beq.n	8002fbc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d016      	beq.n	8002f90 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f62:	4b5a      	ldr	r3, [pc, #360]	; (80030cc <HAL_RCC_OscConfig+0x4e8>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f68:	f7fd fdca 	bl	8000b00 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f70:	f7fd fdc6 	bl	8000b00 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e157      	b.n	8003232 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f82:	4b4d      	ldr	r3, [pc, #308]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8002f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0x38c>
 8002f8e:	e015      	b.n	8002fbc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f90:	4b4e      	ldr	r3, [pc, #312]	; (80030cc <HAL_RCC_OscConfig+0x4e8>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f96:	f7fd fdb3 	bl	8000b00 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f9e:	f7fd fdaf 	bl	8000b00 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e140      	b.n	8003232 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fb0:	4b41      	ldr	r3, [pc, #260]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8002fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f0      	bne.n	8002f9e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 80b5 	beq.w	8003134 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fce:	4b3a      	ldr	r3, [pc, #232]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10d      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fda:	4b37      	ldr	r3, [pc, #220]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	4a36      	ldr	r2, [pc, #216]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8002fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	6253      	str	r3, [r2, #36]	; 0x24
 8002fe6:	4b34      	ldr	r3, [pc, #208]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff6:	4b36      	ldr	r3, [pc, #216]	; (80030d0 <HAL_RCC_OscConfig+0x4ec>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d118      	bne.n	8003034 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003002:	4b33      	ldr	r3, [pc, #204]	; (80030d0 <HAL_RCC_OscConfig+0x4ec>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a32      	ldr	r2, [pc, #200]	; (80030d0 <HAL_RCC_OscConfig+0x4ec>)
 8003008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800300e:	f7fd fd77 	bl	8000b00 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003016:	f7fd fd73 	bl	8000b00 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b64      	cmp	r3, #100	; 0x64
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e104      	b.n	8003232 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003028:	4b29      	ldr	r3, [pc, #164]	; (80030d0 <HAL_RCC_OscConfig+0x4ec>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d106      	bne.n	800304a <HAL_RCC_OscConfig+0x466>
 800303c:	4b1e      	ldr	r3, [pc, #120]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 800303e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003040:	4a1d      	ldr	r2, [pc, #116]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8003042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003046:	6353      	str	r3, [r2, #52]	; 0x34
 8003048:	e02d      	b.n	80030a6 <HAL_RCC_OscConfig+0x4c2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10c      	bne.n	800306c <HAL_RCC_OscConfig+0x488>
 8003052:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8003054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003056:	4a18      	ldr	r2, [pc, #96]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8003058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800305c:	6353      	str	r3, [r2, #52]	; 0x34
 800305e:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8003060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003062:	4a15      	ldr	r2, [pc, #84]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8003064:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003068:	6353      	str	r3, [r2, #52]	; 0x34
 800306a:	e01c      	b.n	80030a6 <HAL_RCC_OscConfig+0x4c2>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b05      	cmp	r3, #5
 8003072:	d10c      	bne.n	800308e <HAL_RCC_OscConfig+0x4aa>
 8003074:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8003076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003078:	4a0f      	ldr	r2, [pc, #60]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 800307a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800307e:	6353      	str	r3, [r2, #52]	; 0x34
 8003080:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8003082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003084:	4a0c      	ldr	r2, [pc, #48]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8003086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308a:	6353      	str	r3, [r2, #52]	; 0x34
 800308c:	e00b      	b.n	80030a6 <HAL_RCC_OscConfig+0x4c2>
 800308e:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8003090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003092:	4a09      	ldr	r2, [pc, #36]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 8003094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003098:	6353      	str	r3, [r2, #52]	; 0x34
 800309a:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 800309c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309e:	4a06      	ldr	r2, [pc, #24]	; (80030b8 <HAL_RCC_OscConfig+0x4d4>)
 80030a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030a4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d024      	beq.n	80030f8 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ae:	f7fd fd27 	bl	8000b00 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030b4:	e019      	b.n	80030ea <HAL_RCC_OscConfig+0x506>
 80030b6:	bf00      	nop
 80030b8:	40023800 	.word	0x40023800
 80030bc:	08009a88 	.word	0x08009a88
 80030c0:	20000000 	.word	0x20000000
 80030c4:	20000004 	.word	0x20000004
 80030c8:	42470020 	.word	0x42470020
 80030cc:	42470680 	.word	0x42470680
 80030d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d4:	f7fd fd14 	bl	8000b00 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e0a3      	b.n	8003232 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030ea:	4b54      	ldr	r3, [pc, #336]	; (800323c <HAL_RCC_OscConfig+0x658>)
 80030ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0ee      	beq.n	80030d4 <HAL_RCC_OscConfig+0x4f0>
 80030f6:	e014      	b.n	8003122 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f8:	f7fd fd02 	bl	8000b00 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030fe:	e00a      	b.n	8003116 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003100:	f7fd fcfe 	bl	8000b00 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	f241 3288 	movw	r2, #5000	; 0x1388
 800310e:	4293      	cmp	r3, r2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e08d      	b.n	8003232 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003116:	4b49      	ldr	r3, [pc, #292]	; (800323c <HAL_RCC_OscConfig+0x658>)
 8003118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1ee      	bne.n	8003100 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003122:	7ffb      	ldrb	r3, [r7, #31]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d105      	bne.n	8003134 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003128:	4b44      	ldr	r3, [pc, #272]	; (800323c <HAL_RCC_OscConfig+0x658>)
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	4a43      	ldr	r2, [pc, #268]	; (800323c <HAL_RCC_OscConfig+0x658>)
 800312e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003132:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	2b00      	cmp	r3, #0
 800313a:	d079      	beq.n	8003230 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	2b0c      	cmp	r3, #12
 8003140:	d056      	beq.n	80031f0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	2b02      	cmp	r3, #2
 8003148:	d13b      	bne.n	80031c2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800314a:	4b3d      	ldr	r3, [pc, #244]	; (8003240 <HAL_RCC_OscConfig+0x65c>)
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003150:	f7fd fcd6 	bl	8000b00 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003158:	f7fd fcd2 	bl	8000b00 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e063      	b.n	8003232 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800316a:	4b34      	ldr	r3, [pc, #208]	; (800323c <HAL_RCC_OscConfig+0x658>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f0      	bne.n	8003158 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003176:	4b31      	ldr	r3, [pc, #196]	; (800323c <HAL_RCC_OscConfig+0x658>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	4319      	orrs	r1, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	430b      	orrs	r3, r1
 800318e:	492b      	ldr	r1, [pc, #172]	; (800323c <HAL_RCC_OscConfig+0x658>)
 8003190:	4313      	orrs	r3, r2
 8003192:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003194:	4b2a      	ldr	r3, [pc, #168]	; (8003240 <HAL_RCC_OscConfig+0x65c>)
 8003196:	2201      	movs	r2, #1
 8003198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319a:	f7fd fcb1 	bl	8000b00 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a2:	f7fd fcad 	bl	8000b00 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e03e      	b.n	8003232 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031b4:	4b21      	ldr	r3, [pc, #132]	; (800323c <HAL_RCC_OscConfig+0x658>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_OscConfig+0x5be>
 80031c0:	e036      	b.n	8003230 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c2:	4b1f      	ldr	r3, [pc, #124]	; (8003240 <HAL_RCC_OscConfig+0x65c>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c8:	f7fd fc9a 	bl	8000b00 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d0:	f7fd fc96 	bl	8000b00 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e027      	b.n	8003232 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031e2:	4b16      	ldr	r3, [pc, #88]	; (800323c <HAL_RCC_OscConfig+0x658>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0x5ec>
 80031ee:	e01f      	b.n	8003230 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e01a      	b.n	8003232 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031fc:	4b0f      	ldr	r3, [pc, #60]	; (800323c <HAL_RCC_OscConfig+0x658>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	429a      	cmp	r2, r3
 800320e:	d10d      	bne.n	800322c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321a:	429a      	cmp	r2, r3
 800321c:	d106      	bne.n	800322c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3720      	adds	r7, #32
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800
 8003240:	42470060 	.word	0x42470060

08003244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e11a      	b.n	800348e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003258:	4b8f      	ldr	r3, [pc, #572]	; (8003498 <HAL_RCC_ClockConfig+0x254>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d919      	bls.n	800329a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d105      	bne.n	8003278 <HAL_RCC_ClockConfig+0x34>
 800326c:	4b8a      	ldr	r3, [pc, #552]	; (8003498 <HAL_RCC_ClockConfig+0x254>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a89      	ldr	r2, [pc, #548]	; (8003498 <HAL_RCC_ClockConfig+0x254>)
 8003272:	f043 0304 	orr.w	r3, r3, #4
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	4b87      	ldr	r3, [pc, #540]	; (8003498 <HAL_RCC_ClockConfig+0x254>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f023 0201 	bic.w	r2, r3, #1
 8003280:	4985      	ldr	r1, [pc, #532]	; (8003498 <HAL_RCC_ClockConfig+0x254>)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	4313      	orrs	r3, r2
 8003286:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003288:	4b83      	ldr	r3, [pc, #524]	; (8003498 <HAL_RCC_ClockConfig+0x254>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d001      	beq.n	800329a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e0f9      	b.n	800348e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d008      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a6:	4b7d      	ldr	r3, [pc, #500]	; (800349c <HAL_RCC_ClockConfig+0x258>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	497a      	ldr	r1, [pc, #488]	; (800349c <HAL_RCC_ClockConfig+0x258>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 808e 	beq.w	80033e2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d107      	bne.n	80032de <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032ce:	4b73      	ldr	r3, [pc, #460]	; (800349c <HAL_RCC_ClockConfig+0x258>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d121      	bne.n	800331e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e0d7      	b.n	800348e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d107      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032e6:	4b6d      	ldr	r3, [pc, #436]	; (800349c <HAL_RCC_ClockConfig+0x258>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d115      	bne.n	800331e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e0cb      	b.n	800348e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d107      	bne.n	800330e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032fe:	4b67      	ldr	r3, [pc, #412]	; (800349c <HAL_RCC_ClockConfig+0x258>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d109      	bne.n	800331e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e0bf      	b.n	800348e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800330e:	4b63      	ldr	r3, [pc, #396]	; (800349c <HAL_RCC_ClockConfig+0x258>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e0b7      	b.n	800348e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800331e:	4b5f      	ldr	r3, [pc, #380]	; (800349c <HAL_RCC_ClockConfig+0x258>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f023 0203 	bic.w	r2, r3, #3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	495c      	ldr	r1, [pc, #368]	; (800349c <HAL_RCC_ClockConfig+0x258>)
 800332c:	4313      	orrs	r3, r2
 800332e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003330:	f7fd fbe6 	bl	8000b00 <HAL_GetTick>
 8003334:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d112      	bne.n	8003364 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800333e:	e00a      	b.n	8003356 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003340:	f7fd fbde 	bl	8000b00 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	; 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e09b      	b.n	800348e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003356:	4b51      	ldr	r3, [pc, #324]	; (800349c <HAL_RCC_ClockConfig+0x258>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 030c 	and.w	r3, r3, #12
 800335e:	2b08      	cmp	r3, #8
 8003360:	d1ee      	bne.n	8003340 <HAL_RCC_ClockConfig+0xfc>
 8003362:	e03e      	b.n	80033e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b03      	cmp	r3, #3
 800336a:	d112      	bne.n	8003392 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800336c:	e00a      	b.n	8003384 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800336e:	f7fd fbc7 	bl	8000b00 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f241 3288 	movw	r2, #5000	; 0x1388
 800337c:	4293      	cmp	r3, r2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e084      	b.n	800348e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003384:	4b45      	ldr	r3, [pc, #276]	; (800349c <HAL_RCC_ClockConfig+0x258>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 030c 	and.w	r3, r3, #12
 800338c:	2b0c      	cmp	r3, #12
 800338e:	d1ee      	bne.n	800336e <HAL_RCC_ClockConfig+0x12a>
 8003390:	e027      	b.n	80033e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d11d      	bne.n	80033d6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800339a:	e00a      	b.n	80033b2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800339c:	f7fd fbb0 	bl	8000b00 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e06d      	b.n	800348e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033b2:	4b3a      	ldr	r3, [pc, #232]	; (800349c <HAL_RCC_ClockConfig+0x258>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d1ee      	bne.n	800339c <HAL_RCC_ClockConfig+0x158>
 80033be:	e010      	b.n	80033e2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c0:	f7fd fb9e 	bl	8000b00 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e05b      	b.n	800348e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80033d6:	4b31      	ldr	r3, [pc, #196]	; (800349c <HAL_RCC_ClockConfig+0x258>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1ee      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033e2:	4b2d      	ldr	r3, [pc, #180]	; (8003498 <HAL_RCC_ClockConfig+0x254>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d219      	bcs.n	8003424 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d105      	bne.n	8003402 <HAL_RCC_ClockConfig+0x1be>
 80033f6:	4b28      	ldr	r3, [pc, #160]	; (8003498 <HAL_RCC_ClockConfig+0x254>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a27      	ldr	r2, [pc, #156]	; (8003498 <HAL_RCC_ClockConfig+0x254>)
 80033fc:	f043 0304 	orr.w	r3, r3, #4
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4b25      	ldr	r3, [pc, #148]	; (8003498 <HAL_RCC_ClockConfig+0x254>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 0201 	bic.w	r2, r3, #1
 800340a:	4923      	ldr	r1, [pc, #140]	; (8003498 <HAL_RCC_ClockConfig+0x254>)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	4313      	orrs	r3, r2
 8003410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003412:	4b21      	ldr	r3, [pc, #132]	; (8003498 <HAL_RCC_ClockConfig+0x254>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d001      	beq.n	8003424 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e034      	b.n	800348e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d008      	beq.n	8003442 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003430:	4b1a      	ldr	r3, [pc, #104]	; (800349c <HAL_RCC_ClockConfig+0x258>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	4917      	ldr	r1, [pc, #92]	; (800349c <HAL_RCC_ClockConfig+0x258>)
 800343e:	4313      	orrs	r3, r2
 8003440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800344e:	4b13      	ldr	r3, [pc, #76]	; (800349c <HAL_RCC_ClockConfig+0x258>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	490f      	ldr	r1, [pc, #60]	; (800349c <HAL_RCC_ClockConfig+0x258>)
 800345e:	4313      	orrs	r3, r2
 8003460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003462:	f000 f823 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 8003466:	4602      	mov	r2, r0
 8003468:	4b0c      	ldr	r3, [pc, #48]	; (800349c <HAL_RCC_ClockConfig+0x258>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	091b      	lsrs	r3, r3, #4
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	490b      	ldr	r1, [pc, #44]	; (80034a0 <HAL_RCC_ClockConfig+0x25c>)
 8003474:	5ccb      	ldrb	r3, [r1, r3]
 8003476:	fa22 f303 	lsr.w	r3, r2, r3
 800347a:	4a0a      	ldr	r2, [pc, #40]	; (80034a4 <HAL_RCC_ClockConfig+0x260>)
 800347c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800347e:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <HAL_RCC_ClockConfig+0x264>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7fd faf0 	bl	8000a68 <HAL_InitTick>
 8003488:	4603      	mov	r3, r0
 800348a:	72fb      	strb	r3, [r7, #11]

  return status;
 800348c:	7afb      	ldrb	r3, [r7, #11]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40023c00 	.word	0x40023c00
 800349c:	40023800 	.word	0x40023800
 80034a0:	08009a88 	.word	0x08009a88
 80034a4:	20000000 	.word	0x20000000
 80034a8:	20000004 	.word	0x20000004

080034ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034b0:	b092      	sub	sp, #72	; 0x48
 80034b2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80034b4:	4b79      	ldr	r3, [pc, #484]	; (800369c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034bc:	f003 030c 	and.w	r3, r3, #12
 80034c0:	2b0c      	cmp	r3, #12
 80034c2:	d00d      	beq.n	80034e0 <HAL_RCC_GetSysClockFreq+0x34>
 80034c4:	2b0c      	cmp	r3, #12
 80034c6:	f200 80d5 	bhi.w	8003674 <HAL_RCC_GetSysClockFreq+0x1c8>
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d002      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0x28>
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d003      	beq.n	80034da <HAL_RCC_GetSysClockFreq+0x2e>
 80034d2:	e0cf      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034d4:	4b72      	ldr	r3, [pc, #456]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80034d6:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80034d8:	e0da      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034da:	4b71      	ldr	r3, [pc, #452]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80034dc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80034de:	e0d7      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80034e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e2:	0c9b      	lsrs	r3, r3, #18
 80034e4:	f003 020f 	and.w	r2, r3, #15
 80034e8:	4b6e      	ldr	r3, [pc, #440]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80034ea:	5c9b      	ldrb	r3, [r3, r2]
 80034ec:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80034ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f0:	0d9b      	lsrs	r3, r3, #22
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	3301      	adds	r3, #1
 80034f8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034fa:	4b68      	ldr	r3, [pc, #416]	; (800369c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d05d      	beq.n	80035c2 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003508:	2200      	movs	r2, #0
 800350a:	4618      	mov	r0, r3
 800350c:	4611      	mov	r1, r2
 800350e:	4604      	mov	r4, r0
 8003510:	460d      	mov	r5, r1
 8003512:	4622      	mov	r2, r4
 8003514:	462b      	mov	r3, r5
 8003516:	f04f 0000 	mov.w	r0, #0
 800351a:	f04f 0100 	mov.w	r1, #0
 800351e:	0159      	lsls	r1, r3, #5
 8003520:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003524:	0150      	lsls	r0, r2, #5
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	4621      	mov	r1, r4
 800352c:	1a51      	subs	r1, r2, r1
 800352e:	6139      	str	r1, [r7, #16]
 8003530:	4629      	mov	r1, r5
 8003532:	eb63 0301 	sbc.w	r3, r3, r1
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003544:	4659      	mov	r1, fp
 8003546:	018b      	lsls	r3, r1, #6
 8003548:	4651      	mov	r1, sl
 800354a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800354e:	4651      	mov	r1, sl
 8003550:	018a      	lsls	r2, r1, #6
 8003552:	46d4      	mov	ip, sl
 8003554:	ebb2 080c 	subs.w	r8, r2, ip
 8003558:	4659      	mov	r1, fp
 800355a:	eb63 0901 	sbc.w	r9, r3, r1
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800356a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800356e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003572:	4690      	mov	r8, r2
 8003574:	4699      	mov	r9, r3
 8003576:	4623      	mov	r3, r4
 8003578:	eb18 0303 	adds.w	r3, r8, r3
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	462b      	mov	r3, r5
 8003580:	eb49 0303 	adc.w	r3, r9, r3
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003592:	4629      	mov	r1, r5
 8003594:	028b      	lsls	r3, r1, #10
 8003596:	4620      	mov	r0, r4
 8003598:	4629      	mov	r1, r5
 800359a:	4604      	mov	r4, r0
 800359c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80035a0:	4601      	mov	r1, r0
 80035a2:	028a      	lsls	r2, r1, #10
 80035a4:	4610      	mov	r0, r2
 80035a6:	4619      	mov	r1, r3
 80035a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035aa:	2200      	movs	r2, #0
 80035ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035b4:	f7fc fdea 	bl	800018c <__aeabi_uldivmod>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4613      	mov	r3, r2
 80035be:	647b      	str	r3, [r7, #68]	; 0x44
 80035c0:	e055      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80035c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c4:	2200      	movs	r2, #0
 80035c6:	623b      	str	r3, [r7, #32]
 80035c8:	627a      	str	r2, [r7, #36]	; 0x24
 80035ca:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035ce:	4642      	mov	r2, r8
 80035d0:	464b      	mov	r3, r9
 80035d2:	f04f 0000 	mov.w	r0, #0
 80035d6:	f04f 0100 	mov.w	r1, #0
 80035da:	0159      	lsls	r1, r3, #5
 80035dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035e0:	0150      	lsls	r0, r2, #5
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	46c4      	mov	ip, r8
 80035e8:	ebb2 0a0c 	subs.w	sl, r2, ip
 80035ec:	4640      	mov	r0, r8
 80035ee:	4649      	mov	r1, r9
 80035f0:	468c      	mov	ip, r1
 80035f2:	eb63 0b0c 	sbc.w	fp, r3, ip
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003602:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003606:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800360a:	ebb2 040a 	subs.w	r4, r2, sl
 800360e:	eb63 050b 	sbc.w	r5, r3, fp
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	00eb      	lsls	r3, r5, #3
 800361c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003620:	00e2      	lsls	r2, r4, #3
 8003622:	4614      	mov	r4, r2
 8003624:	461d      	mov	r5, r3
 8003626:	4603      	mov	r3, r0
 8003628:	18e3      	adds	r3, r4, r3
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	460b      	mov	r3, r1
 800362e:	eb45 0303 	adc.w	r3, r5, r3
 8003632:	607b      	str	r3, [r7, #4]
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003640:	4629      	mov	r1, r5
 8003642:	028b      	lsls	r3, r1, #10
 8003644:	4620      	mov	r0, r4
 8003646:	4629      	mov	r1, r5
 8003648:	4604      	mov	r4, r0
 800364a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800364e:	4601      	mov	r1, r0
 8003650:	028a      	lsls	r2, r1, #10
 8003652:	4610      	mov	r0, r2
 8003654:	4619      	mov	r1, r3
 8003656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003658:	2200      	movs	r2, #0
 800365a:	61bb      	str	r3, [r7, #24]
 800365c:	61fa      	str	r2, [r7, #28]
 800365e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003662:	f7fc fd93 	bl	800018c <__aeabi_uldivmod>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4613      	mov	r3, r2
 800366c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800366e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003670:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003672:	e00d      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	0b5b      	lsrs	r3, r3, #13
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003682:	3301      	adds	r3, #1
 8003684:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800368e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003692:	4618      	mov	r0, r3
 8003694:	3748      	adds	r7, #72	; 0x48
 8003696:	46bd      	mov	sp, r7
 8003698:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800369c:	40023800 	.word	0x40023800
 80036a0:	00f42400 	.word	0x00f42400
 80036a4:	08009a7c 	.word	0x08009a7c

080036a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ac:	4b02      	ldr	r3, [pc, #8]	; (80036b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80036ae:	681b      	ldr	r3, [r3, #0]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr
 80036b8:	20000000 	.word	0x20000000

080036bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036c0:	f7ff fff2 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 80036c4:	4602      	mov	r2, r0
 80036c6:	4b05      	ldr	r3, [pc, #20]	; (80036dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	0a1b      	lsrs	r3, r3, #8
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	4903      	ldr	r1, [pc, #12]	; (80036e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036d2:	5ccb      	ldrb	r3, [r1, r3]
 80036d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d8:	4618      	mov	r0, r3
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40023800 	.word	0x40023800
 80036e0:	08009a98 	.word	0x08009a98

080036e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036ec:	2300      	movs	r3, #0
 80036ee:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80036f0:	4b29      	ldr	r3, [pc, #164]	; (8003798 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d12c      	bne.n	8003756 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036fc:	4b26      	ldr	r3, [pc, #152]	; (8003798 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003708:	4b24      	ldr	r3, [pc, #144]	; (800379c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	e016      	b.n	8003742 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003714:	4b20      	ldr	r3, [pc, #128]	; (8003798 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	4a1f      	ldr	r2, [pc, #124]	; (8003798 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800371a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371e:	6253      	str	r3, [r2, #36]	; 0x24
 8003720:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800372c:	4b1b      	ldr	r3, [pc, #108]	; (800379c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003734:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003736:	4b18      	ldr	r3, [pc, #96]	; (8003798 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	4a17      	ldr	r2, [pc, #92]	; (8003798 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800373c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003740:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003748:	d105      	bne.n	8003756 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003750:	d101      	bne.n	8003756 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003752:	2301      	movs	r3, #1
 8003754:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d105      	bne.n	8003768 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800375c:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0f      	ldr	r2, [pc, #60]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003762:	f043 0304 	orr.w	r3, r3, #4
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f023 0201 	bic.w	r2, r3, #1
 8003770:	490b      	ldr	r1, [pc, #44]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003778:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	429a      	cmp	r2, r3
 8003784:	d001      	beq.n	800378a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800
 800379c:	40007000 	.word	0x40007000
 80037a0:	40023c00 	.word	0x40023c00

080037a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e06e      	b.n	8003894 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d108      	bne.n	80037d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037c6:	d009      	beq.n	80037dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	61da      	str	r2, [r3, #28]
 80037ce:	e005      	b.n	80037dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d106      	bne.n	80037fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fd f846 	bl	8000888 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003812:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003860:	ea42 0103 	orr.w	r1, r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003868:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	0c1a      	lsrs	r2, r3, #16
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f002 0204 	and.w	r2, r2, #4
 8003882:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b088      	sub	sp, #32
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	603b      	str	r3, [r7, #0]
 80038a8:	4613      	mov	r3, r2
 80038aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_SPI_Transmit+0x22>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e126      	b.n	8003b0c <HAL_SPI_Transmit+0x270>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038c6:	f7fd f91b 	bl	8000b00 <HAL_GetTick>
 80038ca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038cc:	88fb      	ldrh	r3, [r7, #6]
 80038ce:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d002      	beq.n	80038e2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038dc:	2302      	movs	r3, #2
 80038de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038e0:	e10b      	b.n	8003afa <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <HAL_SPI_Transmit+0x52>
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d102      	bne.n	80038f4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038f2:	e102      	b.n	8003afa <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2203      	movs	r2, #3
 80038f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	88fa      	ldrh	r2, [r7, #6]
 800390c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	88fa      	ldrh	r2, [r7, #6]
 8003912:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800393a:	d10f      	bne.n	800395c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800394a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800395a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003966:	2b40      	cmp	r3, #64	; 0x40
 8003968:	d007      	beq.n	800397a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003978:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003982:	d14b      	bne.n	8003a1c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <HAL_SPI_Transmit+0xf6>
 800398c:	8afb      	ldrh	r3, [r7, #22]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d13e      	bne.n	8003a10 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	881a      	ldrh	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	1c9a      	adds	r2, r3, #2
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039b6:	e02b      	b.n	8003a10 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d112      	bne.n	80039ec <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	881a      	ldrh	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	1c9a      	adds	r2, r3, #2
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80039ea:	e011      	b.n	8003a10 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039ec:	f7fd f888 	bl	8000b00 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d803      	bhi.n	8003a04 <HAL_SPI_Transmit+0x168>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a02:	d102      	bne.n	8003a0a <HAL_SPI_Transmit+0x16e>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d102      	bne.n	8003a10 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a0e:	e074      	b.n	8003afa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1ce      	bne.n	80039b8 <HAL_SPI_Transmit+0x11c>
 8003a1a:	e04c      	b.n	8003ab6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <HAL_SPI_Transmit+0x18e>
 8003a24:	8afb      	ldrh	r3, [r7, #22]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d140      	bne.n	8003aac <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	330c      	adds	r3, #12
 8003a34:	7812      	ldrb	r2, [r2, #0]
 8003a36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a50:	e02c      	b.n	8003aac <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d113      	bne.n	8003a88 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	330c      	adds	r3, #12
 8003a6a:	7812      	ldrb	r2, [r2, #0]
 8003a6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a86:	e011      	b.n	8003aac <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a88:	f7fd f83a 	bl	8000b00 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d803      	bhi.n	8003aa0 <HAL_SPI_Transmit+0x204>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9e:	d102      	bne.n	8003aa6 <HAL_SPI_Transmit+0x20a>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d102      	bne.n	8003aac <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003aaa:	e026      	b.n	8003afa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1cd      	bne.n	8003a52 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	6839      	ldr	r1, [r7, #0]
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 fbcc 	bl	8004258 <SPI_EndRxTxTransaction>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10a      	bne.n	8003aea <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	613b      	str	r3, [r7, #16]
 8003ae8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	77fb      	strb	r3, [r7, #31]
 8003af6:	e000      	b.n	8003afa <HAL_SPI_Transmit+0x25e>
  }

error:
 8003af8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3720      	adds	r7, #32
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b088      	sub	sp, #32
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	4613      	mov	r3, r2
 8003b22:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b30:	d112      	bne.n	8003b58 <HAL_SPI_Receive+0x44>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10e      	bne.n	8003b58 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b42:	88fa      	ldrh	r2, [r7, #6]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f8f1 	bl	8003d36 <HAL_SPI_TransmitReceive>
 8003b54:	4603      	mov	r3, r0
 8003b56:	e0ea      	b.n	8003d2e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_SPI_Receive+0x52>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e0e3      	b.n	8003d2e <HAL_SPI_Receive+0x21a>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b6e:	f7fc ffc7 	bl	8000b00 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d002      	beq.n	8003b86 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003b80:	2302      	movs	r3, #2
 8003b82:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b84:	e0ca      	b.n	8003d1c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <HAL_SPI_Receive+0x7e>
 8003b8c:	88fb      	ldrh	r3, [r7, #6]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d102      	bne.n	8003b98 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b96:	e0c1      	b.n	8003d1c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2204      	movs	r2, #4
 8003b9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	88fa      	ldrh	r2, [r7, #6]
 8003bb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	88fa      	ldrh	r2, [r7, #6]
 8003bb6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bde:	d10f      	bne.n	8003c00 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bfe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0a:	2b40      	cmp	r3, #64	; 0x40
 8003c0c:	d007      	beq.n	8003c1e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c1c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d162      	bne.n	8003cec <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c26:	e02e      	b.n	8003c86 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d115      	bne.n	8003c62 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f103 020c 	add.w	r2, r3, #12
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	7812      	ldrb	r2, [r2, #0]
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c60:	e011      	b.n	8003c86 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c62:	f7fc ff4d 	bl	8000b00 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d803      	bhi.n	8003c7a <HAL_SPI_Receive+0x166>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c78:	d102      	bne.n	8003c80 <HAL_SPI_Receive+0x16c>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d102      	bne.n	8003c86 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c84:	e04a      	b.n	8003d1c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1cb      	bne.n	8003c28 <HAL_SPI_Receive+0x114>
 8003c90:	e031      	b.n	8003cf6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d113      	bne.n	8003cc8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003caa:	b292      	uxth	r2, r2
 8003cac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb2:	1c9a      	adds	r2, r3, #2
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cc6:	e011      	b.n	8003cec <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cc8:	f7fc ff1a 	bl	8000b00 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d803      	bhi.n	8003ce0 <HAL_SPI_Receive+0x1cc>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cde:	d102      	bne.n	8003ce6 <HAL_SPI_Receive+0x1d2>
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d102      	bne.n	8003cec <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003cea:	e017      	b.n	8003d1c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1cd      	bne.n	8003c92 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	6839      	ldr	r1, [r7, #0]
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 fa46 	bl	800418c <SPI_EndRxTransaction>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	75fb      	strb	r3, [r7, #23]
 8003d18:	e000      	b.n	8003d1c <HAL_SPI_Receive+0x208>
  }

error :
 8003d1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b08c      	sub	sp, #48	; 0x30
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	607a      	str	r2, [r7, #4]
 8003d42:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d44:	2301      	movs	r3, #1
 8003d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_SPI_TransmitReceive+0x26>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e18a      	b.n	8004072 <HAL_SPI_TransmitReceive+0x33c>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d64:	f7fc fecc 	bl	8000b00 <HAL_GetTick>
 8003d68:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d7a:	887b      	ldrh	r3, [r7, #2]
 8003d7c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d00f      	beq.n	8003da6 <HAL_SPI_TransmitReceive+0x70>
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d8c:	d107      	bne.n	8003d9e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d103      	bne.n	8003d9e <HAL_SPI_TransmitReceive+0x68>
 8003d96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d003      	beq.n	8003da6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003d9e:	2302      	movs	r3, #2
 8003da0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003da4:	e15b      	b.n	800405e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_SPI_TransmitReceive+0x82>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <HAL_SPI_TransmitReceive+0x82>
 8003db2:	887b      	ldrh	r3, [r7, #2]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d103      	bne.n	8003dc0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003dbe:	e14e      	b.n	800405e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d003      	beq.n	8003dd4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2205      	movs	r2, #5
 8003dd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	887a      	ldrh	r2, [r7, #2]
 8003de4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	887a      	ldrh	r2, [r7, #2]
 8003dea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	887a      	ldrh	r2, [r7, #2]
 8003df6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	887a      	ldrh	r2, [r7, #2]
 8003dfc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e14:	2b40      	cmp	r3, #64	; 0x40
 8003e16:	d007      	beq.n	8003e28 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e30:	d178      	bne.n	8003f24 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <HAL_SPI_TransmitReceive+0x10a>
 8003e3a:	8b7b      	ldrh	r3, [r7, #26]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d166      	bne.n	8003f0e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	881a      	ldrh	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	1c9a      	adds	r2, r3, #2
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e64:	e053      	b.n	8003f0e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d11b      	bne.n	8003eac <HAL_SPI_TransmitReceive+0x176>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d016      	beq.n	8003eac <HAL_SPI_TransmitReceive+0x176>
 8003e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d113      	bne.n	8003eac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	881a      	ldrh	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	1c9a      	adds	r2, r3, #2
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d119      	bne.n	8003eee <HAL_SPI_TransmitReceive+0x1b8>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d014      	beq.n	8003eee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	b292      	uxth	r2, r2
 8003ed0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	1c9a      	adds	r2, r3, #2
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003eea:	2301      	movs	r3, #1
 8003eec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003eee:	f7fc fe07 	bl	8000b00 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d807      	bhi.n	8003f0e <HAL_SPI_TransmitReceive+0x1d8>
 8003efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f04:	d003      	beq.n	8003f0e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f0c:	e0a7      	b.n	800405e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1a6      	bne.n	8003e66 <HAL_SPI_TransmitReceive+0x130>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1a1      	bne.n	8003e66 <HAL_SPI_TransmitReceive+0x130>
 8003f22:	e07c      	b.n	800401e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <HAL_SPI_TransmitReceive+0x1fc>
 8003f2c:	8b7b      	ldrh	r3, [r7, #26]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d16b      	bne.n	800400a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	330c      	adds	r3, #12
 8003f3c:	7812      	ldrb	r2, [r2, #0]
 8003f3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f58:	e057      	b.n	800400a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d11c      	bne.n	8003fa2 <HAL_SPI_TransmitReceive+0x26c>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d017      	beq.n	8003fa2 <HAL_SPI_TransmitReceive+0x26c>
 8003f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d114      	bne.n	8003fa2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	330c      	adds	r3, #12
 8003f82:	7812      	ldrb	r2, [r2, #0]
 8003f84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d119      	bne.n	8003fe4 <HAL_SPI_TransmitReceive+0x2ae>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d014      	beq.n	8003fe4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003fe4:	f7fc fd8c 	bl	8000b00 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d803      	bhi.n	8003ffc <HAL_SPI_TransmitReceive+0x2c6>
 8003ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffa:	d102      	bne.n	8004002 <HAL_SPI_TransmitReceive+0x2cc>
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d103      	bne.n	800400a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004008:	e029      	b.n	800405e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800400e:	b29b      	uxth	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1a2      	bne.n	8003f5a <HAL_SPI_TransmitReceive+0x224>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d19d      	bne.n	8003f5a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800401e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004020:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 f918 	bl	8004258 <SPI_EndRxTxTransaction>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d006      	beq.n	800403c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800403a:	e010      	b.n	800405e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10b      	bne.n	800405c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	e000      	b.n	800405e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800405c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800406e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004072:	4618      	mov	r0, r3
 8004074:	3730      	adds	r7, #48	; 0x30
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b088      	sub	sp, #32
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	4613      	mov	r3, r2
 800408a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800408c:	f7fc fd38 	bl	8000b00 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	4413      	add	r3, r2
 800409a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800409c:	f7fc fd30 	bl	8000b00 <HAL_GetTick>
 80040a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040a2:	4b39      	ldr	r3, [pc, #228]	; (8004188 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	015b      	lsls	r3, r3, #5
 80040a8:	0d1b      	lsrs	r3, r3, #20
 80040aa:	69fa      	ldr	r2, [r7, #28]
 80040ac:	fb02 f303 	mul.w	r3, r2, r3
 80040b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040b2:	e054      	b.n	800415e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ba:	d050      	beq.n	800415e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040bc:	f7fc fd20 	bl	8000b00 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	69fa      	ldr	r2, [r7, #28]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d902      	bls.n	80040d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d13d      	bne.n	800414e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ea:	d111      	bne.n	8004110 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040f4:	d004      	beq.n	8004100 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040fe:	d107      	bne.n	8004110 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800410e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004118:	d10f      	bne.n	800413a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004138:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e017      	b.n	800417e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	3b01      	subs	r3, #1
 800415c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4013      	ands	r3, r2
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	429a      	cmp	r2, r3
 800416c:	bf0c      	ite	eq
 800416e:	2301      	moveq	r3, #1
 8004170:	2300      	movne	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	461a      	mov	r2, r3
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	429a      	cmp	r2, r3
 800417a:	d19b      	bne.n	80040b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3720      	adds	r7, #32
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	20000000 	.word	0x20000000

0800418c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af02      	add	r7, sp, #8
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041a0:	d111      	bne.n	80041c6 <SPI_EndRxTransaction+0x3a>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041aa:	d004      	beq.n	80041b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b4:	d107      	bne.n	80041c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041c4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ce:	d12a      	bne.n	8004226 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d8:	d012      	beq.n	8004200 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2200      	movs	r2, #0
 80041e2:	2180      	movs	r1, #128	; 0x80
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f7ff ff49 	bl	800407c <SPI_WaitFlagStateUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d02d      	beq.n	800424c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f4:	f043 0220 	orr.w	r2, r3, #32
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e026      	b.n	800424e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2200      	movs	r2, #0
 8004208:	2101      	movs	r1, #1
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f7ff ff36 	bl	800407c <SPI_WaitFlagStateUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d01a      	beq.n	800424c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421a:	f043 0220 	orr.w	r2, r3, #32
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e013      	b.n	800424e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2200      	movs	r2, #0
 800422e:	2101      	movs	r1, #1
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f7ff ff23 	bl	800407c <SPI_WaitFlagStateUntilTimeout>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d007      	beq.n	800424c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004240:	f043 0220 	orr.w	r2, r3, #32
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e000      	b.n	800424e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af02      	add	r7, sp, #8
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004264:	4b1b      	ldr	r3, [pc, #108]	; (80042d4 <SPI_EndRxTxTransaction+0x7c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a1b      	ldr	r2, [pc, #108]	; (80042d8 <SPI_EndRxTxTransaction+0x80>)
 800426a:	fba2 2303 	umull	r2, r3, r2, r3
 800426e:	0d5b      	lsrs	r3, r3, #21
 8004270:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004274:	fb02 f303 	mul.w	r3, r2, r3
 8004278:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004282:	d112      	bne.n	80042aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2200      	movs	r2, #0
 800428c:	2180      	movs	r1, #128	; 0x80
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f7ff fef4 	bl	800407c <SPI_WaitFlagStateUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d016      	beq.n	80042c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429e:	f043 0220 	orr.w	r2, r3, #32
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e00f      	b.n	80042ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00a      	beq.n	80042c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c0:	2b80      	cmp	r3, #128	; 0x80
 80042c2:	d0f2      	beq.n	80042aa <SPI_EndRxTxTransaction+0x52>
 80042c4:	e000      	b.n	80042c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80042c6:	bf00      	nop
  }

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000000 	.word	0x20000000
 80042d8:	165e9f81 	.word	0x165e9f81

080042dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042ec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80042f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	bc80      	pop	{r7}
 8004306:	4770      	bx	lr

08004308 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004310:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004314:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	b29b      	uxth	r3, r3
 8004322:	43db      	mvns	r3, r3
 8004324:	b29b      	uxth	r3, r3
 8004326:	4013      	ands	r3, r2
 8004328:	b29a      	uxth	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr

0800433c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800433c:	b084      	sub	sp, #16
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	f107 0014 	add.w	r0, r7, #20
 800434a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	b004      	add	sp, #16
 800437a:	4770      	bx	lr

0800437c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800437c:	b480      	push	{r7}
 800437e:	b09b      	sub	sp, #108	; 0x6c
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	b29b      	uxth	r3, r3
 800439a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800439e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	78db      	ldrb	r3, [r3, #3]
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d81f      	bhi.n	80043ee <USB_ActivateEndpoint+0x72>
 80043ae:	a201      	add	r2, pc, #4	; (adr r2, 80043b4 <USB_ActivateEndpoint+0x38>)
 80043b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b4:	080043c5 	.word	0x080043c5
 80043b8:	080043e1 	.word	0x080043e1
 80043bc:	080043f7 	.word	0x080043f7
 80043c0:	080043d3 	.word	0x080043d3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80043c4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80043c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043cc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80043d0:	e012      	b.n	80043f8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80043d2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80043d6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80043da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80043de:	e00b      	b.n	80043f8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80043e0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80043e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043e8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80043ec:	e004      	b.n	80043f8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80043f4:	e000      	b.n	80043f8 <USB_ActivateEndpoint+0x7c>
      break;
 80043f6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	441a      	add	r2, r3
 8004402:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800440a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800440e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004416:	b29b      	uxth	r3, r3
 8004418:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004430:	b29a      	uxth	r2, r3
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	b29b      	uxth	r3, r3
 8004438:	4313      	orrs	r3, r2
 800443a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	441a      	add	r2, r3
 8004448:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800444c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800445c:	b29b      	uxth	r3, r3
 800445e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	7b1b      	ldrb	r3, [r3, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	f040 8149 	bne.w	80046fc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	785b      	ldrb	r3, [r3, #1]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 8084 	beq.w	800457c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800447e:	b29b      	uxth	r3, r3
 8004480:	461a      	mov	r2, r3
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	4413      	add	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	011a      	lsls	r2, r3, #4
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	88db      	ldrh	r3, [r3, #6]
 800449c:	085b      	lsrs	r3, r3, #1
 800449e:	b29b      	uxth	r3, r3
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	81fb      	strh	r3, [r7, #14]
 80044b6:	89fb      	ldrh	r3, [r7, #14]
 80044b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d01b      	beq.n	80044f8 <USB_ActivateEndpoint+0x17c>
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d6:	81bb      	strh	r3, [r7, #12]
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	441a      	add	r2, r3
 80044e2:	89bb      	ldrh	r3, [r7, #12]
 80044e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	78db      	ldrb	r3, [r3, #3]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d020      	beq.n	8004542 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	881b      	ldrh	r3, [r3, #0]
 800450c:	b29b      	uxth	r3, r3
 800450e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004516:	813b      	strh	r3, [r7, #8]
 8004518:	893b      	ldrh	r3, [r7, #8]
 800451a:	f083 0320 	eor.w	r3, r3, #32
 800451e:	813b      	strh	r3, [r7, #8]
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	441a      	add	r2, r3
 800452a:	893b      	ldrh	r3, [r7, #8]
 800452c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453c:	b29b      	uxth	r3, r3
 800453e:	8013      	strh	r3, [r2, #0]
 8004540:	e27f      	b.n	8004a42 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	b29b      	uxth	r3, r3
 8004550:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004558:	817b      	strh	r3, [r7, #10]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	441a      	add	r2, r3
 8004564:	897b      	ldrh	r3, [r7, #10]
 8004566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800456a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800456e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004576:	b29b      	uxth	r3, r3
 8004578:	8013      	strh	r3, [r2, #0]
 800457a:	e262      	b.n	8004a42 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004586:	b29b      	uxth	r3, r3
 8004588:	461a      	mov	r2, r3
 800458a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458c:	4413      	add	r3, r2
 800458e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	011a      	lsls	r2, r3, #4
 8004596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004598:	4413      	add	r3, r2
 800459a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800459e:	62bb      	str	r3, [r7, #40]	; 0x28
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	88db      	ldrh	r3, [r3, #6]
 80045a4:	085b      	lsrs	r3, r3, #1
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ae:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	461a      	mov	r2, r3
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	4413      	add	r3, r2
 80045c2:	627b      	str	r3, [r7, #36]	; 0x24
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	011a      	lsls	r2, r3, #4
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	4413      	add	r3, r2
 80045ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045d2:	623b      	str	r3, [r7, #32]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d112      	bne.n	8004602 <USB_ActivateEndpoint+0x286>
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	801a      	strh	r2, [r3, #0]
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	801a      	strh	r2, [r3, #0]
 8004600:	e02f      	b.n	8004662 <USB_ActivateEndpoint+0x2e6>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2b3e      	cmp	r3, #62	; 0x3e
 8004608:	d813      	bhi.n	8004632 <USB_ActivateEndpoint+0x2b6>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	085b      	lsrs	r3, r3, #1
 8004610:	663b      	str	r3, [r7, #96]	; 0x60
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <USB_ActivateEndpoint+0x2a8>
 800461e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004620:	3301      	adds	r3, #1
 8004622:	663b      	str	r3, [r7, #96]	; 0x60
 8004624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004626:	b29b      	uxth	r3, r3
 8004628:	029b      	lsls	r3, r3, #10
 800462a:	b29a      	uxth	r2, r3
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	801a      	strh	r2, [r3, #0]
 8004630:	e017      	b.n	8004662 <USB_ActivateEndpoint+0x2e6>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	095b      	lsrs	r3, r3, #5
 8004638:	663b      	str	r3, [r7, #96]	; 0x60
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	2b00      	cmp	r3, #0
 8004644:	d102      	bne.n	800464c <USB_ActivateEndpoint+0x2d0>
 8004646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004648:	3b01      	subs	r3, #1
 800464a:	663b      	str	r3, [r7, #96]	; 0x60
 800464c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800464e:	b29b      	uxth	r3, r3
 8004650:	029b      	lsls	r3, r3, #10
 8004652:	b29b      	uxth	r3, r3
 8004654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800465c:	b29a      	uxth	r2, r3
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	83fb      	strh	r3, [r7, #30]
 8004670:	8bfb      	ldrh	r3, [r7, #30]
 8004672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d01b      	beq.n	80046b2 <USB_ActivateEndpoint+0x336>
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	b29b      	uxth	r3, r3
 8004688:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800468c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004690:	83bb      	strh	r3, [r7, #28]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	441a      	add	r2, r3
 800469c:	8bbb      	ldrh	r3, [r7, #28]
 800469e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c8:	837b      	strh	r3, [r7, #26]
 80046ca:	8b7b      	ldrh	r3, [r7, #26]
 80046cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80046d0:	837b      	strh	r3, [r7, #26]
 80046d2:	8b7b      	ldrh	r3, [r7, #26]
 80046d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046d8:	837b      	strh	r3, [r7, #26]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	441a      	add	r2, r3
 80046e4:	8b7b      	ldrh	r3, [r7, #26]
 80046e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	8013      	strh	r3, [r2, #0]
 80046fa:	e1a2      	b.n	8004a42 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	b29b      	uxth	r3, r3
 800470a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800470e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004712:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	441a      	add	r2, r3
 8004720:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800472c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004734:	b29b      	uxth	r3, r3
 8004736:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	65bb      	str	r3, [r7, #88]	; 0x58
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004742:	b29b      	uxth	r3, r3
 8004744:	461a      	mov	r2, r3
 8004746:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004748:	4413      	add	r3, r2
 800474a:	65bb      	str	r3, [r7, #88]	; 0x58
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	011a      	lsls	r2, r3, #4
 8004752:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004754:	4413      	add	r3, r2
 8004756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800475a:	657b      	str	r3, [r7, #84]	; 0x54
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	891b      	ldrh	r3, [r3, #8]
 8004760:	085b      	lsrs	r3, r3, #1
 8004762:	b29b      	uxth	r3, r3
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800476a:	801a      	strh	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	653b      	str	r3, [r7, #80]	; 0x50
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004776:	b29b      	uxth	r3, r3
 8004778:	461a      	mov	r2, r3
 800477a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800477c:	4413      	add	r3, r2
 800477e:	653b      	str	r3, [r7, #80]	; 0x50
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	011a      	lsls	r2, r3, #4
 8004786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004788:	4413      	add	r3, r2
 800478a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800478e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	895b      	ldrh	r3, [r3, #10]
 8004794:	085b      	lsrs	r3, r3, #1
 8004796:	b29b      	uxth	r3, r3
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800479e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	785b      	ldrb	r3, [r3, #1]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f040 8091 	bne.w	80048cc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80047b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80047ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d01b      	beq.n	80047fa <USB_ActivateEndpoint+0x47e>
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	441a      	add	r2, r3
 80047e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80047e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	873b      	strh	r3, [r7, #56]	; 0x38
 8004808:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800480a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	d01b      	beq.n	800484a <USB_ActivateEndpoint+0x4ce>
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	b29b      	uxth	r3, r3
 8004820:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004828:	86fb      	strh	r3, [r7, #54]	; 0x36
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	441a      	add	r2, r3
 8004834:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800483a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800483e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004842:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004846:	b29b      	uxth	r3, r3
 8004848:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	881b      	ldrh	r3, [r3, #0]
 8004856:	b29b      	uxth	r3, r3
 8004858:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800485c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004860:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004862:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004864:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004868:	86bb      	strh	r3, [r7, #52]	; 0x34
 800486a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800486c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004870:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	441a      	add	r2, r3
 800487c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800487e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800488a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800488e:	b29b      	uxth	r3, r3
 8004890:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	b29b      	uxth	r3, r3
 80048a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048a8:	867b      	strh	r3, [r7, #50]	; 0x32
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	441a      	add	r2, r3
 80048b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80048b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	8013      	strh	r3, [r2, #0]
 80048ca:	e0ba      	b.n	8004a42 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80048dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80048e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d01d      	beq.n	8004924 <USB_ActivateEndpoint+0x5a8>
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	441a      	add	r2, r3
 800490c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800491c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004920:	b29b      	uxth	r3, r3
 8004922:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004934:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493c:	2b00      	cmp	r3, #0
 800493e:	d01d      	beq.n	800497c <USB_ActivateEndpoint+0x600>
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	b29b      	uxth	r3, r3
 800494e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004956:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	441a      	add	r2, r3
 8004964:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800496c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004974:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004978:	b29b      	uxth	r3, r3
 800497a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	78db      	ldrb	r3, [r3, #3]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d024      	beq.n	80049ce <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	b29b      	uxth	r3, r3
 8004992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800499a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800499e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80049a2:	f083 0320 	eor.w	r3, r3, #32
 80049a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	441a      	add	r2, r3
 80049b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80049b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	8013      	strh	r3, [r2, #0]
 80049cc:	e01d      	b.n	8004a0a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	b29b      	uxth	r3, r3
 80049dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	441a      	add	r2, r3
 80049f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80049f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a20:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	441a      	add	r2, r3
 8004a2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004a2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004a42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	376c      	adds	r7, #108	; 0x6c
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr

08004a50 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b08d      	sub	sp, #52	; 0x34
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	7b1b      	ldrb	r3, [r3, #12]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f040 808e 	bne.w	8004b80 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d044      	beq.n	8004af6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	881b      	ldrh	r3, [r3, #0]
 8004a78:	81bb      	strh	r3, [r7, #12]
 8004a7a:	89bb      	ldrh	r3, [r7, #12]
 8004a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d01b      	beq.n	8004abc <USB_DeactivateEndpoint+0x6c>
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9a:	817b      	strh	r3, [r7, #10]
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	441a      	add	r2, r3
 8004aa6:	897b      	ldrh	r3, [r7, #10]
 8004aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	881b      	ldrh	r3, [r3, #0]
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ad2:	813b      	strh	r3, [r7, #8]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	441a      	add	r2, r3
 8004ade:	893b      	ldrh	r3, [r7, #8]
 8004ae0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	8013      	strh	r3, [r2, #0]
 8004af4:	e192      	b.n	8004e1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	827b      	strh	r3, [r7, #18]
 8004b04:	8a7b      	ldrh	r3, [r7, #18]
 8004b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d01b      	beq.n	8004b46 <USB_DeactivateEndpoint+0xf6>
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b24:	823b      	strh	r3, [r7, #16]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	441a      	add	r2, r3
 8004b30:	8a3b      	ldrh	r3, [r7, #16]
 8004b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5c:	81fb      	strh	r3, [r7, #14]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	441a      	add	r2, r3
 8004b68:	89fb      	ldrh	r3, [r7, #14]
 8004b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	8013      	strh	r3, [r2, #0]
 8004b7e:	e14d      	b.n	8004e1c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	785b      	ldrb	r3, [r3, #1]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f040 80a5 	bne.w	8004cd4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	843b      	strh	r3, [r7, #32]
 8004b98:	8c3b      	ldrh	r3, [r7, #32]
 8004b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d01b      	beq.n	8004bda <USB_DeactivateEndpoint+0x18a>
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb8:	83fb      	strh	r3, [r7, #30]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	441a      	add	r2, r3
 8004bc4:	8bfb      	ldrh	r3, [r7, #30]
 8004bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	881b      	ldrh	r3, [r3, #0]
 8004be6:	83bb      	strh	r3, [r7, #28]
 8004be8:	8bbb      	ldrh	r3, [r7, #28]
 8004bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d01b      	beq.n	8004c2a <USB_DeactivateEndpoint+0x1da>
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c08:	837b      	strh	r3, [r7, #26]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	441a      	add	r2, r3
 8004c14:	8b7b      	ldrh	r3, [r7, #26]
 8004c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c40:	833b      	strh	r3, [r7, #24]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	441a      	add	r2, r3
 8004c4c:	8b3b      	ldrh	r3, [r7, #24]
 8004c4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c78:	82fb      	strh	r3, [r7, #22]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	441a      	add	r2, r3
 8004c84:	8afb      	ldrh	r3, [r7, #22]
 8004c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb0:	82bb      	strh	r3, [r7, #20]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	441a      	add	r2, r3
 8004cbc:	8abb      	ldrh	r3, [r7, #20]
 8004cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	8013      	strh	r3, [r2, #0]
 8004cd2:	e0a3      	b.n	8004e1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ce2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01b      	beq.n	8004d24 <USB_DeactivateEndpoint+0x2d4>
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d02:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	441a      	add	r2, r3
 8004d0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004d32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d01b      	beq.n	8004d74 <USB_DeactivateEndpoint+0x324>
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d52:	853b      	strh	r3, [r7, #40]	; 0x28
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	441a      	add	r2, r3
 8004d5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	441a      	add	r2, r3
 8004d96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dc2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	441a      	add	r2, r3
 8004dce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfa:	847b      	strh	r3, [r7, #34]	; 0x22
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	441a      	add	r2, r3
 8004e06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3734      	adds	r7, #52	; 0x34
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bc80      	pop	{r7}
 8004e26:	4770      	bx	lr

08004e28 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b0cc      	sub	sp, #304	; 0x130
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e36:	6018      	str	r0, [r3, #0]
 8004e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e40:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	785b      	ldrb	r3, [r3, #1]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	f041 817d 	bne.w	800614e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	699a      	ldr	r2, [r3, #24]
 8004e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d908      	bls.n	8004e82 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004e80:	e007      	b.n	8004e92 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	7b1b      	ldrb	r3, [r3, #12]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d152      	bne.n	8004f48 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6959      	ldr	r1, [r3, #20]
 8004eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	88da      	ldrh	r2, [r3, #6]
 8004eba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004ec4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004ec8:	6800      	ldr	r0, [r0, #0]
 8004eca:	f001 ff0e 	bl	8006cea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ed2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ed6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004eda:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004ede:	6812      	ldr	r2, [r2, #0]
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ef8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004efc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f00:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004f04:	6812      	ldr	r2, [r2, #0]
 8004f06:	440a      	add	r2, r1
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	011a      	lsls	r2, r3, #4
 8004f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f1c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4413      	add	r3, r2
 8004f24:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f2c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f3c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	801a      	strh	r2, [r3, #0]
 8004f44:	f001 b8b5 	b.w	80060b2 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	78db      	ldrb	r3, [r3, #3]
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	f040 84c6 	bne.w	80058e6 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6a1a      	ldr	r2, [r3, #32]
 8004f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	f240 8443 	bls.w	80057fe <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	441a      	add	r2, r3
 8004fbc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fc8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6a1a      	ldr	r2, [r3, #32]
 8004fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fe4:	1ad2      	subs	r2, r2, r3
 8004fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005000:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	b29b      	uxth	r3, r3
 8005010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 823e 	beq.w	8005496 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800501a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800501e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005022:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005026:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800502a:	6812      	ldr	r2, [r2, #0]
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	785b      	ldrb	r3, [r3, #1]
 800503a:	2b00      	cmp	r3, #0
 800503c:	f040 809a 	bne.w	8005174 <USB_EPStartXfer+0x34c>
 8005040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005048:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800504c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005050:	6812      	ldr	r2, [r2, #0]
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005058:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005062:	b29b      	uxth	r3, r3
 8005064:	4619      	mov	r1, r3
 8005066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800506a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800506e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005072:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005076:	6812      	ldr	r2, [r2, #0]
 8005078:	440a      	add	r2, r1
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	011a      	lsls	r2, r3, #4
 800508a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800508e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4413      	add	r3, r2
 8005096:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800509a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800509e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d122      	bne.n	80050f2 <USB_EPStartXfer+0x2ca>
 80050ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050be:	b29a      	uxth	r2, r3
 80050c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	801a      	strh	r2, [r3, #0]
 80050cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	801a      	strh	r2, [r3, #0]
 80050f0:	e079      	b.n	80051e6 <USB_EPStartXfer+0x3be>
 80050f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050f6:	2b3e      	cmp	r3, #62	; 0x3e
 80050f8:	d81b      	bhi.n	8005132 <USB_EPStartXfer+0x30a>
 80050fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050fe:	085b      	lsrs	r3, r3, #1
 8005100:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b00      	cmp	r3, #0
 800510e:	d004      	beq.n	800511a <USB_EPStartXfer+0x2f2>
 8005110:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005114:	3301      	adds	r3, #1
 8005116:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800511a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800511e:	b29b      	uxth	r3, r3
 8005120:	029b      	lsls	r3, r3, #10
 8005122:	b29a      	uxth	r2, r3
 8005124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005128:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	801a      	strh	r2, [r3, #0]
 8005130:	e059      	b.n	80051e6 <USB_EPStartXfer+0x3be>
 8005132:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800513c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005140:	f003 031f 	and.w	r3, r3, #31
 8005144:	2b00      	cmp	r3, #0
 8005146:	d104      	bne.n	8005152 <USB_EPStartXfer+0x32a>
 8005148:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800514c:	3b01      	subs	r3, #1
 800514e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005152:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005156:	b29b      	uxth	r3, r3
 8005158:	029b      	lsls	r3, r3, #10
 800515a:	b29b      	uxth	r3, r3
 800515c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005164:	b29a      	uxth	r2, r3
 8005166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800516a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	801a      	strh	r2, [r3, #0]
 8005172:	e038      	b.n	80051e6 <USB_EPStartXfer+0x3be>
 8005174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005178:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	785b      	ldrb	r3, [r3, #1]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d130      	bne.n	80051e6 <USB_EPStartXfer+0x3be>
 8005184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005188:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005192:	b29b      	uxth	r3, r3
 8005194:	4619      	mov	r1, r3
 8005196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800519a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800519e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051a2:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80051a6:	6812      	ldr	r2, [r2, #0]
 80051a8:	440a      	add	r2, r1
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	011a      	lsls	r2, r3, #4
 80051ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051be:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4413      	add	r3, r2
 80051c6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80051ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051d8:	b29a      	uxth	r2, r3
 80051da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80051e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	895b      	ldrh	r3, [r3, #10]
 80051f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6959      	ldr	r1, [r3, #20]
 8005202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005206:	b29b      	uxth	r3, r3
 8005208:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800520c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005210:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005214:	6800      	ldr	r0, [r0, #0]
 8005216:	f001 fd68 	bl	8006cea <USB_WritePMA>
            ep->xfer_buff += len;
 800521a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800521e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	695a      	ldr	r2, [r3, #20]
 8005226:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800522a:	441a      	add	r2, r3
 800522c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005230:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005238:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800523c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6a1a      	ldr	r2, [r3, #32]
 8005244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005248:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	429a      	cmp	r2, r3
 8005252:	d90f      	bls.n	8005274 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005258:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6a1a      	ldr	r2, [r3, #32]
 8005260:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005264:	1ad2      	subs	r2, r2, r3
 8005266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800526a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	621a      	str	r2, [r3, #32]
 8005272:	e00e      	b.n	8005292 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005278:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005288:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2200      	movs	r2, #0
 8005290:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005296:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	785b      	ldrb	r3, [r3, #1]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f040 809a 	bne.w	80053d8 <USB_EPStartXfer+0x5b0>
 80052a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80052ac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80052b0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80052b4:	6812      	ldr	r2, [r2, #0]
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	4619      	mov	r1, r3
 80052ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80052d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80052d6:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80052da:	6812      	ldr	r2, [r2, #0]
 80052dc:	440a      	add	r2, r1
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	011a      	lsls	r2, r3, #4
 80052ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052f2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4413      	add	r3, r2
 80052fa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80052fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005302:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800530c:	2b00      	cmp	r3, #0
 800530e:	d122      	bne.n	8005356 <USB_EPStartXfer+0x52e>
 8005310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005314:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	b29b      	uxth	r3, r3
 800531e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005322:	b29a      	uxth	r2, r3
 8005324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005328:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	801a      	strh	r2, [r3, #0]
 8005330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005334:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	b29b      	uxth	r3, r3
 800533e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005346:	b29a      	uxth	r2, r3
 8005348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800534c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	801a      	strh	r2, [r3, #0]
 8005354:	e083      	b.n	800545e <USB_EPStartXfer+0x636>
 8005356:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800535a:	2b3e      	cmp	r3, #62	; 0x3e
 800535c:	d81b      	bhi.n	8005396 <USB_EPStartXfer+0x56e>
 800535e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005362:	085b      	lsrs	r3, r3, #1
 8005364:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005368:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	d004      	beq.n	800537e <USB_EPStartXfer+0x556>
 8005374:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005378:	3301      	adds	r3, #1
 800537a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800537e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005382:	b29b      	uxth	r3, r3
 8005384:	029b      	lsls	r3, r3, #10
 8005386:	b29a      	uxth	r2, r3
 8005388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800538c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	801a      	strh	r2, [r3, #0]
 8005394:	e063      	b.n	800545e <USB_EPStartXfer+0x636>
 8005396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800539a:	095b      	lsrs	r3, r3, #5
 800539c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80053a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053a4:	f003 031f 	and.w	r3, r3, #31
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d104      	bne.n	80053b6 <USB_EPStartXfer+0x58e>
 80053ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80053b0:	3b01      	subs	r3, #1
 80053b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80053b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	029b      	lsls	r3, r3, #10
 80053be:	b29b      	uxth	r3, r3
 80053c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	801a      	strh	r2, [r3, #0]
 80053d6:	e042      	b.n	800545e <USB_EPStartXfer+0x636>
 80053d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	785b      	ldrb	r3, [r3, #1]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d13a      	bne.n	800545e <USB_EPStartXfer+0x636>
 80053e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80053f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80053f4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80053f8:	6812      	ldr	r2, [r2, #0]
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005400:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800540a:	b29b      	uxth	r3, r3
 800540c:	4619      	mov	r1, r3
 800540e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005412:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005416:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800541a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800541e:	6812      	ldr	r2, [r2, #0]
 8005420:	440a      	add	r2, r1
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005428:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	011a      	lsls	r2, r3, #4
 8005432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005436:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4413      	add	r3, r2
 800543e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005446:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005450:	b29a      	uxth	r2, r3
 8005452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005456:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800545e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005462:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	891b      	ldrh	r3, [r3, #8]
 800546a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800546e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005472:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6959      	ldr	r1, [r3, #20]
 800547a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800547e:	b29b      	uxth	r3, r3
 8005480:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005484:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005488:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800548c:	6800      	ldr	r0, [r0, #0]
 800548e:	f001 fc2c 	bl	8006cea <USB_WritePMA>
 8005492:	f000 be0e 	b.w	80060b2 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800549a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	785b      	ldrb	r3, [r3, #1]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d16d      	bne.n	8005582 <USB_EPStartXfer+0x75a>
 80054a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80054b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c6:	4413      	add	r3, r2
 80054c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80054ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	011a      	lsls	r2, r3, #4
 80054d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054da:	4413      	add	r3, r2
 80054dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054e0:	647b      	str	r3, [r7, #68]	; 0x44
 80054e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d112      	bne.n	8005510 <USB_EPStartXfer+0x6e8>
 80054ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054f8:	801a      	strh	r2, [r3, #0]
 80054fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005508:	b29a      	uxth	r2, r3
 800550a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800550c:	801a      	strh	r2, [r3, #0]
 800550e:	e063      	b.n	80055d8 <USB_EPStartXfer+0x7b0>
 8005510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005514:	2b3e      	cmp	r3, #62	; 0x3e
 8005516:	d817      	bhi.n	8005548 <USB_EPStartXfer+0x720>
 8005518:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800551c:	085b      	lsrs	r3, r3, #1
 800551e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d004      	beq.n	8005538 <USB_EPStartXfer+0x710>
 800552e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005532:	3301      	adds	r3, #1
 8005534:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005538:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800553c:	b29b      	uxth	r3, r3
 800553e:	029b      	lsls	r3, r3, #10
 8005540:	b29a      	uxth	r2, r3
 8005542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005544:	801a      	strh	r2, [r3, #0]
 8005546:	e047      	b.n	80055d8 <USB_EPStartXfer+0x7b0>
 8005548:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005552:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005556:	f003 031f 	and.w	r3, r3, #31
 800555a:	2b00      	cmp	r3, #0
 800555c:	d104      	bne.n	8005568 <USB_EPStartXfer+0x740>
 800555e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005562:	3b01      	subs	r3, #1
 8005564:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005568:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800556c:	b29b      	uxth	r3, r3
 800556e:	029b      	lsls	r3, r3, #10
 8005570:	b29b      	uxth	r3, r3
 8005572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800557a:	b29a      	uxth	r2, r3
 800557c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800557e:	801a      	strh	r2, [r3, #0]
 8005580:	e02a      	b.n	80055d8 <USB_EPStartXfer+0x7b0>
 8005582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005586:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	785b      	ldrb	r3, [r3, #1]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d122      	bne.n	80055d8 <USB_EPStartXfer+0x7b0>
 8005592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005596:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	653b      	str	r3, [r7, #80]	; 0x50
 800559e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	461a      	mov	r2, r3
 80055b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055b2:	4413      	add	r3, r2
 80055b4:	653b      	str	r3, [r7, #80]	; 0x50
 80055b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	011a      	lsls	r2, r3, #4
 80055c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055c6:	4413      	add	r3, r2
 80055c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80055d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	891b      	ldrh	r3, [r3, #8]
 80055e4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6959      	ldr	r1, [r3, #20]
 80055f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80055fe:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005602:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005606:	6800      	ldr	r0, [r0, #0]
 8005608:	f001 fb6f 	bl	8006cea <USB_WritePMA>
            ep->xfer_buff += len;
 800560c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005610:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695a      	ldr	r2, [r3, #20]
 8005618:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800561c:	441a      	add	r2, r3
 800561e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005622:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800562a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800562e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6a1a      	ldr	r2, [r3, #32]
 8005636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800563a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	429a      	cmp	r2, r3
 8005644:	d90f      	bls.n	8005666 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800564a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6a1a      	ldr	r2, [r3, #32]
 8005652:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005656:	1ad2      	subs	r2, r2, r3
 8005658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800565c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	621a      	str	r2, [r3, #32]
 8005664:	e00e      	b.n	8005684 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800567a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2200      	movs	r2, #0
 8005682:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005688:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	643b      	str	r3, [r7, #64]	; 0x40
 8005690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005694:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	785b      	ldrb	r3, [r3, #1]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d16d      	bne.n	800577c <USB_EPStartXfer+0x954>
 80056a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80056ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	461a      	mov	r2, r3
 80056be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c0:	4413      	add	r3, r2
 80056c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80056c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	011a      	lsls	r2, r3, #4
 80056d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d4:	4413      	add	r3, r2
 80056d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056da:	637b      	str	r3, [r7, #52]	; 0x34
 80056dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d112      	bne.n	800570a <USB_EPStartXfer+0x8e2>
 80056e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f2:	801a      	strh	r2, [r3, #0]
 80056f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005702:	b29a      	uxth	r2, r3
 8005704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005706:	801a      	strh	r2, [r3, #0]
 8005708:	e05d      	b.n	80057c6 <USB_EPStartXfer+0x99e>
 800570a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800570e:	2b3e      	cmp	r3, #62	; 0x3e
 8005710:	d817      	bhi.n	8005742 <USB_EPStartXfer+0x91a>
 8005712:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005716:	085b      	lsrs	r3, r3, #1
 8005718:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800571c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b00      	cmp	r3, #0
 8005726:	d004      	beq.n	8005732 <USB_EPStartXfer+0x90a>
 8005728:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800572c:	3301      	adds	r3, #1
 800572e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005732:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005736:	b29b      	uxth	r3, r3
 8005738:	029b      	lsls	r3, r3, #10
 800573a:	b29a      	uxth	r2, r3
 800573c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573e:	801a      	strh	r2, [r3, #0]
 8005740:	e041      	b.n	80057c6 <USB_EPStartXfer+0x99e>
 8005742:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005746:	095b      	lsrs	r3, r3, #5
 8005748:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800574c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005750:	f003 031f 	and.w	r3, r3, #31
 8005754:	2b00      	cmp	r3, #0
 8005756:	d104      	bne.n	8005762 <USB_EPStartXfer+0x93a>
 8005758:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800575c:	3b01      	subs	r3, #1
 800575e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005762:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005766:	b29b      	uxth	r3, r3
 8005768:	029b      	lsls	r3, r3, #10
 800576a:	b29b      	uxth	r3, r3
 800576c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005774:	b29a      	uxth	r2, r3
 8005776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005778:	801a      	strh	r2, [r3, #0]
 800577a:	e024      	b.n	80057c6 <USB_EPStartXfer+0x99e>
 800577c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005780:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	785b      	ldrb	r3, [r3, #1]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d11c      	bne.n	80057c6 <USB_EPStartXfer+0x99e>
 800578c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005790:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800579a:	b29b      	uxth	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057a0:	4413      	add	r3, r2
 80057a2:	643b      	str	r3, [r7, #64]	; 0x40
 80057a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	011a      	lsls	r2, r3, #4
 80057b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057b4:	4413      	add	r3, r2
 80057b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80057c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	895b      	ldrh	r3, [r3, #10]
 80057d2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6959      	ldr	r1, [r3, #20]
 80057e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80057ec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80057f0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80057f4:	6800      	ldr	r0, [r0, #0]
 80057f6:	f001 fa78 	bl	8006cea <USB_WritePMA>
 80057fa:	f000 bc5a 	b.w	80060b2 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80057fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005802:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800580e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005812:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800581c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	b29b      	uxth	r3, r3
 800582c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005834:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005846:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	441a      	add	r2, r3
 8005852:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800585a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800585e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005866:	b29b      	uxth	r3, r3
 8005868:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800586a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005884:	b29b      	uxth	r3, r3
 8005886:	461a      	mov	r2, r3
 8005888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800588a:	4413      	add	r3, r2
 800588c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800588e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005892:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	011a      	lsls	r2, r3, #4
 800589c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800589e:	4413      	add	r3, r2
 80058a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80058a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80058b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	891b      	ldrh	r3, [r3, #8]
 80058bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6959      	ldr	r1, [r3, #20]
 80058cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058d6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80058da:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80058de:	6800      	ldr	r0, [r0, #0]
 80058e0:	f001 fa03 	bl	8006cea <USB_WritePMA>
 80058e4:	e3e5      	b.n	80060b2 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80058e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005914:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800591e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	441a      	add	r2, r3
 800592a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800592e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005936:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800593a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800593e:	b29b      	uxth	r3, r3
 8005940:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005946:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6a1a      	ldr	r2, [r3, #32]
 800594e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005952:	1ad2      	subs	r2, r2, r3
 8005954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005958:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005964:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800596e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	b29b      	uxth	r3, r3
 800597e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 81bc 	beq.w	8005d00 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	785b      	ldrb	r3, [r3, #1]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d16d      	bne.n	8005a82 <USB_EPStartXfer+0xc5a>
 80059a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80059b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	461a      	mov	r2, r3
 80059c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059c6:	4413      	add	r3, r2
 80059c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80059ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	011a      	lsls	r2, r3, #4
 80059d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059da:	4413      	add	r3, r2
 80059dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059e0:	677b      	str	r3, [r7, #116]	; 0x74
 80059e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d112      	bne.n	8005a10 <USB_EPStartXfer+0xbe8>
 80059ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059f8:	801a      	strh	r2, [r3, #0]
 80059fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a0c:	801a      	strh	r2, [r3, #0]
 8005a0e:	e060      	b.n	8005ad2 <USB_EPStartXfer+0xcaa>
 8005a10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a14:	2b3e      	cmp	r3, #62	; 0x3e
 8005a16:	d817      	bhi.n	8005a48 <USB_EPStartXfer+0xc20>
 8005a18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a1c:	085b      	lsrs	r3, r3, #1
 8005a1e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d004      	beq.n	8005a38 <USB_EPStartXfer+0xc10>
 8005a2e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a32:	3301      	adds	r3, #1
 8005a34:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a38:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	029b      	lsls	r3, r3, #10
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a44:	801a      	strh	r2, [r3, #0]
 8005a46:	e044      	b.n	8005ad2 <USB_EPStartXfer+0xcaa>
 8005a48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a4c:	095b      	lsrs	r3, r3, #5
 8005a4e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a56:	f003 031f 	and.w	r3, r3, #31
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d104      	bne.n	8005a68 <USB_EPStartXfer+0xc40>
 8005a5e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a62:	3b01      	subs	r3, #1
 8005a64:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a68:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	029b      	lsls	r3, r3, #10
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a7e:	801a      	strh	r2, [r3, #0]
 8005a80:	e027      	b.n	8005ad2 <USB_EPStartXfer+0xcaa>
 8005a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	785b      	ldrb	r3, [r3, #1]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d11f      	bne.n	8005ad2 <USB_EPStartXfer+0xcaa>
 8005a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	011a      	lsls	r2, r3, #4
 8005abc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ac6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ad0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	895b      	ldrh	r3, [r3, #10]
 8005ade:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6959      	ldr	r1, [r3, #20]
 8005aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005af8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005afc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005b00:	6800      	ldr	r0, [r0, #0]
 8005b02:	f001 f8f2 	bl	8006cea <USB_WritePMA>
          ep->xfer_buff += len;
 8005b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695a      	ldr	r2, [r3, #20]
 8005b12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b16:	441a      	add	r2, r3
 8005b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6a1a      	ldr	r2, [r3, #32]
 8005b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d90f      	bls.n	8005b60 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6a1a      	ldr	r2, [r3, #32]
 8005b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b50:	1ad2      	subs	r2, r2, r3
 8005b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	621a      	str	r2, [r3, #32]
 8005b5e:	e00e      	b.n	8005b7e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 8295 	beq.w	80060b2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	785b      	ldrb	r3, [r3, #1]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d16d      	bne.n	8005c74 <USB_EPStartXfer+0xe4c>
 8005b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bb8:	4413      	add	r3, r2
 8005bba:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	011a      	lsls	r2, r3, #4
 8005bca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bcc:	4413      	add	r3, r2
 8005bce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bd2:	667b      	str	r3, [r7, #100]	; 0x64
 8005bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d112      	bne.n	8005c02 <USB_EPStartXfer+0xdda>
 8005bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bea:	801a      	strh	r2, [r3, #0]
 8005bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bfe:	801a      	strh	r2, [r3, #0]
 8005c00:	e063      	b.n	8005cca <USB_EPStartXfer+0xea2>
 8005c02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c06:	2b3e      	cmp	r3, #62	; 0x3e
 8005c08:	d817      	bhi.n	8005c3a <USB_EPStartXfer+0xe12>
 8005c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c0e:	085b      	lsrs	r3, r3, #1
 8005c10:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d004      	beq.n	8005c2a <USB_EPStartXfer+0xe02>
 8005c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c24:	3301      	adds	r3, #1
 8005c26:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	029b      	lsls	r3, r3, #10
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c36:	801a      	strh	r2, [r3, #0]
 8005c38:	e047      	b.n	8005cca <USB_EPStartXfer+0xea2>
 8005c3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005c44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c48:	f003 031f 	and.w	r3, r3, #31
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d104      	bne.n	8005c5a <USB_EPStartXfer+0xe32>
 8005c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c54:	3b01      	subs	r3, #1
 8005c56:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	029b      	lsls	r3, r3, #10
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c70:	801a      	strh	r2, [r3, #0]
 8005c72:	e02a      	b.n	8005cca <USB_EPStartXfer+0xea2>
 8005c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	785b      	ldrb	r3, [r3, #1]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d122      	bne.n	8005cca <USB_EPStartXfer+0xea2>
 8005c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	673b      	str	r3, [r7, #112]	; 0x70
 8005c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ca4:	4413      	add	r3, r2
 8005ca6:	673b      	str	r3, [r7, #112]	; 0x70
 8005ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	011a      	lsls	r2, r3, #4
 8005cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cb8:	4413      	add	r3, r2
 8005cba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005cca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	891b      	ldrh	r3, [r3, #8]
 8005cd6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6959      	ldr	r1, [r3, #20]
 8005ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005cf0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005cf4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005cf8:	6800      	ldr	r0, [r0, #0]
 8005cfa:	f000 fff6 	bl	8006cea <USB_WritePMA>
 8005cfe:	e1d8      	b.n	80060b2 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	785b      	ldrb	r3, [r3, #1]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d178      	bne.n	8005e02 <USB_EPStartXfer+0xfda>
 8005d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d34:	4413      	add	r3, r2
 8005d36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	011a      	lsls	r2, r3, #4
 8005d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d116      	bne.n	8005d8c <USB_EPStartXfer+0xf64>
 8005d5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d70:	801a      	strh	r2, [r3, #0]
 8005d72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d88:	801a      	strh	r2, [r3, #0]
 8005d8a:	e06b      	b.n	8005e64 <USB_EPStartXfer+0x103c>
 8005d8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d90:	2b3e      	cmp	r3, #62	; 0x3e
 8005d92:	d818      	bhi.n	8005dc6 <USB_EPStartXfer+0xf9e>
 8005d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d98:	085b      	lsrs	r3, r3, #1
 8005d9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d004      	beq.n	8005db4 <USB_EPStartXfer+0xf8c>
 8005daa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005dae:	3301      	adds	r3, #1
 8005db0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005db4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	029b      	lsls	r3, r3, #10
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dc2:	801a      	strh	r2, [r3, #0]
 8005dc4:	e04e      	b.n	8005e64 <USB_EPStartXfer+0x103c>
 8005dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dca:	095b      	lsrs	r3, r3, #5
 8005dcc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd4:	f003 031f 	and.w	r3, r3, #31
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d104      	bne.n	8005de6 <USB_EPStartXfer+0xfbe>
 8005ddc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005de0:	3b01      	subs	r3, #1
 8005de2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005de6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	029b      	lsls	r3, r3, #10
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dfe:	801a      	strh	r2, [r3, #0]
 8005e00:	e030      	b.n	8005e64 <USB_EPStartXfer+0x103c>
 8005e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	785b      	ldrb	r3, [r3, #1]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d128      	bne.n	8005e64 <USB_EPStartXfer+0x103c>
 8005e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e36:	4413      	add	r3, r2
 8005e38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	011a      	lsls	r2, r3, #4
 8005e4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e4e:	4413      	add	r3, r2
 8005e50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	891b      	ldrh	r3, [r3, #8]
 8005e70:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6959      	ldr	r1, [r3, #20]
 8005e80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e8a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e8e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e92:	6800      	ldr	r0, [r0, #0]
 8005e94:	f000 ff29 	bl	8006cea <USB_WritePMA>
          ep->xfer_buff += len;
 8005e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	695a      	ldr	r2, [r3, #20]
 8005ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ea8:	441a      	add	r2, r3
 8005eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6a1a      	ldr	r2, [r3, #32]
 8005ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d90f      	bls.n	8005ef2 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6a1a      	ldr	r2, [r3, #32]
 8005ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ee2:	1ad2      	subs	r2, r2, r3
 8005ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	621a      	str	r2, [r3, #32]
 8005ef0:	e00e      	b.n	8005f10 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005f10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 80cc 	beq.w	80060b2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	785b      	ldrb	r3, [r3, #1]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d178      	bne.n	800602a <USB_EPStartXfer+0x1202>
 8005f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	461a      	mov	r2, r3
 8005f58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	011a      	lsls	r2, r3, #4
 8005f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f74:	4413      	add	r3, r2
 8005f76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d116      	bne.n	8005fb4 <USB_EPStartXfer+0x118c>
 8005f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f98:	801a      	strh	r2, [r3, #0]
 8005f9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fb0:	801a      	strh	r2, [r3, #0]
 8005fb2:	e064      	b.n	800607e <USB_EPStartXfer+0x1256>
 8005fb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fb8:	2b3e      	cmp	r3, #62	; 0x3e
 8005fba:	d818      	bhi.n	8005fee <USB_EPStartXfer+0x11c6>
 8005fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fc0:	085b      	lsrs	r3, r3, #1
 8005fc2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d004      	beq.n	8005fdc <USB_EPStartXfer+0x11b4>
 8005fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	029b      	lsls	r3, r3, #10
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fea:	801a      	strh	r2, [r3, #0]
 8005fec:	e047      	b.n	800607e <USB_EPStartXfer+0x1256>
 8005fee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ff2:	095b      	lsrs	r3, r3, #5
 8005ff4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ffc:	f003 031f 	and.w	r3, r3, #31
 8006000:	2b00      	cmp	r3, #0
 8006002:	d104      	bne.n	800600e <USB_EPStartXfer+0x11e6>
 8006004:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006008:	3b01      	subs	r3, #1
 800600a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800600e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006012:	b29b      	uxth	r3, r3
 8006014:	029b      	lsls	r3, r3, #10
 8006016:	b29b      	uxth	r3, r3
 8006018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800601c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006020:	b29a      	uxth	r2, r3
 8006022:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006026:	801a      	strh	r2, [r3, #0]
 8006028:	e029      	b.n	800607e <USB_EPStartXfer+0x1256>
 800602a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800602e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	785b      	ldrb	r3, [r3, #1]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d121      	bne.n	800607e <USB_EPStartXfer+0x1256>
 800603a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800603e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006048:	b29b      	uxth	r3, r3
 800604a:	461a      	mov	r2, r3
 800604c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006050:	4413      	add	r3, r2
 8006052:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800605a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	011a      	lsls	r2, r3, #4
 8006064:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006068:	4413      	add	r3, r2
 800606a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800606e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006072:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006076:	b29a      	uxth	r2, r3
 8006078:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800607c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800607e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006082:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	895b      	ldrh	r3, [r3, #10]
 800608a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800608e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6959      	ldr	r1, [r3, #20]
 800609a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800609e:	b29b      	uxth	r3, r3
 80060a0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80060a4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80060a8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80060ac:	6800      	ldr	r0, [r0, #0]
 80060ae:	f000 fe1c 	bl	8006cea <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80060b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4413      	add	r3, r2
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060d4:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80060d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060e0:	8013      	strh	r3, [r2, #0]
 80060e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80060ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060ee:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80060f2:	8812      	ldrh	r2, [r2, #0]
 80060f4:	f082 0210 	eor.w	r2, r2, #16
 80060f8:	801a      	strh	r2, [r3, #0]
 80060fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060fe:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006102:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006106:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800610a:	8812      	ldrh	r2, [r2, #0]
 800610c:	f082 0220 	eor.w	r2, r2, #32
 8006110:	801a      	strh	r2, [r3, #0]
 8006112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006116:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006120:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	441a      	add	r2, r3
 800612c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006130:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800613a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800613e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006146:	b29b      	uxth	r3, r3
 8006148:	8013      	strh	r3, [r2, #0]
 800614a:	f000 bc9f 	b.w	8006a8c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800614e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006152:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	7b1b      	ldrb	r3, [r3, #12]
 800615a:	2b00      	cmp	r3, #0
 800615c:	f040 80ae 	bne.w	80062bc <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006164:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	699a      	ldr	r2, [r3, #24]
 800616c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006170:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	429a      	cmp	r2, r3
 800617a:	d917      	bls.n	80061ac <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800617c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006180:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800618c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006190:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	699a      	ldr	r2, [r3, #24]
 8006198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800619c:	1ad2      	subs	r2, r2, r3
 800619e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	619a      	str	r2, [r3, #24]
 80061aa:	e00e      	b.n	80061ca <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80061ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80061bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2200      	movs	r2, #0
 80061c8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80061ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	461a      	mov	r2, r3
 80061ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061ee:	4413      	add	r3, r2
 80061f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	011a      	lsls	r2, r3, #4
 8006202:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006206:	4413      	add	r3, r2
 8006208:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800620c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006210:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006214:	2b00      	cmp	r3, #0
 8006216:	d116      	bne.n	8006246 <USB_EPStartXfer+0x141e>
 8006218:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	b29b      	uxth	r3, r3
 8006220:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006224:	b29a      	uxth	r2, r3
 8006226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800622a:	801a      	strh	r2, [r3, #0]
 800622c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	b29b      	uxth	r3, r3
 8006234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800623c:	b29a      	uxth	r2, r3
 800623e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006242:	801a      	strh	r2, [r3, #0]
 8006244:	e3e8      	b.n	8006a18 <USB_EPStartXfer+0x1bf0>
 8006246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800624a:	2b3e      	cmp	r3, #62	; 0x3e
 800624c:	d818      	bhi.n	8006280 <USB_EPStartXfer+0x1458>
 800624e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006252:	085b      	lsrs	r3, r3, #1
 8006254:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006258:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	d004      	beq.n	800626e <USB_EPStartXfer+0x1446>
 8006264:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006268:	3301      	adds	r3, #1
 800626a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800626e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006272:	b29b      	uxth	r3, r3
 8006274:	029b      	lsls	r3, r3, #10
 8006276:	b29a      	uxth	r2, r3
 8006278:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800627c:	801a      	strh	r2, [r3, #0]
 800627e:	e3cb      	b.n	8006a18 <USB_EPStartXfer+0x1bf0>
 8006280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006284:	095b      	lsrs	r3, r3, #5
 8006286:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800628a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800628e:	f003 031f 	and.w	r3, r3, #31
 8006292:	2b00      	cmp	r3, #0
 8006294:	d104      	bne.n	80062a0 <USB_EPStartXfer+0x1478>
 8006296:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800629a:	3b01      	subs	r3, #1
 800629c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80062a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	029b      	lsls	r3, r3, #10
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062b8:	801a      	strh	r2, [r3, #0]
 80062ba:	e3ad      	b.n	8006a18 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80062bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	78db      	ldrb	r3, [r3, #3]
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	f040 8200 	bne.w	80066ce <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80062ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	785b      	ldrb	r3, [r3, #1]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f040 8091 	bne.w	8006402 <USB_EPStartXfer+0x15da>
 80062e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	461a      	mov	r2, r3
 8006300:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006304:	4413      	add	r3, r2
 8006306:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800630a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800630e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	011a      	lsls	r2, r3, #4
 8006318:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800631c:	4413      	add	r3, r2
 800631e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006322:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800632a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d116      	bne.n	8006364 <USB_EPStartXfer+0x153c>
 8006336:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	b29b      	uxth	r3, r3
 800633e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006342:	b29a      	uxth	r2, r3
 8006344:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006348:	801a      	strh	r2, [r3, #0]
 800634a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	b29b      	uxth	r3, r3
 8006352:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006356:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800635a:	b29a      	uxth	r2, r3
 800635c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006360:	801a      	strh	r2, [r3, #0]
 8006362:	e083      	b.n	800646c <USB_EPStartXfer+0x1644>
 8006364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006368:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	2b3e      	cmp	r3, #62	; 0x3e
 8006372:	d820      	bhi.n	80063b6 <USB_EPStartXfer+0x158e>
 8006374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006378:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	085b      	lsrs	r3, r3, #1
 8006382:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800638a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	d004      	beq.n	80063a4 <USB_EPStartXfer+0x157c>
 800639a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800639e:	3301      	adds	r3, #1
 80063a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	029b      	lsls	r3, r3, #10
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063b2:	801a      	strh	r2, [r3, #0]
 80063b4:	e05a      	b.n	800646c <USB_EPStartXfer+0x1644>
 80063b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	095b      	lsrs	r3, r3, #5
 80063c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	f003 031f 	and.w	r3, r3, #31
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d104      	bne.n	80063e6 <USB_EPStartXfer+0x15be>
 80063dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e0:	3b01      	subs	r3, #1
 80063e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	029b      	lsls	r3, r3, #10
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063fe:	801a      	strh	r2, [r3, #0]
 8006400:	e034      	b.n	800646c <USB_EPStartXfer+0x1644>
 8006402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006406:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	785b      	ldrb	r3, [r3, #1]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d12c      	bne.n	800646c <USB_EPStartXfer+0x1644>
 8006412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006416:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006424:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800642e:	b29b      	uxth	r3, r3
 8006430:	461a      	mov	r2, r3
 8006432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006436:	4413      	add	r3, r2
 8006438:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800643c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	011a      	lsls	r2, r3, #4
 800644a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800644e:	4413      	add	r3, r2
 8006450:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006454:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800645c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	b29a      	uxth	r2, r3
 8006466:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800646a:	801a      	strh	r2, [r3, #0]
 800646c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006470:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800647a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	785b      	ldrb	r3, [r3, #1]
 8006486:	2b00      	cmp	r3, #0
 8006488:	f040 8091 	bne.w	80065ae <USB_EPStartXfer+0x1786>
 800648c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006490:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800649a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	461a      	mov	r2, r3
 80064ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80064b0:	4413      	add	r3, r2
 80064b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80064b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	011a      	lsls	r2, r3, #4
 80064c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80064c8:	4413      	add	r3, r2
 80064ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d116      	bne.n	8006510 <USB_EPStartXfer+0x16e8>
 80064e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064f4:	801a      	strh	r2, [r3, #0]
 80064f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006506:	b29a      	uxth	r2, r3
 8006508:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800650c:	801a      	strh	r2, [r3, #0]
 800650e:	e07c      	b.n	800660a <USB_EPStartXfer+0x17e2>
 8006510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	2b3e      	cmp	r3, #62	; 0x3e
 800651e:	d820      	bhi.n	8006562 <USB_EPStartXfer+0x173a>
 8006520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006524:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	085b      	lsrs	r3, r3, #1
 800652e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006536:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	d004      	beq.n	8006550 <USB_EPStartXfer+0x1728>
 8006546:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800654a:	3301      	adds	r3, #1
 800654c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006550:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006554:	b29b      	uxth	r3, r3
 8006556:	029b      	lsls	r3, r3, #10
 8006558:	b29a      	uxth	r2, r3
 800655a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800655e:	801a      	strh	r2, [r3, #0]
 8006560:	e053      	b.n	800660a <USB_EPStartXfer+0x17e2>
 8006562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006566:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	095b      	lsrs	r3, r3, #5
 8006570:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006574:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006578:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	f003 031f 	and.w	r3, r3, #31
 8006584:	2b00      	cmp	r3, #0
 8006586:	d104      	bne.n	8006592 <USB_EPStartXfer+0x176a>
 8006588:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800658c:	3b01      	subs	r3, #1
 800658e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006592:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006596:	b29b      	uxth	r3, r3
 8006598:	029b      	lsls	r3, r3, #10
 800659a:	b29b      	uxth	r3, r3
 800659c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065aa:	801a      	strh	r2, [r3, #0]
 80065ac:	e02d      	b.n	800660a <USB_EPStartXfer+0x17e2>
 80065ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	785b      	ldrb	r3, [r3, #1]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d125      	bne.n	800660a <USB_EPStartXfer+0x17e2>
 80065be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	461a      	mov	r2, r3
 80065d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065d4:	4413      	add	r3, r2
 80065d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	011a      	lsls	r2, r3, #4
 80065e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065ec:	4413      	add	r3, r2
 80065ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	b29a      	uxth	r2, r3
 8006604:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006608:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800660a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800660e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	2b00      	cmp	r3, #0
 8006618:	f000 81fe 	beq.w	8006a18 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800661c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006620:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800662a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800663c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d005      	beq.n	8006654 <USB_EPStartXfer+0x182c>
 8006648:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800664c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10d      	bne.n	8006670 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006654:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800665c:	2b00      	cmp	r3, #0
 800665e:	f040 81db 	bne.w	8006a18 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006662:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666a:	2b00      	cmp	r3, #0
 800666c:	f040 81d4 	bne.w	8006a18 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006674:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800667e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	b29b      	uxth	r3, r3
 800668e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006696:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800669a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800669e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	441a      	add	r2, r3
 80066b4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80066b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	8013      	strh	r3, [r2, #0]
 80066cc:	e1a4      	b.n	8006a18 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80066ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	78db      	ldrb	r3, [r3, #3]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	f040 819a 	bne.w	8006a14 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80066e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	699a      	ldr	r2, [r3, #24]
 80066ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d917      	bls.n	800672c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80066fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006700:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800670c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006710:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	699a      	ldr	r2, [r3, #24]
 8006718:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800671c:	1ad2      	subs	r2, r2, r3
 800671e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006722:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	619a      	str	r2, [r3, #24]
 800672a:	e00e      	b.n	800674a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800672c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006730:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800673c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006740:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2200      	movs	r2, #0
 8006748:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800674a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800674e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	785b      	ldrb	r3, [r3, #1]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d178      	bne.n	800684c <USB_EPStartXfer+0x1a24>
 800675a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800675e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800676c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006776:	b29b      	uxth	r3, r3
 8006778:	461a      	mov	r2, r3
 800677a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800677e:	4413      	add	r3, r2
 8006780:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006788:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	011a      	lsls	r2, r3, #4
 8006792:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006796:	4413      	add	r3, r2
 8006798:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800679c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d116      	bne.n	80067d6 <USB_EPStartXfer+0x19ae>
 80067a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067ba:	801a      	strh	r2, [r3, #0]
 80067bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067d2:	801a      	strh	r2, [r3, #0]
 80067d4:	e06b      	b.n	80068ae <USB_EPStartXfer+0x1a86>
 80067d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067da:	2b3e      	cmp	r3, #62	; 0x3e
 80067dc:	d818      	bhi.n	8006810 <USB_EPStartXfer+0x19e8>
 80067de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067e2:	085b      	lsrs	r3, r3, #1
 80067e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d004      	beq.n	80067fe <USB_EPStartXfer+0x19d6>
 80067f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067f8:	3301      	adds	r3, #1
 80067fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006802:	b29b      	uxth	r3, r3
 8006804:	029b      	lsls	r3, r3, #10
 8006806:	b29a      	uxth	r2, r3
 8006808:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800680c:	801a      	strh	r2, [r3, #0]
 800680e:	e04e      	b.n	80068ae <USB_EPStartXfer+0x1a86>
 8006810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006814:	095b      	lsrs	r3, r3, #5
 8006816:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800681a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800681e:	f003 031f 	and.w	r3, r3, #31
 8006822:	2b00      	cmp	r3, #0
 8006824:	d104      	bne.n	8006830 <USB_EPStartXfer+0x1a08>
 8006826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800682a:	3b01      	subs	r3, #1
 800682c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006834:	b29b      	uxth	r3, r3
 8006836:	029b      	lsls	r3, r3, #10
 8006838:	b29b      	uxth	r3, r3
 800683a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800683e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006842:	b29a      	uxth	r2, r3
 8006844:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006848:	801a      	strh	r2, [r3, #0]
 800684a:	e030      	b.n	80068ae <USB_EPStartXfer+0x1a86>
 800684c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006850:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	785b      	ldrb	r3, [r3, #1]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d128      	bne.n	80068ae <USB_EPStartXfer+0x1a86>
 800685c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006860:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800686a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006878:	b29b      	uxth	r3, r3
 800687a:	461a      	mov	r2, r3
 800687c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006880:	4413      	add	r3, r2
 8006882:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800688a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	011a      	lsls	r2, r3, #4
 8006894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006898:	4413      	add	r3, r2
 800689a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800689e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80068a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80068ac:	801a      	strh	r2, [r3, #0]
 80068ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	785b      	ldrb	r3, [r3, #1]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d178      	bne.n	80069be <USB_EPStartXfer+0x1b96>
 80068cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80068da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	461a      	mov	r2, r3
 80068ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068f0:	4413      	add	r3, r2
 80068f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80068f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	011a      	lsls	r2, r3, #4
 8006904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006908:	4413      	add	r3, r2
 800690a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800690e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006916:	2b00      	cmp	r3, #0
 8006918:	d116      	bne.n	8006948 <USB_EPStartXfer+0x1b20>
 800691a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800691e:	881b      	ldrh	r3, [r3, #0]
 8006920:	b29b      	uxth	r3, r3
 8006922:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006926:	b29a      	uxth	r2, r3
 8006928:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800692c:	801a      	strh	r2, [r3, #0]
 800692e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	b29b      	uxth	r3, r3
 8006936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800693a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800693e:	b29a      	uxth	r2, r3
 8006940:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006944:	801a      	strh	r2, [r3, #0]
 8006946:	e067      	b.n	8006a18 <USB_EPStartXfer+0x1bf0>
 8006948:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800694c:	2b3e      	cmp	r3, #62	; 0x3e
 800694e:	d818      	bhi.n	8006982 <USB_EPStartXfer+0x1b5a>
 8006950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006954:	085b      	lsrs	r3, r3, #1
 8006956:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800695a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d004      	beq.n	8006970 <USB_EPStartXfer+0x1b48>
 8006966:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800696a:	3301      	adds	r3, #1
 800696c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006970:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006974:	b29b      	uxth	r3, r3
 8006976:	029b      	lsls	r3, r3, #10
 8006978:	b29a      	uxth	r2, r3
 800697a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800697e:	801a      	strh	r2, [r3, #0]
 8006980:	e04a      	b.n	8006a18 <USB_EPStartXfer+0x1bf0>
 8006982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006986:	095b      	lsrs	r3, r3, #5
 8006988:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800698c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006990:	f003 031f 	and.w	r3, r3, #31
 8006994:	2b00      	cmp	r3, #0
 8006996:	d104      	bne.n	80069a2 <USB_EPStartXfer+0x1b7a>
 8006998:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800699c:	3b01      	subs	r3, #1
 800699e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80069a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	029b      	lsls	r3, r3, #10
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069ba:	801a      	strh	r2, [r3, #0]
 80069bc:	e02c      	b.n	8006a18 <USB_EPStartXfer+0x1bf0>
 80069be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	785b      	ldrb	r3, [r3, #1]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d124      	bne.n	8006a18 <USB_EPStartXfer+0x1bf0>
 80069ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069dc:	b29b      	uxth	r3, r3
 80069de:	461a      	mov	r2, r3
 80069e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e4:	4413      	add	r3, r2
 80069e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	011a      	lsls	r2, r3, #4
 80069f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069fc:	4413      	add	r3, r2
 80069fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a10:	801a      	strh	r2, [r3, #0]
 8006a12:	e001      	b.n	8006a18 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e03a      	b.n	8006a8e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	881b      	ldrh	r3, [r3, #0]
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006a42:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006a46:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a4a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006a4e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006a52:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a56:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	441a      	add	r2, r3
 8006a74:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	785b      	ldrb	r3, [r3, #1]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d020      	beq.n	8006aec <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac0:	81bb      	strh	r3, [r7, #12]
 8006ac2:	89bb      	ldrh	r3, [r7, #12]
 8006ac4:	f083 0310 	eor.w	r3, r3, #16
 8006ac8:	81bb      	strh	r3, [r7, #12]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	441a      	add	r2, r3
 8006ad4:	89bb      	ldrh	r3, [r7, #12]
 8006ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	8013      	strh	r3, [r2, #0]
 8006aea:	e01f      	b.n	8006b2c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b02:	81fb      	strh	r3, [r7, #14]
 8006b04:	89fb      	ldrh	r3, [r7, #14]
 8006b06:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b0a:	81fb      	strh	r3, [r7, #14]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	441a      	add	r2, r3
 8006b16:	89fb      	ldrh	r3, [r7, #14]
 8006b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bc80      	pop	{r7}
 8006b36:	4770      	bx	lr

08006b38 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	7b1b      	ldrb	r3, [r3, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f040 809d 	bne.w	8006c86 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	785b      	ldrb	r3, [r3, #1]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d04c      	beq.n	8006bee <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	881b      	ldrh	r3, [r3, #0]
 8006b60:	823b      	strh	r3, [r7, #16]
 8006b62:	8a3b      	ldrh	r3, [r7, #16]
 8006b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d01b      	beq.n	8006ba4 <USB_EPClearStall+0x6c>
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b82:	81fb      	strh	r3, [r7, #14]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	441a      	add	r2, r3
 8006b8e:	89fb      	ldrh	r3, [r7, #14]
 8006b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	78db      	ldrb	r3, [r3, #3]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d06c      	beq.n	8006c86 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bc2:	81bb      	strh	r3, [r7, #12]
 8006bc4:	89bb      	ldrh	r3, [r7, #12]
 8006bc6:	f083 0320 	eor.w	r3, r3, #32
 8006bca:	81bb      	strh	r3, [r7, #12]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	441a      	add	r2, r3
 8006bd6:	89bb      	ldrh	r3, [r7, #12]
 8006bd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	8013      	strh	r3, [r2, #0]
 8006bec:	e04b      	b.n	8006c86 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	881b      	ldrh	r3, [r3, #0]
 8006bfa:	82fb      	strh	r3, [r7, #22]
 8006bfc:	8afb      	ldrh	r3, [r7, #22]
 8006bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d01b      	beq.n	8006c3e <USB_EPClearStall+0x106>
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4413      	add	r3, r2
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c1c:	82bb      	strh	r3, [r7, #20]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	441a      	add	r2, r3
 8006c28:	8abb      	ldrh	r3, [r7, #20]
 8006c2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c54:	827b      	strh	r3, [r7, #18]
 8006c56:	8a7b      	ldrh	r3, [r7, #18]
 8006c58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c5c:	827b      	strh	r3, [r7, #18]
 8006c5e:	8a7b      	ldrh	r3, [r7, #18]
 8006c60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c64:	827b      	strh	r3, [r7, #18]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	441a      	add	r2, r3
 8006c70:	8a7b      	ldrh	r3, [r7, #18]
 8006c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	371c      	adds	r7, #28
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bc80      	pop	{r7}
 8006c90:	4770      	bx	lr

08006c92 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006c9e:	78fb      	ldrb	r3, [r7, #3]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d103      	bne.n	8006cac <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2280      	movs	r2, #128	; 0x80
 8006ca8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bc80      	pop	{r7}
 8006cb6:	4770      	bx	lr

08006cb8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bc80      	pop	{r7}
 8006cca:	4770      	bx	lr

08006ccc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006cde:	68fb      	ldr	r3, [r7, #12]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bc80      	pop	{r7}
 8006ce8:	4770      	bx	lr

08006cea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b08d      	sub	sp, #52	; 0x34
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	60f8      	str	r0, [r7, #12]
 8006cf2:	60b9      	str	r1, [r7, #8]
 8006cf4:	4611      	mov	r1, r2
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	80fb      	strh	r3, [r7, #6]
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006d00:	88bb      	ldrh	r3, [r7, #4]
 8006d02:	3301      	adds	r3, #1
 8006d04:	085b      	lsrs	r3, r3, #1
 8006d06:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d10:	88fb      	ldrh	r3, [r7, #6]
 8006d12:	005a      	lsls	r2, r3, #1
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d1c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006d1e:	6a3b      	ldr	r3, [r7, #32]
 8006d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d22:	e01e      	b.n	8006d62 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	021b      	lsls	r3, r3, #8
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d48:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4c:	3302      	adds	r3, #2
 8006d4e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d52:	3302      	adds	r3, #2
 8006d54:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	3301      	adds	r3, #1
 8006d5a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1dd      	bne.n	8006d24 <USB_WritePMA+0x3a>
  }
}
 8006d68:	bf00      	nop
 8006d6a:	bf00      	nop
 8006d6c:	3734      	adds	r7, #52	; 0x34
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bc80      	pop	{r7}
 8006d72:	4770      	bx	lr

08006d74 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b08b      	sub	sp, #44	; 0x2c
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	4611      	mov	r1, r2
 8006d80:	461a      	mov	r2, r3
 8006d82:	460b      	mov	r3, r1
 8006d84:	80fb      	strh	r3, [r7, #6]
 8006d86:	4613      	mov	r3, r2
 8006d88:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006d8a:	88bb      	ldrh	r3, [r7, #4]
 8006d8c:	085b      	lsrs	r3, r3, #1
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d9a:	88fb      	ldrh	r3, [r7, #6]
 8006d9c:	005a      	lsls	r2, r3, #1
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006da6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
 8006dac:	e01b      	b.n	8006de6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006dae:	6a3b      	ldr	r3, [r7, #32]
 8006db0:	881b      	ldrh	r3, [r3, #0]
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	3302      	adds	r3, #2
 8006dba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	0a1b      	lsrs	r3, r3, #8
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	3302      	adds	r3, #2
 8006dde:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	3b01      	subs	r3, #1
 8006de4:	627b      	str	r3, [r7, #36]	; 0x24
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1e0      	bne.n	8006dae <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006dec:	88bb      	ldrh	r3, [r7, #4]
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d007      	beq.n	8006e08 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006df8:	6a3b      	ldr	r3, [r7, #32]
 8006dfa:	881b      	ldrh	r3, [r3, #0]
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	701a      	strb	r2, [r3, #0]
  }
}
 8006e08:	bf00      	nop
 8006e0a:	372c      	adds	r7, #44	; 0x2c
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bc80      	pop	{r7}
 8006e10:	4770      	bx	lr

08006e12 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b084      	sub	sp, #16
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	7c1b      	ldrb	r3, [r3, #16]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d115      	bne.n	8006e56 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e2e:	2202      	movs	r2, #2
 8006e30:	2181      	movs	r1, #129	; 0x81
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f001 ffd5 	bl	8008de2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e42:	2202      	movs	r2, #2
 8006e44:	2101      	movs	r1, #1
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f001 ffcb 	bl	8008de2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8006e54:	e012      	b.n	8006e7c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e56:	2340      	movs	r3, #64	; 0x40
 8006e58:	2202      	movs	r2, #2
 8006e5a:	2181      	movs	r1, #129	; 0x81
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f001 ffc0 	bl	8008de2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e68:	2340      	movs	r3, #64	; 0x40
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f001 ffb7 	bl	8008de2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e7c:	2308      	movs	r3, #8
 8006e7e:	2203      	movs	r2, #3
 8006e80:	2182      	movs	r1, #130	; 0x82
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f001 ffad 	bl	8008de2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006e8e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006e92:	f002 f8cd 	bl	8009030 <USBD_static_malloc>
 8006e96:	4602      	mov	r2, r0
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d102      	bne.n	8006eae <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	73fb      	strb	r3, [r7, #15]
 8006eac:	e026      	b.n	8006efc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006eb4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	7c1b      	ldrb	r3, [r3, #16]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d109      	bne.n	8006eec <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ede:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ee2:	2101      	movs	r1, #1
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f002 f86d 	bl	8008fc4 <USBD_LL_PrepareReceive>
 8006eea:	e007      	b.n	8006efc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ef2:	2340      	movs	r3, #64	; 0x40
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f002 f864 	bl	8008fc4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b084      	sub	sp, #16
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	460b      	mov	r3, r1
 8006f10:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006f16:	2181      	movs	r1, #129	; 0x81
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f001 ff88 	bl	8008e2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006f24:	2101      	movs	r1, #1
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 ff81 	bl	8008e2e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006f34:	2182      	movs	r1, #130	; 0x82
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f001 ff79 	bl	8008e2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00e      	beq.n	8006f6a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f002 f873 	bl	8009048 <USBD_static_free>
    pdev->pClassData = NULL;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f84:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d039      	beq.n	8007012 <USBD_CDC_Setup+0x9e>
 8006f9e:	2b20      	cmp	r3, #32
 8006fa0:	d17f      	bne.n	80070a2 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	88db      	ldrh	r3, [r3, #6]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d029      	beq.n	8006ffe <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	b25b      	sxtb	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	da11      	bge.n	8006fd8 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006fc0:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	88d2      	ldrh	r2, [r2, #6]
 8006fc6:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006fc8:	6939      	ldr	r1, [r7, #16]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	88db      	ldrh	r3, [r3, #6]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f001 f994 	bl	80082fe <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006fd6:	e06b      	b.n	80070b0 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	785a      	ldrb	r2, [r3, #1]
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	88db      	ldrh	r3, [r3, #6]
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006fee:	6939      	ldr	r1, [r7, #16]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	88db      	ldrh	r3, [r3, #6]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f001 f9af 	bl	800835a <USBD_CtlPrepareRx>
    break;
 8006ffc:	e058      	b.n	80070b0 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	7850      	ldrb	r0, [r2, #1]
 800700a:	2200      	movs	r2, #0
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	4798      	blx	r3
    break;
 8007010:	e04e      	b.n	80070b0 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	785b      	ldrb	r3, [r3, #1]
 8007016:	2b0b      	cmp	r3, #11
 8007018:	d02e      	beq.n	8007078 <USBD_CDC_Setup+0x104>
 800701a:	2b0b      	cmp	r3, #11
 800701c:	dc38      	bgt.n	8007090 <USBD_CDC_Setup+0x11c>
 800701e:	2b00      	cmp	r3, #0
 8007020:	d002      	beq.n	8007028 <USBD_CDC_Setup+0xb4>
 8007022:	2b0a      	cmp	r3, #10
 8007024:	d014      	beq.n	8007050 <USBD_CDC_Setup+0xdc>
 8007026:	e033      	b.n	8007090 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800702e:	2b03      	cmp	r3, #3
 8007030:	d107      	bne.n	8007042 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8007032:	f107 030c 	add.w	r3, r7, #12
 8007036:	2202      	movs	r2, #2
 8007038:	4619      	mov	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f001 f95f 	bl	80082fe <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007040:	e02e      	b.n	80070a0 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f001 f8f0 	bl	800822a <USBD_CtlError>
			  ret = USBD_FAIL;
 800704a:	2302      	movs	r3, #2
 800704c:	75fb      	strb	r3, [r7, #23]
      break;
 800704e:	e027      	b.n	80070a0 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007056:	2b03      	cmp	r3, #3
 8007058:	d107      	bne.n	800706a <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800705a:	f107 030f 	add.w	r3, r7, #15
 800705e:	2201      	movs	r2, #1
 8007060:	4619      	mov	r1, r3
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f001 f94b 	bl	80082fe <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007068:	e01a      	b.n	80070a0 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f001 f8dc 	bl	800822a <USBD_CtlError>
			  ret = USBD_FAIL;
 8007072:	2302      	movs	r3, #2
 8007074:	75fb      	strb	r3, [r7, #23]
      break;
 8007076:	e013      	b.n	80070a0 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800707e:	2b03      	cmp	r3, #3
 8007080:	d00d      	beq.n	800709e <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8007082:	6839      	ldr	r1, [r7, #0]
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f001 f8d0 	bl	800822a <USBD_CtlError>
			  ret = USBD_FAIL;
 800708a:	2302      	movs	r3, #2
 800708c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800708e:	e006      	b.n	800709e <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f001 f8c9 	bl	800822a <USBD_CtlError>
      ret = USBD_FAIL;
 8007098:	2302      	movs	r3, #2
 800709a:	75fb      	strb	r3, [r7, #23]
      break;
 800709c:	e000      	b.n	80070a0 <USBD_CDC_Setup+0x12c>
      break;
 800709e:	bf00      	nop
    }
    break;
 80070a0:	e006      	b.n	80070b0 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 80070a2:	6839      	ldr	r1, [r7, #0]
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f001 f8c0 	bl	800822a <USBD_CtlError>
    ret = USBD_FAIL;
 80070aa:	2302      	movs	r3, #2
 80070ac:	75fb      	strb	r3, [r7, #23]
    break;
 80070ae:	bf00      	nop
  }

  return ret;
 80070b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3718      	adds	r7, #24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	460b      	mov	r3, r1
 80070c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80070cc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80070d4:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d03a      	beq.n	8007156 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80070e0:	78fa      	ldrb	r2, [r7, #3]
 80070e2:	6879      	ldr	r1, [r7, #4]
 80070e4:	4613      	mov	r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4413      	add	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	440b      	add	r3, r1
 80070ee:	331c      	adds	r3, #28
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d029      	beq.n	800714a <USBD_CDC_DataIn+0x90>
 80070f6:	78fa      	ldrb	r2, [r7, #3]
 80070f8:	6879      	ldr	r1, [r7, #4]
 80070fa:	4613      	mov	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	4413      	add	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	440b      	add	r3, r1
 8007104:	331c      	adds	r3, #28
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	78f9      	ldrb	r1, [r7, #3]
 800710a:	68b8      	ldr	r0, [r7, #8]
 800710c:	460b      	mov	r3, r1
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	440b      	add	r3, r1
 8007112:	00db      	lsls	r3, r3, #3
 8007114:	4403      	add	r3, r0
 8007116:	3338      	adds	r3, #56	; 0x38
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	fbb2 f1f3 	udiv	r1, r2, r3
 800711e:	fb01 f303 	mul.w	r3, r1, r3
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	2b00      	cmp	r3, #0
 8007126:	d110      	bne.n	800714a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007128:	78fa      	ldrb	r2, [r7, #3]
 800712a:	6879      	ldr	r1, [r7, #4]
 800712c:	4613      	mov	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	440b      	add	r3, r1
 8007136:	331c      	adds	r3, #28
 8007138:	2200      	movs	r2, #0
 800713a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800713c:	78f9      	ldrb	r1, [r7, #3]
 800713e:	2300      	movs	r3, #0
 8007140:	2200      	movs	r2, #0
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f001 ff1b 	bl	8008f7e <USBD_LL_Transmit>
 8007148:	e003      	b.n	8007152 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	e000      	b.n	8007158 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007156:	2302      	movs	r3, #2
  }
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	460b      	mov	r3, r1
 800716a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007172:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007174:	78fb      	ldrb	r3, [r7, #3]
 8007176:	4619      	mov	r1, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 ff46 	bl	800900a <USBD_LL_GetRxDataSize>
 800717e:	4602      	mov	r2, r0
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00d      	beq.n	80071ac <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80071a4:	4611      	mov	r1, r2
 80071a6:	4798      	blx	r3

    return USBD_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	e000      	b.n	80071ae <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80071ac:	2302      	movs	r3, #2
  }
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b084      	sub	sp, #16
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80071c4:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d015      	beq.n	80071fc <USBD_CDC_EP0_RxReady+0x46>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80071d6:	2bff      	cmp	r3, #255	; 0xff
 80071d8:	d010      	beq.n	80071fc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80071e8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071f0:	b292      	uxth	r2, r2
 80071f2:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	22ff      	movs	r2, #255	; 0xff
 80071f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
	...

08007208 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2243      	movs	r2, #67	; 0x43
 8007214:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007216:	4b03      	ldr	r3, [pc, #12]	; (8007224 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007218:	4618      	mov	r0, r3
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	bc80      	pop	{r7}
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	20000094 	.word	0x20000094

08007228 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2243      	movs	r2, #67	; 0x43
 8007234:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007236:	4b03      	ldr	r3, [pc, #12]	; (8007244 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007238:	4618      	mov	r0, r3
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	bc80      	pop	{r7}
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	20000050 	.word	0x20000050

08007248 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2243      	movs	r2, #67	; 0x43
 8007254:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007256:	4b03      	ldr	r3, [pc, #12]	; (8007264 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007258:	4618      	mov	r0, r3
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	bc80      	pop	{r7}
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	200000d8 	.word	0x200000d8

08007268 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	220a      	movs	r2, #10
 8007274:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007276:	4b03      	ldr	r3, [pc, #12]	; (8007284 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007278:	4618      	mov	r0, r3
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	bc80      	pop	{r7}
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	2000000c 	.word	0x2000000c

08007288 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007292:	2302      	movs	r3, #2
 8007294:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d005      	beq.n	80072a8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bc80      	pop	{r7}
 80072b2:	4770      	bx	lr

080072b4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	4613      	mov	r3, r2
 80072c0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80072c8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80072d2:	88fa      	ldrh	r2, [r7, #6]
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	371c      	adds	r7, #28
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bc80      	pop	{r7}
 80072e4:	4770      	bx	lr

080072e6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80072e6:	b480      	push	{r7}
 80072e8:	b085      	sub	sp, #20
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80072f6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	bc80      	pop	{r7}
 800730a:	4770      	bx	lr

0800730c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800731a:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007322:	2b00      	cmp	r3, #0
 8007324:	d01c      	beq.n	8007360 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800732c:	2b00      	cmp	r3, #0
 800732e:	d115      	bne.n	800735c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2201      	movs	r2, #1
 8007334:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800734e:	b29b      	uxth	r3, r3
 8007350:	2181      	movs	r1, #129	; 0x81
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f001 fe13 	bl	8008f7e <USBD_LL_Transmit>

      return USBD_OK;
 8007358:	2300      	movs	r3, #0
 800735a:	e002      	b.n	8007362 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800735c:	2301      	movs	r3, #1
 800735e:	e000      	b.n	8007362 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007360:	2302      	movs	r3, #2
  }
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007378:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007380:	2b00      	cmp	r3, #0
 8007382:	d017      	beq.n	80073b4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	7c1b      	ldrb	r3, [r3, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d109      	bne.n	80073a0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007392:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007396:	2101      	movs	r1, #1
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f001 fe13 	bl	8008fc4 <USBD_LL_PrepareReceive>
 800739e:	e007      	b.n	80073b0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073a6:	2340      	movs	r3, #64	; 0x40
 80073a8:	2101      	movs	r1, #1
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f001 fe0a 	bl	8008fc4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	e000      	b.n	80073b6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80073b4:	2302      	movs	r3, #2
  }
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b084      	sub	sp, #16
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	60f8      	str	r0, [r7, #12]
 80073c6:	60b9      	str	r1, [r7, #8]
 80073c8:	4613      	mov	r3, r2
 80073ca:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80073d2:	2302      	movs	r3, #2
 80073d4:	e01a      	b.n	800740c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d003      	beq.n	80073e8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d003      	beq.n	80073f6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	79fa      	ldrb	r2, [r7, #7]
 8007402:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f001 fc77 	bl	8008cf8 <USBD_LL_Init>

  return USBD_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d006      	beq.n	8007436 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8007430:	2300      	movs	r3, #0
 8007432:	73fb      	strb	r3, [r7, #15]
 8007434:	e001      	b.n	800743a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007436:	2302      	movs	r3, #2
 8007438:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800743a:	7bfb      	ldrb	r3, [r7, #15]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	bc80      	pop	{r7}
 8007444:	4770      	bx	lr

08007446 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b082      	sub	sp, #8
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f001 fcac 	bl	8008dac <USBD_LL_Start>

  return USBD_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800745e:	b480      	push	{r7}
 8007460:	b083      	sub	sp, #12
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	bc80      	pop	{r7}
 8007470:	4770      	bx	lr

08007472 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	460b      	mov	r3, r1
 800747c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800747e:	2302      	movs	r3, #2
 8007480:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00c      	beq.n	80074a6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	78fa      	ldrb	r2, [r7, #3]
 8007496:	4611      	mov	r1, r2
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	4798      	blx	r3
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	460b      	mov	r3, r1
 80074ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	78fa      	ldrb	r2, [r7, #3]
 80074c6:	4611      	mov	r1, r2
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	4798      	blx	r3
  return USBD_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b082      	sub	sp, #8
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 fe62 	bl	80081b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80074fc:	461a      	mov	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800750a:	f003 031f 	and.w	r3, r3, #31
 800750e:	2b02      	cmp	r3, #2
 8007510:	d016      	beq.n	8007540 <USBD_LL_SetupStage+0x6a>
 8007512:	2b02      	cmp	r3, #2
 8007514:	d81c      	bhi.n	8007550 <USBD_LL_SetupStage+0x7a>
 8007516:	2b00      	cmp	r3, #0
 8007518:	d002      	beq.n	8007520 <USBD_LL_SetupStage+0x4a>
 800751a:	2b01      	cmp	r3, #1
 800751c:	d008      	beq.n	8007530 <USBD_LL_SetupStage+0x5a>
 800751e:	e017      	b.n	8007550 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007526:	4619      	mov	r1, r3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f9c5 	bl	80078b8 <USBD_StdDevReq>
    break;
 800752e:	e01a      	b.n	8007566 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007536:	4619      	mov	r1, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fa27 	bl	800798c <USBD_StdItfReq>
    break;
 800753e:	e012      	b.n	8007566 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007546:	4619      	mov	r1, r3
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fa67 	bl	8007a1c <USBD_StdEPReq>
    break;
 800754e:	e00a      	b.n	8007566 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007556:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800755a:	b2db      	uxtb	r3, r3
 800755c:	4619      	mov	r1, r3
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f001 fc84 	bl	8008e6c <USBD_LL_StallEP>
    break;
 8007564:	bf00      	nop
  }

  return USBD_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	460b      	mov	r3, r1
 800757a:	607a      	str	r2, [r7, #4]
 800757c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800757e:	7afb      	ldrb	r3, [r7, #11]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d14b      	bne.n	800761c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800758a:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007592:	2b03      	cmp	r3, #3
 8007594:	d134      	bne.n	8007600 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	68da      	ldr	r2, [r3, #12]
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d919      	bls.n	80075d6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	68da      	ldr	r2, [r3, #12]
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	1ad2      	subs	r2, r2, r3
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	68da      	ldr	r2, [r3, #12]
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d203      	bcs.n	80075c4 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	e002      	b.n	80075ca <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	461a      	mov	r2, r3
 80075cc:	6879      	ldr	r1, [r7, #4]
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f000 fee1 	bl	8008396 <USBD_CtlContinueRx>
 80075d4:	e038      	b.n	8007648 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00a      	beq.n	80075f8 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80075e8:	2b03      	cmp	r3, #3
 80075ea:	d105      	bne.n	80075f8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 fede 	bl	80083ba <USBD_CtlSendStatus>
 80075fe:	e023      	b.n	8007648 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007606:	2b05      	cmp	r3, #5
 8007608:	d11e      	bne.n	8007648 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8007612:	2100      	movs	r1, #0
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f001 fc29 	bl	8008e6c <USBD_LL_StallEP>
 800761a:	e015      	b.n	8007648 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00d      	beq.n	8007644 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800762e:	2b03      	cmp	r3, #3
 8007630:	d108      	bne.n	8007644 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	7afa      	ldrb	r2, [r7, #11]
 800763c:	4611      	mov	r1, r2
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	4798      	blx	r3
 8007642:	e001      	b.n	8007648 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007644:	2302      	movs	r3, #2
 8007646:	e000      	b.n	800764a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3718      	adds	r7, #24
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b086      	sub	sp, #24
 8007656:	af00      	add	r7, sp, #0
 8007658:	60f8      	str	r0, [r7, #12]
 800765a:	460b      	mov	r3, r1
 800765c:	607a      	str	r2, [r7, #4]
 800765e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007660:	7afb      	ldrb	r3, [r7, #11]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d17f      	bne.n	8007766 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	3314      	adds	r3, #20
 800766a:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007672:	2b02      	cmp	r3, #2
 8007674:	d15c      	bne.n	8007730 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	68da      	ldr	r2, [r3, #12]
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	429a      	cmp	r2, r3
 8007680:	d915      	bls.n	80076ae <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	68da      	ldr	r2, [r3, #12]
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	1ad2      	subs	r2, r2, r3
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	b29b      	uxth	r3, r3
 8007696:	461a      	mov	r2, r3
 8007698:	6879      	ldr	r1, [r7, #4]
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f000 fe4b 	bl	8008336 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80076a0:	2300      	movs	r3, #0
 80076a2:	2200      	movs	r2, #0
 80076a4:	2100      	movs	r1, #0
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f001 fc8c 	bl	8008fc4 <USBD_LL_PrepareReceive>
 80076ac:	e04e      	b.n	800774c <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	6912      	ldr	r2, [r2, #16]
 80076b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80076ba:	fb01 f202 	mul.w	r2, r1, r2
 80076be:	1a9b      	subs	r3, r3, r2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d11c      	bne.n	80076fe <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d316      	bcc.n	80076fe <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	689a      	ldr	r2, [r3, #8]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80076da:	429a      	cmp	r2, r3
 80076dc:	d20f      	bcs.n	80076fe <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076de:	2200      	movs	r2, #0
 80076e0:	2100      	movs	r1, #0
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f000 fe27 	bl	8008336 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80076f0:	2300      	movs	r3, #0
 80076f2:	2200      	movs	r2, #0
 80076f4:	2100      	movs	r1, #0
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f001 fc64 	bl	8008fc4 <USBD_LL_PrepareReceive>
 80076fc:	e026      	b.n	800774c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00a      	beq.n	8007720 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007710:	2b03      	cmp	r3, #3
 8007712:	d105      	bne.n	8007720 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007720:	2180      	movs	r1, #128	; 0x80
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f001 fba2 	bl	8008e6c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 fe59 	bl	80083e0 <USBD_CtlReceiveStatus>
 800772e:	e00d      	b.n	800774c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007736:	2b04      	cmp	r3, #4
 8007738:	d004      	beq.n	8007744 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007740:	2b00      	cmp	r3, #0
 8007742:	d103      	bne.n	800774c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007744:	2180      	movs	r1, #128	; 0x80
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f001 fb90 	bl	8008e6c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8007752:	2b01      	cmp	r3, #1
 8007754:	d11d      	bne.n	8007792 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f7ff fe81 	bl	800745e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8007764:	e015      	b.n	8007792 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00d      	beq.n	800778e <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007778:	2b03      	cmp	r3, #3
 800777a:	d108      	bne.n	800778e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	7afa      	ldrb	r2, [r7, #11]
 8007786:	4611      	mov	r1, r2
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	4798      	blx	r3
 800778c:	e001      	b.n	8007792 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800778e:	2302      	movs	r3, #2
 8007790:	e000      	b.n	8007794 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3718      	adds	r7, #24
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077a4:	2340      	movs	r3, #64	; 0x40
 80077a6:	2200      	movs	r2, #0
 80077a8:	2100      	movs	r1, #0
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f001 fb19 	bl	8008de2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2240      	movs	r2, #64	; 0x40
 80077bc:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077c0:	2340      	movs	r3, #64	; 0x40
 80077c2:	2200      	movs	r2, #0
 80077c4:	2180      	movs	r1, #128	; 0x80
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f001 fb0b 	bl	8008de2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2240      	movs	r2, #64	; 0x40
 80077d6:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d009      	beq.n	8007814 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	6852      	ldr	r2, [r2, #4]
 800780c:	b2d2      	uxtb	r2, r2
 800780e:	4611      	mov	r1, r2
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	4798      	blx	r3
  }

  return USBD_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800781e:	b480      	push	{r7}
 8007820:	b083      	sub	sp, #12
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
 8007826:	460b      	mov	r3, r1
 8007828:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	78fa      	ldrb	r2, [r7, #3]
 800782e:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	370c      	adds	r7, #12
 8007836:	46bd      	mov	sp, r7
 8007838:	bc80      	pop	{r7}
 800783a:	4770      	bx	lr

0800783c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2204      	movs	r2, #4
 8007854:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	bc80      	pop	{r7}
 8007862:	4770      	bx	lr

08007864 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	bc80      	pop	{r7}
 8007882:	4770      	bx	lr

08007884 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007892:	2b03      	cmp	r3, #3
 8007894:	d10b      	bne.n	80078ae <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d005      	beq.n	80078ae <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078ce:	2b40      	cmp	r3, #64	; 0x40
 80078d0:	d005      	beq.n	80078de <USBD_StdDevReq+0x26>
 80078d2:	2b40      	cmp	r3, #64	; 0x40
 80078d4:	d84f      	bhi.n	8007976 <USBD_StdDevReq+0xbe>
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d009      	beq.n	80078ee <USBD_StdDevReq+0x36>
 80078da:	2b20      	cmp	r3, #32
 80078dc:	d14b      	bne.n	8007976 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	4798      	blx	r3
    break;
 80078ec:	e048      	b.n	8007980 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	785b      	ldrb	r3, [r3, #1]
 80078f2:	2b09      	cmp	r3, #9
 80078f4:	d839      	bhi.n	800796a <USBD_StdDevReq+0xb2>
 80078f6:	a201      	add	r2, pc, #4	; (adr r2, 80078fc <USBD_StdDevReq+0x44>)
 80078f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fc:	0800794d 	.word	0x0800794d
 8007900:	08007961 	.word	0x08007961
 8007904:	0800796b 	.word	0x0800796b
 8007908:	08007957 	.word	0x08007957
 800790c:	0800796b 	.word	0x0800796b
 8007910:	0800792f 	.word	0x0800792f
 8007914:	08007925 	.word	0x08007925
 8007918:	0800796b 	.word	0x0800796b
 800791c:	08007943 	.word	0x08007943
 8007920:	08007939 	.word	0x08007939
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f9da 	bl	8007ce0 <USBD_GetDescriptor>
      break;
 800792c:	e022      	b.n	8007974 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 facf 	bl	8007ed4 <USBD_SetAddress>
      break;
 8007936:	e01d      	b.n	8007974 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fb0e 	bl	8007f5c <USBD_SetConfig>
      break;
 8007940:	e018      	b.n	8007974 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fb97 	bl	8008078 <USBD_GetConfig>
      break;
 800794a:	e013      	b.n	8007974 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800794c:	6839      	ldr	r1, [r7, #0]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fbc7 	bl	80080e2 <USBD_GetStatus>
      break;
 8007954:	e00e      	b.n	8007974 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fbf5 	bl	8008148 <USBD_SetFeature>
      break;
 800795e:	e009      	b.n	8007974 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fc04 	bl	8008170 <USBD_ClrFeature>
      break;
 8007968:	e004      	b.n	8007974 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fc5c 	bl	800822a <USBD_CtlError>
      break;
 8007972:	bf00      	nop
    }
    break;
 8007974:	e004      	b.n	8007980 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8007976:	6839      	ldr	r1, [r7, #0]
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fc56 	bl	800822a <USBD_CtlError>
    break;
 800797e:	bf00      	nop
  }

  return ret;
 8007980:	7bfb      	ldrb	r3, [r7, #15]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop

0800798c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079a2:	2b40      	cmp	r3, #64	; 0x40
 80079a4:	d005      	beq.n	80079b2 <USBD_StdItfReq+0x26>
 80079a6:	2b40      	cmp	r3, #64	; 0x40
 80079a8:	d82e      	bhi.n	8007a08 <USBD_StdItfReq+0x7c>
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <USBD_StdItfReq+0x26>
 80079ae:	2b20      	cmp	r3, #32
 80079b0:	d12a      	bne.n	8007a08 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80079b8:	3b01      	subs	r3, #1
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d81d      	bhi.n	80079fa <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	889b      	ldrh	r3, [r3, #4]
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d813      	bhi.n	80079f0 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	4798      	blx	r3
 80079d6:	4603      	mov	r3, r0
 80079d8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	88db      	ldrh	r3, [r3, #6]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d110      	bne.n	8007a04 <USBD_StdItfReq+0x78>
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10d      	bne.n	8007a04 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fce6 	bl	80083ba <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80079ee:	e009      	b.n	8007a04 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fc19 	bl	800822a <USBD_CtlError>
      break;
 80079f8:	e004      	b.n	8007a04 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fc14 	bl	800822a <USBD_CtlError>
      break;
 8007a02:	e000      	b.n	8007a06 <USBD_StdItfReq+0x7a>
      break;
 8007a04:	bf00      	nop
    }
    break;
 8007a06:	e004      	b.n	8007a12 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fc0d 	bl	800822a <USBD_CtlError>
    break;
 8007a10:	bf00      	nop
  }

  return USBD_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	889b      	ldrh	r3, [r3, #4]
 8007a2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a38:	2b40      	cmp	r3, #64	; 0x40
 8007a3a:	d007      	beq.n	8007a4c <USBD_StdEPReq+0x30>
 8007a3c:	2b40      	cmp	r3, #64	; 0x40
 8007a3e:	f200 8144 	bhi.w	8007cca <USBD_StdEPReq+0x2ae>
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00a      	beq.n	8007a5c <USBD_StdEPReq+0x40>
 8007a46:	2b20      	cmp	r3, #32
 8007a48:	f040 813f 	bne.w	8007cca <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	6839      	ldr	r1, [r7, #0]
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	4798      	blx	r3
    break;
 8007a5a:	e13b      	b.n	8007cd4 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a64:	2b20      	cmp	r3, #32
 8007a66:	d10a      	bne.n	8007a7e <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	4798      	blx	r3
 8007a76:	4603      	mov	r3, r0
 8007a78:	73fb      	strb	r3, [r7, #15]

      return ret;
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	e12b      	b.n	8007cd6 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	785b      	ldrb	r3, [r3, #1]
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d007      	beq.n	8007a96 <USBD_StdEPReq+0x7a>
 8007a86:	2b03      	cmp	r3, #3
 8007a88:	f300 8119 	bgt.w	8007cbe <USBD_StdEPReq+0x2a2>
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d072      	beq.n	8007b76 <USBD_StdEPReq+0x15a>
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d03a      	beq.n	8007b0a <USBD_StdEPReq+0xee>
 8007a94:	e113      	b.n	8007cbe <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d002      	beq.n	8007aa6 <USBD_StdEPReq+0x8a>
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d015      	beq.n	8007ad0 <USBD_StdEPReq+0xb4>
 8007aa4:	e02b      	b.n	8007afe <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007aa6:	7bbb      	ldrb	r3, [r7, #14]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00c      	beq.n	8007ac6 <USBD_StdEPReq+0xaa>
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	2b80      	cmp	r3, #128	; 0x80
 8007ab0:	d009      	beq.n	8007ac6 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007ab2:	7bbb      	ldrb	r3, [r7, #14]
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f001 f9d8 	bl	8008e6c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007abc:	2180      	movs	r1, #128	; 0x80
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f001 f9d4 	bl	8008e6c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007ac4:	e020      	b.n	8007b08 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fbae 	bl	800822a <USBD_CtlError>
        break;
 8007ace:	e01b      	b.n	8007b08 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	885b      	ldrh	r3, [r3, #2]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10e      	bne.n	8007af6 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00b      	beq.n	8007af6 <USBD_StdEPReq+0xda>
 8007ade:	7bbb      	ldrb	r3, [r7, #14]
 8007ae0:	2b80      	cmp	r3, #128	; 0x80
 8007ae2:	d008      	beq.n	8007af6 <USBD_StdEPReq+0xda>
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	88db      	ldrh	r3, [r3, #6]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d104      	bne.n	8007af6 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007aec:	7bbb      	ldrb	r3, [r7, #14]
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f001 f9bb 	bl	8008e6c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fc5f 	bl	80083ba <USBD_CtlSendStatus>

        break;
 8007afc:	e004      	b.n	8007b08 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fb92 	bl	800822a <USBD_CtlError>
        break;
 8007b06:	bf00      	nop
      }
      break;
 8007b08:	e0de      	b.n	8007cc8 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d002      	beq.n	8007b1a <USBD_StdEPReq+0xfe>
 8007b14:	2b03      	cmp	r3, #3
 8007b16:	d015      	beq.n	8007b44 <USBD_StdEPReq+0x128>
 8007b18:	e026      	b.n	8007b68 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00c      	beq.n	8007b3a <USBD_StdEPReq+0x11e>
 8007b20:	7bbb      	ldrb	r3, [r7, #14]
 8007b22:	2b80      	cmp	r3, #128	; 0x80
 8007b24:	d009      	beq.n	8007b3a <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007b26:	7bbb      	ldrb	r3, [r7, #14]
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f001 f99e 	bl	8008e6c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007b30:	2180      	movs	r1, #128	; 0x80
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f001 f99a 	bl	8008e6c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007b38:	e01c      	b.n	8007b74 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 fb74 	bl	800822a <USBD_CtlError>
        break;
 8007b42:	e017      	b.n	8007b74 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	885b      	ldrh	r3, [r3, #2]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d112      	bne.n	8007b72 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d004      	beq.n	8007b60 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b56:	7bbb      	ldrb	r3, [r7, #14]
 8007b58:	4619      	mov	r1, r3
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f001 f9a5 	bl	8008eaa <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fc2a 	bl	80083ba <USBD_CtlSendStatus>
        }
        break;
 8007b66:	e004      	b.n	8007b72 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8007b68:	6839      	ldr	r1, [r7, #0]
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fb5d 	bl	800822a <USBD_CtlError>
        break;
 8007b70:	e000      	b.n	8007b74 <USBD_StdEPReq+0x158>
        break;
 8007b72:	bf00      	nop
      }
      break;
 8007b74:	e0a8      	b.n	8007cc8 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d002      	beq.n	8007b86 <USBD_StdEPReq+0x16a>
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	d031      	beq.n	8007be8 <USBD_StdEPReq+0x1cc>
 8007b84:	e095      	b.n	8007cb2 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d007      	beq.n	8007b9c <USBD_StdEPReq+0x180>
 8007b8c:	7bbb      	ldrb	r3, [r7, #14]
 8007b8e:	2b80      	cmp	r3, #128	; 0x80
 8007b90:	d004      	beq.n	8007b9c <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fb48 	bl	800822a <USBD_CtlError>
          break;
 8007b9a:	e08f      	b.n	8007cbc <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007b9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	da0b      	bge.n	8007bbc <USBD_StdEPReq+0x1a0>
 8007ba4:	7bbb      	ldrb	r3, [r7, #14]
 8007ba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007baa:	4613      	mov	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	3310      	adds	r3, #16
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	3304      	adds	r3, #4
 8007bba:	e00a      	b.n	8007bd2 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007bbc:	7bbb      	ldrb	r3, [r7, #14]
 8007bbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	2202      	movs	r2, #2
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fb8c 	bl	80082fe <USBD_CtlSendData>
          break;
 8007be6:	e069      	b.n	8007cbc <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8007be8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	da11      	bge.n	8007c14 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007bf0:	7bbb      	ldrb	r3, [r7, #14]
 8007bf2:	f003 020f 	and.w	r2, r3, #15
 8007bf6:	6879      	ldr	r1, [r7, #4]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4413      	add	r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	440b      	add	r3, r1
 8007c02:	3318      	adds	r3, #24
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d117      	bne.n	8007c3a <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fb0c 	bl	800822a <USBD_CtlError>
            break;
 8007c12:	e053      	b.n	8007cbc <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c14:	7bbb      	ldrb	r3, [r7, #14]
 8007c16:	f003 020f 	and.w	r2, r3, #15
 8007c1a:	6879      	ldr	r1, [r7, #4]
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	440b      	add	r3, r1
 8007c26:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d104      	bne.n	8007c3a <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 faf9 	bl	800822a <USBD_CtlError>
            break;
 8007c38:	e040      	b.n	8007cbc <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007c3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	da0b      	bge.n	8007c5a <USBD_StdEPReq+0x23e>
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
 8007c44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c48:	4613      	mov	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4413      	add	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	3310      	adds	r3, #16
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	4413      	add	r3, r2
 8007c56:	3304      	adds	r3, #4
 8007c58:	e00a      	b.n	8007c70 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007c5a:	7bbb      	ldrb	r3, [r7, #14]
 8007c5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007c60:	4613      	mov	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	4413      	add	r3, r2
 8007c70:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <USBD_StdEPReq+0x262>
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	2b80      	cmp	r3, #128	; 0x80
 8007c7c:	d103      	bne.n	8007c86 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2200      	movs	r2, #0
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	e00e      	b.n	8007ca4 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
 8007c88:	4619      	mov	r1, r3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f001 f92c 	bl	8008ee8 <USBD_LL_IsStallEP>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d003      	beq.n	8007c9e <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	601a      	str	r2, [r3, #0]
 8007c9c:	e002      	b.n	8007ca4 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fb27 	bl	80082fe <USBD_CtlSendData>
          break;
 8007cb0:	e004      	b.n	8007cbc <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8007cb2:	6839      	ldr	r1, [r7, #0]
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fab8 	bl	800822a <USBD_CtlError>
        break;
 8007cba:	bf00      	nop
      }
      break;
 8007cbc:	e004      	b.n	8007cc8 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007cbe:	6839      	ldr	r1, [r7, #0]
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fab2 	bl	800822a <USBD_CtlError>
      break;
 8007cc6:	bf00      	nop
    }
    break;
 8007cc8:	e004      	b.n	8007cd4 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 faac 	bl	800822a <USBD_CtlError>
    break;
 8007cd2:	bf00      	nop
  }

  return ret;
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	885b      	ldrh	r3, [r3, #2]
 8007cee:	0a1b      	lsrs	r3, r3, #8
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	2b06      	cmp	r3, #6
 8007cf6:	f200 80c9 	bhi.w	8007e8c <USBD_GetDescriptor+0x1ac>
 8007cfa:	a201      	add	r2, pc, #4	; (adr r2, 8007d00 <USBD_GetDescriptor+0x20>)
 8007cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d00:	08007d1d 	.word	0x08007d1d
 8007d04:	08007d35 	.word	0x08007d35
 8007d08:	08007d75 	.word	0x08007d75
 8007d0c:	08007e8d 	.word	0x08007e8d
 8007d10:	08007e8d 	.word	0x08007e8d
 8007d14:	08007e39 	.word	0x08007e39
 8007d18:	08007e5f 	.word	0x08007e5f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	7c12      	ldrb	r2, [r2, #16]
 8007d28:	f107 010a 	add.w	r1, r7, #10
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	4798      	blx	r3
 8007d30:	60f8      	str	r0, [r7, #12]
    break;
 8007d32:	e0b0      	b.n	8007e96 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	7c1b      	ldrb	r3, [r3, #16]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10d      	bne.n	8007d58 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d44:	f107 020a 	add.w	r2, r7, #10
 8007d48:	4610      	mov	r0, r2
 8007d4a:	4798      	blx	r3
 8007d4c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3301      	adds	r3, #1
 8007d52:	2202      	movs	r2, #2
 8007d54:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007d56:	e09e      	b.n	8007e96 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d60:	f107 020a 	add.w	r2, r7, #10
 8007d64:	4610      	mov	r0, r2
 8007d66:	4798      	blx	r3
 8007d68:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	2202      	movs	r2, #2
 8007d70:	701a      	strb	r2, [r3, #0]
    break;
 8007d72:	e090      	b.n	8007e96 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	885b      	ldrh	r3, [r3, #2]
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b05      	cmp	r3, #5
 8007d7c:	d856      	bhi.n	8007e2c <USBD_GetDescriptor+0x14c>
 8007d7e:	a201      	add	r2, pc, #4	; (adr r2, 8007d84 <USBD_GetDescriptor+0xa4>)
 8007d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d84:	08007d9d 	.word	0x08007d9d
 8007d88:	08007db5 	.word	0x08007db5
 8007d8c:	08007dcd 	.word	0x08007dcd
 8007d90:	08007de5 	.word	0x08007de5
 8007d94:	08007dfd 	.word	0x08007dfd
 8007d98:	08007e15 	.word	0x08007e15
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	7c12      	ldrb	r2, [r2, #16]
 8007da8:	f107 010a 	add.w	r1, r7, #10
 8007dac:	4610      	mov	r0, r2
 8007dae:	4798      	blx	r3
 8007db0:	60f8      	str	r0, [r7, #12]
      break;
 8007db2:	e040      	b.n	8007e36 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	7c12      	ldrb	r2, [r2, #16]
 8007dc0:	f107 010a 	add.w	r1, r7, #10
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	4798      	blx	r3
 8007dc8:	60f8      	str	r0, [r7, #12]
      break;
 8007dca:	e034      	b.n	8007e36 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	7c12      	ldrb	r2, [r2, #16]
 8007dd8:	f107 010a 	add.w	r1, r7, #10
 8007ddc:	4610      	mov	r0, r2
 8007dde:	4798      	blx	r3
 8007de0:	60f8      	str	r0, [r7, #12]
      break;
 8007de2:	e028      	b.n	8007e36 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	7c12      	ldrb	r2, [r2, #16]
 8007df0:	f107 010a 	add.w	r1, r7, #10
 8007df4:	4610      	mov	r0, r2
 8007df6:	4798      	blx	r3
 8007df8:	60f8      	str	r0, [r7, #12]
      break;
 8007dfa:	e01c      	b.n	8007e36 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	7c12      	ldrb	r2, [r2, #16]
 8007e08:	f107 010a 	add.w	r1, r7, #10
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	4798      	blx	r3
 8007e10:	60f8      	str	r0, [r7, #12]
      break;
 8007e12:	e010      	b.n	8007e36 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	7c12      	ldrb	r2, [r2, #16]
 8007e20:	f107 010a 	add.w	r1, r7, #10
 8007e24:	4610      	mov	r0, r2
 8007e26:	4798      	blx	r3
 8007e28:	60f8      	str	r0, [r7, #12]
      break;
 8007e2a:	e004      	b.n	8007e36 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f9fb 	bl	800822a <USBD_CtlError>
      return;
 8007e34:	e04b      	b.n	8007ece <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8007e36:	e02e      	b.n	8007e96 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	7c1b      	ldrb	r3, [r3, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d109      	bne.n	8007e54 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e48:	f107 020a 	add.w	r2, r7, #10
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	4798      	blx	r3
 8007e50:	60f8      	str	r0, [r7, #12]
      break;
 8007e52:	e020      	b.n	8007e96 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f9e7 	bl	800822a <USBD_CtlError>
      return;
 8007e5c:	e037      	b.n	8007ece <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	7c1b      	ldrb	r3, [r3, #16]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d10d      	bne.n	8007e82 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e6e:	f107 020a 	add.w	r2, r7, #10
 8007e72:	4610      	mov	r0, r2
 8007e74:	4798      	blx	r3
 8007e76:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	2207      	movs	r2, #7
 8007e7e:	701a      	strb	r2, [r3, #0]
      break;
 8007e80:	e009      	b.n	8007e96 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f9d0 	bl	800822a <USBD_CtlError>
      return;
 8007e8a:	e020      	b.n	8007ece <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f9cb 	bl	800822a <USBD_CtlError>
    return;
 8007e94:	e01b      	b.n	8007ece <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007e96:	897b      	ldrh	r3, [r7, #10]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d011      	beq.n	8007ec0 <USBD_GetDescriptor+0x1e0>
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	88db      	ldrh	r3, [r3, #6]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00d      	beq.n	8007ec0 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	88da      	ldrh	r2, [r3, #6]
 8007ea8:	897b      	ldrh	r3, [r7, #10]
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	bf28      	it	cs
 8007eae:	4613      	movcs	r3, r2
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007eb4:	897b      	ldrh	r3, [r7, #10]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	68f9      	ldr	r1, [r7, #12]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fa1f 	bl	80082fe <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	88db      	ldrh	r3, [r3, #6]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d102      	bne.n	8007ece <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fa76 	bl	80083ba <USBD_CtlSendStatus>
  }
}
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	889b      	ldrh	r3, [r3, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d130      	bne.n	8007f48 <USBD_SetAddress+0x74>
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	88db      	ldrh	r3, [r3, #6]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d12c      	bne.n	8007f48 <USBD_SetAddress+0x74>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	885b      	ldrh	r3, [r3, #2]
 8007ef2:	2b7f      	cmp	r3, #127	; 0x7f
 8007ef4:	d828      	bhi.n	8007f48 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	885b      	ldrh	r3, [r3, #2]
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007f08:	2b03      	cmp	r3, #3
 8007f0a:	d104      	bne.n	8007f16 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f98b 	bl	800822a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f14:	e01d      	b.n	8007f52 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	7bfa      	ldrb	r2, [r7, #15]
 8007f1a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	4619      	mov	r1, r3
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f001 f80c 	bl	8008f40 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fa46 	bl	80083ba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d004      	beq.n	8007f3e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2202      	movs	r2, #2
 8007f38:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f3c:	e009      	b.n	8007f52 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f46:	e004      	b.n	8007f52 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f96d 	bl	800822a <USBD_CtlError>
  }
}
 8007f50:	bf00      	nop
 8007f52:	bf00      	nop
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
	...

08007f5c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	885b      	ldrh	r3, [r3, #2]
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	4b41      	ldr	r3, [pc, #260]	; (8008074 <USBD_SetConfig+0x118>)
 8007f6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f70:	4b40      	ldr	r3, [pc, #256]	; (8008074 <USBD_SetConfig+0x118>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d904      	bls.n	8007f82 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f955 	bl	800822a <USBD_CtlError>
 8007f80:	e075      	b.n	800806e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d002      	beq.n	8007f92 <USBD_SetConfig+0x36>
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d023      	beq.n	8007fd8 <USBD_SetConfig+0x7c>
 8007f90:	e062      	b.n	8008058 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007f92:	4b38      	ldr	r3, [pc, #224]	; (8008074 <USBD_SetConfig+0x118>)
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d01a      	beq.n	8007fd0 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007f9a:	4b36      	ldr	r3, [pc, #216]	; (8008074 <USBD_SetConfig+0x118>)
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2203      	movs	r2, #3
 8007fa8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007fac:	4b31      	ldr	r3, [pc, #196]	; (8008074 <USBD_SetConfig+0x118>)
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7ff fa5d 	bl	8007472 <USBD_SetClassConfig>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d104      	bne.n	8007fc8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f932 	bl	800822a <USBD_CtlError>
          return;
 8007fc6:	e052      	b.n	800806e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f9f6 	bl	80083ba <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007fce:	e04e      	b.n	800806e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f9f2 	bl	80083ba <USBD_CtlSendStatus>
      break;
 8007fd6:	e04a      	b.n	800806e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007fd8:	4b26      	ldr	r3, [pc, #152]	; (8008074 <USBD_SetConfig+0x118>)
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d112      	bne.n	8008006 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007fe8:	4b22      	ldr	r3, [pc, #136]	; (8008074 <USBD_SetConfig+0x118>)
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	461a      	mov	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007ff2:	4b20      	ldr	r3, [pc, #128]	; (8008074 <USBD_SetConfig+0x118>)
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7ff fa59 	bl	80074b0 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f9db 	bl	80083ba <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008004:	e033      	b.n	800806e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8008006:	4b1b      	ldr	r3, [pc, #108]	; (8008074 <USBD_SetConfig+0x118>)
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	429a      	cmp	r2, r3
 8008012:	d01d      	beq.n	8008050 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	b2db      	uxtb	r3, r3
 800801a:	4619      	mov	r1, r3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7ff fa47 	bl	80074b0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008022:	4b14      	ldr	r3, [pc, #80]	; (8008074 <USBD_SetConfig+0x118>)
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800802c:	4b11      	ldr	r3, [pc, #68]	; (8008074 <USBD_SetConfig+0x118>)
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	4619      	mov	r1, r3
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f7ff fa1d 	bl	8007472 <USBD_SetClassConfig>
 8008038:	4603      	mov	r3, r0
 800803a:	2b02      	cmp	r3, #2
 800803c:	d104      	bne.n	8008048 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f8f2 	bl	800822a <USBD_CtlError>
          return;
 8008046:	e012      	b.n	800806e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f9b6 	bl	80083ba <USBD_CtlSendStatus>
      break;
 800804e:	e00e      	b.n	800806e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f9b2 	bl	80083ba <USBD_CtlSendStatus>
      break;
 8008056:	e00a      	b.n	800806e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f8e5 	bl	800822a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8008060:	4b04      	ldr	r3, [pc, #16]	; (8008074 <USBD_SetConfig+0x118>)
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	4619      	mov	r1, r3
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f7ff fa22 	bl	80074b0 <USBD_ClrClassConfig>
      break;
 800806c:	bf00      	nop
    }
  }
}
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	200002b0 	.word	0x200002b0

08008078 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	88db      	ldrh	r3, [r3, #6]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d004      	beq.n	8008094 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f8cc 	bl	800822a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8008092:	e022      	b.n	80080da <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800809a:	2b02      	cmp	r3, #2
 800809c:	dc02      	bgt.n	80080a4 <USBD_GetConfig+0x2c>
 800809e:	2b00      	cmp	r3, #0
 80080a0:	dc03      	bgt.n	80080aa <USBD_GetConfig+0x32>
 80080a2:	e015      	b.n	80080d0 <USBD_GetConfig+0x58>
 80080a4:	2b03      	cmp	r3, #3
 80080a6:	d00b      	beq.n	80080c0 <USBD_GetConfig+0x48>
 80080a8:	e012      	b.n	80080d0 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	3308      	adds	r3, #8
 80080b4:	2201      	movs	r2, #1
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f920 	bl	80082fe <USBD_CtlSendData>
      break;
 80080be:	e00c      	b.n	80080da <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	3304      	adds	r3, #4
 80080c4:	2201      	movs	r2, #1
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f918 	bl	80082fe <USBD_CtlSendData>
      break;
 80080ce:	e004      	b.n	80080da <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 80080d0:	6839      	ldr	r1, [r7, #0]
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f8a9 	bl	800822a <USBD_CtlError>
      break;
 80080d8:	bf00      	nop
}
 80080da:	bf00      	nop
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b082      	sub	sp, #8
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80080f2:	3b01      	subs	r3, #1
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d81e      	bhi.n	8008136 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	88db      	ldrh	r3, [r3, #6]
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d004      	beq.n	800810a <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f891 	bl	800822a <USBD_CtlError>
      break;
 8008108:	e01a      	b.n	8008140 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8008116:	2b00      	cmp	r3, #0
 8008118:	d005      	beq.n	8008126 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	f043 0202 	orr.w	r2, r3, #2
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	330c      	adds	r3, #12
 800812a:	2202      	movs	r2, #2
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f8e5 	bl	80082fe <USBD_CtlSendData>
    break;
 8008134:	e004      	b.n	8008140 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f876 	bl	800822a <USBD_CtlError>
    break;
 800813e:	bf00      	nop
  }
}
 8008140:	bf00      	nop
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	885b      	ldrh	r3, [r3, #2]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d106      	bne.n	8008168 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 f929 	bl	80083ba <USBD_CtlSendStatus>
  }

}
 8008168:	bf00      	nop
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008180:	3b01      	subs	r3, #1
 8008182:	2b02      	cmp	r3, #2
 8008184:	d80b      	bhi.n	800819e <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	885b      	ldrh	r3, [r3, #2]
 800818a:	2b01      	cmp	r3, #1
 800818c:	d10c      	bne.n	80081a8 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f90f 	bl	80083ba <USBD_CtlSendStatus>
    }
    break;
 800819c:	e004      	b.n	80081a8 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f842 	bl	800822a <USBD_CtlError>
    break;
 80081a6:	e000      	b.n	80081aa <USBD_ClrFeature+0x3a>
    break;
 80081a8:	bf00      	nop
  }
}
 80081aa:	bf00      	nop
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b083      	sub	sp, #12
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	781a      	ldrb	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	785a      	ldrb	r2, [r3, #1]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	3302      	adds	r3, #2
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	3303      	adds	r3, #3
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	b29b      	uxth	r3, r3
 80081dc:	021b      	lsls	r3, r3, #8
 80081de:	b29b      	uxth	r3, r3
 80081e0:	4413      	add	r3, r2
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	3304      	adds	r3, #4
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	3305      	adds	r3, #5
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	021b      	lsls	r3, r3, #8
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	4413      	add	r3, r2
 80081fe:	b29a      	uxth	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	3306      	adds	r3, #6
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	b29a      	uxth	r2, r3
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	3307      	adds	r3, #7
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	b29b      	uxth	r3, r3
 8008214:	021b      	lsls	r3, r3, #8
 8008216:	b29b      	uxth	r3, r3
 8008218:	4413      	add	r3, r2
 800821a:	b29a      	uxth	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	80da      	strh	r2, [r3, #6]

}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	bc80      	pop	{r7}
 8008228:	4770      	bx	lr

0800822a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b082      	sub	sp, #8
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8008234:	2180      	movs	r1, #128	; 0x80
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fe18 	bl	8008e6c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800823c:	2100      	movs	r1, #0
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fe14 	bl	8008e6c <USBD_LL_StallEP>
}
 8008244:	bf00      	nop
 8008246:	3708      	adds	r7, #8
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008258:	2300      	movs	r3, #0
 800825a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d032      	beq.n	80082c8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f000 f834 	bl	80082d0 <USBD_GetLen>
 8008268:	4603      	mov	r3, r0
 800826a:	3301      	adds	r3, #1
 800826c:	b29b      	uxth	r3, r3
 800826e:	005b      	lsls	r3, r3, #1
 8008270:	b29a      	uxth	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008276:	7dfb      	ldrb	r3, [r7, #23]
 8008278:	1c5a      	adds	r2, r3, #1
 800827a:	75fa      	strb	r2, [r7, #23]
 800827c:	461a      	mov	r2, r3
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	4413      	add	r3, r2
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	7812      	ldrb	r2, [r2, #0]
 8008286:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008288:	7dfb      	ldrb	r3, [r7, #23]
 800828a:	1c5a      	adds	r2, r3, #1
 800828c:	75fa      	strb	r2, [r7, #23]
 800828e:	461a      	mov	r2, r3
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	4413      	add	r3, r2
 8008294:	2203      	movs	r2, #3
 8008296:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008298:	e012      	b.n	80082c0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	1c5a      	adds	r2, r3, #1
 800829e:	60fa      	str	r2, [r7, #12]
 80082a0:	7dfa      	ldrb	r2, [r7, #23]
 80082a2:	1c51      	adds	r1, r2, #1
 80082a4:	75f9      	strb	r1, [r7, #23]
 80082a6:	4611      	mov	r1, r2
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	440a      	add	r2, r1
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80082b0:	7dfb      	ldrb	r3, [r7, #23]
 80082b2:	1c5a      	adds	r2, r3, #1
 80082b4:	75fa      	strb	r2, [r7, #23]
 80082b6:	461a      	mov	r2, r3
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	4413      	add	r3, r2
 80082bc:	2200      	movs	r2, #0
 80082be:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1e8      	bne.n	800829a <USBD_GetString+0x4e>
    }
  }
}
 80082c8:	bf00      	nop
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80082d8:	2300      	movs	r3, #0
 80082da:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80082dc:	e005      	b.n	80082ea <USBD_GetLen+0x1a>
    {
        len++;
 80082de:	7bfb      	ldrb	r3, [r7, #15]
 80082e0:	3301      	adds	r3, #1
 80082e2:	73fb      	strb	r3, [r7, #15]
        buf++;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	3301      	adds	r3, #1
 80082e8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1f5      	bne.n	80082de <USBD_GetLen+0xe>
    }

    return len;
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3714      	adds	r7, #20
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bc80      	pop	{r7}
 80082fc:	4770      	bx	lr

080082fe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b084      	sub	sp, #16
 8008302:	af00      	add	r7, sp, #0
 8008304:	60f8      	str	r0, [r7, #12]
 8008306:	60b9      	str	r1, [r7, #8]
 8008308:	4613      	mov	r3, r2
 800830a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2202      	movs	r2, #2
 8008310:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8008314:	88fa      	ldrh	r2, [r7, #6]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800831a:	88fa      	ldrh	r2, [r7, #6]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008320:	88fb      	ldrh	r3, [r7, #6]
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	2100      	movs	r1, #0
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 fe29 	bl	8008f7e <USBD_LL_Transmit>

  return USBD_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	60f8      	str	r0, [r7, #12]
 800833e:	60b9      	str	r1, [r7, #8]
 8008340:	4613      	mov	r3, r2
 8008342:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008344:	88fb      	ldrh	r3, [r7, #6]
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	2100      	movs	r1, #0
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f000 fe17 	bl	8008f7e <USBD_LL_Transmit>

  return USBD_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	60b9      	str	r1, [r7, #8]
 8008364:	4613      	mov	r3, r2
 8008366:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2203      	movs	r2, #3
 800836c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008370:	88fa      	ldrh	r2, [r7, #6]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8008378:	88fa      	ldrh	r2, [r7, #6]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008380:	88fb      	ldrh	r3, [r7, #6]
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	2100      	movs	r1, #0
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f000 fe1c 	bl	8008fc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b084      	sub	sp, #16
 800839a:	af00      	add	r7, sp, #0
 800839c:	60f8      	str	r0, [r7, #12]
 800839e:	60b9      	str	r1, [r7, #8]
 80083a0:	4613      	mov	r3, r2
 80083a2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083a4:	88fb      	ldrh	r3, [r7, #6]
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	2100      	movs	r1, #0
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f000 fe0a 	bl	8008fc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b082      	sub	sp, #8
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2204      	movs	r2, #4
 80083c6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083ca:	2300      	movs	r3, #0
 80083cc:	2200      	movs	r2, #0
 80083ce:	2100      	movs	r1, #0
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fdd4 	bl	8008f7e <USBD_LL_Transmit>

  return USBD_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2205      	movs	r2, #5
 80083ec:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80083f0:	2300      	movs	r3, #0
 80083f2:	2200      	movs	r2, #0
 80083f4:	2100      	movs	r1, #0
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fde4 	bl	8008fc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
	...

08008408 <WaitWhileBusy>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_TIMEOUT for timeout
 */
static LoRa_Status WaitWhileBusy(uint16_t timeout)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	4603      	mov	r3, r0
 8008410:	80fb      	strh	r3, [r7, #6]

	uint32_t startTime;

	startTime = HAL_GetTick();
 8008412:	f7f8 fb75 	bl	8000b00 <HAL_GetTick>
 8008416:	60f8      	str	r0, [r7, #12]

	while(HAL_GPIO_ReadPin(LoRa_BUSY_GPIO_Port, LoRa_BUSY_Pin) == GPIO_PIN_SET)
 8008418:	e009      	b.n	800842e <WaitWhileBusy+0x26>
	{
		if((HAL_GetTick() - startTime) > timeout)
 800841a:	f7f8 fb71 	bl	8000b00 <HAL_GetTick>
 800841e:	4602      	mov	r2, r0
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	1ad2      	subs	r2, r2, r3
 8008424:	88fb      	ldrh	r3, [r7, #6]
 8008426:	429a      	cmp	r2, r3
 8008428:	d901      	bls.n	800842e <WaitWhileBusy+0x26>
		{
			return(LoRa_TIMEOUT);
 800842a:	2302      	movs	r3, #2
 800842c:	e008      	b.n	8008440 <WaitWhileBusy+0x38>
	while(HAL_GPIO_ReadPin(LoRa_BUSY_GPIO_Port, LoRa_BUSY_Pin) == GPIO_PIN_SET)
 800842e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008432:	4805      	ldr	r0, [pc, #20]	; (8008448 <WaitWhileBusy+0x40>)
 8008434:	f7f8 fe1e 	bl	8001074 <HAL_GPIO_ReadPin>
 8008438:	4603      	mov	r3, r0
 800843a:	2b01      	cmp	r3, #1
 800843c:	d0ed      	beq.n	800841a <WaitWhileBusy+0x12>
		}
	}

	return(LoRa_OK);
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	40020000 	.word	0x40020000

0800844c <SPI_Send>:
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 *
 */
static LoRa_Status SPI_Send(uint8_t* buffer, uint16_t numBytes, bool moreToCome)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	807b      	strh	r3, [r7, #2]
 8008458:	4613      	mov	r3, r2
 800845a:	707b      	strb	r3, [r7, #1]

	/* make sure chip isn't busy */
	if(WaitWhileBusy(10) != LoRa_OK)
 800845c:	200a      	movs	r0, #10
 800845e:	f7ff ffd3 	bl	8008408 <WaitWhileBusy>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d001      	beq.n	800846c <SPI_Send+0x20>
	{
		return(LoRa_ERROR);
 8008468:	2301      	movs	r3, #1
 800846a:	e01c      	b.n	80084a6 <SPI_Send+0x5a>
	}

	/* Set NSS low */
	HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_RESET);
 800846c:	2200      	movs	r2, #0
 800846e:	2110      	movs	r1, #16
 8008470:	480f      	ldr	r0, [pc, #60]	; (80084b0 <SPI_Send+0x64>)
 8008472:	f7f8 fe16 	bl	80010a2 <HAL_GPIO_WritePin>

	if(HAL_SPI_Transmit(hspi, buffer, numBytes, 100) != HAL_OK)
 8008476:	4b0f      	ldr	r3, [pc, #60]	; (80084b4 <SPI_Send+0x68>)
 8008478:	6818      	ldr	r0, [r3, #0]
 800847a:	887a      	ldrh	r2, [r7, #2]
 800847c:	2364      	movs	r3, #100	; 0x64
 800847e:	6879      	ldr	r1, [r7, #4]
 8008480:	f7fb fa0c 	bl	800389c <HAL_SPI_Transmit>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d001      	beq.n	800848e <SPI_Send+0x42>
	{
		return(LoRa_ERROR);
 800848a:	2301      	movs	r3, #1
 800848c:	e00b      	b.n	80084a6 <SPI_Send+0x5a>
	}

	if(moreToCome != true)
 800848e:	787b      	ldrb	r3, [r7, #1]
 8008490:	f083 0301 	eor.w	r3, r3, #1
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b00      	cmp	r3, #0
 8008498:	d004      	beq.n	80084a4 <SPI_Send+0x58>
	{
		/* Set NSS high */
		HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_SET);
 800849a:	2201      	movs	r2, #1
 800849c:	2110      	movs	r1, #16
 800849e:	4804      	ldr	r0, [pc, #16]	; (80084b0 <SPI_Send+0x64>)
 80084a0:	f7f8 fdff 	bl	80010a2 <HAL_GPIO_WritePin>
	}

	return(LoRa_OK);
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	40020000 	.word	0x40020000
 80084b4:	200002b4 	.word	0x200002b4

080084b8 <SPI_Receive>:
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 *
 */
static LoRa_Status SPI_Receive(uint8_t* buffer, uint16_t numBytes, bool moreToCome)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	460b      	mov	r3, r1
 80084c2:	807b      	strh	r3, [r7, #2]
 80084c4:	4613      	mov	r3, r2
 80084c6:	707b      	strb	r3, [r7, #1]

	/* make sure chip isn't busy */
	if(WaitWhileBusy(10) != LoRa_OK)
 80084c8:	200a      	movs	r0, #10
 80084ca:	f7ff ff9d 	bl	8008408 <WaitWhileBusy>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <SPI_Receive+0x20>
	{
		return(LoRa_ERROR);
 80084d4:	2301      	movs	r3, #1
 80084d6:	e01c      	b.n	8008512 <SPI_Receive+0x5a>
	}

	/* Set NSS low */
	HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_RESET);
 80084d8:	2200      	movs	r2, #0
 80084da:	2110      	movs	r1, #16
 80084dc:	480f      	ldr	r0, [pc, #60]	; (800851c <SPI_Receive+0x64>)
 80084de:	f7f8 fde0 	bl	80010a2 <HAL_GPIO_WritePin>

	if(HAL_SPI_Receive(hspi, buffer, numBytes, 100) != HAL_OK)
 80084e2:	4b0f      	ldr	r3, [pc, #60]	; (8008520 <SPI_Receive+0x68>)
 80084e4:	6818      	ldr	r0, [r3, #0]
 80084e6:	887a      	ldrh	r2, [r7, #2]
 80084e8:	2364      	movs	r3, #100	; 0x64
 80084ea:	6879      	ldr	r1, [r7, #4]
 80084ec:	f7fb fb12 	bl	8003b14 <HAL_SPI_Receive>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d001      	beq.n	80084fa <SPI_Receive+0x42>
	{
		return(LoRa_ERROR);
 80084f6:	2301      	movs	r3, #1
 80084f8:	e00b      	b.n	8008512 <SPI_Receive+0x5a>
	}

	if(moreToCome != true)
 80084fa:	787b      	ldrb	r3, [r7, #1]
 80084fc:	f083 0301 	eor.w	r3, r3, #1
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	d004      	beq.n	8008510 <SPI_Receive+0x58>
	{
		/* Set NSS high */
		HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_SET);
 8008506:	2201      	movs	r2, #1
 8008508:	2110      	movs	r1, #16
 800850a:	4804      	ldr	r0, [pc, #16]	; (800851c <SPI_Receive+0x64>)
 800850c:	f7f8 fdc9 	bl	80010a2 <HAL_GPIO_WritePin>
	}

	return(LoRa_OK);
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	40020000 	.word	0x40020000
 8008520:	200002b4 	.word	0x200002b4

08008524 <LoRa_Init>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 */
LoRa_Status LoRa_Init(SPI_HandleTypeDef *hspiPtr)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
	uint8_t xmitBuffer[6];

  /* store the hspi pointer for future use */
  hspi = hspiPtr;
 800852c:	4a4b      	ldr	r2, [pc, #300]	; (800865c <LoRa_Init+0x138>)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6013      	str	r3, [r2, #0]

  /* Set NSS high */
  HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_SET);
 8008532:	2201      	movs	r2, #1
 8008534:	2110      	movs	r1, #16
 8008536:	484a      	ldr	r0, [pc, #296]	; (8008660 <LoRa_Init+0x13c>)
 8008538:	f7f8 fdb3 	bl	80010a2 <HAL_GPIO_WritePin>

  /* Reset SX1262 chip */
  HAL_GPIO_WritePin(LoRa_NRST_GPIO_Port, LoRa_NRST_Pin, GPIO_PIN_RESET); 	/* Pull NRST low */
 800853c:	2200      	movs	r2, #0
 800853e:	2101      	movs	r1, #1
 8008540:	4847      	ldr	r0, [pc, #284]	; (8008660 <LoRa_Init+0x13c>)
 8008542:	f7f8 fdae 	bl	80010a2 <HAL_GPIO_WritePin>
  HAL_Delay(1); 															/* delay 1mS */
 8008546:	2001      	movs	r0, #1
 8008548:	f7f8 fae4 	bl	8000b14 <HAL_Delay>
  HAL_GPIO_WritePin(LoRa_NRST_GPIO_Port, LoRa_NRST_Pin, GPIO_PIN_SET);		/* Set NRST high */
 800854c:	2201      	movs	r2, #1
 800854e:	2101      	movs	r1, #1
 8008550:	4843      	ldr	r0, [pc, #268]	; (8008660 <LoRa_Init+0x13c>)
 8008552:	f7f8 fda6 	bl	80010a2 <HAL_GPIO_WritePin>

  /* Set the chip to Standby mode and using the internal oscillator */
  xmitBuffer[0] = LORA_SET_STANDBY_OPCODE;
 8008556:	2380      	movs	r3, #128	; 0x80
 8008558:	723b      	strb	r3, [r7, #8]
  xmitBuffer[1] = LORA_STDBY_RC;
 800855a:	2300      	movs	r3, #0
 800855c:	727b      	strb	r3, [r7, #9]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 800855e:	f107 0308 	add.w	r3, r7, #8
 8008562:	2200      	movs	r2, #0
 8008564:	2102      	movs	r1, #2
 8008566:	4618      	mov	r0, r3
 8008568:	f7ff ff70 	bl	800844c <SPI_Send>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d001      	beq.n	8008576 <LoRa_Init+0x52>
  {
	  return(LoRa_ERROR);
 8008572:	2301      	movs	r3, #1
 8008574:	e06e      	b.n	8008654 <LoRa_Init+0x130>
  }

  /* Set the packet type to LoRa */
  xmitBuffer[0] = LORA_SET_PACKET_TYPE_OPCODE;
 8008576:	238a      	movs	r3, #138	; 0x8a
 8008578:	723b      	strb	r3, [r7, #8]
  xmitBuffer[1] = LORA_PACKET_TYPE_LORA;
 800857a:	2301      	movs	r3, #1
 800857c:	727b      	strb	r3, [r7, #9]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 800857e:	f107 0308 	add.w	r3, r7, #8
 8008582:	2200      	movs	r2, #0
 8008584:	2102      	movs	r1, #2
 8008586:	4618      	mov	r0, r3
 8008588:	f7ff ff60 	bl	800844c <SPI_Send>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d001      	beq.n	8008596 <LoRa_Init+0x72>
  {
	  return(LoRa_ERROR);
 8008592:	2301      	movs	r3, #1
 8008594:	e05e      	b.n	8008654 <LoRa_Init+0x130>
  }

  /* Set the frequency to 915 MHz  */
  /* See datasheet for calculation */
  xmitBuffer[0] = LORA_SET_RF_FREQUENCY_OPCODE;
 8008596:	2386      	movs	r3, #134	; 0x86
 8008598:	723b      	strb	r3, [r7, #8]
  xmitBuffer[1] = 0x39;
 800859a:	2339      	movs	r3, #57	; 0x39
 800859c:	727b      	strb	r3, [r7, #9]
  xmitBuffer[2] = 0x30;
 800859e:	2330      	movs	r3, #48	; 0x30
 80085a0:	72bb      	strb	r3, [r7, #10]
  xmitBuffer[3] = 0x00;
 80085a2:	2300      	movs	r3, #0
 80085a4:	72fb      	strb	r3, [r7, #11]
  xmitBuffer[4] = 0x00;
 80085a6:	2300      	movs	r3, #0
 80085a8:	733b      	strb	r3, [r7, #12]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 80085aa:	f107 0308 	add.w	r3, r7, #8
 80085ae:	2200      	movs	r2, #0
 80085b0:	2105      	movs	r1, #5
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7ff ff4a 	bl	800844c <SPI_Send>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d001      	beq.n	80085c2 <LoRa_Init+0x9e>
  {
	  return(LoRa_ERROR);
 80085be:	2301      	movs	r3, #1
 80085c0:	e048      	b.n	8008654 <LoRa_Init+0x130>
  }

  /* Set the power amplifier configuration */
  /* See datasheet page 74                 */
  xmitBuffer[0] = LORA_SET_PA_CONFIG_OPCODE;
 80085c2:	2395      	movs	r3, #149	; 0x95
 80085c4:	723b      	strb	r3, [r7, #8]
  xmitBuffer[1] = 0x04; /* paDutyCycle */
 80085c6:	2304      	movs	r3, #4
 80085c8:	727b      	strb	r3, [r7, #9]
  xmitBuffer[2] = 0x07; /* hpMax */
 80085ca:	2307      	movs	r3, #7
 80085cc:	72bb      	strb	r3, [r7, #10]
  xmitBuffer[3] = 0x00; /* devSel */
 80085ce:	2300      	movs	r3, #0
 80085d0:	72fb      	strb	r3, [r7, #11]
  xmitBuffer[4] = 0x01; /* paLut */
 80085d2:	2301      	movs	r3, #1
 80085d4:	733b      	strb	r3, [r7, #12]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 80085d6:	f107 0308 	add.w	r3, r7, #8
 80085da:	2200      	movs	r2, #0
 80085dc:	2105      	movs	r1, #5
 80085de:	4618      	mov	r0, r3
 80085e0:	f7ff ff34 	bl	800844c <SPI_Send>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d001      	beq.n	80085ee <LoRa_Init+0xca>
  {
	  return(LoRa_ERROR);
 80085ea:	2301      	movs	r3, #1
 80085ec:	e032      	b.n	8008654 <LoRa_Init+0x130>
  }

  /* Set the TX parameters */
  xmitBuffer[0] = LORA_SET_TX_PARAMS_OPCODE;
 80085ee:	238e      	movs	r3, #142	; 0x8e
 80085f0:	723b      	strb	r3, [r7, #8]
  xmitBuffer[1] = 22; /* power +22 dBm   */
 80085f2:	2316      	movs	r3, #22
 80085f4:	727b      	strb	r3, [r7, #9]
  xmitBuffer[2] = LORA_STANDARD_RAMPTIME;
 80085f6:	2304      	movs	r3, #4
 80085f8:	72bb      	strb	r3, [r7, #10]
  if(SPI_Send(xmitBuffer, 3, false) != LoRa_OK)
 80085fa:	f107 0308 	add.w	r3, r7, #8
 80085fe:	2200      	movs	r2, #0
 8008600:	2103      	movs	r1, #3
 8008602:	4618      	mov	r0, r3
 8008604:	f7ff ff22 	bl	800844c <SPI_Send>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <LoRa_Init+0xee>
  {
	  return(LoRa_ERROR);
 800860e:	2301      	movs	r3, #1
 8008610:	e020      	b.n	8008654 <LoRa_Init+0x130>
  }

  /* Set DIO2 as the control for the RF switch */
  xmitBuffer[0] = LORA_SET_DIO2_AS_RF_SWITCH_CTRL_OPCODE;
 8008612:	239d      	movs	r3, #157	; 0x9d
 8008614:	723b      	strb	r3, [r7, #8]
  xmitBuffer[1] = 1; /* enable */
 8008616:	2301      	movs	r3, #1
 8008618:	727b      	strb	r3, [r7, #9]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 800861a:	f107 0308 	add.w	r3, r7, #8
 800861e:	2200      	movs	r2, #0
 8008620:	2102      	movs	r1, #2
 8008622:	4618      	mov	r0, r3
 8008624:	f7ff ff12 	bl	800844c <SPI_Send>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <LoRa_Init+0x10e>
  {
	  return(LoRa_ERROR);
 800862e:	2301      	movs	r3, #1
 8008630:	e010      	b.n	8008654 <LoRa_Init+0x130>
  }

  /* Set regulator mode to use the DC-DC converter */
  xmitBuffer[0] = LORA_SET_REGULATOR_MODE_OPCODE;
 8008632:	2396      	movs	r3, #150	; 0x96
 8008634:	723b      	strb	r3, [r7, #8]
  xmitBuffer[1] = 1; /* Use DC-DC converter */
 8008636:	2301      	movs	r3, #1
 8008638:	727b      	strb	r3, [r7, #9]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 800863a:	f107 0308 	add.w	r3, r7, #8
 800863e:	2200      	movs	r2, #0
 8008640:	2102      	movs	r1, #2
 8008642:	4618      	mov	r0, r3
 8008644:	f7ff ff02 	bl	800844c <SPI_Send>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d001      	beq.n	8008652 <LoRa_Init+0x12e>
   {
 	  return(LoRa_ERROR);
 800864e:	2301      	movs	r3, #1
 8008650:	e000      	b.n	8008654 <LoRa_Init+0x130>
   }

  return(LoRa_OK);
 8008652:	2300      	movs	r3, #0

}
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	200002b4 	.word	0x200002b4
 8008660:	40020000 	.word	0x40020000

08008664 <LoRaGetStatus>:
 * Return Value
 *  Status byte or 0xFF for error
 *  Status byte defined in SX1262 datasheet
 */
uint8_t LoRaGetStatus(void)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
	/* Return the status byte from the SX1262 chip */
	uint8_t status = 0;
 800866a:	2300      	movs	r3, #0
 800866c:	71fb      	strb	r3, [r7, #7]
	uint8_t opcode = LORA_GET_STATUS_OPCODE;
 800866e:	23c0      	movs	r3, #192	; 0xc0
 8008670:	71bb      	strb	r3, [r7, #6]

	if(SPI_Send(&opcode, 1, true) != LoRa_OK)
 8008672:	1dbb      	adds	r3, r7, #6
 8008674:	2201      	movs	r2, #1
 8008676:	2101      	movs	r1, #1
 8008678:	4618      	mov	r0, r3
 800867a:	f7ff fee7 	bl	800844c <SPI_Send>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d001      	beq.n	8008688 <LoRaGetStatus+0x24>
	{
		return(LoRa_ERROR);
 8008684:	2301      	movs	r3, #1
 8008686:	e00b      	b.n	80086a0 <LoRaGetStatus+0x3c>
	}

	if(SPI_Receive(&status, 1, false) != LoRa_OK)
 8008688:	1dfb      	adds	r3, r7, #7
 800868a:	2200      	movs	r2, #0
 800868c:	2101      	movs	r1, #1
 800868e:	4618      	mov	r0, r3
 8008690:	f7ff ff12 	bl	80084b8 <SPI_Receive>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d001      	beq.n	800869e <LoRaGetStatus+0x3a>
	{
		return(LoRa_ERROR);
 800869a:	2301      	movs	r3, #1
 800869c:	e000      	b.n	80086a0 <LoRaGetStatus+0x3c>
	}

	return(status);
 800869e:	79fb      	ldrb	r3, [r7, #7]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <LoRaSetTxPower>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 */
LoRa_Status LoRaSetTxPower(int8_t power)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	4603      	mov	r3, r0
 80086b0:	71fb      	strb	r3, [r7, #7]
	int8_t buffer[3];

	if (power > 22) power = 22;
 80086b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086b6:	2b16      	cmp	r3, #22
 80086b8:	dd01      	ble.n	80086be <LoRaSetTxPower+0x16>
 80086ba:	2316      	movs	r3, #22
 80086bc:	71fb      	strb	r3, [r7, #7]
	if (power < -9) power = -9;
 80086be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086c2:	f113 0f09 	cmn.w	r3, #9
 80086c6:	da01      	bge.n	80086cc <LoRaSetTxPower+0x24>
 80086c8:	23f7      	movs	r3, #247	; 0xf7
 80086ca:	71fb      	strb	r3, [r7, #7]

	buffer[0] = LORA_SET_TX_PARAMS_OPCODE;
 80086cc:	238e      	movs	r3, #142	; 0x8e
 80086ce:	733b      	strb	r3, [r7, #12]
	buffer[1] = power;
 80086d0:	79fb      	ldrb	r3, [r7, #7]
 80086d2:	737b      	strb	r3, [r7, #13]
	buffer[2] = LORA_STANDARD_RAMPTIME;
 80086d4:	2304      	movs	r3, #4
 80086d6:	73bb      	strb	r3, [r7, #14]
	if(SPI_Send((uint8_t *)buffer, 3, false) != LoRa_OK)
 80086d8:	f107 030c 	add.w	r3, r7, #12
 80086dc:	2200      	movs	r2, #0
 80086de:	2103      	movs	r1, #3
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7ff feb3 	bl	800844c <SPI_Send>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d001      	beq.n	80086f0 <LoRaSetTxPower+0x48>
	{
		return(LoRa_ERROR);
 80086ec:	2301      	movs	r3, #1
 80086ee:	e000      	b.n	80086f2 <LoRaSetTxPower+0x4a>
	}

	return(LoRa_OK);
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <LoRaSetTxContinuousWave>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 */
LoRa_Status LoRaSetTxContinuousWave(void)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b082      	sub	sp, #8
 80086fe:	af00      	add	r7, sp, #0
	uint8_t opcode = LORA_SET_TX_CONTINUOUS_WAVE_OPCODE;
 8008700:	23d1      	movs	r3, #209	; 0xd1
 8008702:	71fb      	strb	r3, [r7, #7]
	if(SPI_Send(&opcode, 1, false) != LoRa_OK)
 8008704:	1dfb      	adds	r3, r7, #7
 8008706:	2200      	movs	r2, #0
 8008708:	2101      	movs	r1, #1
 800870a:	4618      	mov	r0, r3
 800870c:	f7ff fe9e 	bl	800844c <SPI_Send>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d001      	beq.n	800871a <LoRaSetTxContinuousWave+0x20>
	{
		return(LoRa_ERROR);
 8008716:	2301      	movs	r3, #1
 8008718:	e000      	b.n	800871c <LoRaSetTxContinuousWave+0x22>
	}

	return(LoRa_OK);
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <LoRaSetStandbyMode>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 */
LoRa_Status LoRaSetStandbyMode(void)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
	uint8_t buffer[2];
	buffer[0] = LORA_SET_STANDBY_OPCODE;
 800872a:	2380      	movs	r3, #128	; 0x80
 800872c:	713b      	strb	r3, [r7, #4]
	buffer[1] = LORA_STDBY_RC; /* Use internal RC oscillator to save power */
 800872e:	2300      	movs	r3, #0
 8008730:	717b      	strb	r3, [r7, #5]
	if(SPI_Send(buffer, 2, false) != LoRa_OK)
 8008732:	1d3b      	adds	r3, r7, #4
 8008734:	2200      	movs	r2, #0
 8008736:	2102      	movs	r1, #2
 8008738:	4618      	mov	r0, r3
 800873a:	f7ff fe87 	bl	800844c <SPI_Send>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d001      	beq.n	8008748 <LoRaSetStandbyMode+0x24>
	{
		return(LoRa_ERROR);
 8008744:	2301      	movs	r3, #1
 8008746:	e000      	b.n	800874a <LoRaSetStandbyMode+0x26>
	}

	return(LoRa_OK);
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
	...

08008754 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008758:	2200      	movs	r2, #0
 800875a:	4912      	ldr	r1, [pc, #72]	; (80087a4 <MX_USB_DEVICE_Init+0x50>)
 800875c:	4812      	ldr	r0, [pc, #72]	; (80087a8 <MX_USB_DEVICE_Init+0x54>)
 800875e:	f7fe fe2e 	bl	80073be <USBD_Init>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d001      	beq.n	800876c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008768:	f7f8 f816 	bl	8000798 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800876c:	490f      	ldr	r1, [pc, #60]	; (80087ac <MX_USB_DEVICE_Init+0x58>)
 800876e:	480e      	ldr	r0, [pc, #56]	; (80087a8 <MX_USB_DEVICE_Init+0x54>)
 8008770:	f7fe fe50 	bl	8007414 <USBD_RegisterClass>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d001      	beq.n	800877e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800877a:	f7f8 f80d 	bl	8000798 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800877e:	490c      	ldr	r1, [pc, #48]	; (80087b0 <MX_USB_DEVICE_Init+0x5c>)
 8008780:	4809      	ldr	r0, [pc, #36]	; (80087a8 <MX_USB_DEVICE_Init+0x54>)
 8008782:	f7fe fd81 	bl	8007288 <USBD_CDC_RegisterInterface>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d001      	beq.n	8008790 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800878c:	f7f8 f804 	bl	8000798 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008790:	4805      	ldr	r0, [pc, #20]	; (80087a8 <MX_USB_DEVICE_Init+0x54>)
 8008792:	f7fe fe58 	bl	8007446 <USBD_Start>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800879c:	f7f7 fffc 	bl	8000798 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80087a0:	bf00      	nop
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	2000012c 	.word	0x2000012c
 80087a8:	200002b8 	.word	0x200002b8
 80087ac:	20000018 	.word	0x20000018
 80087b0:	2000011c 	.word	0x2000011c

080087b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80087b8:	2200      	movs	r2, #0
 80087ba:	4905      	ldr	r1, [pc, #20]	; (80087d0 <CDC_Init_FS+0x1c>)
 80087bc:	4805      	ldr	r0, [pc, #20]	; (80087d4 <CDC_Init_FS+0x20>)
 80087be:	f7fe fd79 	bl	80072b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80087c2:	4905      	ldr	r1, [pc, #20]	; (80087d8 <CDC_Init_FS+0x24>)
 80087c4:	4803      	ldr	r0, [pc, #12]	; (80087d4 <CDC_Init_FS+0x20>)
 80087c6:	f7fe fd8e 	bl	80072e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80087ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	20000954 	.word	0x20000954
 80087d4:	200002b8 	.word	0x200002b8
 80087d8:	20000554 	.word	0x20000554

080087dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80087dc:	b480      	push	{r7}
 80087de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80087e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bc80      	pop	{r7}
 80087e8:	4770      	bx	lr
	...

080087ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	4603      	mov	r3, r0
 80087f4:	6039      	str	r1, [r7, #0]
 80087f6:	71fb      	strb	r3, [r7, #7]
 80087f8:	4613      	mov	r3, r2
 80087fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80087fc:	79fb      	ldrb	r3, [r7, #7]
 80087fe:	2b23      	cmp	r3, #35	; 0x23
 8008800:	d84a      	bhi.n	8008898 <CDC_Control_FS+0xac>
 8008802:	a201      	add	r2, pc, #4	; (adr r2, 8008808 <CDC_Control_FS+0x1c>)
 8008804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008808:	08008899 	.word	0x08008899
 800880c:	08008899 	.word	0x08008899
 8008810:	08008899 	.word	0x08008899
 8008814:	08008899 	.word	0x08008899
 8008818:	08008899 	.word	0x08008899
 800881c:	08008899 	.word	0x08008899
 8008820:	08008899 	.word	0x08008899
 8008824:	08008899 	.word	0x08008899
 8008828:	08008899 	.word	0x08008899
 800882c:	08008899 	.word	0x08008899
 8008830:	08008899 	.word	0x08008899
 8008834:	08008899 	.word	0x08008899
 8008838:	08008899 	.word	0x08008899
 800883c:	08008899 	.word	0x08008899
 8008840:	08008899 	.word	0x08008899
 8008844:	08008899 	.word	0x08008899
 8008848:	08008899 	.word	0x08008899
 800884c:	08008899 	.word	0x08008899
 8008850:	08008899 	.word	0x08008899
 8008854:	08008899 	.word	0x08008899
 8008858:	08008899 	.word	0x08008899
 800885c:	08008899 	.word	0x08008899
 8008860:	08008899 	.word	0x08008899
 8008864:	08008899 	.word	0x08008899
 8008868:	08008899 	.word	0x08008899
 800886c:	08008899 	.word	0x08008899
 8008870:	08008899 	.word	0x08008899
 8008874:	08008899 	.word	0x08008899
 8008878:	08008899 	.word	0x08008899
 800887c:	08008899 	.word	0x08008899
 8008880:	08008899 	.word	0x08008899
 8008884:	08008899 	.word	0x08008899
 8008888:	08008899 	.word	0x08008899
 800888c:	08008899 	.word	0x08008899
 8008890:	08008899 	.word	0x08008899
 8008894:	08008899 	.word	0x08008899
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008898:	bf00      	nop
  }

  return (USBD_OK);
 800889a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800889c:	4618      	mov	r0, r3
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bc80      	pop	{r7}
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop

080088a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80088b2:	6879      	ldr	r1, [r7, #4]
 80088b4:	4805      	ldr	r0, [pc, #20]	; (80088cc <CDC_Receive_FS+0x24>)
 80088b6:	f7fe fd16 	bl	80072e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80088ba:	4804      	ldr	r0, [pc, #16]	; (80088cc <CDC_Receive_FS+0x24>)
 80088bc:	f7fe fd55 	bl	800736a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80088c0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	200002b8 	.word	0x200002b8

080088d0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	460b      	mov	r3, r1
 80088da:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80088dc:	2300      	movs	r3, #0
 80088de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80088e0:	4b0d      	ldr	r3, [pc, #52]	; (8008918 <CDC_Transmit_FS+0x48>)
 80088e2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80088e6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d001      	beq.n	80088f6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e00b      	b.n	800890e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80088f6:	887b      	ldrh	r3, [r7, #2]
 80088f8:	461a      	mov	r2, r3
 80088fa:	6879      	ldr	r1, [r7, #4]
 80088fc:	4806      	ldr	r0, [pc, #24]	; (8008918 <CDC_Transmit_FS+0x48>)
 80088fe:	f7fe fcd9 	bl	80072b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008902:	4805      	ldr	r0, [pc, #20]	; (8008918 <CDC_Transmit_FS+0x48>)
 8008904:	f7fe fd02 	bl	800730c <USBD_CDC_TransmitPacket>
 8008908:	4603      	mov	r3, r0
 800890a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800890c:	7bfb      	ldrb	r3, [r7, #15]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	200002b8 	.word	0x200002b8

0800891c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	4603      	mov	r3, r0
 8008924:	6039      	str	r1, [r7, #0]
 8008926:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2212      	movs	r2, #18
 800892c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800892e:	4b03      	ldr	r3, [pc, #12]	; (800893c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008930:	4618      	mov	r0, r3
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	bc80      	pop	{r7}
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	20000148 	.word	0x20000148

08008940 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	4603      	mov	r3, r0
 8008948:	6039      	str	r1, [r7, #0]
 800894a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	2204      	movs	r2, #4
 8008950:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008952:	4b03      	ldr	r3, [pc, #12]	; (8008960 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008954:	4618      	mov	r0, r3
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	bc80      	pop	{r7}
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	2000015c 	.word	0x2000015c

08008964 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	4603      	mov	r3, r0
 800896c:	6039      	str	r1, [r7, #0]
 800896e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008970:	79fb      	ldrb	r3, [r7, #7]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d105      	bne.n	8008982 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008976:	683a      	ldr	r2, [r7, #0]
 8008978:	4907      	ldr	r1, [pc, #28]	; (8008998 <USBD_FS_ProductStrDescriptor+0x34>)
 800897a:	4808      	ldr	r0, [pc, #32]	; (800899c <USBD_FS_ProductStrDescriptor+0x38>)
 800897c:	f7ff fc66 	bl	800824c <USBD_GetString>
 8008980:	e004      	b.n	800898c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	4904      	ldr	r1, [pc, #16]	; (8008998 <USBD_FS_ProductStrDescriptor+0x34>)
 8008986:	4805      	ldr	r0, [pc, #20]	; (800899c <USBD_FS_ProductStrDescriptor+0x38>)
 8008988:	f7ff fc60 	bl	800824c <USBD_GetString>
  }
  return USBD_StrDesc;
 800898c:	4b02      	ldr	r3, [pc, #8]	; (8008998 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	20000d54 	.word	0x20000d54
 800899c:	08009a34 	.word	0x08009a34

080089a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	4603      	mov	r3, r0
 80089a8:	6039      	str	r1, [r7, #0]
 80089aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80089ac:	683a      	ldr	r2, [r7, #0]
 80089ae:	4904      	ldr	r1, [pc, #16]	; (80089c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80089b0:	4804      	ldr	r0, [pc, #16]	; (80089c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80089b2:	f7ff fc4b 	bl	800824c <USBD_GetString>
  return USBD_StrDesc;
 80089b6:	4b02      	ldr	r3, [pc, #8]	; (80089c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	20000d54 	.word	0x20000d54
 80089c4:	08009a4c 	.word	0x08009a4c

080089c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	4603      	mov	r3, r0
 80089d0:	6039      	str	r1, [r7, #0]
 80089d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	221a      	movs	r2, #26
 80089d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80089da:	f000 f843 	bl	8008a64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80089de:	4b02      	ldr	r3, [pc, #8]	; (80089e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3708      	adds	r7, #8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	20000160 	.word	0x20000160

080089ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	4603      	mov	r3, r0
 80089f4:	6039      	str	r1, [r7, #0]
 80089f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80089f8:	79fb      	ldrb	r3, [r7, #7]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d105      	bne.n	8008a0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	4907      	ldr	r1, [pc, #28]	; (8008a20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a02:	4808      	ldr	r0, [pc, #32]	; (8008a24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a04:	f7ff fc22 	bl	800824c <USBD_GetString>
 8008a08:	e004      	b.n	8008a14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a0a:	683a      	ldr	r2, [r7, #0]
 8008a0c:	4904      	ldr	r1, [pc, #16]	; (8008a20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a0e:	4805      	ldr	r0, [pc, #20]	; (8008a24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a10:	f7ff fc1c 	bl	800824c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a14:	4b02      	ldr	r3, [pc, #8]	; (8008a20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	20000d54 	.word	0x20000d54
 8008a24:	08009a60 	.word	0x08009a60

08008a28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	4603      	mov	r3, r0
 8008a30:	6039      	str	r1, [r7, #0]
 8008a32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a34:	79fb      	ldrb	r3, [r7, #7]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d105      	bne.n	8008a46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a3a:	683a      	ldr	r2, [r7, #0]
 8008a3c:	4907      	ldr	r1, [pc, #28]	; (8008a5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a3e:	4808      	ldr	r0, [pc, #32]	; (8008a60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a40:	f7ff fc04 	bl	800824c <USBD_GetString>
 8008a44:	e004      	b.n	8008a50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a46:	683a      	ldr	r2, [r7, #0]
 8008a48:	4904      	ldr	r1, [pc, #16]	; (8008a5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a4a:	4805      	ldr	r0, [pc, #20]	; (8008a60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a4c:	f7ff fbfe 	bl	800824c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a50:	4b02      	ldr	r3, [pc, #8]	; (8008a5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	20000d54 	.word	0x20000d54
 8008a60:	08009a6c 	.word	0x08009a6c

08008a64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008a6a:	4b0f      	ldr	r3, [pc, #60]	; (8008aa8 <Get_SerialNum+0x44>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008a70:	4b0e      	ldr	r3, [pc, #56]	; (8008aac <Get_SerialNum+0x48>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008a76:	4b0e      	ldr	r3, [pc, #56]	; (8008ab0 <Get_SerialNum+0x4c>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4413      	add	r3, r2
 8008a82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d009      	beq.n	8008a9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008a8a:	2208      	movs	r2, #8
 8008a8c:	4909      	ldr	r1, [pc, #36]	; (8008ab4 <Get_SerialNum+0x50>)
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f000 f814 	bl	8008abc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008a94:	2204      	movs	r2, #4
 8008a96:	4908      	ldr	r1, [pc, #32]	; (8008ab8 <Get_SerialNum+0x54>)
 8008a98:	68b8      	ldr	r0, [r7, #8]
 8008a9a:	f000 f80f 	bl	8008abc <IntToUnicode>
  }
}
 8008a9e:	bf00      	nop
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	1ff80050 	.word	0x1ff80050
 8008aac:	1ff80054 	.word	0x1ff80054
 8008ab0:	1ff80058 	.word	0x1ff80058
 8008ab4:	20000162 	.word	0x20000162
 8008ab8:	20000172 	.word	0x20000172

08008abc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b087      	sub	sp, #28
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008ace:	2300      	movs	r3, #0
 8008ad0:	75fb      	strb	r3, [r7, #23]
 8008ad2:	e027      	b.n	8008b24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	0f1b      	lsrs	r3, r3, #28
 8008ad8:	2b09      	cmp	r3, #9
 8008ada:	d80b      	bhi.n	8008af4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	0f1b      	lsrs	r3, r3, #28
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	7dfb      	ldrb	r3, [r7, #23]
 8008ae4:	005b      	lsls	r3, r3, #1
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	440b      	add	r3, r1
 8008aec:	3230      	adds	r2, #48	; 0x30
 8008aee:	b2d2      	uxtb	r2, r2
 8008af0:	701a      	strb	r2, [r3, #0]
 8008af2:	e00a      	b.n	8008b0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	0f1b      	lsrs	r3, r3, #28
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	7dfb      	ldrb	r3, [r7, #23]
 8008afc:	005b      	lsls	r3, r3, #1
 8008afe:	4619      	mov	r1, r3
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	440b      	add	r3, r1
 8008b04:	3237      	adds	r2, #55	; 0x37
 8008b06:	b2d2      	uxtb	r2, r2
 8008b08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	011b      	lsls	r3, r3, #4
 8008b0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b10:	7dfb      	ldrb	r3, [r7, #23]
 8008b12:	005b      	lsls	r3, r3, #1
 8008b14:	3301      	adds	r3, #1
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	4413      	add	r3, r2
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b1e:	7dfb      	ldrb	r3, [r7, #23]
 8008b20:	3301      	adds	r3, #1
 8008b22:	75fb      	strb	r3, [r7, #23]
 8008b24:	7dfa      	ldrb	r2, [r7, #23]
 8008b26:	79fb      	ldrb	r3, [r7, #7]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d3d3      	bcc.n	8008ad4 <IntToUnicode+0x18>
  }
}
 8008b2c:	bf00      	nop
 8008b2e:	bf00      	nop
 8008b30:	371c      	adds	r7, #28
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bc80      	pop	{r7}
 8008b36:	4770      	bx	lr

08008b38 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8008b44:	78fb      	ldrb	r3, [r7, #3]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d106      	bne.n	8008b58 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8008b4a:	4b09      	ldr	r3, [pc, #36]	; (8008b70 <HAL_PCDEx_SetConnectionState+0x38>)
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	4a08      	ldr	r2, [pc, #32]	; (8008b70 <HAL_PCDEx_SetConnectionState+0x38>)
 8008b50:	f043 0301 	orr.w	r3, r3, #1
 8008b54:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8008b56:	e005      	b.n	8008b64 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8008b58:	4b05      	ldr	r3, [pc, #20]	; (8008b70 <HAL_PCDEx_SetConnectionState+0x38>)
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	4a04      	ldr	r2, [pc, #16]	; (8008b70 <HAL_PCDEx_SetConnectionState+0x38>)
 8008b5e:	f023 0301 	bic.w	r3, r3, #1
 8008b62:	6053      	str	r3, [r2, #4]
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bc80      	pop	{r7}
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	40010000 	.word	0x40010000

08008b74 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a0d      	ldr	r2, [pc, #52]	; (8008bb8 <HAL_PCD_MspInit+0x44>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d113      	bne.n	8008bae <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008b86:	4b0d      	ldr	r3, [pc, #52]	; (8008bbc <HAL_PCD_MspInit+0x48>)
 8008b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8a:	4a0c      	ldr	r2, [pc, #48]	; (8008bbc <HAL_PCD_MspInit+0x48>)
 8008b8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008b90:	6253      	str	r3, [r2, #36]	; 0x24
 8008b92:	4b0a      	ldr	r3, [pc, #40]	; (8008bbc <HAL_PCD_MspInit+0x48>)
 8008b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b9a:	60fb      	str	r3, [r7, #12]
 8008b9c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	2014      	movs	r0, #20
 8008ba4:	f7f8 f8af 	bl	8000d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008ba8:	2014      	movs	r0, #20
 8008baa:	f7f8 f8c8 	bl	8000d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008bae:	bf00      	nop
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	40005c00 	.word	0x40005c00
 8008bbc:	40023800 	.word	0x40023800

08008bc0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	4610      	mov	r0, r2
 8008bd8:	f7fe fc7d 	bl	80074d6 <USBD_LL_SetupStage>
}
 8008bdc:	bf00      	nop
 8008bde:	3708      	adds	r7, #8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	460b      	mov	r3, r1
 8008bee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008bf6:	78fa      	ldrb	r2, [r7, #3]
 8008bf8:	6879      	ldr	r1, [r7, #4]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	00db      	lsls	r3, r3, #3
 8008c02:	440b      	add	r3, r1
 8008c04:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	78fb      	ldrb	r3, [r7, #3]
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	f7fe fcaf 	bl	8007570 <USBD_LL_DataOutStage>
}
 8008c12:	bf00      	nop
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b082      	sub	sp, #8
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
 8008c22:	460b      	mov	r3, r1
 8008c24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008c2c:	78fa      	ldrb	r2, [r7, #3]
 8008c2e:	6879      	ldr	r1, [r7, #4]
 8008c30:	4613      	mov	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	4413      	add	r3, r2
 8008c36:	00db      	lsls	r3, r3, #3
 8008c38:	440b      	add	r3, r1
 8008c3a:	333c      	adds	r3, #60	; 0x3c
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	78fb      	ldrb	r3, [r7, #3]
 8008c40:	4619      	mov	r1, r3
 8008c42:	f7fe fd06 	bl	8007652 <USBD_LL_DataInStage>
}
 8008c46:	bf00      	nop
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b082      	sub	sp, #8
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7fe fe11 	bl	8007884 <USBD_LL_SOF>
}
 8008c62:	bf00      	nop
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b084      	sub	sp, #16
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008c72:	2301      	movs	r3, #1
 8008c74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d001      	beq.n	8008c82 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008c7e:	f7f7 fd8b 	bl	8000798 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008c88:	7bfa      	ldrb	r2, [r7, #15]
 8008c8a:	4611      	mov	r1, r2
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7fe fdc6 	bl	800781e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fe fd7f 	bl	800779c <USBD_LL_Reset>
}
 8008c9e:	bf00      	nop
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
	...

08008ca8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fe fdc0 	bl	800783c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d005      	beq.n	8008cd0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008cc4:	4b04      	ldr	r3, [pc, #16]	; (8008cd8 <HAL_PCD_SuspendCallback+0x30>)
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	4a03      	ldr	r2, [pc, #12]	; (8008cd8 <HAL_PCD_SuspendCallback+0x30>)
 8008cca:	f043 0306 	orr.w	r3, r3, #6
 8008cce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008cd0:	bf00      	nop
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	e000ed00 	.word	0xe000ed00

08008cdc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7fe fdba 	bl	8007864 <USBD_LL_Resume>
}
 8008cf0:	bf00      	nop
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008d00:	4a28      	ldr	r2, [pc, #160]	; (8008da4 <USBD_LL_Init+0xac>)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a26      	ldr	r2, [pc, #152]	; (8008da4 <USBD_LL_Init+0xac>)
 8008d0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8008d10:	4b24      	ldr	r3, [pc, #144]	; (8008da4 <USBD_LL_Init+0xac>)
 8008d12:	4a25      	ldr	r2, [pc, #148]	; (8008da8 <USBD_LL_Init+0xb0>)
 8008d14:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008d16:	4b23      	ldr	r3, [pc, #140]	; (8008da4 <USBD_LL_Init+0xac>)
 8008d18:	2208      	movs	r2, #8
 8008d1a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008d1c:	4b21      	ldr	r3, [pc, #132]	; (8008da4 <USBD_LL_Init+0xac>)
 8008d1e:	2202      	movs	r2, #2
 8008d20:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008d22:	4b20      	ldr	r3, [pc, #128]	; (8008da4 <USBD_LL_Init+0xac>)
 8008d24:	2202      	movs	r2, #2
 8008d26:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008d28:	4b1e      	ldr	r3, [pc, #120]	; (8008da4 <USBD_LL_Init+0xac>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008d2e:	4b1d      	ldr	r3, [pc, #116]	; (8008da4 <USBD_LL_Init+0xac>)
 8008d30:	2200      	movs	r2, #0
 8008d32:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008d34:	481b      	ldr	r0, [pc, #108]	; (8008da4 <USBD_LL_Init+0xac>)
 8008d36:	f7f8 fb29 	bl	800138c <HAL_PCD_Init>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d001      	beq.n	8008d44 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008d40:	f7f7 fd2a 	bl	8000798 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008d4a:	2318      	movs	r3, #24
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	2100      	movs	r1, #0
 8008d50:	f7f9 ff06 	bl	8002b60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008d5a:	2358      	movs	r3, #88	; 0x58
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	2180      	movs	r1, #128	; 0x80
 8008d60:	f7f9 fefe 	bl	8002b60 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008d6a:	23c0      	movs	r3, #192	; 0xc0
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	2181      	movs	r1, #129	; 0x81
 8008d70:	f7f9 fef6 	bl	8002b60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008d7a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008d7e:	2200      	movs	r2, #0
 8008d80:	2101      	movs	r1, #1
 8008d82:	f7f9 feed 	bl	8002b60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d90:	2200      	movs	r2, #0
 8008d92:	2182      	movs	r1, #130	; 0x82
 8008d94:	f7f9 fee4 	bl	8002b60 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	20000f54 	.word	0x20000f54
 8008da8:	40005c00 	.word	0x40005c00

08008dac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008db8:	2300      	movs	r3, #0
 8008dba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7f8 fbc0 	bl	8001548 <HAL_PCD_Start>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f000 f944 	bl	800905c <USBD_Get_USB_Status>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b084      	sub	sp, #16
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	4608      	mov	r0, r1
 8008dec:	4611      	mov	r1, r2
 8008dee:	461a      	mov	r2, r3
 8008df0:	4603      	mov	r3, r0
 8008df2:	70fb      	strb	r3, [r7, #3]
 8008df4:	460b      	mov	r3, r1
 8008df6:	70bb      	strb	r3, [r7, #2]
 8008df8:	4613      	mov	r3, r2
 8008dfa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008e0a:	78bb      	ldrb	r3, [r7, #2]
 8008e0c:	883a      	ldrh	r2, [r7, #0]
 8008e0e:	78f9      	ldrb	r1, [r7, #3]
 8008e10:	f7f8 fcdc 	bl	80017cc <HAL_PCD_EP_Open>
 8008e14:	4603      	mov	r3, r0
 8008e16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e18:	7bfb      	ldrb	r3, [r7, #15]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 f91e 	bl	800905c <USBD_Get_USB_Status>
 8008e20:	4603      	mov	r3, r0
 8008e22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e24:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b084      	sub	sp, #16
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
 8008e36:	460b      	mov	r3, r1
 8008e38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008e48:	78fa      	ldrb	r2, [r7, #3]
 8008e4a:	4611      	mov	r1, r2
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7f8 fd23 	bl	8001898 <HAL_PCD_EP_Close>
 8008e52:	4603      	mov	r3, r0
 8008e54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e56:	7bfb      	ldrb	r3, [r7, #15]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 f8ff 	bl	800905c <USBD_Get_USB_Status>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e62:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008e86:	78fa      	ldrb	r2, [r7, #3]
 8008e88:	4611      	mov	r1, r2
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7f8 fde3 	bl	8001a56 <HAL_PCD_EP_SetStall>
 8008e90:	4603      	mov	r3, r0
 8008e92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
 8008e96:	4618      	mov	r0, r3
 8008e98:	f000 f8e0 	bl	800905c <USBD_Get_USB_Status>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ea0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b084      	sub	sp, #16
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008ec4:	78fa      	ldrb	r2, [r7, #3]
 8008ec6:	4611      	mov	r1, r2
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7f8 fe16 	bl	8001afa <HAL_PCD_EP_ClrStall>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ed2:	7bfb      	ldrb	r3, [r7, #15]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f000 f8c1 	bl	800905c <USBD_Get_USB_Status>
 8008eda:	4603      	mov	r3, r0
 8008edc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ede:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008efa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008efc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	da0c      	bge.n	8008f1e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008f04:	78fb      	ldrb	r3, [r7, #3]
 8008f06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f0a:	68f9      	ldr	r1, [r7, #12]
 8008f0c:	1c5a      	adds	r2, r3, #1
 8008f0e:	4613      	mov	r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4413      	add	r3, r2
 8008f14:	00db      	lsls	r3, r3, #3
 8008f16:	440b      	add	r3, r1
 8008f18:	3302      	adds	r3, #2
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	e00b      	b.n	8008f36 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008f1e:	78fb      	ldrb	r3, [r7, #3]
 8008f20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f24:	68f9      	ldr	r1, [r7, #12]
 8008f26:	4613      	mov	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	00db      	lsls	r3, r3, #3
 8008f2e:	440b      	add	r3, r1
 8008f30:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008f34:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3714      	adds	r7, #20
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bc80      	pop	{r7}
 8008f3e:	4770      	bx	lr

08008f40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008f5a:	78fa      	ldrb	r2, [r7, #3]
 8008f5c:	4611      	mov	r1, r2
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7f8 fc0f 	bl	8001782 <HAL_PCD_SetAddress>
 8008f64:	4603      	mov	r3, r0
 8008f66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f68:	7bfb      	ldrb	r3, [r7, #15]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f000 f876 	bl	800905c <USBD_Get_USB_Status>
 8008f70:	4603      	mov	r3, r0
 8008f72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f74:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b086      	sub	sp, #24
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	60f8      	str	r0, [r7, #12]
 8008f86:	607a      	str	r2, [r7, #4]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	72fb      	strb	r3, [r7, #11]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f92:	2300      	movs	r3, #0
 8008f94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008fa0:	893b      	ldrh	r3, [r7, #8]
 8008fa2:	7af9      	ldrb	r1, [r7, #11]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	f7f8 fd13 	bl	80019d0 <HAL_PCD_EP_Transmit>
 8008faa:	4603      	mov	r3, r0
 8008fac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fae:	7dfb      	ldrb	r3, [r7, #23]
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 f853 	bl	800905c <USBD_Get_USB_Status>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008fba:	7dbb      	ldrb	r3, [r7, #22]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3718      	adds	r7, #24
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	607a      	str	r2, [r7, #4]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	72fb      	strb	r3, [r7, #11]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008fe6:	893b      	ldrh	r3, [r7, #8]
 8008fe8:	7af9      	ldrb	r1, [r7, #11]
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	f7f8 fc9c 	bl	8001928 <HAL_PCD_EP_Receive>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ff4:	7dfb      	ldrb	r3, [r7, #23]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 f830 	bl	800905c <USBD_Get_USB_Status>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009000:	7dbb      	ldrb	r3, [r7, #22]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3718      	adds	r7, #24
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b082      	sub	sp, #8
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
 8009012:	460b      	mov	r3, r1
 8009014:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800901c:	78fa      	ldrb	r2, [r7, #3]
 800901e:	4611      	mov	r1, r2
 8009020:	4618      	mov	r0, r3
 8009022:	f7f8 fcbe 	bl	80019a2 <HAL_PCD_EP_GetRxCount>
 8009026:	4603      	mov	r3, r0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009038:	4b02      	ldr	r3, [pc, #8]	; (8009044 <USBD_static_malloc+0x14>)
}
 800903a:	4618      	mov	r0, r3
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	bc80      	pop	{r7}
 8009042:	4770      	bx	lr
 8009044:	20001240 	.word	0x20001240

08009048 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]

}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	bc80      	pop	{r7}
 8009058:	4770      	bx	lr
	...

0800905c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	4603      	mov	r3, r0
 8009064:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009066:	2300      	movs	r3, #0
 8009068:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800906a:	79fb      	ldrb	r3, [r7, #7]
 800906c:	2b03      	cmp	r3, #3
 800906e:	d817      	bhi.n	80090a0 <USBD_Get_USB_Status+0x44>
 8009070:	a201      	add	r2, pc, #4	; (adr r2, 8009078 <USBD_Get_USB_Status+0x1c>)
 8009072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009076:	bf00      	nop
 8009078:	08009089 	.word	0x08009089
 800907c:	0800908f 	.word	0x0800908f
 8009080:	08009095 	.word	0x08009095
 8009084:	0800909b 	.word	0x0800909b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009088:	2300      	movs	r3, #0
 800908a:	73fb      	strb	r3, [r7, #15]
    break;
 800908c:	e00b      	b.n	80090a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800908e:	2302      	movs	r3, #2
 8009090:	73fb      	strb	r3, [r7, #15]
    break;
 8009092:	e008      	b.n	80090a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009094:	2301      	movs	r3, #1
 8009096:	73fb      	strb	r3, [r7, #15]
    break;
 8009098:	e005      	b.n	80090a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800909a:	2302      	movs	r3, #2
 800909c:	73fb      	strb	r3, [r7, #15]
    break;
 800909e:	e002      	b.n	80090a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80090a0:	2302      	movs	r3, #2
 80090a2:	73fb      	strb	r3, [r7, #15]
    break;
 80090a4:	bf00      	nop
  }
  return usb_status;
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3714      	adds	r7, #20
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bc80      	pop	{r7}
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop

080090b4 <__errno>:
 80090b4:	4b01      	ldr	r3, [pc, #4]	; (80090bc <__errno+0x8>)
 80090b6:	6818      	ldr	r0, [r3, #0]
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	2000017c 	.word	0x2000017c

080090c0 <__libc_init_array>:
 80090c0:	b570      	push	{r4, r5, r6, lr}
 80090c2:	2600      	movs	r6, #0
 80090c4:	4d0c      	ldr	r5, [pc, #48]	; (80090f8 <__libc_init_array+0x38>)
 80090c6:	4c0d      	ldr	r4, [pc, #52]	; (80090fc <__libc_init_array+0x3c>)
 80090c8:	1b64      	subs	r4, r4, r5
 80090ca:	10a4      	asrs	r4, r4, #2
 80090cc:	42a6      	cmp	r6, r4
 80090ce:	d109      	bne.n	80090e4 <__libc_init_array+0x24>
 80090d0:	f000 fc9c 	bl	8009a0c <_init>
 80090d4:	2600      	movs	r6, #0
 80090d6:	4d0a      	ldr	r5, [pc, #40]	; (8009100 <__libc_init_array+0x40>)
 80090d8:	4c0a      	ldr	r4, [pc, #40]	; (8009104 <__libc_init_array+0x44>)
 80090da:	1b64      	subs	r4, r4, r5
 80090dc:	10a4      	asrs	r4, r4, #2
 80090de:	42a6      	cmp	r6, r4
 80090e0:	d105      	bne.n	80090ee <__libc_init_array+0x2e>
 80090e2:	bd70      	pop	{r4, r5, r6, pc}
 80090e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80090e8:	4798      	blx	r3
 80090ea:	3601      	adds	r6, #1
 80090ec:	e7ee      	b.n	80090cc <__libc_init_array+0xc>
 80090ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80090f2:	4798      	blx	r3
 80090f4:	3601      	adds	r6, #1
 80090f6:	e7f2      	b.n	80090de <__libc_init_array+0x1e>
 80090f8:	08009adc 	.word	0x08009adc
 80090fc:	08009adc 	.word	0x08009adc
 8009100:	08009adc 	.word	0x08009adc
 8009104:	08009ae0 	.word	0x08009ae0

08009108 <memset>:
 8009108:	4603      	mov	r3, r0
 800910a:	4402      	add	r2, r0
 800910c:	4293      	cmp	r3, r2
 800910e:	d100      	bne.n	8009112 <memset+0xa>
 8009110:	4770      	bx	lr
 8009112:	f803 1b01 	strb.w	r1, [r3], #1
 8009116:	e7f9      	b.n	800910c <memset+0x4>

08009118 <siprintf>:
 8009118:	b40e      	push	{r1, r2, r3}
 800911a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800911e:	b500      	push	{lr}
 8009120:	b09c      	sub	sp, #112	; 0x70
 8009122:	ab1d      	add	r3, sp, #116	; 0x74
 8009124:	9002      	str	r0, [sp, #8]
 8009126:	9006      	str	r0, [sp, #24]
 8009128:	9107      	str	r1, [sp, #28]
 800912a:	9104      	str	r1, [sp, #16]
 800912c:	4808      	ldr	r0, [pc, #32]	; (8009150 <siprintf+0x38>)
 800912e:	4909      	ldr	r1, [pc, #36]	; (8009154 <siprintf+0x3c>)
 8009130:	f853 2b04 	ldr.w	r2, [r3], #4
 8009134:	9105      	str	r1, [sp, #20]
 8009136:	6800      	ldr	r0, [r0, #0]
 8009138:	a902      	add	r1, sp, #8
 800913a:	9301      	str	r3, [sp, #4]
 800913c:	f000 f868 	bl	8009210 <_svfiprintf_r>
 8009140:	2200      	movs	r2, #0
 8009142:	9b02      	ldr	r3, [sp, #8]
 8009144:	701a      	strb	r2, [r3, #0]
 8009146:	b01c      	add	sp, #112	; 0x70
 8009148:	f85d eb04 	ldr.w	lr, [sp], #4
 800914c:	b003      	add	sp, #12
 800914e:	4770      	bx	lr
 8009150:	2000017c 	.word	0x2000017c
 8009154:	ffff0208 	.word	0xffff0208

08009158 <__ssputs_r>:
 8009158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800915c:	688e      	ldr	r6, [r1, #8]
 800915e:	4682      	mov	sl, r0
 8009160:	429e      	cmp	r6, r3
 8009162:	460c      	mov	r4, r1
 8009164:	4690      	mov	r8, r2
 8009166:	461f      	mov	r7, r3
 8009168:	d838      	bhi.n	80091dc <__ssputs_r+0x84>
 800916a:	898a      	ldrh	r2, [r1, #12]
 800916c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009170:	d032      	beq.n	80091d8 <__ssputs_r+0x80>
 8009172:	6825      	ldr	r5, [r4, #0]
 8009174:	6909      	ldr	r1, [r1, #16]
 8009176:	3301      	adds	r3, #1
 8009178:	eba5 0901 	sub.w	r9, r5, r1
 800917c:	6965      	ldr	r5, [r4, #20]
 800917e:	444b      	add	r3, r9
 8009180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009184:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009188:	106d      	asrs	r5, r5, #1
 800918a:	429d      	cmp	r5, r3
 800918c:	bf38      	it	cc
 800918e:	461d      	movcc	r5, r3
 8009190:	0553      	lsls	r3, r2, #21
 8009192:	d531      	bpl.n	80091f8 <__ssputs_r+0xa0>
 8009194:	4629      	mov	r1, r5
 8009196:	f000 fb6f 	bl	8009878 <_malloc_r>
 800919a:	4606      	mov	r6, r0
 800919c:	b950      	cbnz	r0, 80091b4 <__ssputs_r+0x5c>
 800919e:	230c      	movs	r3, #12
 80091a0:	f04f 30ff 	mov.w	r0, #4294967295
 80091a4:	f8ca 3000 	str.w	r3, [sl]
 80091a8:	89a3      	ldrh	r3, [r4, #12]
 80091aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091ae:	81a3      	strh	r3, [r4, #12]
 80091b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091b4:	464a      	mov	r2, r9
 80091b6:	6921      	ldr	r1, [r4, #16]
 80091b8:	f000 face 	bl	8009758 <memcpy>
 80091bc:	89a3      	ldrh	r3, [r4, #12]
 80091be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091c6:	81a3      	strh	r3, [r4, #12]
 80091c8:	6126      	str	r6, [r4, #16]
 80091ca:	444e      	add	r6, r9
 80091cc:	6026      	str	r6, [r4, #0]
 80091ce:	463e      	mov	r6, r7
 80091d0:	6165      	str	r5, [r4, #20]
 80091d2:	eba5 0509 	sub.w	r5, r5, r9
 80091d6:	60a5      	str	r5, [r4, #8]
 80091d8:	42be      	cmp	r6, r7
 80091da:	d900      	bls.n	80091de <__ssputs_r+0x86>
 80091dc:	463e      	mov	r6, r7
 80091de:	4632      	mov	r2, r6
 80091e0:	4641      	mov	r1, r8
 80091e2:	6820      	ldr	r0, [r4, #0]
 80091e4:	f000 fac6 	bl	8009774 <memmove>
 80091e8:	68a3      	ldr	r3, [r4, #8]
 80091ea:	2000      	movs	r0, #0
 80091ec:	1b9b      	subs	r3, r3, r6
 80091ee:	60a3      	str	r3, [r4, #8]
 80091f0:	6823      	ldr	r3, [r4, #0]
 80091f2:	4433      	add	r3, r6
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	e7db      	b.n	80091b0 <__ssputs_r+0x58>
 80091f8:	462a      	mov	r2, r5
 80091fa:	f000 fbb1 	bl	8009960 <_realloc_r>
 80091fe:	4606      	mov	r6, r0
 8009200:	2800      	cmp	r0, #0
 8009202:	d1e1      	bne.n	80091c8 <__ssputs_r+0x70>
 8009204:	4650      	mov	r0, sl
 8009206:	6921      	ldr	r1, [r4, #16]
 8009208:	f000 face 	bl	80097a8 <_free_r>
 800920c:	e7c7      	b.n	800919e <__ssputs_r+0x46>
	...

08009210 <_svfiprintf_r>:
 8009210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009214:	4698      	mov	r8, r3
 8009216:	898b      	ldrh	r3, [r1, #12]
 8009218:	4607      	mov	r7, r0
 800921a:	061b      	lsls	r3, r3, #24
 800921c:	460d      	mov	r5, r1
 800921e:	4614      	mov	r4, r2
 8009220:	b09d      	sub	sp, #116	; 0x74
 8009222:	d50e      	bpl.n	8009242 <_svfiprintf_r+0x32>
 8009224:	690b      	ldr	r3, [r1, #16]
 8009226:	b963      	cbnz	r3, 8009242 <_svfiprintf_r+0x32>
 8009228:	2140      	movs	r1, #64	; 0x40
 800922a:	f000 fb25 	bl	8009878 <_malloc_r>
 800922e:	6028      	str	r0, [r5, #0]
 8009230:	6128      	str	r0, [r5, #16]
 8009232:	b920      	cbnz	r0, 800923e <_svfiprintf_r+0x2e>
 8009234:	230c      	movs	r3, #12
 8009236:	603b      	str	r3, [r7, #0]
 8009238:	f04f 30ff 	mov.w	r0, #4294967295
 800923c:	e0d1      	b.n	80093e2 <_svfiprintf_r+0x1d2>
 800923e:	2340      	movs	r3, #64	; 0x40
 8009240:	616b      	str	r3, [r5, #20]
 8009242:	2300      	movs	r3, #0
 8009244:	9309      	str	r3, [sp, #36]	; 0x24
 8009246:	2320      	movs	r3, #32
 8009248:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800924c:	2330      	movs	r3, #48	; 0x30
 800924e:	f04f 0901 	mov.w	r9, #1
 8009252:	f8cd 800c 	str.w	r8, [sp, #12]
 8009256:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80093fc <_svfiprintf_r+0x1ec>
 800925a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800925e:	4623      	mov	r3, r4
 8009260:	469a      	mov	sl, r3
 8009262:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009266:	b10a      	cbz	r2, 800926c <_svfiprintf_r+0x5c>
 8009268:	2a25      	cmp	r2, #37	; 0x25
 800926a:	d1f9      	bne.n	8009260 <_svfiprintf_r+0x50>
 800926c:	ebba 0b04 	subs.w	fp, sl, r4
 8009270:	d00b      	beq.n	800928a <_svfiprintf_r+0x7a>
 8009272:	465b      	mov	r3, fp
 8009274:	4622      	mov	r2, r4
 8009276:	4629      	mov	r1, r5
 8009278:	4638      	mov	r0, r7
 800927a:	f7ff ff6d 	bl	8009158 <__ssputs_r>
 800927e:	3001      	adds	r0, #1
 8009280:	f000 80aa 	beq.w	80093d8 <_svfiprintf_r+0x1c8>
 8009284:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009286:	445a      	add	r2, fp
 8009288:	9209      	str	r2, [sp, #36]	; 0x24
 800928a:	f89a 3000 	ldrb.w	r3, [sl]
 800928e:	2b00      	cmp	r3, #0
 8009290:	f000 80a2 	beq.w	80093d8 <_svfiprintf_r+0x1c8>
 8009294:	2300      	movs	r3, #0
 8009296:	f04f 32ff 	mov.w	r2, #4294967295
 800929a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800929e:	f10a 0a01 	add.w	sl, sl, #1
 80092a2:	9304      	str	r3, [sp, #16]
 80092a4:	9307      	str	r3, [sp, #28]
 80092a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092aa:	931a      	str	r3, [sp, #104]	; 0x68
 80092ac:	4654      	mov	r4, sl
 80092ae:	2205      	movs	r2, #5
 80092b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b4:	4851      	ldr	r0, [pc, #324]	; (80093fc <_svfiprintf_r+0x1ec>)
 80092b6:	f000 fa41 	bl	800973c <memchr>
 80092ba:	9a04      	ldr	r2, [sp, #16]
 80092bc:	b9d8      	cbnz	r0, 80092f6 <_svfiprintf_r+0xe6>
 80092be:	06d0      	lsls	r0, r2, #27
 80092c0:	bf44      	itt	mi
 80092c2:	2320      	movmi	r3, #32
 80092c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092c8:	0711      	lsls	r1, r2, #28
 80092ca:	bf44      	itt	mi
 80092cc:	232b      	movmi	r3, #43	; 0x2b
 80092ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092d2:	f89a 3000 	ldrb.w	r3, [sl]
 80092d6:	2b2a      	cmp	r3, #42	; 0x2a
 80092d8:	d015      	beq.n	8009306 <_svfiprintf_r+0xf6>
 80092da:	4654      	mov	r4, sl
 80092dc:	2000      	movs	r0, #0
 80092de:	f04f 0c0a 	mov.w	ip, #10
 80092e2:	9a07      	ldr	r2, [sp, #28]
 80092e4:	4621      	mov	r1, r4
 80092e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092ea:	3b30      	subs	r3, #48	; 0x30
 80092ec:	2b09      	cmp	r3, #9
 80092ee:	d94e      	bls.n	800938e <_svfiprintf_r+0x17e>
 80092f0:	b1b0      	cbz	r0, 8009320 <_svfiprintf_r+0x110>
 80092f2:	9207      	str	r2, [sp, #28]
 80092f4:	e014      	b.n	8009320 <_svfiprintf_r+0x110>
 80092f6:	eba0 0308 	sub.w	r3, r0, r8
 80092fa:	fa09 f303 	lsl.w	r3, r9, r3
 80092fe:	4313      	orrs	r3, r2
 8009300:	46a2      	mov	sl, r4
 8009302:	9304      	str	r3, [sp, #16]
 8009304:	e7d2      	b.n	80092ac <_svfiprintf_r+0x9c>
 8009306:	9b03      	ldr	r3, [sp, #12]
 8009308:	1d19      	adds	r1, r3, #4
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	9103      	str	r1, [sp, #12]
 800930e:	2b00      	cmp	r3, #0
 8009310:	bfbb      	ittet	lt
 8009312:	425b      	neglt	r3, r3
 8009314:	f042 0202 	orrlt.w	r2, r2, #2
 8009318:	9307      	strge	r3, [sp, #28]
 800931a:	9307      	strlt	r3, [sp, #28]
 800931c:	bfb8      	it	lt
 800931e:	9204      	strlt	r2, [sp, #16]
 8009320:	7823      	ldrb	r3, [r4, #0]
 8009322:	2b2e      	cmp	r3, #46	; 0x2e
 8009324:	d10c      	bne.n	8009340 <_svfiprintf_r+0x130>
 8009326:	7863      	ldrb	r3, [r4, #1]
 8009328:	2b2a      	cmp	r3, #42	; 0x2a
 800932a:	d135      	bne.n	8009398 <_svfiprintf_r+0x188>
 800932c:	9b03      	ldr	r3, [sp, #12]
 800932e:	3402      	adds	r4, #2
 8009330:	1d1a      	adds	r2, r3, #4
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	9203      	str	r2, [sp, #12]
 8009336:	2b00      	cmp	r3, #0
 8009338:	bfb8      	it	lt
 800933a:	f04f 33ff 	movlt.w	r3, #4294967295
 800933e:	9305      	str	r3, [sp, #20]
 8009340:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009400 <_svfiprintf_r+0x1f0>
 8009344:	2203      	movs	r2, #3
 8009346:	4650      	mov	r0, sl
 8009348:	7821      	ldrb	r1, [r4, #0]
 800934a:	f000 f9f7 	bl	800973c <memchr>
 800934e:	b140      	cbz	r0, 8009362 <_svfiprintf_r+0x152>
 8009350:	2340      	movs	r3, #64	; 0x40
 8009352:	eba0 000a 	sub.w	r0, r0, sl
 8009356:	fa03 f000 	lsl.w	r0, r3, r0
 800935a:	9b04      	ldr	r3, [sp, #16]
 800935c:	3401      	adds	r4, #1
 800935e:	4303      	orrs	r3, r0
 8009360:	9304      	str	r3, [sp, #16]
 8009362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009366:	2206      	movs	r2, #6
 8009368:	4826      	ldr	r0, [pc, #152]	; (8009404 <_svfiprintf_r+0x1f4>)
 800936a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800936e:	f000 f9e5 	bl	800973c <memchr>
 8009372:	2800      	cmp	r0, #0
 8009374:	d038      	beq.n	80093e8 <_svfiprintf_r+0x1d8>
 8009376:	4b24      	ldr	r3, [pc, #144]	; (8009408 <_svfiprintf_r+0x1f8>)
 8009378:	bb1b      	cbnz	r3, 80093c2 <_svfiprintf_r+0x1b2>
 800937a:	9b03      	ldr	r3, [sp, #12]
 800937c:	3307      	adds	r3, #7
 800937e:	f023 0307 	bic.w	r3, r3, #7
 8009382:	3308      	adds	r3, #8
 8009384:	9303      	str	r3, [sp, #12]
 8009386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009388:	4433      	add	r3, r6
 800938a:	9309      	str	r3, [sp, #36]	; 0x24
 800938c:	e767      	b.n	800925e <_svfiprintf_r+0x4e>
 800938e:	460c      	mov	r4, r1
 8009390:	2001      	movs	r0, #1
 8009392:	fb0c 3202 	mla	r2, ip, r2, r3
 8009396:	e7a5      	b.n	80092e4 <_svfiprintf_r+0xd4>
 8009398:	2300      	movs	r3, #0
 800939a:	f04f 0c0a 	mov.w	ip, #10
 800939e:	4619      	mov	r1, r3
 80093a0:	3401      	adds	r4, #1
 80093a2:	9305      	str	r3, [sp, #20]
 80093a4:	4620      	mov	r0, r4
 80093a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093aa:	3a30      	subs	r2, #48	; 0x30
 80093ac:	2a09      	cmp	r2, #9
 80093ae:	d903      	bls.n	80093b8 <_svfiprintf_r+0x1a8>
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d0c5      	beq.n	8009340 <_svfiprintf_r+0x130>
 80093b4:	9105      	str	r1, [sp, #20]
 80093b6:	e7c3      	b.n	8009340 <_svfiprintf_r+0x130>
 80093b8:	4604      	mov	r4, r0
 80093ba:	2301      	movs	r3, #1
 80093bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80093c0:	e7f0      	b.n	80093a4 <_svfiprintf_r+0x194>
 80093c2:	ab03      	add	r3, sp, #12
 80093c4:	9300      	str	r3, [sp, #0]
 80093c6:	462a      	mov	r2, r5
 80093c8:	4638      	mov	r0, r7
 80093ca:	4b10      	ldr	r3, [pc, #64]	; (800940c <_svfiprintf_r+0x1fc>)
 80093cc:	a904      	add	r1, sp, #16
 80093ce:	f3af 8000 	nop.w
 80093d2:	1c42      	adds	r2, r0, #1
 80093d4:	4606      	mov	r6, r0
 80093d6:	d1d6      	bne.n	8009386 <_svfiprintf_r+0x176>
 80093d8:	89ab      	ldrh	r3, [r5, #12]
 80093da:	065b      	lsls	r3, r3, #25
 80093dc:	f53f af2c 	bmi.w	8009238 <_svfiprintf_r+0x28>
 80093e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093e2:	b01d      	add	sp, #116	; 0x74
 80093e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e8:	ab03      	add	r3, sp, #12
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	462a      	mov	r2, r5
 80093ee:	4638      	mov	r0, r7
 80093f0:	4b06      	ldr	r3, [pc, #24]	; (800940c <_svfiprintf_r+0x1fc>)
 80093f2:	a904      	add	r1, sp, #16
 80093f4:	f000 f87c 	bl	80094f0 <_printf_i>
 80093f8:	e7eb      	b.n	80093d2 <_svfiprintf_r+0x1c2>
 80093fa:	bf00      	nop
 80093fc:	08009aa0 	.word	0x08009aa0
 8009400:	08009aa6 	.word	0x08009aa6
 8009404:	08009aaa 	.word	0x08009aaa
 8009408:	00000000 	.word	0x00000000
 800940c:	08009159 	.word	0x08009159

08009410 <_printf_common>:
 8009410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009414:	4616      	mov	r6, r2
 8009416:	4699      	mov	r9, r3
 8009418:	688a      	ldr	r2, [r1, #8]
 800941a:	690b      	ldr	r3, [r1, #16]
 800941c:	4607      	mov	r7, r0
 800941e:	4293      	cmp	r3, r2
 8009420:	bfb8      	it	lt
 8009422:	4613      	movlt	r3, r2
 8009424:	6033      	str	r3, [r6, #0]
 8009426:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800942a:	460c      	mov	r4, r1
 800942c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009430:	b10a      	cbz	r2, 8009436 <_printf_common+0x26>
 8009432:	3301      	adds	r3, #1
 8009434:	6033      	str	r3, [r6, #0]
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	0699      	lsls	r1, r3, #26
 800943a:	bf42      	ittt	mi
 800943c:	6833      	ldrmi	r3, [r6, #0]
 800943e:	3302      	addmi	r3, #2
 8009440:	6033      	strmi	r3, [r6, #0]
 8009442:	6825      	ldr	r5, [r4, #0]
 8009444:	f015 0506 	ands.w	r5, r5, #6
 8009448:	d106      	bne.n	8009458 <_printf_common+0x48>
 800944a:	f104 0a19 	add.w	sl, r4, #25
 800944e:	68e3      	ldr	r3, [r4, #12]
 8009450:	6832      	ldr	r2, [r6, #0]
 8009452:	1a9b      	subs	r3, r3, r2
 8009454:	42ab      	cmp	r3, r5
 8009456:	dc28      	bgt.n	80094aa <_printf_common+0x9a>
 8009458:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800945c:	1e13      	subs	r3, r2, #0
 800945e:	6822      	ldr	r2, [r4, #0]
 8009460:	bf18      	it	ne
 8009462:	2301      	movne	r3, #1
 8009464:	0692      	lsls	r2, r2, #26
 8009466:	d42d      	bmi.n	80094c4 <_printf_common+0xb4>
 8009468:	4649      	mov	r1, r9
 800946a:	4638      	mov	r0, r7
 800946c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009470:	47c0      	blx	r8
 8009472:	3001      	adds	r0, #1
 8009474:	d020      	beq.n	80094b8 <_printf_common+0xa8>
 8009476:	6823      	ldr	r3, [r4, #0]
 8009478:	68e5      	ldr	r5, [r4, #12]
 800947a:	f003 0306 	and.w	r3, r3, #6
 800947e:	2b04      	cmp	r3, #4
 8009480:	bf18      	it	ne
 8009482:	2500      	movne	r5, #0
 8009484:	6832      	ldr	r2, [r6, #0]
 8009486:	f04f 0600 	mov.w	r6, #0
 800948a:	68a3      	ldr	r3, [r4, #8]
 800948c:	bf08      	it	eq
 800948e:	1aad      	subeq	r5, r5, r2
 8009490:	6922      	ldr	r2, [r4, #16]
 8009492:	bf08      	it	eq
 8009494:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009498:	4293      	cmp	r3, r2
 800949a:	bfc4      	itt	gt
 800949c:	1a9b      	subgt	r3, r3, r2
 800949e:	18ed      	addgt	r5, r5, r3
 80094a0:	341a      	adds	r4, #26
 80094a2:	42b5      	cmp	r5, r6
 80094a4:	d11a      	bne.n	80094dc <_printf_common+0xcc>
 80094a6:	2000      	movs	r0, #0
 80094a8:	e008      	b.n	80094bc <_printf_common+0xac>
 80094aa:	2301      	movs	r3, #1
 80094ac:	4652      	mov	r2, sl
 80094ae:	4649      	mov	r1, r9
 80094b0:	4638      	mov	r0, r7
 80094b2:	47c0      	blx	r8
 80094b4:	3001      	adds	r0, #1
 80094b6:	d103      	bne.n	80094c0 <_printf_common+0xb0>
 80094b8:	f04f 30ff 	mov.w	r0, #4294967295
 80094bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094c0:	3501      	adds	r5, #1
 80094c2:	e7c4      	b.n	800944e <_printf_common+0x3e>
 80094c4:	2030      	movs	r0, #48	; 0x30
 80094c6:	18e1      	adds	r1, r4, r3
 80094c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094cc:	1c5a      	adds	r2, r3, #1
 80094ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094d2:	4422      	add	r2, r4
 80094d4:	3302      	adds	r3, #2
 80094d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094da:	e7c5      	b.n	8009468 <_printf_common+0x58>
 80094dc:	2301      	movs	r3, #1
 80094de:	4622      	mov	r2, r4
 80094e0:	4649      	mov	r1, r9
 80094e2:	4638      	mov	r0, r7
 80094e4:	47c0      	blx	r8
 80094e6:	3001      	adds	r0, #1
 80094e8:	d0e6      	beq.n	80094b8 <_printf_common+0xa8>
 80094ea:	3601      	adds	r6, #1
 80094ec:	e7d9      	b.n	80094a2 <_printf_common+0x92>
	...

080094f0 <_printf_i>:
 80094f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094f4:	7e0f      	ldrb	r7, [r1, #24]
 80094f6:	4691      	mov	r9, r2
 80094f8:	2f78      	cmp	r7, #120	; 0x78
 80094fa:	4680      	mov	r8, r0
 80094fc:	460c      	mov	r4, r1
 80094fe:	469a      	mov	sl, r3
 8009500:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009502:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009506:	d807      	bhi.n	8009518 <_printf_i+0x28>
 8009508:	2f62      	cmp	r7, #98	; 0x62
 800950a:	d80a      	bhi.n	8009522 <_printf_i+0x32>
 800950c:	2f00      	cmp	r7, #0
 800950e:	f000 80d9 	beq.w	80096c4 <_printf_i+0x1d4>
 8009512:	2f58      	cmp	r7, #88	; 0x58
 8009514:	f000 80a4 	beq.w	8009660 <_printf_i+0x170>
 8009518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800951c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009520:	e03a      	b.n	8009598 <_printf_i+0xa8>
 8009522:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009526:	2b15      	cmp	r3, #21
 8009528:	d8f6      	bhi.n	8009518 <_printf_i+0x28>
 800952a:	a101      	add	r1, pc, #4	; (adr r1, 8009530 <_printf_i+0x40>)
 800952c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009530:	08009589 	.word	0x08009589
 8009534:	0800959d 	.word	0x0800959d
 8009538:	08009519 	.word	0x08009519
 800953c:	08009519 	.word	0x08009519
 8009540:	08009519 	.word	0x08009519
 8009544:	08009519 	.word	0x08009519
 8009548:	0800959d 	.word	0x0800959d
 800954c:	08009519 	.word	0x08009519
 8009550:	08009519 	.word	0x08009519
 8009554:	08009519 	.word	0x08009519
 8009558:	08009519 	.word	0x08009519
 800955c:	080096ab 	.word	0x080096ab
 8009560:	080095cd 	.word	0x080095cd
 8009564:	0800968d 	.word	0x0800968d
 8009568:	08009519 	.word	0x08009519
 800956c:	08009519 	.word	0x08009519
 8009570:	080096cd 	.word	0x080096cd
 8009574:	08009519 	.word	0x08009519
 8009578:	080095cd 	.word	0x080095cd
 800957c:	08009519 	.word	0x08009519
 8009580:	08009519 	.word	0x08009519
 8009584:	08009695 	.word	0x08009695
 8009588:	682b      	ldr	r3, [r5, #0]
 800958a:	1d1a      	adds	r2, r3, #4
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	602a      	str	r2, [r5, #0]
 8009590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009594:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009598:	2301      	movs	r3, #1
 800959a:	e0a4      	b.n	80096e6 <_printf_i+0x1f6>
 800959c:	6820      	ldr	r0, [r4, #0]
 800959e:	6829      	ldr	r1, [r5, #0]
 80095a0:	0606      	lsls	r6, r0, #24
 80095a2:	f101 0304 	add.w	r3, r1, #4
 80095a6:	d50a      	bpl.n	80095be <_printf_i+0xce>
 80095a8:	680e      	ldr	r6, [r1, #0]
 80095aa:	602b      	str	r3, [r5, #0]
 80095ac:	2e00      	cmp	r6, #0
 80095ae:	da03      	bge.n	80095b8 <_printf_i+0xc8>
 80095b0:	232d      	movs	r3, #45	; 0x2d
 80095b2:	4276      	negs	r6, r6
 80095b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095b8:	230a      	movs	r3, #10
 80095ba:	485e      	ldr	r0, [pc, #376]	; (8009734 <_printf_i+0x244>)
 80095bc:	e019      	b.n	80095f2 <_printf_i+0x102>
 80095be:	680e      	ldr	r6, [r1, #0]
 80095c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80095c4:	602b      	str	r3, [r5, #0]
 80095c6:	bf18      	it	ne
 80095c8:	b236      	sxthne	r6, r6
 80095ca:	e7ef      	b.n	80095ac <_printf_i+0xbc>
 80095cc:	682b      	ldr	r3, [r5, #0]
 80095ce:	6820      	ldr	r0, [r4, #0]
 80095d0:	1d19      	adds	r1, r3, #4
 80095d2:	6029      	str	r1, [r5, #0]
 80095d4:	0601      	lsls	r1, r0, #24
 80095d6:	d501      	bpl.n	80095dc <_printf_i+0xec>
 80095d8:	681e      	ldr	r6, [r3, #0]
 80095da:	e002      	b.n	80095e2 <_printf_i+0xf2>
 80095dc:	0646      	lsls	r6, r0, #25
 80095de:	d5fb      	bpl.n	80095d8 <_printf_i+0xe8>
 80095e0:	881e      	ldrh	r6, [r3, #0]
 80095e2:	2f6f      	cmp	r7, #111	; 0x6f
 80095e4:	bf0c      	ite	eq
 80095e6:	2308      	moveq	r3, #8
 80095e8:	230a      	movne	r3, #10
 80095ea:	4852      	ldr	r0, [pc, #328]	; (8009734 <_printf_i+0x244>)
 80095ec:	2100      	movs	r1, #0
 80095ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095f2:	6865      	ldr	r5, [r4, #4]
 80095f4:	2d00      	cmp	r5, #0
 80095f6:	bfa8      	it	ge
 80095f8:	6821      	ldrge	r1, [r4, #0]
 80095fa:	60a5      	str	r5, [r4, #8]
 80095fc:	bfa4      	itt	ge
 80095fe:	f021 0104 	bicge.w	r1, r1, #4
 8009602:	6021      	strge	r1, [r4, #0]
 8009604:	b90e      	cbnz	r6, 800960a <_printf_i+0x11a>
 8009606:	2d00      	cmp	r5, #0
 8009608:	d04d      	beq.n	80096a6 <_printf_i+0x1b6>
 800960a:	4615      	mov	r5, r2
 800960c:	fbb6 f1f3 	udiv	r1, r6, r3
 8009610:	fb03 6711 	mls	r7, r3, r1, r6
 8009614:	5dc7      	ldrb	r7, [r0, r7]
 8009616:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800961a:	4637      	mov	r7, r6
 800961c:	42bb      	cmp	r3, r7
 800961e:	460e      	mov	r6, r1
 8009620:	d9f4      	bls.n	800960c <_printf_i+0x11c>
 8009622:	2b08      	cmp	r3, #8
 8009624:	d10b      	bne.n	800963e <_printf_i+0x14e>
 8009626:	6823      	ldr	r3, [r4, #0]
 8009628:	07de      	lsls	r6, r3, #31
 800962a:	d508      	bpl.n	800963e <_printf_i+0x14e>
 800962c:	6923      	ldr	r3, [r4, #16]
 800962e:	6861      	ldr	r1, [r4, #4]
 8009630:	4299      	cmp	r1, r3
 8009632:	bfde      	ittt	le
 8009634:	2330      	movle	r3, #48	; 0x30
 8009636:	f805 3c01 	strble.w	r3, [r5, #-1]
 800963a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800963e:	1b52      	subs	r2, r2, r5
 8009640:	6122      	str	r2, [r4, #16]
 8009642:	464b      	mov	r3, r9
 8009644:	4621      	mov	r1, r4
 8009646:	4640      	mov	r0, r8
 8009648:	f8cd a000 	str.w	sl, [sp]
 800964c:	aa03      	add	r2, sp, #12
 800964e:	f7ff fedf 	bl	8009410 <_printf_common>
 8009652:	3001      	adds	r0, #1
 8009654:	d14c      	bne.n	80096f0 <_printf_i+0x200>
 8009656:	f04f 30ff 	mov.w	r0, #4294967295
 800965a:	b004      	add	sp, #16
 800965c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009660:	4834      	ldr	r0, [pc, #208]	; (8009734 <_printf_i+0x244>)
 8009662:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009666:	6829      	ldr	r1, [r5, #0]
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	f851 6b04 	ldr.w	r6, [r1], #4
 800966e:	6029      	str	r1, [r5, #0]
 8009670:	061d      	lsls	r5, r3, #24
 8009672:	d514      	bpl.n	800969e <_printf_i+0x1ae>
 8009674:	07df      	lsls	r7, r3, #31
 8009676:	bf44      	itt	mi
 8009678:	f043 0320 	orrmi.w	r3, r3, #32
 800967c:	6023      	strmi	r3, [r4, #0]
 800967e:	b91e      	cbnz	r6, 8009688 <_printf_i+0x198>
 8009680:	6823      	ldr	r3, [r4, #0]
 8009682:	f023 0320 	bic.w	r3, r3, #32
 8009686:	6023      	str	r3, [r4, #0]
 8009688:	2310      	movs	r3, #16
 800968a:	e7af      	b.n	80095ec <_printf_i+0xfc>
 800968c:	6823      	ldr	r3, [r4, #0]
 800968e:	f043 0320 	orr.w	r3, r3, #32
 8009692:	6023      	str	r3, [r4, #0]
 8009694:	2378      	movs	r3, #120	; 0x78
 8009696:	4828      	ldr	r0, [pc, #160]	; (8009738 <_printf_i+0x248>)
 8009698:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800969c:	e7e3      	b.n	8009666 <_printf_i+0x176>
 800969e:	0659      	lsls	r1, r3, #25
 80096a0:	bf48      	it	mi
 80096a2:	b2b6      	uxthmi	r6, r6
 80096a4:	e7e6      	b.n	8009674 <_printf_i+0x184>
 80096a6:	4615      	mov	r5, r2
 80096a8:	e7bb      	b.n	8009622 <_printf_i+0x132>
 80096aa:	682b      	ldr	r3, [r5, #0]
 80096ac:	6826      	ldr	r6, [r4, #0]
 80096ae:	1d18      	adds	r0, r3, #4
 80096b0:	6961      	ldr	r1, [r4, #20]
 80096b2:	6028      	str	r0, [r5, #0]
 80096b4:	0635      	lsls	r5, r6, #24
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	d501      	bpl.n	80096be <_printf_i+0x1ce>
 80096ba:	6019      	str	r1, [r3, #0]
 80096bc:	e002      	b.n	80096c4 <_printf_i+0x1d4>
 80096be:	0670      	lsls	r0, r6, #25
 80096c0:	d5fb      	bpl.n	80096ba <_printf_i+0x1ca>
 80096c2:	8019      	strh	r1, [r3, #0]
 80096c4:	2300      	movs	r3, #0
 80096c6:	4615      	mov	r5, r2
 80096c8:	6123      	str	r3, [r4, #16]
 80096ca:	e7ba      	b.n	8009642 <_printf_i+0x152>
 80096cc:	682b      	ldr	r3, [r5, #0]
 80096ce:	2100      	movs	r1, #0
 80096d0:	1d1a      	adds	r2, r3, #4
 80096d2:	602a      	str	r2, [r5, #0]
 80096d4:	681d      	ldr	r5, [r3, #0]
 80096d6:	6862      	ldr	r2, [r4, #4]
 80096d8:	4628      	mov	r0, r5
 80096da:	f000 f82f 	bl	800973c <memchr>
 80096de:	b108      	cbz	r0, 80096e4 <_printf_i+0x1f4>
 80096e0:	1b40      	subs	r0, r0, r5
 80096e2:	6060      	str	r0, [r4, #4]
 80096e4:	6863      	ldr	r3, [r4, #4]
 80096e6:	6123      	str	r3, [r4, #16]
 80096e8:	2300      	movs	r3, #0
 80096ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096ee:	e7a8      	b.n	8009642 <_printf_i+0x152>
 80096f0:	462a      	mov	r2, r5
 80096f2:	4649      	mov	r1, r9
 80096f4:	4640      	mov	r0, r8
 80096f6:	6923      	ldr	r3, [r4, #16]
 80096f8:	47d0      	blx	sl
 80096fa:	3001      	adds	r0, #1
 80096fc:	d0ab      	beq.n	8009656 <_printf_i+0x166>
 80096fe:	6823      	ldr	r3, [r4, #0]
 8009700:	079b      	lsls	r3, r3, #30
 8009702:	d413      	bmi.n	800972c <_printf_i+0x23c>
 8009704:	68e0      	ldr	r0, [r4, #12]
 8009706:	9b03      	ldr	r3, [sp, #12]
 8009708:	4298      	cmp	r0, r3
 800970a:	bfb8      	it	lt
 800970c:	4618      	movlt	r0, r3
 800970e:	e7a4      	b.n	800965a <_printf_i+0x16a>
 8009710:	2301      	movs	r3, #1
 8009712:	4632      	mov	r2, r6
 8009714:	4649      	mov	r1, r9
 8009716:	4640      	mov	r0, r8
 8009718:	47d0      	blx	sl
 800971a:	3001      	adds	r0, #1
 800971c:	d09b      	beq.n	8009656 <_printf_i+0x166>
 800971e:	3501      	adds	r5, #1
 8009720:	68e3      	ldr	r3, [r4, #12]
 8009722:	9903      	ldr	r1, [sp, #12]
 8009724:	1a5b      	subs	r3, r3, r1
 8009726:	42ab      	cmp	r3, r5
 8009728:	dcf2      	bgt.n	8009710 <_printf_i+0x220>
 800972a:	e7eb      	b.n	8009704 <_printf_i+0x214>
 800972c:	2500      	movs	r5, #0
 800972e:	f104 0619 	add.w	r6, r4, #25
 8009732:	e7f5      	b.n	8009720 <_printf_i+0x230>
 8009734:	08009ab1 	.word	0x08009ab1
 8009738:	08009ac2 	.word	0x08009ac2

0800973c <memchr>:
 800973c:	4603      	mov	r3, r0
 800973e:	b510      	push	{r4, lr}
 8009740:	b2c9      	uxtb	r1, r1
 8009742:	4402      	add	r2, r0
 8009744:	4293      	cmp	r3, r2
 8009746:	4618      	mov	r0, r3
 8009748:	d101      	bne.n	800974e <memchr+0x12>
 800974a:	2000      	movs	r0, #0
 800974c:	e003      	b.n	8009756 <memchr+0x1a>
 800974e:	7804      	ldrb	r4, [r0, #0]
 8009750:	3301      	adds	r3, #1
 8009752:	428c      	cmp	r4, r1
 8009754:	d1f6      	bne.n	8009744 <memchr+0x8>
 8009756:	bd10      	pop	{r4, pc}

08009758 <memcpy>:
 8009758:	440a      	add	r2, r1
 800975a:	4291      	cmp	r1, r2
 800975c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009760:	d100      	bne.n	8009764 <memcpy+0xc>
 8009762:	4770      	bx	lr
 8009764:	b510      	push	{r4, lr}
 8009766:	f811 4b01 	ldrb.w	r4, [r1], #1
 800976a:	4291      	cmp	r1, r2
 800976c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009770:	d1f9      	bne.n	8009766 <memcpy+0xe>
 8009772:	bd10      	pop	{r4, pc}

08009774 <memmove>:
 8009774:	4288      	cmp	r0, r1
 8009776:	b510      	push	{r4, lr}
 8009778:	eb01 0402 	add.w	r4, r1, r2
 800977c:	d902      	bls.n	8009784 <memmove+0x10>
 800977e:	4284      	cmp	r4, r0
 8009780:	4623      	mov	r3, r4
 8009782:	d807      	bhi.n	8009794 <memmove+0x20>
 8009784:	1e43      	subs	r3, r0, #1
 8009786:	42a1      	cmp	r1, r4
 8009788:	d008      	beq.n	800979c <memmove+0x28>
 800978a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800978e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009792:	e7f8      	b.n	8009786 <memmove+0x12>
 8009794:	4601      	mov	r1, r0
 8009796:	4402      	add	r2, r0
 8009798:	428a      	cmp	r2, r1
 800979a:	d100      	bne.n	800979e <memmove+0x2a>
 800979c:	bd10      	pop	{r4, pc}
 800979e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097a6:	e7f7      	b.n	8009798 <memmove+0x24>

080097a8 <_free_r>:
 80097a8:	b538      	push	{r3, r4, r5, lr}
 80097aa:	4605      	mov	r5, r0
 80097ac:	2900      	cmp	r1, #0
 80097ae:	d040      	beq.n	8009832 <_free_r+0x8a>
 80097b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097b4:	1f0c      	subs	r4, r1, #4
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	bfb8      	it	lt
 80097ba:	18e4      	addlt	r4, r4, r3
 80097bc:	f000 f910 	bl	80099e0 <__malloc_lock>
 80097c0:	4a1c      	ldr	r2, [pc, #112]	; (8009834 <_free_r+0x8c>)
 80097c2:	6813      	ldr	r3, [r2, #0]
 80097c4:	b933      	cbnz	r3, 80097d4 <_free_r+0x2c>
 80097c6:	6063      	str	r3, [r4, #4]
 80097c8:	6014      	str	r4, [r2, #0]
 80097ca:	4628      	mov	r0, r5
 80097cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097d0:	f000 b90c 	b.w	80099ec <__malloc_unlock>
 80097d4:	42a3      	cmp	r3, r4
 80097d6:	d908      	bls.n	80097ea <_free_r+0x42>
 80097d8:	6820      	ldr	r0, [r4, #0]
 80097da:	1821      	adds	r1, r4, r0
 80097dc:	428b      	cmp	r3, r1
 80097de:	bf01      	itttt	eq
 80097e0:	6819      	ldreq	r1, [r3, #0]
 80097e2:	685b      	ldreq	r3, [r3, #4]
 80097e4:	1809      	addeq	r1, r1, r0
 80097e6:	6021      	streq	r1, [r4, #0]
 80097e8:	e7ed      	b.n	80097c6 <_free_r+0x1e>
 80097ea:	461a      	mov	r2, r3
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	b10b      	cbz	r3, 80097f4 <_free_r+0x4c>
 80097f0:	42a3      	cmp	r3, r4
 80097f2:	d9fa      	bls.n	80097ea <_free_r+0x42>
 80097f4:	6811      	ldr	r1, [r2, #0]
 80097f6:	1850      	adds	r0, r2, r1
 80097f8:	42a0      	cmp	r0, r4
 80097fa:	d10b      	bne.n	8009814 <_free_r+0x6c>
 80097fc:	6820      	ldr	r0, [r4, #0]
 80097fe:	4401      	add	r1, r0
 8009800:	1850      	adds	r0, r2, r1
 8009802:	4283      	cmp	r3, r0
 8009804:	6011      	str	r1, [r2, #0]
 8009806:	d1e0      	bne.n	80097ca <_free_r+0x22>
 8009808:	6818      	ldr	r0, [r3, #0]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	4401      	add	r1, r0
 800980e:	6011      	str	r1, [r2, #0]
 8009810:	6053      	str	r3, [r2, #4]
 8009812:	e7da      	b.n	80097ca <_free_r+0x22>
 8009814:	d902      	bls.n	800981c <_free_r+0x74>
 8009816:	230c      	movs	r3, #12
 8009818:	602b      	str	r3, [r5, #0]
 800981a:	e7d6      	b.n	80097ca <_free_r+0x22>
 800981c:	6820      	ldr	r0, [r4, #0]
 800981e:	1821      	adds	r1, r4, r0
 8009820:	428b      	cmp	r3, r1
 8009822:	bf01      	itttt	eq
 8009824:	6819      	ldreq	r1, [r3, #0]
 8009826:	685b      	ldreq	r3, [r3, #4]
 8009828:	1809      	addeq	r1, r1, r0
 800982a:	6021      	streq	r1, [r4, #0]
 800982c:	6063      	str	r3, [r4, #4]
 800982e:	6054      	str	r4, [r2, #4]
 8009830:	e7cb      	b.n	80097ca <_free_r+0x22>
 8009832:	bd38      	pop	{r3, r4, r5, pc}
 8009834:	20001460 	.word	0x20001460

08009838 <sbrk_aligned>:
 8009838:	b570      	push	{r4, r5, r6, lr}
 800983a:	4e0e      	ldr	r6, [pc, #56]	; (8009874 <sbrk_aligned+0x3c>)
 800983c:	460c      	mov	r4, r1
 800983e:	6831      	ldr	r1, [r6, #0]
 8009840:	4605      	mov	r5, r0
 8009842:	b911      	cbnz	r1, 800984a <sbrk_aligned+0x12>
 8009844:	f000 f8bc 	bl	80099c0 <_sbrk_r>
 8009848:	6030      	str	r0, [r6, #0]
 800984a:	4621      	mov	r1, r4
 800984c:	4628      	mov	r0, r5
 800984e:	f000 f8b7 	bl	80099c0 <_sbrk_r>
 8009852:	1c43      	adds	r3, r0, #1
 8009854:	d00a      	beq.n	800986c <sbrk_aligned+0x34>
 8009856:	1cc4      	adds	r4, r0, #3
 8009858:	f024 0403 	bic.w	r4, r4, #3
 800985c:	42a0      	cmp	r0, r4
 800985e:	d007      	beq.n	8009870 <sbrk_aligned+0x38>
 8009860:	1a21      	subs	r1, r4, r0
 8009862:	4628      	mov	r0, r5
 8009864:	f000 f8ac 	bl	80099c0 <_sbrk_r>
 8009868:	3001      	adds	r0, #1
 800986a:	d101      	bne.n	8009870 <sbrk_aligned+0x38>
 800986c:	f04f 34ff 	mov.w	r4, #4294967295
 8009870:	4620      	mov	r0, r4
 8009872:	bd70      	pop	{r4, r5, r6, pc}
 8009874:	20001464 	.word	0x20001464

08009878 <_malloc_r>:
 8009878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800987c:	1ccd      	adds	r5, r1, #3
 800987e:	f025 0503 	bic.w	r5, r5, #3
 8009882:	3508      	adds	r5, #8
 8009884:	2d0c      	cmp	r5, #12
 8009886:	bf38      	it	cc
 8009888:	250c      	movcc	r5, #12
 800988a:	2d00      	cmp	r5, #0
 800988c:	4607      	mov	r7, r0
 800988e:	db01      	blt.n	8009894 <_malloc_r+0x1c>
 8009890:	42a9      	cmp	r1, r5
 8009892:	d905      	bls.n	80098a0 <_malloc_r+0x28>
 8009894:	230c      	movs	r3, #12
 8009896:	2600      	movs	r6, #0
 8009898:	603b      	str	r3, [r7, #0]
 800989a:	4630      	mov	r0, r6
 800989c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098a0:	4e2e      	ldr	r6, [pc, #184]	; (800995c <_malloc_r+0xe4>)
 80098a2:	f000 f89d 	bl	80099e0 <__malloc_lock>
 80098a6:	6833      	ldr	r3, [r6, #0]
 80098a8:	461c      	mov	r4, r3
 80098aa:	bb34      	cbnz	r4, 80098fa <_malloc_r+0x82>
 80098ac:	4629      	mov	r1, r5
 80098ae:	4638      	mov	r0, r7
 80098b0:	f7ff ffc2 	bl	8009838 <sbrk_aligned>
 80098b4:	1c43      	adds	r3, r0, #1
 80098b6:	4604      	mov	r4, r0
 80098b8:	d14d      	bne.n	8009956 <_malloc_r+0xde>
 80098ba:	6834      	ldr	r4, [r6, #0]
 80098bc:	4626      	mov	r6, r4
 80098be:	2e00      	cmp	r6, #0
 80098c0:	d140      	bne.n	8009944 <_malloc_r+0xcc>
 80098c2:	6823      	ldr	r3, [r4, #0]
 80098c4:	4631      	mov	r1, r6
 80098c6:	4638      	mov	r0, r7
 80098c8:	eb04 0803 	add.w	r8, r4, r3
 80098cc:	f000 f878 	bl	80099c0 <_sbrk_r>
 80098d0:	4580      	cmp	r8, r0
 80098d2:	d13a      	bne.n	800994a <_malloc_r+0xd2>
 80098d4:	6821      	ldr	r1, [r4, #0]
 80098d6:	3503      	adds	r5, #3
 80098d8:	1a6d      	subs	r5, r5, r1
 80098da:	f025 0503 	bic.w	r5, r5, #3
 80098de:	3508      	adds	r5, #8
 80098e0:	2d0c      	cmp	r5, #12
 80098e2:	bf38      	it	cc
 80098e4:	250c      	movcc	r5, #12
 80098e6:	4638      	mov	r0, r7
 80098e8:	4629      	mov	r1, r5
 80098ea:	f7ff ffa5 	bl	8009838 <sbrk_aligned>
 80098ee:	3001      	adds	r0, #1
 80098f0:	d02b      	beq.n	800994a <_malloc_r+0xd2>
 80098f2:	6823      	ldr	r3, [r4, #0]
 80098f4:	442b      	add	r3, r5
 80098f6:	6023      	str	r3, [r4, #0]
 80098f8:	e00e      	b.n	8009918 <_malloc_r+0xa0>
 80098fa:	6822      	ldr	r2, [r4, #0]
 80098fc:	1b52      	subs	r2, r2, r5
 80098fe:	d41e      	bmi.n	800993e <_malloc_r+0xc6>
 8009900:	2a0b      	cmp	r2, #11
 8009902:	d916      	bls.n	8009932 <_malloc_r+0xba>
 8009904:	1961      	adds	r1, r4, r5
 8009906:	42a3      	cmp	r3, r4
 8009908:	6025      	str	r5, [r4, #0]
 800990a:	bf18      	it	ne
 800990c:	6059      	strne	r1, [r3, #4]
 800990e:	6863      	ldr	r3, [r4, #4]
 8009910:	bf08      	it	eq
 8009912:	6031      	streq	r1, [r6, #0]
 8009914:	5162      	str	r2, [r4, r5]
 8009916:	604b      	str	r3, [r1, #4]
 8009918:	4638      	mov	r0, r7
 800991a:	f104 060b 	add.w	r6, r4, #11
 800991e:	f000 f865 	bl	80099ec <__malloc_unlock>
 8009922:	f026 0607 	bic.w	r6, r6, #7
 8009926:	1d23      	adds	r3, r4, #4
 8009928:	1af2      	subs	r2, r6, r3
 800992a:	d0b6      	beq.n	800989a <_malloc_r+0x22>
 800992c:	1b9b      	subs	r3, r3, r6
 800992e:	50a3      	str	r3, [r4, r2]
 8009930:	e7b3      	b.n	800989a <_malloc_r+0x22>
 8009932:	6862      	ldr	r2, [r4, #4]
 8009934:	42a3      	cmp	r3, r4
 8009936:	bf0c      	ite	eq
 8009938:	6032      	streq	r2, [r6, #0]
 800993a:	605a      	strne	r2, [r3, #4]
 800993c:	e7ec      	b.n	8009918 <_malloc_r+0xa0>
 800993e:	4623      	mov	r3, r4
 8009940:	6864      	ldr	r4, [r4, #4]
 8009942:	e7b2      	b.n	80098aa <_malloc_r+0x32>
 8009944:	4634      	mov	r4, r6
 8009946:	6876      	ldr	r6, [r6, #4]
 8009948:	e7b9      	b.n	80098be <_malloc_r+0x46>
 800994a:	230c      	movs	r3, #12
 800994c:	4638      	mov	r0, r7
 800994e:	603b      	str	r3, [r7, #0]
 8009950:	f000 f84c 	bl	80099ec <__malloc_unlock>
 8009954:	e7a1      	b.n	800989a <_malloc_r+0x22>
 8009956:	6025      	str	r5, [r4, #0]
 8009958:	e7de      	b.n	8009918 <_malloc_r+0xa0>
 800995a:	bf00      	nop
 800995c:	20001460 	.word	0x20001460

08009960 <_realloc_r>:
 8009960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009964:	4680      	mov	r8, r0
 8009966:	4614      	mov	r4, r2
 8009968:	460e      	mov	r6, r1
 800996a:	b921      	cbnz	r1, 8009976 <_realloc_r+0x16>
 800996c:	4611      	mov	r1, r2
 800996e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009972:	f7ff bf81 	b.w	8009878 <_malloc_r>
 8009976:	b92a      	cbnz	r2, 8009984 <_realloc_r+0x24>
 8009978:	f7ff ff16 	bl	80097a8 <_free_r>
 800997c:	4625      	mov	r5, r4
 800997e:	4628      	mov	r0, r5
 8009980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009984:	f000 f838 	bl	80099f8 <_malloc_usable_size_r>
 8009988:	4284      	cmp	r4, r0
 800998a:	4607      	mov	r7, r0
 800998c:	d802      	bhi.n	8009994 <_realloc_r+0x34>
 800998e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009992:	d812      	bhi.n	80099ba <_realloc_r+0x5a>
 8009994:	4621      	mov	r1, r4
 8009996:	4640      	mov	r0, r8
 8009998:	f7ff ff6e 	bl	8009878 <_malloc_r>
 800999c:	4605      	mov	r5, r0
 800999e:	2800      	cmp	r0, #0
 80099a0:	d0ed      	beq.n	800997e <_realloc_r+0x1e>
 80099a2:	42bc      	cmp	r4, r7
 80099a4:	4622      	mov	r2, r4
 80099a6:	4631      	mov	r1, r6
 80099a8:	bf28      	it	cs
 80099aa:	463a      	movcs	r2, r7
 80099ac:	f7ff fed4 	bl	8009758 <memcpy>
 80099b0:	4631      	mov	r1, r6
 80099b2:	4640      	mov	r0, r8
 80099b4:	f7ff fef8 	bl	80097a8 <_free_r>
 80099b8:	e7e1      	b.n	800997e <_realloc_r+0x1e>
 80099ba:	4635      	mov	r5, r6
 80099bc:	e7df      	b.n	800997e <_realloc_r+0x1e>
	...

080099c0 <_sbrk_r>:
 80099c0:	b538      	push	{r3, r4, r5, lr}
 80099c2:	2300      	movs	r3, #0
 80099c4:	4d05      	ldr	r5, [pc, #20]	; (80099dc <_sbrk_r+0x1c>)
 80099c6:	4604      	mov	r4, r0
 80099c8:	4608      	mov	r0, r1
 80099ca:	602b      	str	r3, [r5, #0]
 80099cc:	f7f6 ffd2 	bl	8000974 <_sbrk>
 80099d0:	1c43      	adds	r3, r0, #1
 80099d2:	d102      	bne.n	80099da <_sbrk_r+0x1a>
 80099d4:	682b      	ldr	r3, [r5, #0]
 80099d6:	b103      	cbz	r3, 80099da <_sbrk_r+0x1a>
 80099d8:	6023      	str	r3, [r4, #0]
 80099da:	bd38      	pop	{r3, r4, r5, pc}
 80099dc:	20001468 	.word	0x20001468

080099e0 <__malloc_lock>:
 80099e0:	4801      	ldr	r0, [pc, #4]	; (80099e8 <__malloc_lock+0x8>)
 80099e2:	f000 b811 	b.w	8009a08 <__retarget_lock_acquire_recursive>
 80099e6:	bf00      	nop
 80099e8:	2000146c 	.word	0x2000146c

080099ec <__malloc_unlock>:
 80099ec:	4801      	ldr	r0, [pc, #4]	; (80099f4 <__malloc_unlock+0x8>)
 80099ee:	f000 b80c 	b.w	8009a0a <__retarget_lock_release_recursive>
 80099f2:	bf00      	nop
 80099f4:	2000146c 	.word	0x2000146c

080099f8 <_malloc_usable_size_r>:
 80099f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099fc:	1f18      	subs	r0, r3, #4
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	bfbc      	itt	lt
 8009a02:	580b      	ldrlt	r3, [r1, r0]
 8009a04:	18c0      	addlt	r0, r0, r3
 8009a06:	4770      	bx	lr

08009a08 <__retarget_lock_acquire_recursive>:
 8009a08:	4770      	bx	lr

08009a0a <__retarget_lock_release_recursive>:
 8009a0a:	4770      	bx	lr

08009a0c <_init>:
 8009a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0e:	bf00      	nop
 8009a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a12:	bc08      	pop	{r3}
 8009a14:	469e      	mov	lr, r3
 8009a16:	4770      	bx	lr

08009a18 <_fini>:
 8009a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1a:	bf00      	nop
 8009a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a1e:	bc08      	pop	{r3}
 8009a20:	469e      	mov	lr, r3
 8009a22:	4770      	bx	lr
